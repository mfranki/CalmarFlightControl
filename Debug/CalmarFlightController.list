
CalmarFlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda4  080001c0  080001c0  000101c0  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800bf68  0800bf68  0001bf68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c298  0800c298  00020a18  2**0
                  CONTENTS
  4 .ARM          00000008  0800c298  0800c298  0001c298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c2a0  0800c2a0  00020a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c2a0  0800c2a0  0001c2a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c2a8  0800c2a8  0001c2a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a18  20000000  0800c2ac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000428c  20000a18  0800ccc4  00020a18  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ca4  0800ccc4  00024ca4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019578  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003c69  00000000  00000000  00039fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014b0  00000000  00000000  0003dc30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012e8  00000000  00000000  0003f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019df5  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001187d  00000000  00000000  0005a1bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009d519  00000000  00000000  0006ba3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007f  00000000  00000000  00108f53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000616c  00000000  00000000  00108fd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000a18 	.word	0x20000a18
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bf4c 	.word	0x0800bf4c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000a1c 	.word	0x20000a1c
 80001fc:	0800bf4c 	.word	0x0800bf4c

08000200 <memcpy>:
 8000200:	4684      	mov	ip, r0
 8000202:	ea41 0300 	orr.w	r3, r1, r0
 8000206:	f013 0303 	ands.w	r3, r3, #3
 800020a:	d16d      	bne.n	80002e8 <memcpy+0xe8>
 800020c:	3a40      	subs	r2, #64	; 0x40
 800020e:	d341      	bcc.n	8000294 <memcpy+0x94>
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	f851 3b04 	ldr.w	r3, [r1], #4
 800025c:	f840 3b04 	str.w	r3, [r0], #4
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	f851 3b04 	ldr.w	r3, [r1], #4
 8000284:	f840 3b04 	str.w	r3, [r0], #4
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	3a40      	subs	r2, #64	; 0x40
 8000292:	d2bd      	bcs.n	8000210 <memcpy+0x10>
 8000294:	3230      	adds	r2, #48	; 0x30
 8000296:	d311      	bcc.n	80002bc <memcpy+0xbc>
 8000298:	f851 3b04 	ldr.w	r3, [r1], #4
 800029c:	f840 3b04 	str.w	r3, [r0], #4
 80002a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a4:	f840 3b04 	str.w	r3, [r0], #4
 80002a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80002ac:	f840 3b04 	str.w	r3, [r0], #4
 80002b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b4:	f840 3b04 	str.w	r3, [r0], #4
 80002b8:	3a10      	subs	r2, #16
 80002ba:	d2ed      	bcs.n	8000298 <memcpy+0x98>
 80002bc:	320c      	adds	r2, #12
 80002be:	d305      	bcc.n	80002cc <memcpy+0xcc>
 80002c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c4:	f840 3b04 	str.w	r3, [r0], #4
 80002c8:	3a04      	subs	r2, #4
 80002ca:	d2f9      	bcs.n	80002c0 <memcpy+0xc0>
 80002cc:	3204      	adds	r2, #4
 80002ce:	d008      	beq.n	80002e2 <memcpy+0xe2>
 80002d0:	07d2      	lsls	r2, r2, #31
 80002d2:	bf1c      	itt	ne
 80002d4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002d8:	f800 3b01 	strbne.w	r3, [r0], #1
 80002dc:	d301      	bcc.n	80002e2 <memcpy+0xe2>
 80002de:	880b      	ldrh	r3, [r1, #0]
 80002e0:	8003      	strh	r3, [r0, #0]
 80002e2:	4660      	mov	r0, ip
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	2a08      	cmp	r2, #8
 80002ea:	d313      	bcc.n	8000314 <memcpy+0x114>
 80002ec:	078b      	lsls	r3, r1, #30
 80002ee:	d08d      	beq.n	800020c <memcpy+0xc>
 80002f0:	f010 0303 	ands.w	r3, r0, #3
 80002f4:	d08a      	beq.n	800020c <memcpy+0xc>
 80002f6:	f1c3 0304 	rsb	r3, r3, #4
 80002fa:	1ad2      	subs	r2, r2, r3
 80002fc:	07db      	lsls	r3, r3, #31
 80002fe:	bf1c      	itt	ne
 8000300:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000304:	f800 3b01 	strbne.w	r3, [r0], #1
 8000308:	d380      	bcc.n	800020c <memcpy+0xc>
 800030a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800030e:	f820 3b02 	strh.w	r3, [r0], #2
 8000312:	e77b      	b.n	800020c <memcpy+0xc>
 8000314:	3a04      	subs	r2, #4
 8000316:	d3d9      	bcc.n	80002cc <memcpy+0xcc>
 8000318:	3a01      	subs	r2, #1
 800031a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800031e:	f800 3b01 	strb.w	r3, [r0], #1
 8000322:	d2f9      	bcs.n	8000318 <memcpy+0x118>
 8000324:	780b      	ldrb	r3, [r1, #0]
 8000326:	7003      	strb	r3, [r0, #0]
 8000328:	784b      	ldrb	r3, [r1, #1]
 800032a:	7043      	strb	r3, [r0, #1]
 800032c:	788b      	ldrb	r3, [r1, #2]
 800032e:	7083      	strb	r3, [r0, #2]
 8000330:	4660      	mov	r0, ip
 8000332:	4770      	bx	lr
	...

08000340 <strlen>:
 8000340:	f890 f000 	pld	[r0]
 8000344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8000348:	f020 0107 	bic.w	r1, r0, #7
 800034c:	f06f 0c00 	mvn.w	ip, #0
 8000350:	f010 0407 	ands.w	r4, r0, #7
 8000354:	f891 f020 	pld	[r1, #32]
 8000358:	f040 8049 	bne.w	80003ee <strlen+0xae>
 800035c:	f04f 0400 	mov.w	r4, #0
 8000360:	f06f 0007 	mvn.w	r0, #7
 8000364:	e9d1 2300 	ldrd	r2, r3, [r1]
 8000368:	f891 f040 	pld	[r1, #64]	; 0x40
 800036c:	f100 0008 	add.w	r0, r0, #8
 8000370:	fa82 f24c 	uadd8	r2, r2, ip
 8000374:	faa4 f28c 	sel	r2, r4, ip
 8000378:	fa83 f34c 	uadd8	r3, r3, ip
 800037c:	faa2 f38c 	sel	r3, r2, ip
 8000380:	bb4b      	cbnz	r3, 80003d6 <strlen+0x96>
 8000382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8000386:	fa82 f24c 	uadd8	r2, r2, ip
 800038a:	f100 0008 	add.w	r0, r0, #8
 800038e:	faa4 f28c 	sel	r2, r4, ip
 8000392:	fa83 f34c 	uadd8	r3, r3, ip
 8000396:	faa2 f38c 	sel	r3, r2, ip
 800039a:	b9e3      	cbnz	r3, 80003d6 <strlen+0x96>
 800039c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80003a0:	fa82 f24c 	uadd8	r2, r2, ip
 80003a4:	f100 0008 	add.w	r0, r0, #8
 80003a8:	faa4 f28c 	sel	r2, r4, ip
 80003ac:	fa83 f34c 	uadd8	r3, r3, ip
 80003b0:	faa2 f38c 	sel	r3, r2, ip
 80003b4:	b97b      	cbnz	r3, 80003d6 <strlen+0x96>
 80003b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80003ba:	f101 0120 	add.w	r1, r1, #32
 80003be:	fa82 f24c 	uadd8	r2, r2, ip
 80003c2:	f100 0008 	add.w	r0, r0, #8
 80003c6:	faa4 f28c 	sel	r2, r4, ip
 80003ca:	fa83 f34c 	uadd8	r3, r3, ip
 80003ce:	faa2 f38c 	sel	r3, r2, ip
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d0c6      	beq.n	8000364 <strlen+0x24>
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	bf04      	itt	eq
 80003da:	3004      	addeq	r0, #4
 80003dc:	461a      	moveq	r2, r3
 80003de:	ba12      	rev	r2, r2
 80003e0:	fab2 f282 	clz	r2, r2
 80003e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 80003e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 80003ec:	4770      	bx	lr
 80003ee:	e9d1 2300 	ldrd	r2, r3, [r1]
 80003f2:	f004 0503 	and.w	r5, r4, #3
 80003f6:	f1c4 0000 	rsb	r0, r4, #0
 80003fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 80003fe:	f014 0f04 	tst.w	r4, #4
 8000402:	f891 f040 	pld	[r1, #64]	; 0x40
 8000406:	fa0c f505 	lsl.w	r5, ip, r5
 800040a:	ea62 0205 	orn	r2, r2, r5
 800040e:	bf1c      	itt	ne
 8000410:	ea63 0305 	ornne	r3, r3, r5
 8000414:	4662      	movne	r2, ip
 8000416:	f04f 0400 	mov.w	r4, #0
 800041a:	e7a9      	b.n	8000370 <strlen+0x30>
 800041c:	0000      	movs	r0, r0
	...

08000420 <memchr>:
 8000420:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000424:	2a10      	cmp	r2, #16
 8000426:	db2b      	blt.n	8000480 <memchr+0x60>
 8000428:	f010 0f07 	tst.w	r0, #7
 800042c:	d008      	beq.n	8000440 <memchr+0x20>
 800042e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000432:	3a01      	subs	r2, #1
 8000434:	428b      	cmp	r3, r1
 8000436:	d02d      	beq.n	8000494 <memchr+0x74>
 8000438:	f010 0f07 	tst.w	r0, #7
 800043c:	b342      	cbz	r2, 8000490 <memchr+0x70>
 800043e:	d1f6      	bne.n	800042e <memchr+0xe>
 8000440:	b4f0      	push	{r4, r5, r6, r7}
 8000442:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000446:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800044a:	f022 0407 	bic.w	r4, r2, #7
 800044e:	f07f 0700 	mvns.w	r7, #0
 8000452:	2300      	movs	r3, #0
 8000454:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000458:	3c08      	subs	r4, #8
 800045a:	ea85 0501 	eor.w	r5, r5, r1
 800045e:	ea86 0601 	eor.w	r6, r6, r1
 8000462:	fa85 f547 	uadd8	r5, r5, r7
 8000466:	faa3 f587 	sel	r5, r3, r7
 800046a:	fa86 f647 	uadd8	r6, r6, r7
 800046e:	faa5 f687 	sel	r6, r5, r7
 8000472:	b98e      	cbnz	r6, 8000498 <memchr+0x78>
 8000474:	d1ee      	bne.n	8000454 <memchr+0x34>
 8000476:	bcf0      	pop	{r4, r5, r6, r7}
 8000478:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800047c:	f002 0207 	and.w	r2, r2, #7
 8000480:	b132      	cbz	r2, 8000490 <memchr+0x70>
 8000482:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000486:	3a01      	subs	r2, #1
 8000488:	ea83 0301 	eor.w	r3, r3, r1
 800048c:	b113      	cbz	r3, 8000494 <memchr+0x74>
 800048e:	d1f8      	bne.n	8000482 <memchr+0x62>
 8000490:	2000      	movs	r0, #0
 8000492:	4770      	bx	lr
 8000494:	3801      	subs	r0, #1
 8000496:	4770      	bx	lr
 8000498:	2d00      	cmp	r5, #0
 800049a:	bf06      	itte	eq
 800049c:	4635      	moveq	r5, r6
 800049e:	3803      	subeq	r0, #3
 80004a0:	3807      	subne	r0, #7
 80004a2:	f015 0f01 	tst.w	r5, #1
 80004a6:	d107      	bne.n	80004b8 <memchr+0x98>
 80004a8:	3001      	adds	r0, #1
 80004aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80004ae:	bf02      	ittt	eq
 80004b0:	3001      	addeq	r0, #1
 80004b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80004b6:	3001      	addeq	r0, #1
 80004b8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ba:	3801      	subs	r0, #1
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <__aeabi_drsub>:
 80004c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c4:	e002      	b.n	80004cc <__adddf3>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dsub>:
 80004c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004cc <__adddf3>:
 80004cc:	b530      	push	{r4, r5, lr}
 80004ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	bf1f      	itttt	ne
 80004e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f2:	f000 80e2 	beq.w	80006ba <__adddf3+0x1ee>
 80004f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004fe:	bfb8      	it	lt
 8000500:	426d      	neglt	r5, r5
 8000502:	dd0c      	ble.n	800051e <__adddf3+0x52>
 8000504:	442c      	add	r4, r5
 8000506:	ea80 0202 	eor.w	r2, r0, r2
 800050a:	ea81 0303 	eor.w	r3, r1, r3
 800050e:	ea82 0000 	eor.w	r0, r2, r0
 8000512:	ea83 0101 	eor.w	r1, r3, r1
 8000516:	ea80 0202 	eor.w	r2, r0, r2
 800051a:	ea81 0303 	eor.w	r3, r1, r3
 800051e:	2d36      	cmp	r5, #54	; 0x36
 8000520:	bf88      	it	hi
 8000522:	bd30      	pophi	{r4, r5, pc}
 8000524:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000528:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800052c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000530:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000534:	d002      	beq.n	800053c <__adddf3+0x70>
 8000536:	4240      	negs	r0, r0
 8000538:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000540:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000544:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x84>
 800054a:	4252      	negs	r2, r2
 800054c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000550:	ea94 0f05 	teq	r4, r5
 8000554:	f000 80a7 	beq.w	80006a6 <__adddf3+0x1da>
 8000558:	f1a4 0401 	sub.w	r4, r4, #1
 800055c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000560:	db0d      	blt.n	800057e <__adddf3+0xb2>
 8000562:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000566:	fa22 f205 	lsr.w	r2, r2, r5
 800056a:	1880      	adds	r0, r0, r2
 800056c:	f141 0100 	adc.w	r1, r1, #0
 8000570:	fa03 f20e 	lsl.w	r2, r3, lr
 8000574:	1880      	adds	r0, r0, r2
 8000576:	fa43 f305 	asr.w	r3, r3, r5
 800057a:	4159      	adcs	r1, r3
 800057c:	e00e      	b.n	800059c <__adddf3+0xd0>
 800057e:	f1a5 0520 	sub.w	r5, r5, #32
 8000582:	f10e 0e20 	add.w	lr, lr, #32
 8000586:	2a01      	cmp	r2, #1
 8000588:	fa03 fc0e 	lsl.w	ip, r3, lr
 800058c:	bf28      	it	cs
 800058e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000592:	fa43 f305 	asr.w	r3, r3, r5
 8000596:	18c0      	adds	r0, r0, r3
 8000598:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800059c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a0:	d507      	bpl.n	80005b2 <__adddf3+0xe6>
 80005a2:	f04f 0e00 	mov.w	lr, #0
 80005a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005b6:	d31b      	bcc.n	80005f0 <__adddf3+0x124>
 80005b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005bc:	d30c      	bcc.n	80005d8 <__adddf3+0x10c>
 80005be:	0849      	lsrs	r1, r1, #1
 80005c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005c8:	f104 0401 	add.w	r4, r4, #1
 80005cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d4:	f080 809a 	bcs.w	800070c <__adddf3+0x240>
 80005d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	ea41 0105 	orr.w	r1, r1, r5
 80005ee:	bd30      	pop	{r4, r5, pc}
 80005f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f4:	4140      	adcs	r0, r0
 80005f6:	eb41 0101 	adc.w	r1, r1, r1
 80005fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000602:	d1e9      	bne.n	80005d8 <__adddf3+0x10c>
 8000604:	f091 0f00 	teq	r1, #0
 8000608:	bf04      	itt	eq
 800060a:	4601      	moveq	r1, r0
 800060c:	2000      	moveq	r0, #0
 800060e:	fab1 f381 	clz	r3, r1
 8000612:	bf08      	it	eq
 8000614:	3320      	addeq	r3, #32
 8000616:	f1a3 030b 	sub.w	r3, r3, #11
 800061a:	f1b3 0220 	subs.w	r2, r3, #32
 800061e:	da0c      	bge.n	800063a <__adddf3+0x16e>
 8000620:	320c      	adds	r2, #12
 8000622:	dd08      	ble.n	8000636 <__adddf3+0x16a>
 8000624:	f102 0c14 	add.w	ip, r2, #20
 8000628:	f1c2 020c 	rsb	r2, r2, #12
 800062c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000630:	fa21 f102 	lsr.w	r1, r1, r2
 8000634:	e00c      	b.n	8000650 <__adddf3+0x184>
 8000636:	f102 0214 	add.w	r2, r2, #20
 800063a:	bfd8      	it	le
 800063c:	f1c2 0c20 	rsble	ip, r2, #32
 8000640:	fa01 f102 	lsl.w	r1, r1, r2
 8000644:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000648:	bfdc      	itt	le
 800064a:	ea41 010c 	orrle.w	r1, r1, ip
 800064e:	4090      	lslle	r0, r2
 8000650:	1ae4      	subs	r4, r4, r3
 8000652:	bfa2      	ittt	ge
 8000654:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000658:	4329      	orrge	r1, r5
 800065a:	bd30      	popge	{r4, r5, pc}
 800065c:	ea6f 0404 	mvn.w	r4, r4
 8000660:	3c1f      	subs	r4, #31
 8000662:	da1c      	bge.n	800069e <__adddf3+0x1d2>
 8000664:	340c      	adds	r4, #12
 8000666:	dc0e      	bgt.n	8000686 <__adddf3+0x1ba>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0220 	rsb	r2, r4, #32
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f302 	lsl.w	r3, r1, r2
 8000678:	ea40 0003 	orr.w	r0, r0, r3
 800067c:	fa21 f304 	lsr.w	r3, r1, r4
 8000680:	ea45 0103 	orr.w	r1, r5, r3
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	f1c4 040c 	rsb	r4, r4, #12
 800068a:	f1c4 0220 	rsb	r2, r4, #32
 800068e:	fa20 f002 	lsr.w	r0, r0, r2
 8000692:	fa01 f304 	lsl.w	r3, r1, r4
 8000696:	ea40 0003 	orr.w	r0, r0, r3
 800069a:	4629      	mov	r1, r5
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	fa21 f004 	lsr.w	r0, r1, r4
 80006a2:	4629      	mov	r1, r5
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	f094 0f00 	teq	r4, #0
 80006aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006ae:	bf06      	itte	eq
 80006b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b4:	3401      	addeq	r4, #1
 80006b6:	3d01      	subne	r5, #1
 80006b8:	e74e      	b.n	8000558 <__adddf3+0x8c>
 80006ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006be:	bf18      	it	ne
 80006c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c4:	d029      	beq.n	800071a <__adddf3+0x24e>
 80006c6:	ea94 0f05 	teq	r4, r5
 80006ca:	bf08      	it	eq
 80006cc:	ea90 0f02 	teqeq	r0, r2
 80006d0:	d005      	beq.n	80006de <__adddf3+0x212>
 80006d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80006d6:	bf04      	itt	eq
 80006d8:	4619      	moveq	r1, r3
 80006da:	4610      	moveq	r0, r2
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	ea91 0f03 	teq	r1, r3
 80006e2:	bf1e      	ittt	ne
 80006e4:	2100      	movne	r1, #0
 80006e6:	2000      	movne	r0, #0
 80006e8:	bd30      	popne	{r4, r5, pc}
 80006ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006ee:	d105      	bne.n	80006fc <__adddf3+0x230>
 80006f0:	0040      	lsls	r0, r0, #1
 80006f2:	4149      	adcs	r1, r1
 80006f4:	bf28      	it	cs
 80006f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fa:	bd30      	pop	{r4, r5, pc}
 80006fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000700:	bf3c      	itt	cc
 8000702:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000706:	bd30      	popcc	{r4, r5, pc}
 8000708:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800070c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071e:	bf1a      	itte	ne
 8000720:	4619      	movne	r1, r3
 8000722:	4610      	movne	r0, r2
 8000724:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000728:	bf1c      	itt	ne
 800072a:	460b      	movne	r3, r1
 800072c:	4602      	movne	r2, r0
 800072e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000732:	bf06      	itte	eq
 8000734:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000738:	ea91 0f03 	teqeq	r1, r3
 800073c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	bf00      	nop

08000744 <__aeabi_ui2d>:
 8000744:	f090 0f00 	teq	r0, #0
 8000748:	bf04      	itt	eq
 800074a:	2100      	moveq	r1, #0
 800074c:	4770      	bxeq	lr
 800074e:	b530      	push	{r4, r5, lr}
 8000750:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000754:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000758:	f04f 0500 	mov.w	r5, #0
 800075c:	f04f 0100 	mov.w	r1, #0
 8000760:	e750      	b.n	8000604 <__adddf3+0x138>
 8000762:	bf00      	nop

08000764 <__aeabi_i2d>:
 8000764:	f090 0f00 	teq	r0, #0
 8000768:	bf04      	itt	eq
 800076a:	2100      	moveq	r1, #0
 800076c:	4770      	bxeq	lr
 800076e:	b530      	push	{r4, r5, lr}
 8000770:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000774:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000778:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800077c:	bf48      	it	mi
 800077e:	4240      	negmi	r0, r0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e73e      	b.n	8000604 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_f2d>:
 8000788:	0042      	lsls	r2, r0, #1
 800078a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800078e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000792:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000796:	bf1f      	itttt	ne
 8000798:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800079c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a4:	4770      	bxne	lr
 80007a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007aa:	bf08      	it	eq
 80007ac:	4770      	bxeq	lr
 80007ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b2:	bf04      	itt	eq
 80007b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007b8:	4770      	bxeq	lr
 80007ba:	b530      	push	{r4, r5, lr}
 80007bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	e71c      	b.n	8000604 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_ul2d>:
 80007cc:	ea50 0201 	orrs.w	r2, r0, r1
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	b530      	push	{r4, r5, lr}
 80007d6:	f04f 0500 	mov.w	r5, #0
 80007da:	e00a      	b.n	80007f2 <__aeabi_l2d+0x16>

080007dc <__aeabi_l2d>:
 80007dc:	ea50 0201 	orrs.w	r2, r0, r1
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	b530      	push	{r4, r5, lr}
 80007e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ea:	d502      	bpl.n	80007f2 <__aeabi_l2d+0x16>
 80007ec:	4240      	negs	r0, r0
 80007ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007fe:	f43f aed8 	beq.w	80005b2 <__adddf3+0xe6>
 8000802:	f04f 0203 	mov.w	r2, #3
 8000806:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080a:	bf18      	it	ne
 800080c:	3203      	addne	r2, #3
 800080e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000812:	bf18      	it	ne
 8000814:	3203      	addne	r2, #3
 8000816:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081a:	f1c2 0320 	rsb	r3, r2, #32
 800081e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000822:	fa20 f002 	lsr.w	r0, r0, r2
 8000826:	fa01 fe03 	lsl.w	lr, r1, r3
 800082a:	ea40 000e 	orr.w	r0, r0, lr
 800082e:	fa21 f102 	lsr.w	r1, r1, r2
 8000832:	4414      	add	r4, r2
 8000834:	e6bd      	b.n	80005b2 <__adddf3+0xe6>
 8000836:	bf00      	nop

08000838 <__aeabi_dmul>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000842:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000846:	bf1d      	ittte	ne
 8000848:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800084c:	ea94 0f0c 	teqne	r4, ip
 8000850:	ea95 0f0c 	teqne	r5, ip
 8000854:	f000 f8de 	bleq	8000a14 <__aeabi_dmul+0x1dc>
 8000858:	442c      	add	r4, r5
 800085a:	ea81 0603 	eor.w	r6, r1, r3
 800085e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000862:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000866:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800086a:	bf18      	it	ne
 800086c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000878:	d038      	beq.n	80008ec <__aeabi_dmul+0xb4>
 800087a:	fba0 ce02 	umull	ip, lr, r0, r2
 800087e:	f04f 0500 	mov.w	r5, #0
 8000882:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000886:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800088a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800088e:	f04f 0600 	mov.w	r6, #0
 8000892:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000896:	f09c 0f00 	teq	ip, #0
 800089a:	bf18      	it	ne
 800089c:	f04e 0e01 	orrne.w	lr, lr, #1
 80008a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008ac:	d204      	bcs.n	80008b8 <__aeabi_dmul+0x80>
 80008ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008b2:	416d      	adcs	r5, r5
 80008b4:	eb46 0606 	adc.w	r6, r6, r6
 80008b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008d0:	bf88      	it	hi
 80008d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d6:	d81e      	bhi.n	8000916 <__aeabi_dmul+0xde>
 80008d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008dc:	bf08      	it	eq
 80008de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008e2:	f150 0000 	adcs.w	r0, r0, #0
 80008e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ea:	bd70      	pop	{r4, r5, r6, pc}
 80008ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008f0:	ea46 0101 	orr.w	r1, r6, r1
 80008f4:	ea40 0002 	orr.w	r0, r0, r2
 80008f8:	ea81 0103 	eor.w	r1, r1, r3
 80008fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000900:	bfc2      	ittt	gt
 8000902:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000906:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800090a:	bd70      	popgt	{r4, r5, r6, pc}
 800090c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000910:	f04f 0e00 	mov.w	lr, #0
 8000914:	3c01      	subs	r4, #1
 8000916:	f300 80ab 	bgt.w	8000a70 <__aeabi_dmul+0x238>
 800091a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800091e:	bfde      	ittt	le
 8000920:	2000      	movle	r0, #0
 8000922:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000926:	bd70      	pople	{r4, r5, r6, pc}
 8000928:	f1c4 0400 	rsb	r4, r4, #0
 800092c:	3c20      	subs	r4, #32
 800092e:	da35      	bge.n	800099c <__aeabi_dmul+0x164>
 8000930:	340c      	adds	r4, #12
 8000932:	dc1b      	bgt.n	800096c <__aeabi_dmul+0x134>
 8000934:	f104 0414 	add.w	r4, r4, #20
 8000938:	f1c4 0520 	rsb	r5, r4, #32
 800093c:	fa00 f305 	lsl.w	r3, r0, r5
 8000940:	fa20 f004 	lsr.w	r0, r0, r4
 8000944:	fa01 f205 	lsl.w	r2, r1, r5
 8000948:	ea40 0002 	orr.w	r0, r0, r2
 800094c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000950:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000954:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000958:	fa21 f604 	lsr.w	r6, r1, r4
 800095c:	eb42 0106 	adc.w	r1, r2, r6
 8000960:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000964:	bf08      	it	eq
 8000966:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800096a:	bd70      	pop	{r4, r5, r6, pc}
 800096c:	f1c4 040c 	rsb	r4, r4, #12
 8000970:	f1c4 0520 	rsb	r5, r4, #32
 8000974:	fa00 f304 	lsl.w	r3, r0, r4
 8000978:	fa20 f005 	lsr.w	r0, r0, r5
 800097c:	fa01 f204 	lsl.w	r2, r1, r4
 8000980:	ea40 0002 	orr.w	r0, r0, r2
 8000984:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000988:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800098c:	f141 0100 	adc.w	r1, r1, #0
 8000990:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000994:	bf08      	it	eq
 8000996:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800099a:	bd70      	pop	{r4, r5, r6, pc}
 800099c:	f1c4 0520 	rsb	r5, r4, #32
 80009a0:	fa00 f205 	lsl.w	r2, r0, r5
 80009a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009a8:	fa20 f304 	lsr.w	r3, r0, r4
 80009ac:	fa01 f205 	lsl.w	r2, r1, r5
 80009b0:	ea43 0302 	orr.w	r3, r3, r2
 80009b4:	fa21 f004 	lsr.w	r0, r1, r4
 80009b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009bc:	fa21 f204 	lsr.w	r2, r1, r4
 80009c0:	ea20 0002 	bic.w	r0, r0, r2
 80009c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009cc:	bf08      	it	eq
 80009ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009d2:	bd70      	pop	{r4, r5, r6, pc}
 80009d4:	f094 0f00 	teq	r4, #0
 80009d8:	d10f      	bne.n	80009fa <__aeabi_dmul+0x1c2>
 80009da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009de:	0040      	lsls	r0, r0, #1
 80009e0:	eb41 0101 	adc.w	r1, r1, r1
 80009e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e8:	bf08      	it	eq
 80009ea:	3c01      	subeq	r4, #1
 80009ec:	d0f7      	beq.n	80009de <__aeabi_dmul+0x1a6>
 80009ee:	ea41 0106 	orr.w	r1, r1, r6
 80009f2:	f095 0f00 	teq	r5, #0
 80009f6:	bf18      	it	ne
 80009f8:	4770      	bxne	lr
 80009fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009fe:	0052      	lsls	r2, r2, #1
 8000a00:	eb43 0303 	adc.w	r3, r3, r3
 8000a04:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a08:	bf08      	it	eq
 8000a0a:	3d01      	subeq	r5, #1
 8000a0c:	d0f7      	beq.n	80009fe <__aeabi_dmul+0x1c6>
 8000a0e:	ea43 0306 	orr.w	r3, r3, r6
 8000a12:	4770      	bx	lr
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1c:	bf18      	it	ne
 8000a1e:	ea95 0f0c 	teqne	r5, ip
 8000a22:	d00c      	beq.n	8000a3e <__aeabi_dmul+0x206>
 8000a24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a2e:	d1d1      	bne.n	80009d4 <__aeabi_dmul+0x19c>
 8000a30:	ea81 0103 	eor.w	r1, r1, r3
 8000a34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a38:	f04f 0000 	mov.w	r0, #0
 8000a3c:	bd70      	pop	{r4, r5, r6, pc}
 8000a3e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a42:	bf06      	itte	eq
 8000a44:	4610      	moveq	r0, r2
 8000a46:	4619      	moveq	r1, r3
 8000a48:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4c:	d019      	beq.n	8000a82 <__aeabi_dmul+0x24a>
 8000a4e:	ea94 0f0c 	teq	r4, ip
 8000a52:	d102      	bne.n	8000a5a <__aeabi_dmul+0x222>
 8000a54:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a58:	d113      	bne.n	8000a82 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	d105      	bne.n	8000a6c <__aeabi_dmul+0x234>
 8000a60:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a64:	bf1c      	itt	ne
 8000a66:	4610      	movne	r0, r2
 8000a68:	4619      	movne	r1, r3
 8000a6a:	d10a      	bne.n	8000a82 <__aeabi_dmul+0x24a>
 8000a6c:	ea81 0103 	eor.w	r1, r1, r3
 8000a70:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a74:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	bd70      	pop	{r4, r5, r6, pc}
 8000a82:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a86:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a8a:	bd70      	pop	{r4, r5, r6, pc}

08000a8c <__aeabi_ddiv>:
 8000a8c:	b570      	push	{r4, r5, r6, lr}
 8000a8e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a92:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a96:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a9a:	bf1d      	ittte	ne
 8000a9c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000aa0:	ea94 0f0c 	teqne	r4, ip
 8000aa4:	ea95 0f0c 	teqne	r5, ip
 8000aa8:	f000 f8a7 	bleq	8000bfa <__aeabi_ddiv+0x16e>
 8000aac:	eba4 0405 	sub.w	r4, r4, r5
 8000ab0:	ea81 0e03 	eor.w	lr, r1, r3
 8000ab4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000abc:	f000 8088 	beq.w	8000bd0 <__aeabi_ddiv+0x144>
 8000ac0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ac4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000ac8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000acc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ad0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ad4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000ad8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000adc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000ae0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000ae4:	429d      	cmp	r5, r3
 8000ae6:	bf08      	it	eq
 8000ae8:	4296      	cmpeq	r6, r2
 8000aea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000aee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000af2:	d202      	bcs.n	8000afa <__aeabi_ddiv+0x6e>
 8000af4:	085b      	lsrs	r3, r3, #1
 8000af6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000afa:	1ab6      	subs	r6, r6, r2
 8000afc:	eb65 0503 	sbc.w	r5, r5, r3
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b06:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b0a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b16:	bf22      	ittt	cs
 8000b18:	1ab6      	subcs	r6, r6, r2
 8000b1a:	4675      	movcs	r5, lr
 8000b1c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b20:	085b      	lsrs	r3, r3, #1
 8000b22:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b26:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b2e:	bf22      	ittt	cs
 8000b30:	1ab6      	subcs	r6, r6, r2
 8000b32:	4675      	movcs	r5, lr
 8000b34:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b38:	085b      	lsrs	r3, r3, #1
 8000b3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b46:	bf22      	ittt	cs
 8000b48:	1ab6      	subcs	r6, r6, r2
 8000b4a:	4675      	movcs	r5, lr
 8000b4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b56:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b5a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5e:	bf22      	ittt	cs
 8000b60:	1ab6      	subcs	r6, r6, r2
 8000b62:	4675      	movcs	r5, lr
 8000b64:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b68:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b6c:	d018      	beq.n	8000ba0 <__aeabi_ddiv+0x114>
 8000b6e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b72:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b76:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b7a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b7e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b82:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b86:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b8a:	d1c0      	bne.n	8000b0e <__aeabi_ddiv+0x82>
 8000b8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b90:	d10b      	bne.n	8000baa <__aeabi_ddiv+0x11e>
 8000b92:	ea41 0100 	orr.w	r1, r1, r0
 8000b96:	f04f 0000 	mov.w	r0, #0
 8000b9a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b9e:	e7b6      	b.n	8000b0e <__aeabi_ddiv+0x82>
 8000ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ba4:	bf04      	itt	eq
 8000ba6:	4301      	orreq	r1, r0
 8000ba8:	2000      	moveq	r0, #0
 8000baa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bae:	bf88      	it	hi
 8000bb0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bb4:	f63f aeaf 	bhi.w	8000916 <__aeabi_dmul+0xde>
 8000bb8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bbc:	bf04      	itt	eq
 8000bbe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bc2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bc6:	f150 0000 	adcs.w	r0, r0, #0
 8000bca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bce:	bd70      	pop	{r4, r5, r6, pc}
 8000bd0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bd4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bd8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bdc:	bfc2      	ittt	gt
 8000bde:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000be2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000be6:	bd70      	popgt	{r4, r5, r6, pc}
 8000be8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bec:	f04f 0e00 	mov.w	lr, #0
 8000bf0:	3c01      	subs	r4, #1
 8000bf2:	e690      	b.n	8000916 <__aeabi_dmul+0xde>
 8000bf4:	ea45 0e06 	orr.w	lr, r5, r6
 8000bf8:	e68d      	b.n	8000916 <__aeabi_dmul+0xde>
 8000bfa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bfe:	ea94 0f0c 	teq	r4, ip
 8000c02:	bf08      	it	eq
 8000c04:	ea95 0f0c 	teqeq	r5, ip
 8000c08:	f43f af3b 	beq.w	8000a82 <__aeabi_dmul+0x24a>
 8000c0c:	ea94 0f0c 	teq	r4, ip
 8000c10:	d10a      	bne.n	8000c28 <__aeabi_ddiv+0x19c>
 8000c12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c16:	f47f af34 	bne.w	8000a82 <__aeabi_dmul+0x24a>
 8000c1a:	ea95 0f0c 	teq	r5, ip
 8000c1e:	f47f af25 	bne.w	8000a6c <__aeabi_dmul+0x234>
 8000c22:	4610      	mov	r0, r2
 8000c24:	4619      	mov	r1, r3
 8000c26:	e72c      	b.n	8000a82 <__aeabi_dmul+0x24a>
 8000c28:	ea95 0f0c 	teq	r5, ip
 8000c2c:	d106      	bne.n	8000c3c <__aeabi_ddiv+0x1b0>
 8000c2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c32:	f43f aefd 	beq.w	8000a30 <__aeabi_dmul+0x1f8>
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	e722      	b.n	8000a82 <__aeabi_dmul+0x24a>
 8000c3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c40:	bf18      	it	ne
 8000c42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c46:	f47f aec5 	bne.w	80009d4 <__aeabi_dmul+0x19c>
 8000c4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c4e:	f47f af0d 	bne.w	8000a6c <__aeabi_dmul+0x234>
 8000c52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c56:	f47f aeeb 	bne.w	8000a30 <__aeabi_dmul+0x1f8>
 8000c5a:	e712      	b.n	8000a82 <__aeabi_dmul+0x24a>

08000c5c <__gedf2>:
 8000c5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000c60:	e006      	b.n	8000c70 <__cmpdf2+0x4>
 8000c62:	bf00      	nop

08000c64 <__ledf2>:
 8000c64:	f04f 0c01 	mov.w	ip, #1
 8000c68:	e002      	b.n	8000c70 <__cmpdf2+0x4>
 8000c6a:	bf00      	nop

08000c6c <__cmpdf2>:
 8000c6c:	f04f 0c01 	mov.w	ip, #1
 8000c70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c80:	bf18      	it	ne
 8000c82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c86:	d01b      	beq.n	8000cc0 <__cmpdf2+0x54>
 8000c88:	b001      	add	sp, #4
 8000c8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c8e:	bf0c      	ite	eq
 8000c90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000c94:	ea91 0f03 	teqne	r1, r3
 8000c98:	bf02      	ittt	eq
 8000c9a:	ea90 0f02 	teqeq	r0, r2
 8000c9e:	2000      	moveq	r0, #0
 8000ca0:	4770      	bxeq	lr
 8000ca2:	f110 0f00 	cmn.w	r0, #0
 8000ca6:	ea91 0f03 	teq	r1, r3
 8000caa:	bf58      	it	pl
 8000cac:	4299      	cmppl	r1, r3
 8000cae:	bf08      	it	eq
 8000cb0:	4290      	cmpeq	r0, r2
 8000cb2:	bf2c      	ite	cs
 8000cb4:	17d8      	asrcs	r0, r3, #31
 8000cb6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cba:	f040 0001 	orr.w	r0, r0, #1
 8000cbe:	4770      	bx	lr
 8000cc0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cc4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cc8:	d102      	bne.n	8000cd0 <__cmpdf2+0x64>
 8000cca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cce:	d107      	bne.n	8000ce0 <__cmpdf2+0x74>
 8000cd0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cd8:	d1d6      	bne.n	8000c88 <__cmpdf2+0x1c>
 8000cda:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cde:	d0d3      	beq.n	8000c88 <__cmpdf2+0x1c>
 8000ce0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_cdrcmple>:
 8000ce8:	4684      	mov	ip, r0
 8000cea:	4610      	mov	r0, r2
 8000cec:	4662      	mov	r2, ip
 8000cee:	468c      	mov	ip, r1
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4663      	mov	r3, ip
 8000cf4:	e000      	b.n	8000cf8 <__aeabi_cdcmpeq>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_cdcmpeq>:
 8000cf8:	b501      	push	{r0, lr}
 8000cfa:	f7ff ffb7 	bl	8000c6c <__cmpdf2>
 8000cfe:	2800      	cmp	r0, #0
 8000d00:	bf48      	it	mi
 8000d02:	f110 0f00 	cmnmi.w	r0, #0
 8000d06:	bd01      	pop	{r0, pc}

08000d08 <__aeabi_dcmpeq>:
 8000d08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d0c:	f7ff fff4 	bl	8000cf8 <__aeabi_cdcmpeq>
 8000d10:	bf0c      	ite	eq
 8000d12:	2001      	moveq	r0, #1
 8000d14:	2000      	movne	r0, #0
 8000d16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1a:	bf00      	nop

08000d1c <__aeabi_dcmplt>:
 8000d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d20:	f7ff ffea 	bl	8000cf8 <__aeabi_cdcmpeq>
 8000d24:	bf34      	ite	cc
 8000d26:	2001      	movcc	r0, #1
 8000d28:	2000      	movcs	r0, #0
 8000d2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2e:	bf00      	nop

08000d30 <__aeabi_dcmple>:
 8000d30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d34:	f7ff ffe0 	bl	8000cf8 <__aeabi_cdcmpeq>
 8000d38:	bf94      	ite	ls
 8000d3a:	2001      	movls	r0, #1
 8000d3c:	2000      	movhi	r0, #0
 8000d3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d42:	bf00      	nop

08000d44 <__aeabi_dcmpge>:
 8000d44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d48:	f7ff ffce 	bl	8000ce8 <__aeabi_cdrcmple>
 8000d4c:	bf94      	ite	ls
 8000d4e:	2001      	movls	r0, #1
 8000d50:	2000      	movhi	r0, #0
 8000d52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d56:	bf00      	nop

08000d58 <__aeabi_dcmpgt>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff ffc4 	bl	8000ce8 <__aeabi_cdrcmple>
 8000d60:	bf34      	ite	cc
 8000d62:	2001      	movcc	r0, #1
 8000d64:	2000      	movcs	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmpun>:
 8000d6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d74:	d102      	bne.n	8000d7c <__aeabi_dcmpun+0x10>
 8000d76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d7a:	d10a      	bne.n	8000d92 <__aeabi_dcmpun+0x26>
 8000d7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d84:	d102      	bne.n	8000d8c <__aeabi_dcmpun+0x20>
 8000d86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d8a:	d102      	bne.n	8000d92 <__aeabi_dcmpun+0x26>
 8000d8c:	f04f 0000 	mov.w	r0, #0
 8000d90:	4770      	bx	lr
 8000d92:	f04f 0001 	mov.w	r0, #1
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_d2iz>:
 8000d98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000da0:	d215      	bcs.n	8000dce <__aeabi_d2iz+0x36>
 8000da2:	d511      	bpl.n	8000dc8 <__aeabi_d2iz+0x30>
 8000da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dac:	d912      	bls.n	8000dd4 <__aeabi_d2iz+0x3c>
 8000dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000dc2:	bf18      	it	ne
 8000dc4:	4240      	negne	r0, r0
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dd2:	d105      	bne.n	8000de0 <__aeabi_d2iz+0x48>
 8000dd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dd8:	bf08      	it	eq
 8000dda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dde:	4770      	bx	lr
 8000de0:	f04f 0000 	mov.w	r0, #0
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <__aeabi_d2f>:
 8000de8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000df0:	bf24      	itt	cs
 8000df2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000df6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000dfa:	d90d      	bls.n	8000e18 <__aeabi_d2f+0x30>
 8000dfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000e0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e10:	bf08      	it	eq
 8000e12:	f020 0001 	biceq.w	r0, r0, #1
 8000e16:	4770      	bx	lr
 8000e18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e1c:	d121      	bne.n	8000e62 <__aeabi_d2f+0x7a>
 8000e1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000e22:	bfbc      	itt	lt
 8000e24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000e28:	4770      	bxlt	lr
 8000e2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e32:	f1c2 0218 	rsb	r2, r2, #24
 8000e36:	f1c2 0c20 	rsb	ip, r2, #32
 8000e3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000e42:	bf18      	it	ne
 8000e44:	f040 0001 	orrne.w	r0, r0, #1
 8000e48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000e54:	ea40 000c 	orr.w	r0, r0, ip
 8000e58:	fa23 f302 	lsr.w	r3, r3, r2
 8000e5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e60:	e7cc      	b.n	8000dfc <__aeabi_d2f+0x14>
 8000e62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000e66:	d107      	bne.n	8000e78 <__aeabi_d2f+0x90>
 8000e68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000e6c:	bf1e      	ittt	ne
 8000e6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000e72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000e76:	4770      	bxne	lr
 8000e78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000e7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <__aeabi_uldivmod>:
 8000e88:	b953      	cbnz	r3, 8000ea0 <__aeabi_uldivmod+0x18>
 8000e8a:	b94a      	cbnz	r2, 8000ea0 <__aeabi_uldivmod+0x18>
 8000e8c:	2900      	cmp	r1, #0
 8000e8e:	bf08      	it	eq
 8000e90:	2800      	cmpeq	r0, #0
 8000e92:	bf1c      	itt	ne
 8000e94:	f04f 31ff 	movne.w	r1, #4294967295
 8000e98:	f04f 30ff 	movne.w	r0, #4294967295
 8000e9c:	f000 b972 	b.w	8001184 <__aeabi_idiv0>
 8000ea0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ea4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ea8:	f000 f806 	bl	8000eb8 <__udivmoddi4>
 8000eac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb4:	b004      	add	sp, #16
 8000eb6:	4770      	bx	lr

08000eb8 <__udivmoddi4>:
 8000eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ebc:	9e08      	ldr	r6, [sp, #32]
 8000ebe:	4604      	mov	r4, r0
 8000ec0:	4688      	mov	r8, r1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d14b      	bne.n	8000f5e <__udivmoddi4+0xa6>
 8000ec6:	428a      	cmp	r2, r1
 8000ec8:	4615      	mov	r5, r2
 8000eca:	d967      	bls.n	8000f9c <__udivmoddi4+0xe4>
 8000ecc:	fab2 f282 	clz	r2, r2
 8000ed0:	b14a      	cbz	r2, 8000ee6 <__udivmoddi4+0x2e>
 8000ed2:	f1c2 0720 	rsb	r7, r2, #32
 8000ed6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eda:	fa20 f707 	lsr.w	r7, r0, r7
 8000ede:	4095      	lsls	r5, r2
 8000ee0:	ea47 0803 	orr.w	r8, r7, r3
 8000ee4:	4094      	lsls	r4, r2
 8000ee6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eea:	0c23      	lsrs	r3, r4, #16
 8000eec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ef0:	fa1f fc85 	uxth.w	ip, r5
 8000ef4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ef8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000efc:	fb07 f10c 	mul.w	r1, r7, ip
 8000f00:	4299      	cmp	r1, r3
 8000f02:	d909      	bls.n	8000f18 <__udivmoddi4+0x60>
 8000f04:	18eb      	adds	r3, r5, r3
 8000f06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000f0a:	f080 811b 	bcs.w	8001144 <__udivmoddi4+0x28c>
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	f240 8118 	bls.w	8001144 <__udivmoddi4+0x28c>
 8000f14:	3f02      	subs	r7, #2
 8000f16:	442b      	add	r3, r5
 8000f18:	1a5b      	subs	r3, r3, r1
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d909      	bls.n	8000f44 <__udivmoddi4+0x8c>
 8000f30:	192c      	adds	r4, r5, r4
 8000f32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f36:	f080 8107 	bcs.w	8001148 <__udivmoddi4+0x290>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	f240 8104 	bls.w	8001148 <__udivmoddi4+0x290>
 8000f40:	3802      	subs	r0, #2
 8000f42:	442c      	add	r4, r5
 8000f44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f48:	eba4 040c 	sub.w	r4, r4, ip
 8000f4c:	2700      	movs	r7, #0
 8000f4e:	b11e      	cbz	r6, 8000f58 <__udivmoddi4+0xa0>
 8000f50:	40d4      	lsrs	r4, r2
 8000f52:	2300      	movs	r3, #0
 8000f54:	e9c6 4300 	strd	r4, r3, [r6]
 8000f58:	4639      	mov	r1, r7
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d909      	bls.n	8000f76 <__udivmoddi4+0xbe>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	f000 80eb 	beq.w	800113e <__udivmoddi4+0x286>
 8000f68:	2700      	movs	r7, #0
 8000f6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000f6e:	4638      	mov	r0, r7
 8000f70:	4639      	mov	r1, r7
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	fab3 f783 	clz	r7, r3
 8000f7a:	2f00      	cmp	r7, #0
 8000f7c:	d147      	bne.n	800100e <__udivmoddi4+0x156>
 8000f7e:	428b      	cmp	r3, r1
 8000f80:	d302      	bcc.n	8000f88 <__udivmoddi4+0xd0>
 8000f82:	4282      	cmp	r2, r0
 8000f84:	f200 80fa 	bhi.w	800117c <__udivmoddi4+0x2c4>
 8000f88:	1a84      	subs	r4, r0, r2
 8000f8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f8e:	2001      	movs	r0, #1
 8000f90:	4698      	mov	r8, r3
 8000f92:	2e00      	cmp	r6, #0
 8000f94:	d0e0      	beq.n	8000f58 <__udivmoddi4+0xa0>
 8000f96:	e9c6 4800 	strd	r4, r8, [r6]
 8000f9a:	e7dd      	b.n	8000f58 <__udivmoddi4+0xa0>
 8000f9c:	b902      	cbnz	r2, 8000fa0 <__udivmoddi4+0xe8>
 8000f9e:	deff      	udf	#255	; 0xff
 8000fa0:	fab2 f282 	clz	r2, r2
 8000fa4:	2a00      	cmp	r2, #0
 8000fa6:	f040 808f 	bne.w	80010c8 <__udivmoddi4+0x210>
 8000faa:	1b49      	subs	r1, r1, r5
 8000fac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fb0:	fa1f f885 	uxth.w	r8, r5
 8000fb4:	2701      	movs	r7, #1
 8000fb6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000fba:	0c23      	lsrs	r3, r4, #16
 8000fbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000fc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000fc8:	4299      	cmp	r1, r3
 8000fca:	d907      	bls.n	8000fdc <__udivmoddi4+0x124>
 8000fcc:	18eb      	adds	r3, r5, r3
 8000fce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fd2:	d202      	bcs.n	8000fda <__udivmoddi4+0x122>
 8000fd4:	4299      	cmp	r1, r3
 8000fd6:	f200 80cd 	bhi.w	8001174 <__udivmoddi4+0x2bc>
 8000fda:	4684      	mov	ip, r0
 8000fdc:	1a59      	subs	r1, r3, r1
 8000fde:	b2a3      	uxth	r3, r4
 8000fe0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fe4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000fe8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fec:	fb08 f800 	mul.w	r8, r8, r0
 8000ff0:	45a0      	cmp	r8, r4
 8000ff2:	d907      	bls.n	8001004 <__udivmoddi4+0x14c>
 8000ff4:	192c      	adds	r4, r5, r4
 8000ff6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ffa:	d202      	bcs.n	8001002 <__udivmoddi4+0x14a>
 8000ffc:	45a0      	cmp	r8, r4
 8000ffe:	f200 80b6 	bhi.w	800116e <__udivmoddi4+0x2b6>
 8001002:	4618      	mov	r0, r3
 8001004:	eba4 0408 	sub.w	r4, r4, r8
 8001008:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800100c:	e79f      	b.n	8000f4e <__udivmoddi4+0x96>
 800100e:	f1c7 0c20 	rsb	ip, r7, #32
 8001012:	40bb      	lsls	r3, r7
 8001014:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001018:	ea4e 0e03 	orr.w	lr, lr, r3
 800101c:	fa01 f407 	lsl.w	r4, r1, r7
 8001020:	fa20 f50c 	lsr.w	r5, r0, ip
 8001024:	fa21 f30c 	lsr.w	r3, r1, ip
 8001028:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800102c:	4325      	orrs	r5, r4
 800102e:	fbb3 f9f8 	udiv	r9, r3, r8
 8001032:	0c2c      	lsrs	r4, r5, #16
 8001034:	fb08 3319 	mls	r3, r8, r9, r3
 8001038:	fa1f fa8e 	uxth.w	sl, lr
 800103c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001040:	fb09 f40a 	mul.w	r4, r9, sl
 8001044:	429c      	cmp	r4, r3
 8001046:	fa02 f207 	lsl.w	r2, r2, r7
 800104a:	fa00 f107 	lsl.w	r1, r0, r7
 800104e:	d90b      	bls.n	8001068 <__udivmoddi4+0x1b0>
 8001050:	eb1e 0303 	adds.w	r3, lr, r3
 8001054:	f109 30ff 	add.w	r0, r9, #4294967295
 8001058:	f080 8087 	bcs.w	800116a <__udivmoddi4+0x2b2>
 800105c:	429c      	cmp	r4, r3
 800105e:	f240 8084 	bls.w	800116a <__udivmoddi4+0x2b2>
 8001062:	f1a9 0902 	sub.w	r9, r9, #2
 8001066:	4473      	add	r3, lr
 8001068:	1b1b      	subs	r3, r3, r4
 800106a:	b2ad      	uxth	r5, r5
 800106c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001070:	fb08 3310 	mls	r3, r8, r0, r3
 8001074:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001078:	fb00 fa0a 	mul.w	sl, r0, sl
 800107c:	45a2      	cmp	sl, r4
 800107e:	d908      	bls.n	8001092 <__udivmoddi4+0x1da>
 8001080:	eb1e 0404 	adds.w	r4, lr, r4
 8001084:	f100 33ff 	add.w	r3, r0, #4294967295
 8001088:	d26b      	bcs.n	8001162 <__udivmoddi4+0x2aa>
 800108a:	45a2      	cmp	sl, r4
 800108c:	d969      	bls.n	8001162 <__udivmoddi4+0x2aa>
 800108e:	3802      	subs	r0, #2
 8001090:	4474      	add	r4, lr
 8001092:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001096:	fba0 8902 	umull	r8, r9, r0, r2
 800109a:	eba4 040a 	sub.w	r4, r4, sl
 800109e:	454c      	cmp	r4, r9
 80010a0:	46c2      	mov	sl, r8
 80010a2:	464b      	mov	r3, r9
 80010a4:	d354      	bcc.n	8001150 <__udivmoddi4+0x298>
 80010a6:	d051      	beq.n	800114c <__udivmoddi4+0x294>
 80010a8:	2e00      	cmp	r6, #0
 80010aa:	d069      	beq.n	8001180 <__udivmoddi4+0x2c8>
 80010ac:	ebb1 050a 	subs.w	r5, r1, sl
 80010b0:	eb64 0403 	sbc.w	r4, r4, r3
 80010b4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80010b8:	40fd      	lsrs	r5, r7
 80010ba:	40fc      	lsrs	r4, r7
 80010bc:	ea4c 0505 	orr.w	r5, ip, r5
 80010c0:	e9c6 5400 	strd	r5, r4, [r6]
 80010c4:	2700      	movs	r7, #0
 80010c6:	e747      	b.n	8000f58 <__udivmoddi4+0xa0>
 80010c8:	f1c2 0320 	rsb	r3, r2, #32
 80010cc:	fa20 f703 	lsr.w	r7, r0, r3
 80010d0:	4095      	lsls	r5, r2
 80010d2:	fa01 f002 	lsl.w	r0, r1, r2
 80010d6:	fa21 f303 	lsr.w	r3, r1, r3
 80010da:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010de:	4338      	orrs	r0, r7
 80010e0:	0c01      	lsrs	r1, r0, #16
 80010e2:	fbb3 f7fe 	udiv	r7, r3, lr
 80010e6:	fa1f f885 	uxth.w	r8, r5
 80010ea:	fb0e 3317 	mls	r3, lr, r7, r3
 80010ee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010f2:	fb07 f308 	mul.w	r3, r7, r8
 80010f6:	428b      	cmp	r3, r1
 80010f8:	fa04 f402 	lsl.w	r4, r4, r2
 80010fc:	d907      	bls.n	800110e <__udivmoddi4+0x256>
 80010fe:	1869      	adds	r1, r5, r1
 8001100:	f107 3cff 	add.w	ip, r7, #4294967295
 8001104:	d22f      	bcs.n	8001166 <__udivmoddi4+0x2ae>
 8001106:	428b      	cmp	r3, r1
 8001108:	d92d      	bls.n	8001166 <__udivmoddi4+0x2ae>
 800110a:	3f02      	subs	r7, #2
 800110c:	4429      	add	r1, r5
 800110e:	1acb      	subs	r3, r1, r3
 8001110:	b281      	uxth	r1, r0
 8001112:	fbb3 f0fe 	udiv	r0, r3, lr
 8001116:	fb0e 3310 	mls	r3, lr, r0, r3
 800111a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800111e:	fb00 f308 	mul.w	r3, r0, r8
 8001122:	428b      	cmp	r3, r1
 8001124:	d907      	bls.n	8001136 <__udivmoddi4+0x27e>
 8001126:	1869      	adds	r1, r5, r1
 8001128:	f100 3cff 	add.w	ip, r0, #4294967295
 800112c:	d217      	bcs.n	800115e <__udivmoddi4+0x2a6>
 800112e:	428b      	cmp	r3, r1
 8001130:	d915      	bls.n	800115e <__udivmoddi4+0x2a6>
 8001132:	3802      	subs	r0, #2
 8001134:	4429      	add	r1, r5
 8001136:	1ac9      	subs	r1, r1, r3
 8001138:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800113c:	e73b      	b.n	8000fb6 <__udivmoddi4+0xfe>
 800113e:	4637      	mov	r7, r6
 8001140:	4630      	mov	r0, r6
 8001142:	e709      	b.n	8000f58 <__udivmoddi4+0xa0>
 8001144:	4607      	mov	r7, r0
 8001146:	e6e7      	b.n	8000f18 <__udivmoddi4+0x60>
 8001148:	4618      	mov	r0, r3
 800114a:	e6fb      	b.n	8000f44 <__udivmoddi4+0x8c>
 800114c:	4541      	cmp	r1, r8
 800114e:	d2ab      	bcs.n	80010a8 <__udivmoddi4+0x1f0>
 8001150:	ebb8 0a02 	subs.w	sl, r8, r2
 8001154:	eb69 020e 	sbc.w	r2, r9, lr
 8001158:	3801      	subs	r0, #1
 800115a:	4613      	mov	r3, r2
 800115c:	e7a4      	b.n	80010a8 <__udivmoddi4+0x1f0>
 800115e:	4660      	mov	r0, ip
 8001160:	e7e9      	b.n	8001136 <__udivmoddi4+0x27e>
 8001162:	4618      	mov	r0, r3
 8001164:	e795      	b.n	8001092 <__udivmoddi4+0x1da>
 8001166:	4667      	mov	r7, ip
 8001168:	e7d1      	b.n	800110e <__udivmoddi4+0x256>
 800116a:	4681      	mov	r9, r0
 800116c:	e77c      	b.n	8001068 <__udivmoddi4+0x1b0>
 800116e:	3802      	subs	r0, #2
 8001170:	442c      	add	r4, r5
 8001172:	e747      	b.n	8001004 <__udivmoddi4+0x14c>
 8001174:	f1ac 0c02 	sub.w	ip, ip, #2
 8001178:	442b      	add	r3, r5
 800117a:	e72f      	b.n	8000fdc <__udivmoddi4+0x124>
 800117c:	4638      	mov	r0, r7
 800117e:	e708      	b.n	8000f92 <__udivmoddi4+0xda>
 8001180:	4637      	mov	r7, r6
 8001182:	e6e9      	b.n	8000f58 <__udivmoddi4+0xa0>

08001184 <__aeabi_idiv0>:
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop

08001188 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	60f8      	str	r0, [r7, #12]
 8001190:	60b9      	str	r1, [r7, #8]
 8001192:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4a07      	ldr	r2, [pc, #28]	; (80011b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8001198:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	4a06      	ldr	r2, [pc, #24]	; (80011b8 <vApplicationGetIdleTaskMemory+0x30>)
 800119e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2280      	movs	r2, #128	; 0x80
 80011a4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	20000a34 	.word	0x20000a34
 80011b8:	20000a88 	.word	0x20000a88

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c2:	f001 ff2d 	bl	8003020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c6:	f000 f857 	bl	8001278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ca:	f000 fb05 	bl	80017d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80011ce:	f000 f8bd 	bl	800134c <MX_ADC1_Init>
  MX_SPI1_Init();
 80011d2:	f000 f90d 	bl	80013f0 <MX_SPI1_Init>
  MX_SPI2_Init();
 80011d6:	f000 f941 	bl	800145c <MX_SPI2_Init>
  MX_TIM1_Init();
 80011da:	f000 f975 	bl	80014c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80011de:	f000 fa39 	bl	8001654 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80011e2:	f000 facf 	bl	8001784 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  UtilsInit();
 80011e6:	f001 fbaf 	bl	8002948 <UtilsInit>
  if(!Bmx055Init(&hspi1) ||
 80011ea:	481c      	ldr	r0, [pc, #112]	; (800125c <main+0xa0>)
 80011ec:	f000 ff04 	bl	8001ff8 <Bmx055Init>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f083 0301 	eor.w	r3, r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d108      	bne.n	800120e <main+0x52>
     !UartInit(&huart1))
 80011fc:	4818      	ldr	r0, [pc, #96]	; (8001260 <main+0xa4>)
 80011fe:	f001 fb4d 	bl	800289c <UartInit>
 8001202:	4603      	mov	r3, r0
 8001204:	f083 0301 	eor.w	r3, r3, #1
 8001208:	b2db      	uxtb	r3, r3
  if(!Bmx055Init(&hspi1) ||
 800120a:	2b00      	cmp	r3, #0
 800120c:	d000      	beq.n	8001210 <main+0x54>
  {
      while(1){}
 800120e:	e7fe      	b.n	800120e <main+0x52>
  }
  PosCalcInit();
 8001210:	f001 fbbe 	bl	8002990 <PosCalcInit>


  float d = 13.6432f;
 8001214:	4b13      	ldr	r3, [pc, #76]	; (8001264 <main+0xa8>)
 8001216:	61fb      	str	r3, [r7, #28]
 // d += 7.4f;

  UartWrite("%f\r\n",d);
 8001218:	69f8      	ldr	r0, [r7, #28]
 800121a:	f7ff fab5 	bl	8000788 <__aeabi_f2d>
 800121e:	4603      	mov	r3, r0
 8001220:	460c      	mov	r4, r1
 8001222:	461a      	mov	r2, r3
 8001224:	4623      	mov	r3, r4
 8001226:	4810      	ldr	r0, [pc, #64]	; (8001268 <main+0xac>)
 8001228:	f001 fb48 	bl	80028bc <UartWrite>
  UartWrite("%i\r\n",70);
 800122c:	2146      	movs	r1, #70	; 0x46
 800122e:	480f      	ldr	r0, [pc, #60]	; (800126c <main+0xb0>)
 8001230:	f001 fb44 	bl	80028bc <UartWrite>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <main+0xb4>)
 8001236:	463c      	mov	r4, r7
 8001238:	461d      	mov	r5, r3
 800123a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800123c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800123e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001246:	463b      	mov	r3, r7
 8001248:	2100      	movs	r1, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f005 f9c3 	bl	80065d6 <osThreadCreate>
 8001250:	4602      	mov	r2, r0
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <main+0xb8>)
 8001254:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001256:	f005 f9b7 	bl	80065c8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800125a:	e7fe      	b.n	800125a <main+0x9e>
 800125c:	20004b80 	.word	0x20004b80
 8001260:	20004b00 	.word	0x20004b00
 8001264:	415a4a8c 	.word	0x415a4a8c
 8001268:	0800bf68 	.word	0x0800bf68
 800126c:	0800bf70 	.word	0x0800bf70
 8001270:	0800bf84 	.word	0x0800bf84
 8001274:	20004a5c 	.word	0x20004a5c

08001278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b094      	sub	sp, #80	; 0x50
 800127c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127e:	f107 0320 	add.w	r3, r7, #32
 8001282:	2230      	movs	r2, #48	; 0x30
 8001284:	2100      	movs	r1, #0
 8001286:	4618      	mov	r0, r3
 8001288:	f006 fe80 	bl	8007f8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800129c:	2300      	movs	r3, #0
 800129e:	60bb      	str	r3, [r7, #8]
 80012a0:	4b28      	ldr	r3, [pc, #160]	; (8001344 <SystemClock_Config+0xcc>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a4:	4a27      	ldr	r2, [pc, #156]	; (8001344 <SystemClock_Config+0xcc>)
 80012a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012aa:	6413      	str	r3, [r2, #64]	; 0x40
 80012ac:	4b25      	ldr	r3, [pc, #148]	; (8001344 <SystemClock_Config+0xcc>)
 80012ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <SystemClock_Config+0xd0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012c4:	4a20      	ldr	r2, [pc, #128]	; (8001348 <SystemClock_Config+0xd0>)
 80012c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <SystemClock_Config+0xd0>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012d8:	2301      	movs	r3, #1
 80012da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012e2:	2302      	movs	r3, #2
 80012e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012ec:	2308      	movs	r3, #8
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80012f0:	2340      	movs	r3, #64	; 0x40
 80012f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012f4:	2302      	movs	r3, #2
 80012f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012f8:	2304      	movs	r3, #4
 80012fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0320 	add.w	r3, r7, #32
 8001300:	4618      	mov	r0, r3
 8001302:	f002 fc0b 	bl	8003b1c <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800130c:	f000 fb40 	bl	8001990 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001320:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	f107 030c 	add.w	r3, r7, #12
 800132a:	2102      	movs	r1, #2
 800132c:	4618      	mov	r0, r3
 800132e:	f002 fe65 	bl	8003ffc <HAL_RCC_ClockConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001338:	f000 fb2a 	bl	8001990 <Error_Handler>
  }
}
 800133c:	bf00      	nop
 800133e:	3750      	adds	r7, #80	; 0x50
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40023800 	.word	0x40023800
 8001348:	40007000 	.word	0x40007000

0800134c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001352:	463b      	mov	r3, r7
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800135e:	4b21      	ldr	r3, [pc, #132]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001360:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <MX_ADC1_Init+0x9c>)
 8001362:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001364:	4b1f      	ldr	r3, [pc, #124]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001366:	2200      	movs	r2, #0
 8001368:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_ADC1_Init+0x98>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001370:	4b1c      	ldr	r3, [pc, #112]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001378:	2200      	movs	r2, #0
 800137a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800137c:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <MX_ADC1_Init+0x98>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001384:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001386:	2200      	movs	r2, #0
 8001388:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_ADC1_Init+0x98>)
 800138c:	4a17      	ldr	r2, [pc, #92]	; (80013ec <MX_ADC1_Init+0xa0>)
 800138e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001390:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001392:	2200      	movs	r2, #0
 8001394:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <MX_ADC1_Init+0x98>)
 8001398:	2201      	movs	r2, #1
 800139a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800139c:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_ADC1_Init+0x98>)
 800139e:	2200      	movs	r2, #0
 80013a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_ADC1_Init+0x98>)
 80013a6:	2201      	movs	r2, #1
 80013a8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <MX_ADC1_Init+0x98>)
 80013ac:	f001 fe7a 	bl	80030a4 <HAL_ADC_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80013b6:	f000 faeb 	bl	8001990 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80013ba:	230b      	movs	r3, #11
 80013bc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013be:	2301      	movs	r3, #1
 80013c0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c6:	463b      	mov	r3, r7
 80013c8:	4619      	mov	r1, r3
 80013ca:	4806      	ldr	r0, [pc, #24]	; (80013e4 <MX_ADC1_Init+0x98>)
 80013cc:	f001 feae 	bl	800312c <HAL_ADC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80013d6:	f000 fadb 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013da:	bf00      	nop
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20004ab8 	.word	0x20004ab8
 80013e8:	40012000 	.word	0x40012000
 80013ec:	0f000001 	.word	0x0f000001

080013f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <MX_SPI1_Init+0x64>)
 80013f6:	4a18      	ldr	r2, [pc, #96]	; (8001458 <MX_SPI1_Init+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013fa:	4b16      	ldr	r3, [pc, #88]	; (8001454 <MX_SPI1_Init+0x64>)
 80013fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001400:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001402:	4b14      	ldr	r3, [pc, #80]	; (8001454 <MX_SPI1_Init+0x64>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <MX_SPI1_Init+0x64>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800140e:	4b11      	ldr	r3, [pc, #68]	; (8001454 <MX_SPI1_Init+0x64>)
 8001410:	2200      	movs	r2, #0
 8001412:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <MX_SPI1_Init+0x64>)
 8001416:	2200      	movs	r2, #0
 8001418:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <MX_SPI1_Init+0x64>)
 800141c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001420:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <MX_SPI1_Init+0x64>)
 8001424:	2228      	movs	r2, #40	; 0x28
 8001426:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <MX_SPI1_Init+0x64>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <MX_SPI1_Init+0x64>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001434:	4b07      	ldr	r3, [pc, #28]	; (8001454 <MX_SPI1_Init+0x64>)
 8001436:	2200      	movs	r2, #0
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <MX_SPI1_Init+0x64>)
 800143c:	220a      	movs	r2, #10
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001440:	4804      	ldr	r0, [pc, #16]	; (8001454 <MX_SPI1_Init+0x64>)
 8001442:	f002 fffd 	bl	8004440 <HAL_SPI_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800144c:	f000 faa0 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20004b80 	.word	0x20004b80
 8001458:	40013000 	.word	0x40013000

0800145c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001462:	4a18      	ldr	r2, [pc, #96]	; (80014c4 <MX_SPI2_Init+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001466:	4b16      	ldr	r3, [pc, #88]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001468:	f44f 7282 	mov.w	r2, #260	; 0x104
 800146c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001470:	2200      	movs	r2, #0
 8001472:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001474:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001476:	2200      	movs	r2, #0
 8001478:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800147a:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_SPI2_Init+0x64>)
 800147c:	2200      	movs	r2, #0
 800147e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001480:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001482:	2200      	movs	r2, #0
 8001484:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800148c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001490:	2200      	movs	r2, #0
 8001492:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <MX_SPI2_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800149a:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_SPI2_Init+0x64>)
 800149c:	2200      	movs	r2, #0
 800149e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014a0:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <MX_SPI2_Init+0x64>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_SPI2_Init+0x64>)
 80014a8:	220a      	movs	r2, #10
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <MX_SPI2_Init+0x64>)
 80014ae:	f002 ffc7 	bl	8004440 <HAL_SPI_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80014b8:	f000 fa6a 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014bc:	bf00      	nop
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20004a60 	.word	0x20004a60
 80014c4:	40003800 	.word	0x40003800

080014c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b096      	sub	sp, #88	; 0x58
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ce:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]
 80014f6:	615a      	str	r2, [r3, #20]
 80014f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2220      	movs	r2, #32
 80014fe:	2100      	movs	r1, #0
 8001500:	4618      	mov	r0, r3
 8001502:	f006 fd43 	bl	8007f8c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001506:	4b51      	ldr	r3, [pc, #324]	; (800164c <MX_TIM1_Init+0x184>)
 8001508:	4a51      	ldr	r2, [pc, #324]	; (8001650 <MX_TIM1_Init+0x188>)
 800150a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 800150c:	4b4f      	ldr	r3, [pc, #316]	; (800164c <MX_TIM1_Init+0x184>)
 800150e:	2240      	movs	r2, #64	; 0x40
 8001510:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b4e      	ldr	r3, [pc, #312]	; (800164c <MX_TIM1_Init+0x184>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <MX_TIM1_Init+0x184>)
 800151a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800151e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b4a      	ldr	r3, [pc, #296]	; (800164c <MX_TIM1_Init+0x184>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001526:	4b49      	ldr	r3, [pc, #292]	; (800164c <MX_TIM1_Init+0x184>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800152c:	4b47      	ldr	r3, [pc, #284]	; (800164c <MX_TIM1_Init+0x184>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001532:	4846      	ldr	r0, [pc, #280]	; (800164c <MX_TIM1_Init+0x184>)
 8001534:	f003 fcd8 	bl	8004ee8 <HAL_TIM_Base_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800153e:	f000 fa27 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001542:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001546:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001548:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800154c:	4619      	mov	r1, r3
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <MX_TIM1_Init+0x184>)
 8001550:	f003 ff1c 	bl	800538c <HAL_TIM_ConfigClockSource>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800155a:	f000 fa19 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800155e:	483b      	ldr	r0, [pc, #236]	; (800164c <MX_TIM1_Init+0x184>)
 8001560:	f003 fd11 	bl	8004f86 <HAL_TIM_PWM_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800156a:	f000 fa11 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156e:	2300      	movs	r3, #0
 8001570:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001572:	2300      	movs	r3, #0
 8001574:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800157a:	4619      	mov	r1, r3
 800157c:	4833      	ldr	r0, [pc, #204]	; (800164c <MX_TIM1_Init+0x184>)
 800157e:	f004 fa8b 	bl	8005a98 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001588:	f000 fa02 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158c:	2360      	movs	r3, #96	; 0x60
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001594:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800159a:	2300      	movs	r3, #0
 800159c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4826      	ldr	r0, [pc, #152]	; (800164c <MX_TIM1_Init+0x184>)
 80015b4:	f003 fe24 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80015be:	f000 f9e7 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	2204      	movs	r2, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4820      	ldr	r0, [pc, #128]	; (800164c <MX_TIM1_Init+0x184>)
 80015cc:	f003 fe18 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80015d6:	f000 f9db 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	2208      	movs	r2, #8
 80015e0:	4619      	mov	r1, r3
 80015e2:	481a      	ldr	r0, [pc, #104]	; (800164c <MX_TIM1_Init+0x184>)
 80015e4:	f003 fe0c 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80015ee:	f000 f9cf 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	220c      	movs	r2, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	4814      	ldr	r0, [pc, #80]	; (800164c <MX_TIM1_Init+0x184>)
 80015fc:	f003 fe00 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8001606:	f000 f9c3 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001612:	2300      	movs	r3, #0
 8001614:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001622:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	4619      	mov	r1, r3
 800162c:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM1_Init+0x184>)
 800162e:	f004 faa1 	bl	8005b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001638:	f000 f9aa 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800163c:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM1_Init+0x184>)
 800163e:	f000 faf3 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001642:	bf00      	nop
 8001644:	3758      	adds	r7, #88	; 0x58
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20004b40 	.word	0x20004b40
 8001650:	40010000 	.word	0x40010000

08001654 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <MX_TIM2_Init+0x12c>)
 8001686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800168a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800168c:	4b3c      	ldr	r3, [pc, #240]	; (8001780 <MX_TIM2_Init+0x12c>)
 800168e:	2240      	movs	r2, #64	; 0x40
 8001690:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <MX_TIM2_Init+0x12c>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001698:	4b39      	ldr	r3, [pc, #228]	; (8001780 <MX_TIM2_Init+0x12c>)
 800169a:	f644 6220 	movw	r2, #20000	; 0x4e20
 800169e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <MX_TIM2_Init+0x12c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a6:	4b36      	ldr	r3, [pc, #216]	; (8001780 <MX_TIM2_Init+0x12c>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ac:	4834      	ldr	r0, [pc, #208]	; (8001780 <MX_TIM2_Init+0x12c>)
 80016ae:	f003 fc1b 	bl	8004ee8 <HAL_TIM_Base_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016b8:	f000 f96a 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	4619      	mov	r1, r3
 80016c8:	482d      	ldr	r0, [pc, #180]	; (8001780 <MX_TIM2_Init+0x12c>)
 80016ca:	f003 fe5f 	bl	800538c <HAL_TIM_ConfigClockSource>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016d4:	f000 f95c 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016d8:	4829      	ldr	r0, [pc, #164]	; (8001780 <MX_TIM2_Init+0x12c>)
 80016da:	f003 fc54 	bl	8004f86 <HAL_TIM_PWM_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016e4:	f000 f954 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	4619      	mov	r1, r3
 80016f6:	4822      	ldr	r0, [pc, #136]	; (8001780 <MX_TIM2_Init+0x12c>)
 80016f8:	f004 f9ce 	bl	8005a98 <HAL_TIMEx_MasterConfigSynchronization>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001702:	f000 f945 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001706:	2360      	movs	r3, #96	; 0x60
 8001708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800170a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001710:	2300      	movs	r3, #0
 8001712:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001718:	1d3b      	adds	r3, r7, #4
 800171a:	2200      	movs	r2, #0
 800171c:	4619      	mov	r1, r3
 800171e:	4818      	ldr	r0, [pc, #96]	; (8001780 <MX_TIM2_Init+0x12c>)
 8001720:	f003 fd6e 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800172a:	f000 f931 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172e:	1d3b      	adds	r3, r7, #4
 8001730:	2204      	movs	r2, #4
 8001732:	4619      	mov	r1, r3
 8001734:	4812      	ldr	r0, [pc, #72]	; (8001780 <MX_TIM2_Init+0x12c>)
 8001736:	f003 fd63 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001740:	f000 f926 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001744:	1d3b      	adds	r3, r7, #4
 8001746:	2208      	movs	r2, #8
 8001748:	4619      	mov	r1, r3
 800174a:	480d      	ldr	r0, [pc, #52]	; (8001780 <MX_TIM2_Init+0x12c>)
 800174c:	f003 fd58 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001756:	f000 f91b 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	220c      	movs	r2, #12
 800175e:	4619      	mov	r1, r3
 8001760:	4807      	ldr	r0, [pc, #28]	; (8001780 <MX_TIM2_Init+0x12c>)
 8001762:	f003 fd4d 	bl	8005200 <HAL_TIM_PWM_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x11c>
  {
    Error_Handler();
 800176c:	f000 f910 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001770:	4803      	ldr	r0, [pc, #12]	; (8001780 <MX_TIM2_Init+0x12c>)
 8001772:	f000 fa59 	bl	8001c28 <HAL_TIM_MspPostInit>

}
 8001776:	bf00      	nop
 8001778:	3738      	adds	r7, #56	; 0x38
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20004bd8 	.word	0x20004bd8

08001784 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 800178a:	4a12      	ldr	r2, [pc, #72]	; (80017d4 <MX_USART1_UART_Init+0x50>)
 800178c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800178e:	4b10      	ldr	r3, [pc, #64]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 8001790:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001794:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017a2:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017aa:	220c      	movs	r2, #12
 80017ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017ae:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017ba:	4805      	ldr	r0, [pc, #20]	; (80017d0 <MX_USART1_UART_Init+0x4c>)
 80017bc:	f004 fa40 	bl	8005c40 <HAL_UART_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80017c6:	f000 f8e3 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20004b00 	.word	0x20004b00
 80017d4:	40011000 	.word	0x40011000

080017d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017de:	f107 0314 	add.w	r3, r7, #20
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]
 80017e8:	609a      	str	r2, [r3, #8]
 80017ea:	60da      	str	r2, [r3, #12]
 80017ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b54      	ldr	r3, [pc, #336]	; (8001944 <MX_GPIO_Init+0x16c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a53      	ldr	r2, [pc, #332]	; (8001944 <MX_GPIO_Init+0x16c>)
 80017f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b51      	ldr	r3, [pc, #324]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b4d      	ldr	r3, [pc, #308]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a4c      	ldr	r2, [pc, #304]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b4a      	ldr	r3, [pc, #296]	; (8001944 <MX_GPIO_Init+0x16c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b46      	ldr	r3, [pc, #280]	; (8001944 <MX_GPIO_Init+0x16c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a45      	ldr	r2, [pc, #276]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b43      	ldr	r3, [pc, #268]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b3f      	ldr	r3, [pc, #252]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a3e      	ldr	r2, [pc, #248]	; (8001944 <MX_GPIO_Init+0x16c>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b3c      	ldr	r3, [pc, #240]	; (8001944 <MX_GPIO_Init+0x16c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LPS_CS_GPIO_Port, LPS_CS_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	2110      	movs	r1, #16
 8001862:	4839      	ldr	r0, [pc, #228]	; (8001948 <MX_GPIO_Init+0x170>)
 8001864:	f002 f91c 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_ACC_Pin|CS_GYRO_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	2130      	movs	r1, #48	; 0x30
 800186c:	4837      	ldr	r0, [pc, #220]	; (800194c <MX_GPIO_Init+0x174>)
 800186e:	f002 f917 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 8001872:	2200      	movs	r2, #0
 8001874:	2101      	movs	r1, #1
 8001876:	4836      	ldr	r0, [pc, #216]	; (8001950 <MX_GPIO_Init+0x178>)
 8001878:	f002 f912 	bl	8003aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LPS_CS_Pin */
  GPIO_InitStruct.Pin = LPS_CS_Pin;
 800187c:	2310      	movs	r3, #16
 800187e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001880:	2301      	movs	r3, #1
 8001882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LPS_CS_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4619      	mov	r1, r3
 8001892:	482d      	ldr	r0, [pc, #180]	; (8001948 <MX_GPIO_Init+0x170>)
 8001894:	f001 ff6a 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ACC_Pin CS_GYRO_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|CS_GYRO_Pin;
 8001898:	2330      	movs	r3, #48	; 0x30
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800189c:	2301      	movs	r3, #1
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a4:	2300      	movs	r3, #0
 80018a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	4827      	ldr	r0, [pc, #156]	; (800194c <MX_GPIO_Init+0x174>)
 80018b0:	f001 ff5c 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MAG_Pin */
  GPIO_InitStruct.Pin = CS_MAG_Pin;
 80018b4:	2301      	movs	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b8:	2301      	movs	r3, #1
 80018ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c0:	2300      	movs	r3, #0
 80018c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4619      	mov	r1, r3
 80018ca:	4821      	ldr	r0, [pc, #132]	; (8001950 <MX_GPIO_Init+0x178>)
 80018cc:	f001 ff4e 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_MAG_Pin */
  GPIO_InitStruct.Pin = DRDY_MAG_Pin;
 80018d0:	2302      	movs	r3, #2
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_MAG_GPIO_Port, &GPIO_InitStruct);
 80018dc:	f107 0314 	add.w	r3, r7, #20
 80018e0:	4619      	mov	r1, r3
 80018e2:	481b      	ldr	r0, [pc, #108]	; (8001950 <MX_GPIO_Init+0x178>)
 80018e4:	f001 ff42 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_IN_1_Pin PWM_IN_2_Pin PWM_IN_3_Pin PWM_IN_4_Pin */
  GPIO_InitStruct.Pin = PWM_IN_1_Pin|PWM_IN_2_Pin|PWM_IN_3_Pin|PWM_IN_4_Pin;
 80018e8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80018ee:	4b19      	ldr	r3, [pc, #100]	; (8001954 <MX_GPIO_Init+0x17c>)
 80018f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4814      	ldr	r0, [pc, #80]	; (8001950 <MX_GPIO_Init+0x178>)
 80018fe:	f001 ff35 	bl	800376c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_IN_5_Pin PWM_IN_6_Pin */
  GPIO_InitStruct.Pin = PWM_IN_5_Pin|PWM_IN_6_Pin;
 8001902:	23c0      	movs	r3, #192	; 0xc0
 8001904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <MX_GPIO_Init+0x17c>)
 8001908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_GPIO_Init+0x174>)
 8001916:	f001 ff29 	bl	800376c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800191a:	2200      	movs	r2, #0
 800191c:	2105      	movs	r1, #5
 800191e:	2017      	movs	r0, #23
 8001920:	f001 feda 	bl	80036d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001924:	2017      	movs	r0, #23
 8001926:	f001 fef3 	bl	8003710 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2105      	movs	r1, #5
 800192e:	2028      	movs	r0, #40	; 0x28
 8001930:	f001 fed2 	bl	80036d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001934:	2028      	movs	r0, #40	; 0x28
 8001936:	f001 feeb 	bl	8003710 <HAL_NVIC_EnableIRQ>

}
 800193a:	bf00      	nop
 800193c:	3728      	adds	r7, #40	; 0x28
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40020000 	.word	0x40020000
 800194c:	40020800 	.word	0x40020800
 8001950:	40020400 	.word	0x40020400
 8001954:	10310000 	.word	0x10310000

08001958 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      PosCalcDispPos();
 8001960:	f001 f85a 	bl	8002a18 <PosCalcDispPos>
      //RadioProcess();
      osDelay(10);
 8001964:	200a      	movs	r0, #10
 8001966:	f004 fe82 	bl	800666e <osDelay>
      PosCalcDispPos();
 800196a:	e7f9      	b.n	8001960 <StartDefaultTask+0x8>

0800196c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d101      	bne.n	8001982 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800197e:	f001 fb71 	bl	8003064 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40000400 	.word	0x40000400

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001994:	bf00      	nop
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_MspInit+0x54>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a11      	ldr	r2, [pc, #68]	; (80019f4 <HAL_MspInit+0x54>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_MspInit+0x54>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_MspInit+0x54>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_MspInit+0x54>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_MspInit+0x54>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	210f      	movs	r1, #15
 80019e2:	f06f 0001 	mvn.w	r0, #1
 80019e6:	f001 fe77 	bl	80036d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800

080019f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08a      	sub	sp, #40	; 0x28
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a17      	ldr	r2, [pc, #92]	; (8001a74 <HAL_ADC_MspInit+0x7c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d127      	bne.n	8001a6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	613b      	str	r3, [r7, #16]
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <HAL_ADC_MspInit+0x80>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a15      	ldr	r2, [pc, #84]	; (8001a78 <HAL_ADC_MspInit+0x80>)
 8001a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <HAL_ADC_MspInit+0x80>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a32:	613b      	str	r3, [r7, #16]
 8001a34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <HAL_ADC_MspInit+0x80>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <HAL_ADC_MspInit+0x80>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_ADC_MspInit+0x80>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = VCC_ADC_Pin;
 8001a52:	2302      	movs	r3, #2
 8001a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a56:	2303      	movs	r3, #3
 8001a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_ADC_GPIO_Port, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <HAL_ADC_MspInit+0x84>)
 8001a66:	f001 fe81 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40012000 	.word	0x40012000
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	40020800 	.word	0x40020800

08001a80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08c      	sub	sp, #48	; 0x30
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a41      	ldr	r2, [pc, #260]	; (8001ba4 <HAL_SPI_MspInit+0x124>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d12c      	bne.n	8001afc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61bb      	str	r3, [r7, #24]
 8001aa6:	4b40      	ldr	r3, [pc, #256]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a3f      	ldr	r2, [pc, #252]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001aac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b3d      	ldr	r3, [pc, #244]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aba:	61bb      	str	r3, [r7, #24]
 8001abc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	4b39      	ldr	r3, [pc, #228]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a38      	ldr	r2, [pc, #224]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b36      	ldr	r3, [pc, #216]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI_BMX_SCK_Pin|SPI_BMX_MISO_Pin|SPI_BMX_MOSI_Pin;
 8001ada:	23e0      	movs	r3, #224	; 0xe0
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001aea:	2305      	movs	r3, #5
 8001aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	482d      	ldr	r0, [pc, #180]	; (8001bac <HAL_SPI_MspInit+0x12c>)
 8001af6:	f001 fe39 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001afa:	e04f      	b.n	8001b9c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a2b      	ldr	r2, [pc, #172]	; (8001bb0 <HAL_SPI_MspInit+0x130>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d14a      	bne.n	8001b9c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	613b      	str	r3, [r7, #16]
 8001b0a:	4b27      	ldr	r3, [pc, #156]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0e:	4a26      	ldr	r2, [pc, #152]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b14:	6413      	str	r3, [r2, #64]	; 0x40
 8001b16:	4b24      	ldr	r3, [pc, #144]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b1e:	613b      	str	r3, [r7, #16]
 8001b20:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	60fb      	str	r3, [r7, #12]
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a18      	ldr	r2, [pc, #96]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_SPI_MspInit+0x128>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI_LPS_MISO_Pin|SPI_LPS_MOSI_Pin;
 8001b5a:	230c      	movs	r3, #12
 8001b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	480f      	ldr	r0, [pc, #60]	; (8001bb4 <HAL_SPI_MspInit+0x134>)
 8001b76:	f001 fdf9 	bl	800376c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_LPS_SCK_Pin;
 8001b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b80:	2302      	movs	r3, #2
 8001b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b8c:	2305      	movs	r3, #5
 8001b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI_LPS_SCK_GPIO_Port, &GPIO_InitStruct);
 8001b90:	f107 031c 	add.w	r3, r7, #28
 8001b94:	4619      	mov	r1, r3
 8001b96:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <HAL_SPI_MspInit+0x138>)
 8001b98:	f001 fde8 	bl	800376c <HAL_GPIO_Init>
}
 8001b9c:	bf00      	nop
 8001b9e:	3730      	adds	r7, #48	; 0x30
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	40013000 	.word	0x40013000
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40020000 	.word	0x40020000
 8001bb0:	40003800 	.word	0x40003800
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020400 	.word	0x40020400

08001bbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_TIM_Base_MspInit+0x64>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d10e      	bne.n	8001bec <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60fb      	str	r3, [r7, #12]
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_TIM_Base_MspInit+0x68>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a13      	ldr	r2, [pc, #76]	; (8001c24 <HAL_TIM_Base_MspInit+0x68>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_TIM_Base_MspInit+0x68>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001bea:	e012      	b.n	8001c12 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d10d      	bne.n	8001c12 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_TIM_Base_MspInit+0x68>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <HAL_TIM_Base_MspInit+0x68>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6413      	str	r3, [r2, #64]	; 0x40
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_TIM_Base_MspInit+0x68>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	68bb      	ldr	r3, [r7, #8]
}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	40010000 	.word	0x40010000
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <HAL_TIM_MspPostInit+0xb4>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d11f      	bne.n	8001c8a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_TIM_MspPostInit+0xb8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_TIM_MspPostInit+0xb8>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_TIM_MspPostInit+0xb8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = PWM_ESC_1_Pin|PWM_ESC_2_Pin|PWM_ESC_3_Pin|PWM_ESC_4_Pin;
 8001c66:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <HAL_TIM_MspPostInit+0xbc>)
 8001c84:	f001 fd72 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c88:	e023      	b.n	8001cd2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c92:	d11e      	bne.n	8001cd2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <HAL_TIM_MspPostInit+0xb8>)
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	4a10      	ldr	r2, [pc, #64]	; (8001ce0 <HAL_TIM_MspPostInit+0xb8>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ca4:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <HAL_TIM_MspPostInit+0xb8>)
 8001ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca8:	f003 0301 	and.w	r3, r3, #1
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_ESC_6_Pin|PWM_ESC_7_Pin|PWM_ESC_8_Pin|PWM_ESC_5_Pin;
 8001cb0:	f248 030e 	movw	r3, #32782	; 0x800e
 8001cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 0314 	add.w	r3, r7, #20
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <HAL_TIM_MspPostInit+0xbc>)
 8001cce:	f001 fd4d 	bl	800376c <HAL_GPIO_Init>
}
 8001cd2:	bf00      	nop
 8001cd4:	3728      	adds	r7, #40	; 0x28
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40020000 	.word	0x40020000

08001ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf0:	f107 0314 	add.w	r3, r7, #20
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
 8001cfa:	609a      	str	r2, [r3, #8]
 8001cfc:	60da      	str	r2, [r3, #12]
 8001cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_UART_MspInit+0x84>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d12b      	bne.n	8001d62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	613b      	str	r3, [r7, #16]
 8001d0e:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d12:	4a17      	ldr	r2, [pc, #92]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d14:	f043 0310 	orr.w	r3, r3, #16
 8001d18:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	613b      	str	r3, [r7, #16]
 8001d24:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b11      	ldr	r3, [pc, #68]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	4a10      	ldr	r2, [pc, #64]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6313      	str	r3, [r2, #48]	; 0x30
 8001d36:	4b0e      	ldr	r3, [pc, #56]	; (8001d70 <HAL_UART_MspInit+0x88>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d42:	23c0      	movs	r3, #192	; 0xc0
 8001d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d52:	2307      	movs	r3, #7
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <HAL_UART_MspInit+0x8c>)
 8001d5e:	f001 fd05 	bl	800376c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d62:	bf00      	nop
 8001d64:	3728      	adds	r7, #40	; 0x28
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40020400 	.word	0x40020400

08001d78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08c      	sub	sp, #48	; 0x30
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8001d88:	2200      	movs	r2, #0
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	201d      	movs	r0, #29
 8001d8e:	f001 fca3 	bl	80036d8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001d92:	201d      	movs	r0, #29
 8001d94:	f001 fcbc 	bl	8003710 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	4b1f      	ldr	r3, [pc, #124]	; (8001e1c <HAL_InitTick+0xa4>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	4a1e      	ldr	r2, [pc, #120]	; (8001e1c <HAL_InitTick+0xa4>)
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	6413      	str	r3, [r2, #64]	; 0x40
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <HAL_InitTick+0xa4>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001db4:	f107 0210 	add.w	r2, r7, #16
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4611      	mov	r1, r2
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f002 fb0c 	bl	80043dc <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001dc4:	f002 fae2 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dd0:	4a13      	ldr	r2, [pc, #76]	; (8001e20 <HAL_InitTick+0xa8>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	0c9b      	lsrs	r3, r3, #18
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <HAL_InitTick+0xac>)
 8001dde:	4a12      	ldr	r2, [pc, #72]	; (8001e28 <HAL_InitTick+0xb0>)
 8001de0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001de2:	4b10      	ldr	r3, [pc, #64]	; (8001e24 <HAL_InitTick+0xac>)
 8001de4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001de8:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001dea:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_InitTick+0xac>)
 8001dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dee:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <HAL_InitTick+0xac>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df6:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <HAL_InitTick+0xac>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001dfc:	4809      	ldr	r0, [pc, #36]	; (8001e24 <HAL_InitTick+0xac>)
 8001dfe:	f003 f873 	bl	8004ee8 <HAL_TIM_Base_Init>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d104      	bne.n	8001e12 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001e08:	4806      	ldr	r0, [pc, #24]	; (8001e24 <HAL_InitTick+0xac>)
 8001e0a:	f003 f898 	bl	8004f3e <HAL_TIM_Base_Start_IT>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	e000      	b.n	8001e14 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3730      	adds	r7, #48	; 0x30
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	431bde83 	.word	0x431bde83
 8001e24:	20004c18 	.word	0x20004c18
 8001e28:	40000400 	.word	0x40000400

08001e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e3e:	e7fe      	b.n	8001e3e <HardFault_Handler+0x4>

08001e40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e44:	e7fe      	b.n	8001e44 <MemManage_Handler+0x4>

08001e46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e46:	b480      	push	{r7}
 8001e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e4a:	e7fe      	b.n	8001e4a <BusFault_Handler+0x4>

08001e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <UsageFault_Handler+0x4>

08001e52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e56:	bf00      	nop
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001e64:	2040      	movs	r0, #64	; 0x40
 8001e66:	f001 fe35 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001e6a:	2080      	movs	r0, #128	; 0x80
 8001e6c:	f001 fe32 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001e70:	bf00      	nop
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <TIM3_IRQHandler+0x10>)
 8001e7a:	f003 f8b9 	bl	8004ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20004c18 	.word	0x20004c18

08001e88 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
    EXTI_HandleTypeDef hexti;
    hexti.Line = EXTI_LINE_12;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <EXTI15_10_IRQHandler+0x88>)
 8001e90:	613b      	str	r3, [r7, #16]
    uint32_t data[4];
    data[0] = HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING);
 8001e92:	f107 0310 	add.w	r3, r7, #16
 8001e96:	2103      	movs	r1, #3
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f001 fc47 	bl	800372c <HAL_EXTI_GetPending>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	603b      	str	r3, [r7, #0]
    hexti.Line = EXTI_LINE_13;
 8001ea2:	4b1c      	ldr	r3, [pc, #112]	; (8001f14 <EXTI15_10_IRQHandler+0x8c>)
 8001ea4:	613b      	str	r3, [r7, #16]
    data[1] = HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING);
 8001ea6:	f107 0310 	add.w	r3, r7, #16
 8001eaa:	2103      	movs	r1, #3
 8001eac:	4618      	mov	r0, r3
 8001eae:	f001 fc3d 	bl	800372c <HAL_EXTI_GetPending>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	607b      	str	r3, [r7, #4]
    hexti.Line = EXTI_LINE_14;
 8001eb6:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <EXTI15_10_IRQHandler+0x90>)
 8001eb8:	613b      	str	r3, [r7, #16]
    data[2] = HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING);
 8001eba:	f107 0310 	add.w	r3, r7, #16
 8001ebe:	2103      	movs	r1, #3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f001 fc33 	bl	800372c <HAL_EXTI_GetPending>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	60bb      	str	r3, [r7, #8]
    hexti.Line = EXTI_LINE_15;
 8001eca:	4b14      	ldr	r3, [pc, #80]	; (8001f1c <EXTI15_10_IRQHandler+0x94>)
 8001ecc:	613b      	str	r3, [r7, #16]
    data[3] = HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING);
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	2103      	movs	r1, #3
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f001 fc29 	bl	800372c <HAL_EXTI_GetPending>
 8001eda:	4603      	mov	r3, r0
 8001edc:	60fb      	str	r3, [r7, #12]

    RadioIrq(data);
 8001ede:	463b      	mov	r3, r7
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fccb 	bl	800287c <RadioIrq>
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001ee6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001eea:	f001 fdf3 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001eee:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ef2:	f001 fdef 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001ef6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001efa:	f001 fdeb 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001efe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001f02:	f001 fde7 	bl	8003ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	3718      	adds	r7, #24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	0600000c 	.word	0x0600000c
 8001f14:	0600000d 	.word	0x0600000d
 8001f18:	0600000e 	.word	0x0600000e
 8001f1c:	0600000f 	.word	0x0600000f

08001f20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x50>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x16>
		heap_end = &end;
 8001f30:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <_sbrk+0x50>)
 8001f32:	4a10      	ldr	r2, [pc, #64]	; (8001f74 <_sbrk+0x54>)
 8001f34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f36:	4b0e      	ldr	r3, [pc, #56]	; (8001f70 <_sbrk+0x50>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <_sbrk+0x50>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	466a      	mov	r2, sp
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d907      	bls.n	8001f5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f4a:	f005 fd49 	bl	80079e0 <__errno>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	230c      	movs	r3, #12
 8001f52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	e006      	b.n	8001f68 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f5a:	4b05      	ldr	r3, [pc, #20]	; (8001f70 <_sbrk+0x50>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a03      	ldr	r2, [pc, #12]	; (8001f70 <_sbrk+0x50>)
 8001f64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	20000c88 	.word	0x20000c88
 8001f74:	20004ca8 	.word	0x20004ca8

08001f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <SystemInit+0x28>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a07      	ldr	r2, [pc, #28]	; (8001fa0 <SystemInit+0x28>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <SystemInit+0x28>)
 8001f8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f92:	609a      	str	r2, [r3, #8]
#endif
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fdc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
;  movs  r1, #0
 8001fa8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001faa:	e003      	b.n	8001fb4 <LoopCopyDataInit>

08001fac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fb2:	3104      	adds	r1, #4

08001fb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fb4:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fbc:	d3f6      	bcc.n	8001fac <CopyDataInit>
  ldr  r2, =_sbss
 8001fbe:	4a0b      	ldr	r2, [pc, #44]	; (8001fec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fc0:	e002      	b.n	8001fc8 <LoopFillZerobss>

08001fc2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fc2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fc4:	f842 3b04 	str.w	r3, [r2], #4

08001fc8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fc8:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fcc:	d3f9      	bcc.n	8001fc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fce:	f7ff ffd3 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fd2:	f005 fd0b 	bl	80079ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fd6:	f7ff f8f1 	bl	80011bc <main>
  bx  lr    
 8001fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fdc:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001fe0:	0800c2ac 	.word	0x0800c2ac
  ldr  r0, =_sdata
 8001fe4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fe8:	20000a18 	.word	0x20000a18
  ldr  r2, =_sbss
 8001fec:	20000a18 	.word	0x20000a18
  ldr  r3, = _ebss
 8001ff0:	20004ca4 	.word	0x20004ca4

08001ff4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ff4:	e7fe      	b.n	8001ff4 <ADC_IRQHandler>
	...

08001ff8 <Bmx055Init>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool Bmx055Init(SPI_HandleTypeDef *HSPI)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b088      	sub	sp, #32
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    hspi = HSPI;
 8002000:	4a4e      	ldr	r2, [pc, #312]	; (800213c <Bmx055Init+0x144>)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(CS_ACC_GPIO_Port,CS_ACC_Pin,1);
 8002006:	2201      	movs	r2, #1
 8002008:	2110      	movs	r1, #16
 800200a:	484d      	ldr	r0, [pc, #308]	; (8002140 <Bmx055Init+0x148>)
 800200c:	f001 fd48 	bl	8003aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GYRO_GPIO_Port,CS_GYRO_Pin,1);
 8002010:	2201      	movs	r2, #1
 8002012:	2120      	movs	r1, #32
 8002014:	484a      	ldr	r0, [pc, #296]	; (8002140 <Bmx055Init+0x148>)
 8002016:	f001 fd43 	bl	8003aa0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_MAG_GPIO_Port,CS_MAG_Pin,1);
 800201a:	2201      	movs	r2, #1
 800201c:	2101      	movs	r1, #1
 800201e:	4849      	ldr	r0, [pc, #292]	; (8002144 <Bmx055Init+0x14c>)
 8002020:	f001 fd3e 	bl	8003aa0 <HAL_GPIO_WritePin>

    if(!CheckConnection())
 8002024:	f000 fbd6 	bl	80027d4 <CheckConnection>
 8002028:	4603      	mov	r3, r0
 800202a:	f083 0301 	eor.w	r3, r3, #1
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <Bmx055Init+0x40>
    {
        return false;
 8002034:	2300      	movs	r3, #0
 8002036:	e07d      	b.n	8002134 <Bmx055Init+0x13c>
    }

    /**SETUP ACC **/
    if(!WriteAddress(ACC, ACC_ACCD_HBW, ACC_ACCD_HBW_FILTER_DISABLE_BIT))
 8002038:	2280      	movs	r2, #128	; 0x80
 800203a:	2113      	movs	r1, #19
 800203c:	2000      	movs	r0, #0
 800203e:	f000 fa77 	bl	8002530 <WriteAddress>
 8002042:	4603      	mov	r3, r0
 8002044:	f083 0301 	eor.w	r3, r3, #1
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <Bmx055Init+0x5a>
    {
        return false;
 800204e:	2300      	movs	r3, #0
 8002050:	e070      	b.n	8002134 <Bmx055Init+0x13c>
    }

    if(!WriteAddress(ACC, ACC_OFC_SETTING, ACC_OFC_SETTING_OFFSET_TARGET_Z_PLUS_1G |
 8002052:	2220      	movs	r2, #32
 8002054:	2137      	movs	r1, #55	; 0x37
 8002056:	2000      	movs	r0, #0
 8002058:	f000 fa6a 	bl	8002530 <WriteAddress>
 800205c:	4603      	mov	r3, r0
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	b2db      	uxtb	r3, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <Bmx055Init+0x74>
                                           ACC_OFC_SETTING_OFFSET_TARGET_Y_0G |
                                           ACC_OFC_SETTING_OFFSET_TARGET_X_0G))
    {
        return false;
 8002068:	2300      	movs	r3, #0
 800206a:	e063      	b.n	8002134 <Bmx055Init+0x13c>
    }

    if(!SetAccRange(ACC_PMU_DEFAULT_RANGE))
 800206c:	2008      	movs	r0, #8
 800206e:	f000 fb69 	bl	8002744 <SetAccRange>
 8002072:	4603      	mov	r3, r0
 8002074:	f083 0301 	eor.w	r3, r3, #1
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <Bmx055Init+0x8a>
    {
        return false;
 800207e:	2300      	movs	r3, #0
 8002080:	e058      	b.n	8002134 <Bmx055Init+0x13c>
    }

    /**SETUP GYRO**/
    if(!WriteAddress(GYRO, GYRO_HBW, GYRO_HBW_FILTER_DISABLE_BIT))
 8002082:	2280      	movs	r2, #128	; 0x80
 8002084:	2113      	movs	r1, #19
 8002086:	2001      	movs	r0, #1
 8002088:	f000 fa52 	bl	8002530 <WriteAddress>
 800208c:	4603      	mov	r3, r0
 800208e:	f083 0301 	eor.w	r3, r3, #1
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <Bmx055Init+0xa4>
    {
        return false;
 8002098:	2300      	movs	r3, #0
 800209a:	e04b      	b.n	8002134 <Bmx055Init+0x13c>
    }

    /** SETUP MAG **/

    if(!WriteAddress(MAG, MAG_OPMODE, MAG_OPMODE_DATARATE_30HZ |
 800209c:	2238      	movs	r2, #56	; 0x38
 800209e:	214c      	movs	r1, #76	; 0x4c
 80020a0:	2002      	movs	r0, #2
 80020a2:	f000 fa45 	bl	8002530 <WriteAddress>
 80020a6:	4603      	mov	r3, r0
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <Bmx055Init+0xbe>
                                      MAG_OPMODE_NORMAL))
    {
        return false;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e03e      	b.n	8002134 <Bmx055Init+0x13c>
    }

    if(!WriteAddress(MAG, MAG_ITR_AX_EN, MAG_ITR_AX_EN_DRDY_PIN_EN |
 80020b6:	2284      	movs	r2, #132	; 0x84
 80020b8:	214e      	movs	r1, #78	; 0x4e
 80020ba:	2002      	movs	r0, #2
 80020bc:	f000 fa38 	bl	8002530 <WriteAddress>
 80020c0:	4603      	mov	r3, r0
 80020c2:	f083 0301 	eor.w	r3, r3, #1
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <Bmx055Init+0xd8>
                                         MAG_ITR_AX_EN_DRDY_POLARITY))
    {
        return false;
 80020cc:	2300      	movs	r3, #0
 80020ce:	e031      	b.n	8002134 <Bmx055Init+0x13c>
    }

    if(!WriteAddress(MAG, MAG_REP_XY, 0x10U))   ///< max repetitions 1+2*0xFF = 511
 80020d0:	2210      	movs	r2, #16
 80020d2:	2151      	movs	r1, #81	; 0x51
 80020d4:	2002      	movs	r0, #2
 80020d6:	f000 fa2b 	bl	8002530 <WriteAddress>
 80020da:	4603      	mov	r3, r0
 80020dc:	f083 0301 	eor.w	r3, r3, #1
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <Bmx055Init+0xf2>
    {
        return false;
 80020e6:	2300      	movs	r3, #0
 80020e8:	e024      	b.n	8002134 <Bmx055Init+0x13c>
    }

    if(!WriteAddress(MAG, MAG_REP_Z, 0x10U))    ///< max repetitions 1+0xFF = 256
 80020ea:	2210      	movs	r2, #16
 80020ec:	2152      	movs	r1, #82	; 0x52
 80020ee:	2002      	movs	r0, #2
 80020f0:	f000 fa1e 	bl	8002530 <WriteAddress>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f083 0301 	eor.w	r3, r3, #1
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <Bmx055Init+0x10c>
    {
        return false;
 8002100:	2300      	movs	r3, #0
 8002102:	e017      	b.n	8002134 <Bmx055Init+0x13c>
    }


    uint8_t data[19];
    for(uint8_t address=0x40,i=0; address<0x53; address++,i++)
 8002104:	2340      	movs	r3, #64	; 0x40
 8002106:	77fb      	strb	r3, [r7, #31]
 8002108:	2300      	movs	r3, #0
 800210a:	77bb      	strb	r3, [r7, #30]
 800210c:	e00e      	b.n	800212c <Bmx055Init+0x134>
    {
        ReadAddress(MAG, address, &data[i]);
 800210e:	7fbb      	ldrb	r3, [r7, #30]
 8002110:	f107 0208 	add.w	r2, r7, #8
 8002114:	441a      	add	r2, r3
 8002116:	7ffb      	ldrb	r3, [r7, #31]
 8002118:	4619      	mov	r1, r3
 800211a:	2002      	movs	r0, #2
 800211c:	f000 f98c 	bl	8002438 <ReadAddress>
    for(uint8_t address=0x40,i=0; address<0x53; address++,i++)
 8002120:	7ffb      	ldrb	r3, [r7, #31]
 8002122:	3301      	adds	r3, #1
 8002124:	77fb      	strb	r3, [r7, #31]
 8002126:	7fbb      	ldrb	r3, [r7, #30]
 8002128:	3301      	adds	r3, #1
 800212a:	77bb      	strb	r3, [r7, #30]
 800212c:	7ffb      	ldrb	r3, [r7, #31]
 800212e:	2b52      	cmp	r3, #82	; 0x52
 8002130:	d9ed      	bls.n	800210e <Bmx055Init+0x116>
    }

    return true;
 8002132:	2301      	movs	r3, #1
}
 8002134:	4618      	mov	r0, r3
 8002136:	3720      	adds	r7, #32
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20004c58 	.word	0x20004c58
 8002140:	40020800 	.word	0x40020800
 8002144:	40020400 	.word	0x40020400

08002148 <Bmx055GetData>:

bool Bmx055GetData(bmx055Data_t* data)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
    static uint8_t accRaw[6];  ///< x, y, z: lsb, msb = 3*2=6 bytes

    if(!ReadBurst(ACC, ACC_ACCD_X_LSB, accRaw, 6))
 8002150:	2306      	movs	r3, #6
 8002152:	4aac      	ldr	r2, [pc, #688]	; (8002404 <Bmx055GetData+0x2bc>)
 8002154:	2102      	movs	r1, #2
 8002156:	2000      	movs	r0, #0
 8002158:	f000 fa68 	bl	800262c <ReadBurst>
 800215c:	4603      	mov	r3, r0
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <Bmx055GetData+0x24>
    {
        return false;
 8002168:	2300      	movs	r3, #0
 800216a:	e146      	b.n	80023fa <Bmx055GetData+0x2b2>
    }

    /**combine bits together**/
    int16_t axRaw = ((int16_t) accRaw[1])<<4 | ((int16_t) accRaw[0])>>4;
 800216c:	4ba5      	ldr	r3, [pc, #660]	; (8002404 <Bmx055GetData+0x2bc>)
 800216e:	785b      	ldrb	r3, [r3, #1]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	b21a      	sxth	r2, r3
 8002174:	4ba3      	ldr	r3, [pc, #652]	; (8002404 <Bmx055GetData+0x2bc>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	b2db      	uxtb	r3, r3
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	82fb      	strh	r3, [r7, #22]
    int16_t ayRaw = ((int16_t) accRaw[3])<<4 | ((int16_t) accRaw[2])>>4;
 8002182:	4ba0      	ldr	r3, [pc, #640]	; (8002404 <Bmx055GetData+0x2bc>)
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b9e      	ldr	r3, [pc, #632]	; (8002404 <Bmx055GetData+0x2bc>)
 800218c:	789b      	ldrb	r3, [r3, #2]
 800218e:	091b      	lsrs	r3, r3, #4
 8002190:	b2db      	uxtb	r3, r3
 8002192:	b21b      	sxth	r3, r3
 8002194:	4313      	orrs	r3, r2
 8002196:	82bb      	strh	r3, [r7, #20]
    int16_t azRaw = ((int16_t) accRaw[5])<<4 | ((int16_t) accRaw[4])>>4;
 8002198:	4b9a      	ldr	r3, [pc, #616]	; (8002404 <Bmx055GetData+0x2bc>)
 800219a:	795b      	ldrb	r3, [r3, #5]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	b21a      	sxth	r2, r3
 80021a0:	4b98      	ldr	r3, [pc, #608]	; (8002404 <Bmx055GetData+0x2bc>)
 80021a2:	791b      	ldrb	r3, [r3, #4]
 80021a4:	091b      	lsrs	r3, r3, #4
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	b21b      	sxth	r3, r3
 80021aa:	4313      	orrs	r3, r2
 80021ac:	827b      	strh	r3, [r7, #18]
    data->ax = (float)((axRaw&0x7ff)-(axRaw&0x800))*accResolution;
 80021ae:	8afb      	ldrh	r3, [r7, #22]
 80021b0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021b4:	8afb      	ldrh	r3, [r7, #22]
 80021b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	ee07 3a90 	vmov	s15, r3
 80021c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c4:	4b90      	ldr	r3, [pc, #576]	; (8002408 <Bmx055GetData+0x2c0>)
 80021c6:	edd3 7a00 	vldr	s15, [r3]
 80021ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	edc3 7a00 	vstr	s15, [r3]
    data->ay = (float)((ayRaw&0x7ff)-(ayRaw&0x800))*accResolution;
 80021d4:	8abb      	ldrh	r3, [r7, #20]
 80021d6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021da:	8abb      	ldrh	r3, [r7, #20]
 80021dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ea:	4b87      	ldr	r3, [pc, #540]	; (8002408 <Bmx055GetData+0x2c0>)
 80021ec:	edd3 7a00 	vldr	s15, [r3]
 80021f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	edc3 7a01 	vstr	s15, [r3, #4]
    data->az = (float)((azRaw&0x7ff)-(azRaw&0x800))*accResolution;
 80021fa:	8a7b      	ldrh	r3, [r7, #18]
 80021fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002200:	8a7b      	ldrh	r3, [r7, #18]
 8002202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	ee07 3a90 	vmov	s15, r3
 800220c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002210:	4b7d      	ldr	r3, [pc, #500]	; (8002408 <Bmx055GetData+0x2c0>)
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	edc3 7a02 	vstr	s15, [r3, #8]

    static uint8_t gyroRaw[6]; ///< x, y, z: lsb, msb = 3*2=6 bytes

    if(!ReadBurst(GYRO, GYRO_RATE_X_LSB, gyroRaw, 6))
 8002220:	2306      	movs	r3, #6
 8002222:	4a7a      	ldr	r2, [pc, #488]	; (800240c <Bmx055GetData+0x2c4>)
 8002224:	2101      	movs	r1, #1
 8002226:	2001      	movs	r0, #1
 8002228:	f000 fa00 	bl	800262c <ReadBurst>
 800222c:	4603      	mov	r3, r0
 800222e:	f083 0301 	eor.w	r3, r3, #1
 8002232:	b2db      	uxtb	r3, r3
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <Bmx055GetData+0xf4>
    {
        return false;
 8002238:	2300      	movs	r3, #0
 800223a:	e0de      	b.n	80023fa <Bmx055GetData+0x2b2>
    }
    /**combine bits together**/
    data->gx = (float)((int16_t)(((int16_t) gyroRaw[0])<<8 | ((int16_t) gyroRaw[1])))*gyroResolution;
 800223c:	4b73      	ldr	r3, [pc, #460]	; (800240c <Bmx055GetData+0x2c4>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	b21a      	sxth	r2, r3
 8002244:	4b71      	ldr	r3, [pc, #452]	; (800240c <Bmx055GetData+0x2c4>)
 8002246:	785b      	ldrb	r3, [r3, #1]
 8002248:	b21b      	sxth	r3, r3
 800224a:	4313      	orrs	r3, r2
 800224c:	b21b      	sxth	r3, r3
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002256:	4b6e      	ldr	r3, [pc, #440]	; (8002410 <Bmx055GetData+0x2c8>)
 8002258:	edd3 7a00 	vldr	s15, [r3]
 800225c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gy = (float)((int16_t)(((int16_t) gyroRaw[2])<<8 | ((int16_t) gyroRaw[3])))*gyroResolution;
 8002266:	4b69      	ldr	r3, [pc, #420]	; (800240c <Bmx055GetData+0x2c4>)
 8002268:	789b      	ldrb	r3, [r3, #2]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	4b67      	ldr	r3, [pc, #412]	; (800240c <Bmx055GetData+0x2c4>)
 8002270:	78db      	ldrb	r3, [r3, #3]
 8002272:	b21b      	sxth	r3, r3
 8002274:	4313      	orrs	r3, r2
 8002276:	b21b      	sxth	r3, r3
 8002278:	ee07 3a90 	vmov	s15, r3
 800227c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002280:	4b63      	ldr	r3, [pc, #396]	; (8002410 <Bmx055GetData+0x2c8>)
 8002282:	edd3 7a00 	vldr	s15, [r3]
 8002286:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gz = (float)((int16_t)(((int16_t) gyroRaw[4])<<8 | ((int16_t) gyroRaw[5])))*gyroResolution;
 8002290:	4b5e      	ldr	r3, [pc, #376]	; (800240c <Bmx055GetData+0x2c4>)
 8002292:	791b      	ldrb	r3, [r3, #4]
 8002294:	021b      	lsls	r3, r3, #8
 8002296:	b21a      	sxth	r2, r3
 8002298:	4b5c      	ldr	r3, [pc, #368]	; (800240c <Bmx055GetData+0x2c4>)
 800229a:	795b      	ldrb	r3, [r3, #5]
 800229c:	b21b      	sxth	r3, r3
 800229e:	4313      	orrs	r3, r2
 80022a0:	b21b      	sxth	r3, r3
 80022a2:	ee07 3a90 	vmov	s15, r3
 80022a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022aa:	4b59      	ldr	r3, [pc, #356]	; (8002410 <Bmx055GetData+0x2c8>)
 80022ac:	edd3 7a00 	vldr	s15, [r3]
 80022b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	edc3 7a05 	vstr	s15, [r3, #20]

    //UartWrite("%f\t%f\t%f\r\n",data->gx,data->gy,data->gz);

    static uint8_t magRaw[6]; ///< x, y, z: lsb, msb = 3*2=6 bytes

    if(HAL_GPIO_ReadPin(DRDY_MAG_GPIO_Port,DRDY_MAG_Pin))
 80022ba:	2102      	movs	r1, #2
 80022bc:	4855      	ldr	r0, [pc, #340]	; (8002414 <Bmx055GetData+0x2cc>)
 80022be:	f001 fbd7 	bl	8003a70 <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d00d      	beq.n	80022e4 <Bmx055GetData+0x19c>
    {
        if(!ReadBurst(MAG, MAG_DATA_X_LSB, magRaw, 6))
 80022c8:	2306      	movs	r3, #6
 80022ca:	4a53      	ldr	r2, [pc, #332]	; (8002418 <Bmx055GetData+0x2d0>)
 80022cc:	2142      	movs	r1, #66	; 0x42
 80022ce:	2002      	movs	r0, #2
 80022d0:	f000 f9ac 	bl	800262c <ReadBurst>
 80022d4:	4603      	mov	r3, r0
 80022d6:	f083 0301 	eor.w	r3, r3, #1
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <Bmx055GetData+0x19c>
        {
            return false;
 80022e0:	2300      	movs	r3, #0
 80022e2:	e08a      	b.n	80023fa <Bmx055GetData+0x2b2>
        }
    }

    /**combine bits together**/
    int16_t mxRaw = (((int16_t) magRaw[1])<<(8-MAG_DATA_X_LSB_DATAX_LSB_POS) | ((int16_t) magRaw[0])>>MAG_DATA_X_LSB_DATAX_LSB_POS);
 80022e4:	4b4c      	ldr	r3, [pc, #304]	; (8002418 <Bmx055GetData+0x2d0>)
 80022e6:	785b      	ldrb	r3, [r3, #1]
 80022e8:	015b      	lsls	r3, r3, #5
 80022ea:	b21a      	sxth	r2, r3
 80022ec:	4b4a      	ldr	r3, [pc, #296]	; (8002418 <Bmx055GetData+0x2d0>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	4313      	orrs	r3, r2
 80022f8:	823b      	strh	r3, [r7, #16]
    int16_t myRaw = (((int16_t) magRaw[3])<<(8-MAG_DATA_Y_LSB_DATAY_LSB_POS) | ((int16_t) magRaw[2])>>MAG_DATA_Y_LSB_DATAY_LSB_POS);
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <Bmx055GetData+0x2d0>)
 80022fc:	78db      	ldrb	r3, [r3, #3]
 80022fe:	015b      	lsls	r3, r3, #5
 8002300:	b21a      	sxth	r2, r3
 8002302:	4b45      	ldr	r3, [pc, #276]	; (8002418 <Bmx055GetData+0x2d0>)
 8002304:	789b      	ldrb	r3, [r3, #2]
 8002306:	08db      	lsrs	r3, r3, #3
 8002308:	b2db      	uxtb	r3, r3
 800230a:	b21b      	sxth	r3, r3
 800230c:	4313      	orrs	r3, r2
 800230e:	81fb      	strh	r3, [r7, #14]
    int16_t mzRaw = (((int16_t) magRaw[5])<<(8-MAG_DATA_Z_LSB_DATAZ_LSB_POS) | ((int16_t) magRaw[4])>>MAG_DATA_Z_LSB_DATAZ_LSB_POS);
 8002310:	4b41      	ldr	r3, [pc, #260]	; (8002418 <Bmx055GetData+0x2d0>)
 8002312:	795b      	ldrb	r3, [r3, #5]
 8002314:	01db      	lsls	r3, r3, #7
 8002316:	b21a      	sxth	r2, r3
 8002318:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <Bmx055GetData+0x2d0>)
 800231a:	791b      	ldrb	r3, [r3, #4]
 800231c:	085b      	lsrs	r3, r3, #1
 800231e:	b2db      	uxtb	r3, r3
 8002320:	b21b      	sxth	r3, r3
 8002322:	4313      	orrs	r3, r2
 8002324:	81bb      	strh	r3, [r7, #12]
    data->mx = (float)((mxRaw&0xfff)-(mxRaw&0x1000));
 8002326:	8a3b      	ldrh	r3, [r7, #16]
 8002328:	f3c3 020b 	ubfx	r2, r3, #0, #12
 800232c:	8a3b      	ldrh	r3, [r7, #16]
 800232e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	ee07 3a90 	vmov	s15, r3
 8002338:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edc3 7a06 	vstr	s15, [r3, #24]
    data->my = (float)((myRaw&0xfff)-(myRaw&0x1000));
 8002342:	89fb      	ldrh	r3, [r7, #14]
 8002344:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002348:	89fb      	ldrh	r3, [r7, #14]
 800234a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	ee07 3a90 	vmov	s15, r3
 8002354:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	edc3 7a07 	vstr	s15, [r3, #28]
    data->mz = (float)((mzRaw&0x3fff)-(mzRaw&0x4000));
 800235e:	89bb      	ldrh	r3, [r7, #12]
 8002360:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002364:	89bb      	ldrh	r3, [r7, #12]
 8002366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	ee07 3a90 	vmov	s15, r3
 8002370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	edc3 7a08 	vstr	s15, [r3, #32]
    /**compensate for offsets and sensitivity**/
    data->mx = (data->mx-magXOffset)*magResolution*magXScale;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002380:	4b26      	ldr	r3, [pc, #152]	; (800241c <Bmx055GetData+0x2d4>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800238a:	4b25      	ldr	r3, [pc, #148]	; (8002420 <Bmx055GetData+0x2d8>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002394:	4b23      	ldr	r3, [pc, #140]	; (8002424 <Bmx055GetData+0x2dc>)
 8002396:	edd3 7a00 	vldr	s15, [r3]
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	edc3 7a06 	vstr	s15, [r3, #24]
    data->my = (data->my-magYOffset)*magResolution*magYScale;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	ed93 7a07 	vldr	s14, [r3, #28]
 80023aa:	4b1f      	ldr	r3, [pc, #124]	; (8002428 <Bmx055GetData+0x2e0>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023b4:	4b1a      	ldr	r3, [pc, #104]	; (8002420 <Bmx055GetData+0x2d8>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023be:	4b1b      	ldr	r3, [pc, #108]	; (800242c <Bmx055GetData+0x2e4>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	edc3 7a07 	vstr	s15, [r3, #28]
    data->mz = (data->mz-magZOffset)*magResolution*magZScale;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	ed93 7a08 	vldr	s14, [r3, #32]
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <Bmx055GetData+0x2e8>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023de:	4b10      	ldr	r3, [pc, #64]	; (8002420 <Bmx055GetData+0x2d8>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e8:	4b12      	ldr	r3, [pc, #72]	; (8002434 <Bmx055GetData+0x2ec>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	edc3 7a08 	vstr	s15, [r3, #32]
/*
    UartWrite("%f\t%f\t%f\r\n",atan2(data->my,data->mx)*180/3.141,
    atan2(data->ax,data->az)*180/3.141,
    atan2(data->ay,data->az)*180/3.141);*/

    return true;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000c8c 	.word	0x20000c8c
 8002408:	20000040 	.word	0x20000040
 800240c:	20000c94 	.word	0x20000c94
 8002410:	20000044 	.word	0x20000044
 8002414:	40020400 	.word	0x40020400
 8002418:	20000c9c 	.word	0x20000c9c
 800241c:	20000028 	.word	0x20000028
 8002420:	20000048 	.word	0x20000048
 8002424:	20000034 	.word	0x20000034
 8002428:	2000002c 	.word	0x2000002c
 800242c:	20000038 	.word	0x20000038
 8002430:	20000030 	.word	0x20000030
 8002434:	2000003c 	.word	0x2000003c

08002438 <ReadAddress>:
/******************************************************************************
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static bool ReadAddress(imuModules_t module, uint8_t address, uint8_t* data)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	603a      	str	r2, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	460b      	mov	r3, r1
 8002446:	71bb      	strb	r3, [r7, #6]
    if(module>=MODULE_COUNT)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <ReadAddress+0x1a>
    {
        return false;
 800244e:	2300      	movs	r3, #0
 8002450:	e066      	b.n	8002520 <ReadAddress+0xe8>
    }

    if(bmxParams[module].minAddress > address || bmxParams[module].maxAddress < address)
 8002452:	79fa      	ldrb	r2, [r7, #7]
 8002454:	4934      	ldr	r1, [pc, #208]	; (8002528 <ReadAddress+0xf0>)
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	3308      	adds	r3, #8
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	79ba      	ldrb	r2, [r7, #6]
 8002466:	429a      	cmp	r2, r3
 8002468:	d30b      	bcc.n	8002482 <ReadAddress+0x4a>
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	492e      	ldr	r1, [pc, #184]	; (8002528 <ReadAddress+0xf0>)
 800246e:	4613      	mov	r3, r2
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	4413      	add	r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3309      	adds	r3, #9
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	79ba      	ldrb	r2, [r7, #6]
 800247e:	429a      	cmp	r2, r3
 8002480:	d901      	bls.n	8002486 <ReadAddress+0x4e>
    {
        return false;
 8002482:	2300      	movs	r3, #0
 8002484:	e04c      	b.n	8002520 <ReadAddress+0xe8>
    }

    uint8_t message = 0x80 | address; ///< bit 7: 1->read, 0->write
 8002486:	79bb      	ldrb	r3, [r7, #6]
 8002488:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800248c:	b2db      	uxtb	r3, r3
 800248e:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,0);
 8002490:	79fa      	ldrb	r2, [r7, #7]
 8002492:	4925      	ldr	r1, [pc, #148]	; (8002528 <ReadAddress+0xf0>)
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	3304      	adds	r3, #4
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	79fa      	ldrb	r2, [r7, #7]
 80024a4:	4920      	ldr	r1, [pc, #128]	; (8002528 <ReadAddress+0xf0>)
 80024a6:	4613      	mov	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2200      	movs	r2, #0
 80024b6:	4619      	mov	r1, r3
 80024b8:	f001 faf2 	bl	8003aa0 <HAL_GPIO_WritePin>
    if(HAL_OK != HAL_SPI_Transmit(hspi, &message, sizeof(message), 1000))
 80024bc:	4b1b      	ldr	r3, [pc, #108]	; (800252c <ReadAddress+0xf4>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	f107 010f 	add.w	r1, r7, #15
 80024c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c8:	2201      	movs	r2, #1
 80024ca:	f002 f81d 	bl	8004508 <HAL_SPI_Transmit>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <ReadAddress+0xa0>
    {
        return false;
 80024d4:	2300      	movs	r3, #0
 80024d6:	e023      	b.n	8002520 <ReadAddress+0xe8>
    }
    if(HAL_OK != HAL_SPI_Receive(hspi,data, sizeof(uint8_t), 1000))
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <ReadAddress+0xf4>)
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e0:	2201      	movs	r2, #1
 80024e2:	6839      	ldr	r1, [r7, #0]
 80024e4:	f002 f944 	bl	8004770 <HAL_SPI_Receive>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <ReadAddress+0xba>
    {
        return false;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e016      	b.n	8002520 <ReadAddress+0xe8>
    }
    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,1);
 80024f2:	79fa      	ldrb	r2, [r7, #7]
 80024f4:	490c      	ldr	r1, [pc, #48]	; (8002528 <ReadAddress+0xf0>)
 80024f6:	4613      	mov	r3, r2
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	4413      	add	r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3304      	adds	r3, #4
 8002502:	6818      	ldr	r0, [r3, #0]
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	4908      	ldr	r1, [pc, #32]	; (8002528 <ReadAddress+0xf0>)
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	440b      	add	r3, r1
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	b29b      	uxth	r3, r3
 8002516:	2201      	movs	r2, #1
 8002518:	4619      	mov	r1, r3
 800251a:	f001 fac1 	bl	8003aa0 <HAL_GPIO_WritePin>

    return true;
 800251e:	2301      	movs	r3, #1
}
 8002520:	4618      	mov	r0, r3
 8002522:	3710      	adds	r7, #16
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	20000004 	.word	0x20000004
 800252c:	20004c58 	.word	0x20004c58

08002530 <WriteAddress>:

static bool WriteAddress(imuModules_t module, uint8_t address, uint8_t data)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
 800253a:	460b      	mov	r3, r1
 800253c:	71bb      	strb	r3, [r7, #6]
 800253e:	4613      	mov	r3, r2
 8002540:	717b      	strb	r3, [r7, #5]
    if(module>=MODULE_COUNT)
 8002542:	79fb      	ldrb	r3, [r7, #7]
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <WriteAddress+0x1c>
    {
        return false;
 8002548:	2300      	movs	r3, #0
 800254a:	e066      	b.n	800261a <WriteAddress+0xea>
    }

    if(bmxParams[module].minAddress > address || bmxParams[module].maxAddress < address)
 800254c:	79fa      	ldrb	r2, [r7, #7]
 800254e:	4935      	ldr	r1, [pc, #212]	; (8002624 <WriteAddress+0xf4>)
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	440b      	add	r3, r1
 800255a:	3308      	adds	r3, #8
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	79ba      	ldrb	r2, [r7, #6]
 8002560:	429a      	cmp	r2, r3
 8002562:	d30b      	bcc.n	800257c <WriteAddress+0x4c>
 8002564:	79fa      	ldrb	r2, [r7, #7]
 8002566:	492f      	ldr	r1, [pc, #188]	; (8002624 <WriteAddress+0xf4>)
 8002568:	4613      	mov	r3, r2
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	4413      	add	r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	3309      	adds	r3, #9
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	79ba      	ldrb	r2, [r7, #6]
 8002578:	429a      	cmp	r2, r3
 800257a:	d901      	bls.n	8002580 <WriteAddress+0x50>
    {
        return false;
 800257c:	2300      	movs	r3, #0
 800257e:	e04c      	b.n	800261a <WriteAddress+0xea>
    }

    uint8_t message = 0x7F & address; ///< bit 7: 1->read, 0->write
 8002580:	79bb      	ldrb	r3, [r7, #6]
 8002582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002586:	b2db      	uxtb	r3, r3
 8002588:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,0);
 800258a:	79fa      	ldrb	r2, [r7, #7]
 800258c:	4925      	ldr	r1, [pc, #148]	; (8002624 <WriteAddress+0xf4>)
 800258e:	4613      	mov	r3, r2
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	3304      	adds	r3, #4
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	79fa      	ldrb	r2, [r7, #7]
 800259e:	4921      	ldr	r1, [pc, #132]	; (8002624 <WriteAddress+0xf4>)
 80025a0:	4613      	mov	r3, r2
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	4413      	add	r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	2200      	movs	r2, #0
 80025b0:	4619      	mov	r1, r3
 80025b2:	f001 fa75 	bl	8003aa0 <HAL_GPIO_WritePin>
    if(HAL_OK != HAL_SPI_Transmit(hspi, &message, sizeof(message), 1000))
 80025b6:	4b1c      	ldr	r3, [pc, #112]	; (8002628 <WriteAddress+0xf8>)
 80025b8:	6818      	ldr	r0, [r3, #0]
 80025ba:	f107 010f 	add.w	r1, r7, #15
 80025be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025c2:	2201      	movs	r2, #1
 80025c4:	f001 ffa0 	bl	8004508 <HAL_SPI_Transmit>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <WriteAddress+0xa2>
    {
        return false;
 80025ce:	2300      	movs	r3, #0
 80025d0:	e023      	b.n	800261a <WriteAddress+0xea>
    }
    if(HAL_OK != HAL_SPI_Transmit(hspi, &data, sizeof(data), 1000))
 80025d2:	4b15      	ldr	r3, [pc, #84]	; (8002628 <WriteAddress+0xf8>)
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	1d79      	adds	r1, r7, #5
 80025d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025dc:	2201      	movs	r2, #1
 80025de:	f001 ff93 	bl	8004508 <HAL_SPI_Transmit>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <WriteAddress+0xbc>
    {
        return false;
 80025e8:	2300      	movs	r3, #0
 80025ea:	e016      	b.n	800261a <WriteAddress+0xea>
    }
    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,1);
 80025ec:	79fa      	ldrb	r2, [r7, #7]
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <WriteAddress+0xf4>)
 80025f0:	4613      	mov	r3, r2
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	4413      	add	r3, r2
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	3304      	adds	r3, #4
 80025fc:	6818      	ldr	r0, [r3, #0]
 80025fe:	79fa      	ldrb	r2, [r7, #7]
 8002600:	4908      	ldr	r1, [pc, #32]	; (8002624 <WriteAddress+0xf4>)
 8002602:	4613      	mov	r3, r2
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	b29b      	uxth	r3, r3
 8002610:	2201      	movs	r2, #1
 8002612:	4619      	mov	r1, r3
 8002614:	f001 fa44 	bl	8003aa0 <HAL_GPIO_WritePin>

    return true;
 8002618:	2301      	movs	r3, #1
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000004 	.word	0x20000004
 8002628:	20004c58 	.word	0x20004c58

0800262c <ReadBurst>:

static bool ReadBurst(imuModules_t module, uint8_t address, uint8_t* data, uint8_t size)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	603a      	str	r2, [r7, #0]
 8002634:	461a      	mov	r2, r3
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
 800263a:	460b      	mov	r3, r1
 800263c:	71bb      	strb	r3, [r7, #6]
 800263e:	4613      	mov	r3, r2
 8002640:	717b      	strb	r3, [r7, #5]
    if(module>=MODULE_COUNT)
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <ReadBurst+0x20>
    {
        return false;
 8002648:	2300      	movs	r3, #0
 800264a:	e072      	b.n	8002732 <ReadBurst+0x106>
    }

    if(bmxParams[module].minAddress > address || bmxParams[module].maxAddress < address)
 800264c:	79fa      	ldrb	r2, [r7, #7]
 800264e:	493b      	ldr	r1, [pc, #236]	; (800273c <ReadBurst+0x110>)
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3308      	adds	r3, #8
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	79ba      	ldrb	r2, [r7, #6]
 8002660:	429a      	cmp	r2, r3
 8002662:	d30b      	bcc.n	800267c <ReadBurst+0x50>
 8002664:	79fa      	ldrb	r2, [r7, #7]
 8002666:	4935      	ldr	r1, [pc, #212]	; (800273c <ReadBurst+0x110>)
 8002668:	4613      	mov	r3, r2
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3309      	adds	r3, #9
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	79ba      	ldrb	r2, [r7, #6]
 8002678:	429a      	cmp	r2, r3
 800267a:	d901      	bls.n	8002680 <ReadBurst+0x54>
    {
        return false;
 800267c:	2300      	movs	r3, #0
 800267e:	e058      	b.n	8002732 <ReadBurst+0x106>
    }

    uint8_t message = 0x80 | address; ///< bit 7: 1->read, 0->write
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002686:	b2db      	uxtb	r3, r3
 8002688:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,0);
 800268a:	79fa      	ldrb	r2, [r7, #7]
 800268c:	492b      	ldr	r1, [pc, #172]	; (800273c <ReadBurst+0x110>)
 800268e:	4613      	mov	r3, r2
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	4413      	add	r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	3304      	adds	r3, #4
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	4927      	ldr	r1, [pc, #156]	; (800273c <ReadBurst+0x110>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	2200      	movs	r2, #0
 80026b0:	4619      	mov	r1, r3
 80026b2:	f001 f9f5 	bl	8003aa0 <HAL_GPIO_WritePin>
    if(HAL_OK != HAL_SPI_Transmit(hspi, &message, sizeof(message), 1000))
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <ReadBurst+0x114>)
 80026b8:	6818      	ldr	r0, [r3, #0]
 80026ba:	f107 010e 	add.w	r1, r7, #14
 80026be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c2:	2201      	movs	r2, #1
 80026c4:	f001 ff20 	bl	8004508 <HAL_SPI_Transmit>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <ReadBurst+0xa6>
    {
        return false;
 80026ce:	2300      	movs	r3, #0
 80026d0:	e02f      	b.n	8002732 <ReadBurst+0x106>
    }
    for(uint8_t i=0; i<size; i++)
 80026d2:	2300      	movs	r3, #0
 80026d4:	73fb      	strb	r3, [r7, #15]
 80026d6:	e011      	b.n	80026fc <ReadBurst+0xd0>
    {
        if(HAL_OK != HAL_SPI_Receive(hspi,data+i, sizeof(uint8_t), 1000))
 80026d8:	4b19      	ldr	r3, [pc, #100]	; (8002740 <ReadBurst+0x114>)
 80026da:	6818      	ldr	r0, [r3, #0]
 80026dc:	7bfb      	ldrb	r3, [r7, #15]
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	18d1      	adds	r1, r2, r3
 80026e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e6:	2201      	movs	r2, #1
 80026e8:	f002 f842 	bl	8004770 <HAL_SPI_Receive>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <ReadBurst+0xca>
        {
            return false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e01d      	b.n	8002732 <ReadBurst+0x106>
    for(uint8_t i=0; i<size; i++)
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	3301      	adds	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
 80026fc:	7bfa      	ldrb	r2, [r7, #15]
 80026fe:	797b      	ldrb	r3, [r7, #5]
 8002700:	429a      	cmp	r2, r3
 8002702:	d3e9      	bcc.n	80026d8 <ReadBurst+0xac>
        }
    }
    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,1);
 8002704:	79fa      	ldrb	r2, [r7, #7]
 8002706:	490d      	ldr	r1, [pc, #52]	; (800273c <ReadBurst+0x110>)
 8002708:	4613      	mov	r3, r2
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3304      	adds	r3, #4
 8002714:	6818      	ldr	r0, [r3, #0]
 8002716:	79fa      	ldrb	r2, [r7, #7]
 8002718:	4908      	ldr	r1, [pc, #32]	; (800273c <ReadBurst+0x110>)
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	2201      	movs	r2, #1
 800272a:	4619      	mov	r1, r3
 800272c:	f001 f9b8 	bl	8003aa0 <HAL_GPIO_WritePin>

    return true;
 8002730:	2301      	movs	r3, #1
}
 8002732:	4618      	mov	r0, r3
 8002734:	3710      	adds	r7, #16
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000004 	.word	0x20000004
 8002740:	20004c58 	.word	0x20004c58

08002744 <SetAccRange>:

static bool SetAccRange(uint8_t range)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	4603      	mov	r3, r0
 800274c:	71fb      	strb	r3, [r7, #7]
    switch(range)
 800274e:	79fb      	ldrb	r3, [r7, #7]
 8002750:	3b03      	subs	r3, #3
 8002752:	2b09      	cmp	r3, #9
 8002754:	d826      	bhi.n	80027a4 <SetAccRange+0x60>
 8002756:	a201      	add	r2, pc, #4	; (adr r2, 800275c <SetAccRange+0x18>)
 8002758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800275c:	08002785 	.word	0x08002785
 8002760:	080027a5 	.word	0x080027a5
 8002764:	0800278d 	.word	0x0800278d
 8002768:	080027a5 	.word	0x080027a5
 800276c:	080027a5 	.word	0x080027a5
 8002770:	08002795 	.word	0x08002795
 8002774:	080027a5 	.word	0x080027a5
 8002778:	080027a5 	.word	0x080027a5
 800277c:	080027a5 	.word	0x080027a5
 8002780:	0800279d 	.word	0x0800279d
    {
    case ACC_PMU_RANGE_2G:
        accResolution = ACC_PMU_RESOLUTION_2G;
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <SetAccRange+0x7c>)
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <SetAccRange+0x80>)
 8002788:	601a      	str	r2, [r3, #0]
        break;
 800278a:	e00d      	b.n	80027a8 <SetAccRange+0x64>
    case ACC_PMU_RANGE_4G:
        accResolution = ACC_PMU_RESOLUTION_4G;
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <SetAccRange+0x7c>)
 800278e:	4a0e      	ldr	r2, [pc, #56]	; (80027c8 <SetAccRange+0x84>)
 8002790:	601a      	str	r2, [r3, #0]
        break;
 8002792:	e009      	b.n	80027a8 <SetAccRange+0x64>
    case ACC_PMU_RANGE_8G:
        accResolution = ACC_PMU_RESOLUTION_8G;
 8002794:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <SetAccRange+0x7c>)
 8002796:	4a0d      	ldr	r2, [pc, #52]	; (80027cc <SetAccRange+0x88>)
 8002798:	601a      	str	r2, [r3, #0]
        break;
 800279a:	e005      	b.n	80027a8 <SetAccRange+0x64>
    case ACC_PMU_RANGE_16G:
        accResolution = ACC_PMU_RESOLUTION_16G;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <SetAccRange+0x7c>)
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <SetAccRange+0x8c>)
 80027a0:	601a      	str	r2, [r3, #0]
        break;
 80027a2:	e001      	b.n	80027a8 <SetAccRange+0x64>
    default:
        return false;
 80027a4:	2300      	movs	r3, #0
 80027a6:	e006      	b.n	80027b6 <SetAccRange+0x72>
    }

    return WriteAddress(ACC, ACC_PMU_RANGE, range);
 80027a8:	79fb      	ldrb	r3, [r7, #7]
 80027aa:	461a      	mov	r2, r3
 80027ac:	210f      	movs	r1, #15
 80027ae:	2000      	movs	r0, #0
 80027b0:	f7ff febe 	bl	8002530 <WriteAddress>
 80027b4:	4603      	mov	r3, r0

}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000040 	.word	0x20000040
 80027c4:	3a807358 	.word	0x3a807358
 80027c8:	3aff9724 	.word	0x3aff9724
 80027cc:	3b801f75 	.word	0x3b801f75
 80027d0:	3bffeb07 	.word	0x3bffeb07

080027d4 <CheckConnection>:
    return WriteAddress(GYRO, GYRO_RANGE, range);

}

static bool CheckConnection()
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
    uint8_t chipID = 0x00;
 80027da:	2300      	movs	r3, #0
 80027dc:	71fb      	strb	r3, [r7, #7]
    if(!ReadAddress(ACC, ACC_BGW_CHIPID, &chipID))
 80027de:	1dfb      	adds	r3, r7, #7
 80027e0:	461a      	mov	r2, r3
 80027e2:	2100      	movs	r1, #0
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7ff fe27 	bl	8002438 <ReadAddress>
 80027ea:	4603      	mov	r3, r0
 80027ec:	f083 0301 	eor.w	r3, r3, #1
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <CheckConnection+0x26>
    {
        return false;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e03c      	b.n	8002874 <CheckConnection+0xa0>
    }

    if(chipID != ACC_ID_VALUE)
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2bfa      	cmp	r3, #250	; 0xfa
 80027fe:	d001      	beq.n	8002804 <CheckConnection+0x30>
    {
        return false;
 8002800:	2300      	movs	r3, #0
 8002802:	e037      	b.n	8002874 <CheckConnection+0xa0>
    }

    chipID = 0x00;
 8002804:	2300      	movs	r3, #0
 8002806:	71fb      	strb	r3, [r7, #7]
    if(!ReadAddress(GYRO, GYRO_CHIP_ID, &chipID))
 8002808:	1dfb      	adds	r3, r7, #7
 800280a:	461a      	mov	r2, r3
 800280c:	2100      	movs	r1, #0
 800280e:	2001      	movs	r0, #1
 8002810:	f7ff fe12 	bl	8002438 <ReadAddress>
 8002814:	4603      	mov	r3, r0
 8002816:	f083 0301 	eor.w	r3, r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <CheckConnection+0x50>
    {
        return false;
 8002820:	2300      	movs	r3, #0
 8002822:	e027      	b.n	8002874 <CheckConnection+0xa0>
    }

    if(chipID != GYRO_ID)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	d001      	beq.n	800282e <CheckConnection+0x5a>
    {
        return false;
 800282a:	2300      	movs	r3, #0
 800282c:	e022      	b.n	8002874 <CheckConnection+0xa0>
    }

    if(!WriteAddress(MAG, MAG_POWER_CONTROL, MAG_POWER_CONTROL_POWER_CONTROL_BIT))
 800282e:	2201      	movs	r2, #1
 8002830:	214b      	movs	r1, #75	; 0x4b
 8002832:	2002      	movs	r0, #2
 8002834:	f7ff fe7c 	bl	8002530 <WriteAddress>
 8002838:	4603      	mov	r3, r0
 800283a:	f083 0301 	eor.w	r3, r3, #1
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <CheckConnection+0x74>
    {
        return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e015      	b.n	8002874 <CheckConnection+0xa0>
    }

    chipID = 0x00;
 8002848:	2300      	movs	r3, #0
 800284a:	71fb      	strb	r3, [r7, #7]
    if(!ReadAddress(MAG, MAG_CHIP_ID, &chipID))
 800284c:	1dfb      	adds	r3, r7, #7
 800284e:	461a      	mov	r2, r3
 8002850:	2140      	movs	r1, #64	; 0x40
 8002852:	2002      	movs	r0, #2
 8002854:	f7ff fdf0 	bl	8002438 <ReadAddress>
 8002858:	4603      	mov	r3, r0
 800285a:	f083 0301 	eor.w	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <CheckConnection+0x94>
    {
        return false;
 8002864:	2300      	movs	r3, #0
 8002866:	e005      	b.n	8002874 <CheckConnection+0xa0>
    }

    if(chipID != MAG_ID)
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	2b32      	cmp	r3, #50	; 0x32
 800286c:	d001      	beq.n	8002872 <CheckConnection+0x9e>
    {
        return false;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <CheckConnection+0xa0>
    }

    return true;
 8002872:	2301      	movs	r3, #1
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <RadioIrq>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void RadioIrq(uint32_t* data /*radioChannel_t channel, bool risingEdge*/)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
    memcpy(dataInternal,data,4*sizeof(uint32_t));
 8002884:	2210      	movs	r2, #16
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4803      	ldr	r0, [pc, #12]	; (8002898 <RadioIrq+0x1c>)
 800288a:	f7fd fcb9 	bl	8000200 <memcpy>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000ca4 	.word	0x20000ca4

0800289c <UartInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool UartInit(UART_HandleTypeDef *uh)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
    uartHandle = uh;
 80028a4:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <UartInit+0x1c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
    return true;
 80028aa:	2301      	movs	r3, #1
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	20000cb4 	.word	0x20000cb4

080028bc <UartWrite>:

bool UartWrite(char *format, ...)
{
 80028bc:	b40f      	push	{r0, r1, r2, r3}
 80028be:	b590      	push	{r4, r7, lr}
 80028c0:	b09d      	sub	sp, #116	; 0x74
 80028c2:	af00      	add	r7, sp, #0
    if(strlen(format) > UART_MAX_MESSAGE_SIZE)
 80028c4:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80028c8:	f7fd fd3a 	bl	8000340 <strlen>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b64      	cmp	r3, #100	; 0x64
 80028d0:	d913      	bls.n	80028fa <UartWrite+0x3e>
    {
        if(HAL_UART_Transmit(uartHandle, (uint8_t*)messageTooLongErrMsg, strlen(messageTooLongErrMsg), 1000) != HAL_OK)
 80028d2:	4b1b      	ldr	r3, [pc, #108]	; (8002940 <UartWrite+0x84>)
 80028d4:	681c      	ldr	r4, [r3, #0]
 80028d6:	481b      	ldr	r0, [pc, #108]	; (8002944 <UartWrite+0x88>)
 80028d8:	f7fd fd32 	bl	8000340 <strlen>
 80028dc:	4603      	mov	r3, r0
 80028de:	b29a      	uxth	r2, r3
 80028e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028e4:	4917      	ldr	r1, [pc, #92]	; (8002944 <UartWrite+0x88>)
 80028e6:	4620      	mov	r0, r4
 80028e8:	f003 f9f7 	bl	8005cda <HAL_UART_Transmit>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d001      	beq.n	80028f6 <UartWrite+0x3a>
        {
            return false;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e01c      	b.n	8002930 <UartWrite+0x74>
        }
        return false;
 80028f6:	2300      	movs	r3, #0
 80028f8:	e01a      	b.n	8002930 <UartWrite+0x74>
    }

    va_list aptr;
    va_start(aptr, format);
 80028fa:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80028fe:	66bb      	str	r3, [r7, #104]	; 0x68
    char buffer[UART_MAX_MESSAGE_SIZE];
    uint32_t msgSize = vsprintf(buffer, format, aptr);
 8002900:	1d3b      	adds	r3, r7, #4
 8002902:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002904:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002908:	4618      	mov	r0, r3
 800290a:	f005 fbbb 	bl	8008084 <vsprintf>
 800290e:	4603      	mov	r3, r0
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c
    va_end(aptr);

    if(HAL_UART_Transmit(uartHandle, (uint8_t*)buffer, msgSize, 1000) != HAL_OK)
 8002912:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <UartWrite+0x84>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002918:	b29a      	uxth	r2, r3
 800291a:	1d39      	adds	r1, r7, #4
 800291c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002920:	f003 f9db 	bl	8005cda <HAL_UART_Transmit>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d001      	beq.n	800292e <UartWrite+0x72>
    {
        return false;
 800292a:	2300      	movs	r3, #0
 800292c:	e000      	b.n	8002930 <UartWrite+0x74>
    }
    return true;
 800292e:	2301      	movs	r3, #1
}
 8002930:	4618      	mov	r0, r3
 8002932:	3774      	adds	r7, #116	; 0x74
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800293a:	b004      	add	sp, #16
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	20000cb4 	.word	0x20000cb4
 8002944:	2000004c 	.word	0x2000004c

08002948 <UtilsInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void UtilsInit()
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800294c:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <UtilsInit+0x40>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <UtilsInit+0x40>)
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002956:	60d3      	str	r3, [r2, #12]
    ITM->TCR |= 0x01<<3;
 8002958:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800295c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002960:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002964:	f043 0308 	orr.w	r3, r3, #8
 8002968:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    DWT->CYCCNT = 0;
 800296c:	4b07      	ldr	r3, [pc, #28]	; (800298c <UtilsInit+0x44>)
 800296e:	2200      	movs	r2, #0
 8002970:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <UtilsInit+0x44>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <UtilsInit+0x44>)
 8002978:	f043 0301 	orr.w	r3, r3, #1
 800297c:	6013      	str	r3, [r2, #0]
}
 800297e:	bf00      	nop
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000edf0 	.word	0xe000edf0
 800298c:	e0001000 	.word	0xe0001000

08002990 <PosCalcInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool PosCalcInit()
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
    float zero = 0.0f;
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
    RollingBufferCreateBuffer(&bufferHandleX, sizeof(float), ACC_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	221e      	movs	r2, #30
 80029a0:	2104      	movs	r1, #4
 80029a2:	4816      	ldr	r0, [pc, #88]	; (80029fc <PosCalcInit+0x6c>)
 80029a4:	f000 fa7c 	bl	8002ea0 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleY, sizeof(float), ACC_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	221e      	movs	r2, #30
 80029ac:	2104      	movs	r1, #4
 80029ae:	4814      	ldr	r0, [pc, #80]	; (8002a00 <PosCalcInit+0x70>)
 80029b0:	f000 fa76 	bl	8002ea0 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleZ, sizeof(float), ACC_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80029b4:	1d3b      	adds	r3, r7, #4
 80029b6:	221e      	movs	r2, #30
 80029b8:	2104      	movs	r1, #4
 80029ba:	4812      	ldr	r0, [pc, #72]	; (8002a04 <PosCalcInit+0x74>)
 80029bc:	f000 fa70 	bl	8002ea0 <RollingBufferCreateBuffer>

    RollingBufferCreateBuffer(&bufferHandleXg, sizeof(float), GYRO_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80029c0:	1d3b      	adds	r3, r7, #4
 80029c2:	220a      	movs	r2, #10
 80029c4:	2104      	movs	r1, #4
 80029c6:	4810      	ldr	r0, [pc, #64]	; (8002a08 <PosCalcInit+0x78>)
 80029c8:	f000 fa6a 	bl	8002ea0 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleYg, sizeof(float), GYRO_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80029cc:	1d3b      	adds	r3, r7, #4
 80029ce:	220a      	movs	r2, #10
 80029d0:	2104      	movs	r1, #4
 80029d2:	480e      	ldr	r0, [pc, #56]	; (8002a0c <PosCalcInit+0x7c>)
 80029d4:	f000 fa64 	bl	8002ea0 <RollingBufferCreateBuffer>

    RollingBufferCreateBuffer(&bufferHandleXm, sizeof(float), MAG_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80029d8:	1d3b      	adds	r3, r7, #4
 80029da:	2214      	movs	r2, #20
 80029dc:	2104      	movs	r1, #4
 80029de:	480c      	ldr	r0, [pc, #48]	; (8002a10 <PosCalcInit+0x80>)
 80029e0:	f000 fa5e 	bl	8002ea0 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleYm, sizeof(float), MAG_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80029e4:	1d3b      	adds	r3, r7, #4
 80029e6:	2214      	movs	r2, #20
 80029e8:	2104      	movs	r1, #4
 80029ea:	480a      	ldr	r0, [pc, #40]	; (8002a14 <PosCalcInit+0x84>)
 80029ec:	f000 fa58 	bl	8002ea0 <RollingBufferCreateBuffer>

    bool BMX055CalibrateAccGyro();
    return true;
 80029f0:	2301      	movs	r3, #1
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20004c64 	.word	0x20004c64
 8002a00:	20004c68 	.word	0x20004c68
 8002a04:	20004c74 	.word	0x20004c74
 8002a08:	20004c60 	.word	0x20004c60
 8002a0c:	20004c5c 	.word	0x20004c5c
 8002a10:	20004c70 	.word	0x20004c70
 8002a14:	20004c6c 	.word	0x20004c6c

08002a18 <PosCalcDispPos>:
static uint32_t dataInternal[4] = {0,1,2,3};

bool PosCalcDispPos()
{
 8002a18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a1c:	b090      	sub	sp, #64	; 0x40
 8002a1e:	af04      	add	r7, sp, #16
    bmx055Data_t sensorData;

    Bmx055GetData(&sensorData);
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fb90 	bl	8002148 <Bmx055GetData>
    //UartWrite("%i\t%i\t%i\t%i\r\n",dataInternal[0],dataInternal[1],dataInternal[2],dataInternal[3]);
    UartWrite("%f\t%f\t%f\r\n",sensorData.ay,sensorData.my,sensorData.gy);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fd feac 	bl	8000788 <__aeabi_f2d>
 8002a30:	4680      	mov	r8, r0
 8002a32:	4689      	mov	r9, r1
 8002a34:	6a3b      	ldr	r3, [r7, #32]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fd fea6 	bl	8000788 <__aeabi_f2d>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	460d      	mov	r5, r1
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7fd fea0 	bl	8000788 <__aeabi_f2d>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002a50:	e9cd 4500 	strd	r4, r5, [sp]
 8002a54:	4642      	mov	r2, r8
 8002a56:	464b      	mov	r3, r9
 8002a58:	48d7      	ldr	r0, [pc, #860]	; (8002db8 <PosCalcDispPos+0x3a0>)
 8002a5a:	f7ff ff2f 	bl	80028bc <UartWrite>
    //UartWrite("%f\r\n",sqrt(sensorData.mx*sensorData.mx+sensorData.my*sensorData.my+sensorData.mz*sensorData.mz));
    ///acc filtering
    float value = 0;
 8002a5e:	f04f 0300 	mov.w	r3, #0
 8002a62:	603b      	str	r3, [r7, #0]
    RollingBufferRead(bufferHandleX, &value, ACC_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002a64:	4bd5      	ldr	r3, [pc, #852]	; (8002dbc <PosCalcDispPos+0x3a4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4639      	mov	r1, r7
 8002a6a:	221d      	movs	r2, #29
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa97 	bl	8002fa0 <RollingBufferRead>
    accSumX += sensorData.ax-value;
 8002a72:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a76:	edd7 7a00 	vldr	s15, [r7]
 8002a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a7e:	4bd0      	ldr	r3, [pc, #832]	; (8002dc0 <PosCalcDispPos+0x3a8>)
 8002a80:	edd3 7a00 	vldr	s15, [r3]
 8002a84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a88:	4bcd      	ldr	r3, [pc, #820]	; (8002dc0 <PosCalcDispPos+0x3a8>)
 8002a8a:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleX, &sensorData.ax);
 8002a8e:	4bcb      	ldr	r3, [pc, #812]	; (8002dbc <PosCalcDispPos+0x3a4>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	1d3a      	adds	r2, r7, #4
 8002a94:	4611      	mov	r1, r2
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fa4f 	bl	8002f3a <RollingBufferWrite>
    sensorData.ax = accSumX/ACC_LOW_PASS_FILTER_BUFFER_SIZE;
 8002a9c:	4bc8      	ldr	r3, [pc, #800]	; (8002dc0 <PosCalcDispPos+0x3a8>)
 8002a9e:	ed93 7a00 	vldr	s14, [r3]
 8002aa2:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aaa:	edc7 7a01 	vstr	s15, [r7, #4]

    RollingBufferRead(bufferHandleY, &value, ACC_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002aae:	4bc5      	ldr	r3, [pc, #788]	; (8002dc4 <PosCalcDispPos+0x3ac>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4639      	mov	r1, r7
 8002ab4:	221d      	movs	r2, #29
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f000 fa72 	bl	8002fa0 <RollingBufferRead>
    accSumY += sensorData.ay-value;
 8002abc:	ed97 7a02 	vldr	s14, [r7, #8]
 8002ac0:	edd7 7a00 	vldr	s15, [r7]
 8002ac4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac8:	4bbf      	ldr	r3, [pc, #764]	; (8002dc8 <PosCalcDispPos+0x3b0>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad2:	4bbd      	ldr	r3, [pc, #756]	; (8002dc8 <PosCalcDispPos+0x3b0>)
 8002ad4:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleY, &sensorData.ay);
 8002ad8:	4bba      	ldr	r3, [pc, #744]	; (8002dc4 <PosCalcDispPos+0x3ac>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	1d3b      	adds	r3, r7, #4
 8002ade:	3304      	adds	r3, #4
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	f000 fa29 	bl	8002f3a <RollingBufferWrite>
    sensorData.ay = accSumY/ACC_LOW_PASS_FILTER_BUFFER_SIZE;
 8002ae8:	4bb7      	ldr	r3, [pc, #732]	; (8002dc8 <PosCalcDispPos+0x3b0>)
 8002aea:	ed93 7a00 	vldr	s14, [r3]
 8002aee:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002af2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af6:	edc7 7a02 	vstr	s15, [r7, #8]

    RollingBufferRead(bufferHandleZ, &value, ACC_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002afa:	4bb4      	ldr	r3, [pc, #720]	; (8002dcc <PosCalcDispPos+0x3b4>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4639      	mov	r1, r7
 8002b00:	221d      	movs	r2, #29
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fa4c 	bl	8002fa0 <RollingBufferRead>
    accSumZ += sensorData.az-value;
 8002b08:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b0c:	edd7 7a00 	vldr	s15, [r7]
 8002b10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b14:	4bae      	ldr	r3, [pc, #696]	; (8002dd0 <PosCalcDispPos+0x3b8>)
 8002b16:	edd3 7a00 	vldr	s15, [r3]
 8002b1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b1e:	4bac      	ldr	r3, [pc, #688]	; (8002dd0 <PosCalcDispPos+0x3b8>)
 8002b20:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleZ, &sensorData.az);
 8002b24:	4ba9      	ldr	r3, [pc, #676]	; (8002dcc <PosCalcDispPos+0x3b4>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	1d3b      	adds	r3, r7, #4
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f000 fa03 	bl	8002f3a <RollingBufferWrite>
    sensorData.az = accSumZ/ACC_LOW_PASS_FILTER_BUFFER_SIZE;
 8002b34:	4ba6      	ldr	r3, [pc, #664]	; (8002dd0 <PosCalcDispPos+0x3b8>)
 8002b36:	ed93 7a00 	vldr	s14, [r3]
 8002b3a:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
 8002b3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b42:	edc7 7a03 	vstr	s15, [r7, #12]

    ///gyro filtering
    RollingBufferRead(bufferHandleXg, &value, GYRO_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002b46:	4ba3      	ldr	r3, [pc, #652]	; (8002dd4 <PosCalcDispPos+0x3bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4639      	mov	r1, r7
 8002b4c:	2209      	movs	r2, #9
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fa26 	bl	8002fa0 <RollingBufferRead>
    gyroSumX += sensorData.gx-value;
 8002b54:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b58:	edd7 7a00 	vldr	s15, [r7]
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b60:	4b9d      	ldr	r3, [pc, #628]	; (8002dd8 <PosCalcDispPos+0x3c0>)
 8002b62:	edd3 7a00 	vldr	s15, [r3]
 8002b66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6a:	4b9b      	ldr	r3, [pc, #620]	; (8002dd8 <PosCalcDispPos+0x3c0>)
 8002b6c:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleXg, &sensorData.gx);
 8002b70:	4b98      	ldr	r3, [pc, #608]	; (8002dd4 <PosCalcDispPos+0x3bc>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	1d3b      	adds	r3, r7, #4
 8002b76:	330c      	adds	r3, #12
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f000 f9dd 	bl	8002f3a <RollingBufferWrite>
    sensorData.gx = gyroSumX/GYRO_LOW_PASS_FILTER_BUFFER_SIZE;
 8002b80:	4b95      	ldr	r3, [pc, #596]	; (8002dd8 <PosCalcDispPos+0x3c0>)
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b8e:	edc7 7a04 	vstr	s15, [r7, #16]

    RollingBufferRead(bufferHandleYg, &value, GYRO_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002b92:	4b92      	ldr	r3, [pc, #584]	; (8002ddc <PosCalcDispPos+0x3c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4639      	mov	r1, r7
 8002b98:	2209      	movs	r2, #9
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fa00 	bl	8002fa0 <RollingBufferRead>
    gyroSumY += sensorData.gy-value;
 8002ba0:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ba4:	edd7 7a00 	vldr	s15, [r7]
 8002ba8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bac:	4b8c      	ldr	r3, [pc, #560]	; (8002de0 <PosCalcDispPos+0x3c8>)
 8002bae:	edd3 7a00 	vldr	s15, [r3]
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	4b8a      	ldr	r3, [pc, #552]	; (8002de0 <PosCalcDispPos+0x3c8>)
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleYg, &sensorData.gy);
 8002bbc:	4b87      	ldr	r3, [pc, #540]	; (8002ddc <PosCalcDispPos+0x3c4>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	3310      	adds	r3, #16
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4610      	mov	r0, r2
 8002bc8:	f000 f9b7 	bl	8002f3a <RollingBufferWrite>
    sensorData.gy = gyroSumY/GYRO_LOW_PASS_FILTER_BUFFER_SIZE;
 8002bcc:	4b84      	ldr	r3, [pc, #528]	; (8002de0 <PosCalcDispPos+0x3c8>)
 8002bce:	ed93 7a00 	vldr	s14, [r3]
 8002bd2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002bd6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bda:	edc7 7a05 	vstr	s15, [r7, #20]


    ///mag filtering
    RollingBufferRead(bufferHandleXm, &value, MAG_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002bde:	4b81      	ldr	r3, [pc, #516]	; (8002de4 <PosCalcDispPos+0x3cc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4639      	mov	r1, r7
 8002be4:	2213      	movs	r2, #19
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 f9da 	bl	8002fa0 <RollingBufferRead>
    magSumX += sensorData.mx-value;
 8002bec:	ed97 7a07 	vldr	s14, [r7, #28]
 8002bf0:	edd7 7a00 	vldr	s15, [r7]
 8002bf4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bf8:	4b7b      	ldr	r3, [pc, #492]	; (8002de8 <PosCalcDispPos+0x3d0>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c02:	4b79      	ldr	r3, [pc, #484]	; (8002de8 <PosCalcDispPos+0x3d0>)
 8002c04:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleXm, &sensorData.mx);
 8002c08:	4b76      	ldr	r3, [pc, #472]	; (8002de4 <PosCalcDispPos+0x3cc>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	1d3b      	adds	r3, r7, #4
 8002c0e:	3318      	adds	r3, #24
 8002c10:	4619      	mov	r1, r3
 8002c12:	4610      	mov	r0, r2
 8002c14:	f000 f991 	bl	8002f3a <RollingBufferWrite>
    sensorData.mx = magSumX/MAG_LOW_PASS_FILTER_BUFFER_SIZE;
 8002c18:	4b73      	ldr	r3, [pc, #460]	; (8002de8 <PosCalcDispPos+0x3d0>)
 8002c1a:	ed93 7a00 	vldr	s14, [r3]
 8002c1e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002c22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c26:	edc7 7a07 	vstr	s15, [r7, #28]

    RollingBufferRead(bufferHandleYm, &value, MAG_LOW_PASS_FILTER_BUFFER_SIZE-1);
 8002c2a:	4b70      	ldr	r3, [pc, #448]	; (8002dec <PosCalcDispPos+0x3d4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4639      	mov	r1, r7
 8002c30:	2213      	movs	r2, #19
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f9b4 	bl	8002fa0 <RollingBufferRead>
    magSumY += sensorData.my-value;
 8002c38:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c3c:	edd7 7a00 	vldr	s15, [r7]
 8002c40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c44:	4b6a      	ldr	r3, [pc, #424]	; (8002df0 <PosCalcDispPos+0x3d8>)
 8002c46:	edd3 7a00 	vldr	s15, [r3]
 8002c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4e:	4b68      	ldr	r3, [pc, #416]	; (8002df0 <PosCalcDispPos+0x3d8>)
 8002c50:	edc3 7a00 	vstr	s15, [r3]
    RollingBufferWrite(bufferHandleYm, &sensorData.my);
 8002c54:	4b65      	ldr	r3, [pc, #404]	; (8002dec <PosCalcDispPos+0x3d4>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	331c      	adds	r3, #28
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	4610      	mov	r0, r2
 8002c60:	f000 f96b 	bl	8002f3a <RollingBufferWrite>
    sensorData.my = magSumY/MAG_LOW_PASS_FILTER_BUFFER_SIZE;
 8002c64:	4b62      	ldr	r3, [pc, #392]	; (8002df0 <PosCalcDispPos+0x3d8>)
 8002c66:	ed93 7a00 	vldr	s14, [r3]
 8002c6a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8002c6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c72:	edc7 7a08 	vstr	s15, [r7, #32]


    float nextRoll = roll + sensorData.gy*0.01;
 8002c76:	4b5f      	ldr	r3, [pc, #380]	; (8002df4 <PosCalcDispPos+0x3dc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fd84 	bl	8000788 <__aeabi_f2d>
 8002c80:	4604      	mov	r4, r0
 8002c82:	460d      	mov	r5, r1
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fd7e 	bl	8000788 <__aeabi_f2d>
 8002c8c:	a344      	add	r3, pc, #272	; (adr r3, 8002da0 <PosCalcDispPos+0x388>)
 8002c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c92:	f7fd fdd1 	bl	8000838 <__aeabi_dmul>
 8002c96:	4602      	mov	r2, r0
 8002c98:	460b      	mov	r3, r1
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	4629      	mov	r1, r5
 8002c9e:	f7fd fc15 	bl	80004cc <__adddf3>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	460c      	mov	r4, r1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	4621      	mov	r1, r4
 8002caa:	f7fe f89d 	bl	8000de8 <__aeabi_d2f>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    float nextPitch = pitch + sensorData.gz*0.01;
 8002cb2:	4b51      	ldr	r3, [pc, #324]	; (8002df8 <PosCalcDispPos+0x3e0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fd fd66 	bl	8000788 <__aeabi_f2d>
 8002cbc:	4604      	mov	r4, r0
 8002cbe:	460d      	mov	r5, r1
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fd60 	bl	8000788 <__aeabi_f2d>
 8002cc8:	a335      	add	r3, pc, #212	; (adr r3, 8002da0 <PosCalcDispPos+0x388>)
 8002cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cce:	f7fd fdb3 	bl	8000838 <__aeabi_dmul>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	4620      	mov	r0, r4
 8002cd8:	4629      	mov	r1, r5
 8002cda:	f7fd fbf7 	bl	80004cc <__adddf3>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	460c      	mov	r4, r1
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	4621      	mov	r1, r4
 8002ce6:	f7fe f87f 	bl	8000de8 <__aeabi_d2f>
 8002cea:	4603      	mov	r3, r0
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    roll = nextRoll*(1-ACC_ROLL_SHARE) + ACC_ROLL_SHARE*atan2(sensorData.ay,sensorData.az)*180/3.141;
 8002cee:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002cf2:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002dfc <PosCalcDispPos+0x3e4>
 8002cf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cfa:	ee17 0a90 	vmov	r0, s15
 8002cfe:	f7fd fd43 	bl	8000788 <__aeabi_f2d>
 8002d02:	4604      	mov	r4, r0
 8002d04:	460d      	mov	r5, r1
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fd3d 	bl	8000788 <__aeabi_f2d>
 8002d0e:	4680      	mov	r8, r0
 8002d10:	4689      	mov	r9, r1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fd fd37 	bl	8000788 <__aeabi_f2d>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	ec43 2b11 	vmov	d1, r2, r3
 8002d22:	ec49 8b10 	vmov	d0, r8, r9
 8002d26:	f008 fe75 	bl	800ba14 <atan2>
 8002d2a:	ec51 0b10 	vmov	r0, r1, d0
 8002d2e:	a31e      	add	r3, pc, #120	; (adr r3, 8002da8 <PosCalcDispPos+0x390>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fd80 	bl	8000838 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b2e      	ldr	r3, [pc, #184]	; (8002e00 <PosCalcDispPos+0x3e8>)
 8002d46:	f7fd fd77 	bl	8000838 <__aeabi_dmul>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	a317      	add	r3, pc, #92	; (adr r3, 8002db0 <PosCalcDispPos+0x398>)
 8002d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d58:	f7fd fe98 	bl	8000a8c <__aeabi_ddiv>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	460b      	mov	r3, r1
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fbb2 	bl	80004cc <__adddf3>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	460c      	mov	r4, r1
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	4621      	mov	r1, r4
 8002d70:	f7fe f83a 	bl	8000de8 <__aeabi_d2f>
 8002d74:	4602      	mov	r2, r0
 8002d76:	4b1f      	ldr	r3, [pc, #124]	; (8002df4 <PosCalcDispPos+0x3dc>)
 8002d78:	601a      	str	r2, [r3, #0]
    pitch = nextPitch*(1-ACC_PITCH_SHARE) + ACC_PITCH_SHARE*atan2(-sensorData.ax,sensorData.az)*180/3.141;
 8002d7a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002d7e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002dfc <PosCalcDispPos+0x3e4>
 8002d82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d86:	ee17 0a90 	vmov	r0, s15
 8002d8a:	f7fd fcfd 	bl	8000788 <__aeabi_f2d>
 8002d8e:	4604      	mov	r4, r0
 8002d90:	460d      	mov	r5, r1
 8002d92:	edd7 7a01 	vldr	s15, [r7, #4]
 8002d96:	eef1 7a67 	vneg.f32	s15, s15
 8002d9a:	e033      	b.n	8002e04 <PosCalcDispPos+0x3ec>
 8002d9c:	f3af 8000 	nop.w
 8002da0:	47ae147b 	.word	0x47ae147b
 8002da4:	3f847ae1 	.word	0x3f847ae1
 8002da8:	40000000 	.word	0x40000000
 8002dac:	3f947ae1 	.word	0x3f947ae1
 8002db0:	9ba5e354 	.word	0x9ba5e354
 8002db4:	400920c4 	.word	0x400920c4
 8002db8:	0800bfa0 	.word	0x0800bfa0
 8002dbc:	20004c64 	.word	0x20004c64
 8002dc0:	20000cc0 	.word	0x20000cc0
 8002dc4:	20004c68 	.word	0x20004c68
 8002dc8:	20000cc4 	.word	0x20000cc4
 8002dcc:	20004c74 	.word	0x20004c74
 8002dd0:	20000cc8 	.word	0x20000cc8
 8002dd4:	20004c60 	.word	0x20004c60
 8002dd8:	20000ccc 	.word	0x20000ccc
 8002ddc:	20004c5c 	.word	0x20004c5c
 8002de0:	20000cd0 	.word	0x20000cd0
 8002de4:	20004c70 	.word	0x20004c70
 8002de8:	20000cd4 	.word	0x20000cd4
 8002dec:	20004c6c 	.word	0x20004c6c
 8002df0:	20000cd8 	.word	0x20000cd8
 8002df4:	20000cb8 	.word	0x20000cb8
 8002df8:	20000cbc 	.word	0x20000cbc
 8002dfc:	3f7ae148 	.word	0x3f7ae148
 8002e00:	40668000 	.word	0x40668000
 8002e04:	ee17 3a90 	vmov	r3, s15
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fcbd 	bl	8000788 <__aeabi_f2d>
 8002e0e:	4680      	mov	r8, r0
 8002e10:	4689      	mov	r9, r1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7fd fcb7 	bl	8000788 <__aeabi_f2d>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	ec43 2b11 	vmov	d1, r2, r3
 8002e22:	ec49 8b10 	vmov	d0, r8, r9
 8002e26:	f008 fdf5 	bl	800ba14 <atan2>
 8002e2a:	ec51 0b10 	vmov	r0, r1, d0
 8002e2e:	a31a      	add	r3, pc, #104	; (adr r3, 8002e98 <PosCalcDispPos+0x480>)
 8002e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e34:	f7fd fd00 	bl	8000838 <__aeabi_dmul>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	4619      	mov	r1, r3
 8002e40:	f04f 0200 	mov.w	r2, #0
 8002e44:	4b12      	ldr	r3, [pc, #72]	; (8002e90 <PosCalcDispPos+0x478>)
 8002e46:	f7fd fcf7 	bl	8000838 <__aeabi_dmul>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	a30d      	add	r3, pc, #52	; (adr r3, 8002e88 <PosCalcDispPos+0x470>)
 8002e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e58:	f7fd fe18 	bl	8000a8c <__aeabi_ddiv>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4620      	mov	r0, r4
 8002e62:	4629      	mov	r1, r5
 8002e64:	f7fd fb32 	bl	80004cc <__adddf3>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	460c      	mov	r4, r1
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	4621      	mov	r1, r4
 8002e70:	f7fd ffba 	bl	8000de8 <__aeabi_d2f>
 8002e74:	4602      	mov	r2, r0
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <PosCalcDispPos+0x47c>)
 8002e78:	601a      	str	r2, [r3, #0]

    //UartWrite("%f\t%f\t%f\r\n",roll,pitch,atan2(sensorData.my,sensorData.mx)*180/3.141);

    //UartWrite("%f\r\n",sensorData.ay);
    return true;
 8002e7a:	2301      	movs	r3, #1
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3730      	adds	r7, #48	; 0x30
 8002e80:	46bd      	mov	sp, r7
 8002e82:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e86:	bf00      	nop
 8002e88:	9ba5e354 	.word	0x9ba5e354
 8002e8c:	400920c4 	.word	0x400920c4
 8002e90:	40668000 	.word	0x40668000
 8002e94:	20000cbc 	.word	0x20000cbc
 8002e98:	40000000 	.word	0x40000000
 8002e9c:	3f947ae1 	.word	0x3f947ae1

08002ea0 <RollingBufferCreateBuffer>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

rollingBufferState_t RollingBufferCreateBuffer(rollingBufferHandle_t* bufferHandle, uint32_t elementSize, uint32_t bufferSize, void* initElementValue)
{
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
    if(bufferSize == 0 || elementSize == 0)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <RollingBufferCreateBuffer+0x1a>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <RollingBufferCreateBuffer+0x1e>
    {
        return RB_INVALID_SIZE_ERROR;
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e039      	b.n	8002f32 <RollingBufferCreateBuffer+0x92>
    }

    *bufferHandle = (rollingBufferHandle_t)malloc(sizeof(rollingBufferData_t));
 8002ebe:	2010      	movs	r0, #16
 8002ec0:	f004 fdb8 	bl	8007a34 <malloc>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	601a      	str	r2, [r3, #0]

    ((rollingBufferData_t*)*bufferHandle)->bufferSize = bufferSize;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6053      	str	r3, [r2, #4]
    ((rollingBufferData_t*)*bufferHandle)->elementSize = elementSize;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	6013      	str	r3, [r2, #0]
    ((rollingBufferData_t*)*bufferHandle)->rollingIndex = 0;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	6093      	str	r3, [r2, #8]
    ((rollingBufferData_t*)*bufferHandle)->data = malloc(bufferSize*elementSize);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	68ba      	ldr	r2, [r7, #8]
 8002eee:	fb02 f203 	mul.w	r2, r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461c      	mov	r4, r3
 8002ef8:	4610      	mov	r0, r2
 8002efa:	f004 fd9b 	bl	8007a34 <malloc>
 8002efe:	4603      	mov	r3, r0
 8002f00:	60e3      	str	r3, [r4, #12]



    for(uint32_t i=0; i<bufferSize;i++)
 8002f02:	2300      	movs	r3, #0
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	e00f      	b.n	8002f28 <RollingBufferCreateBuffer+0x88>
    {
        memcpy((uint8_t*)(((rollingBufferData_t*)*bufferHandle)->data+i*elementSize),initElementValue,elementSize);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	fb01 f303 	mul.w	r3, r1, r3
 8002f16:	4413      	add	r3, r2
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd f96f 	bl	8000200 <memcpy>
    for(uint32_t i=0; i<bufferSize;i++)
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	3301      	adds	r3, #1
 8002f26:	617b      	str	r3, [r7, #20]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3eb      	bcc.n	8002f08 <RollingBufferCreateBuffer+0x68>
    }

    return RB_OK;
 8002f30:	2301      	movs	r3, #1
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	371c      	adds	r7, #28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd90      	pop	{r4, r7, pc}

08002f3a <RollingBufferWrite>:
    free(((rollingBufferData_t*)bufferHandle));
    return RB_OK;
}

rollingBufferState_t RollingBufferWrite(rollingBufferHandle_t bufferHandle, void* value)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b084      	sub	sp, #16
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
 8002f42:	6039      	str	r1, [r7, #0]
    if((rollingBufferData_t*)bufferHandle == NULL || value == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <RollingBufferWrite+0x16>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <RollingBufferWrite+0x1a>
    {
        return RB_NULL_PTR_ERROR;
 8002f50:	2304      	movs	r3, #4
 8002f52:	e021      	b.n	8002f98 <RollingBufferWrite+0x5e>
    }
    rollingBufferData_t* bufferData = (rollingBufferData_t*)bufferHandle;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

    bufferData->rollingIndex++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	609a      	str	r2, [r3, #8]
    if(bufferData->rollingIndex >= bufferData->bufferSize)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <RollingBufferWrite+0x3a>
    {
        bufferData->rollingIndex = 0;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	609a      	str	r2, [r3, #8]
    }

    uint8_t* address = (uint8_t*)(bufferData->data+bufferData->rollingIndex*bufferData->elementSize);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	6809      	ldr	r1, [r1, #0]
 8002f80:	fb01 f303 	mul.w	r3, r1, r3
 8002f84:	4413      	add	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
    memcpy(address,value,bufferData->elementSize);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	6839      	ldr	r1, [r7, #0]
 8002f90:	68b8      	ldr	r0, [r7, #8]
 8002f92:	f7fd f935 	bl	8000200 <memcpy>
    return RB_OK;
 8002f96:	2301      	movs	r3, #1
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <RollingBufferRead>:

rollingBufferState_t RollingBufferRead(rollingBufferHandle_t bufferHandle, void* value, uint32_t index)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b088      	sub	sp, #32
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
    if((rollingBufferData_t*)bufferHandle == NULL || value == NULL)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <RollingBufferRead+0x18>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <RollingBufferRead+0x1c>
    {
        return RB_NULL_PTR_ERROR;
 8002fb8:	2304      	movs	r3, #4
 8002fba:	e02c      	b.n	8003016 <RollingBufferRead+0x76>
    }

    rollingBufferData_t* bufferData = (rollingBufferData_t*)bufferHandle;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	61bb      	str	r3, [r7, #24]

    if(index >= bufferData->bufferSize)
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d301      	bcc.n	8002fce <RollingBufferRead+0x2e>
    {
         return RB_INDEX_OUT_OF_BOUNDS_ERROR;
 8002fca:	2305      	movs	r3, #5
 8002fcc:	e023      	b.n	8003016 <RollingBufferRead+0x76>
    }

    uint32_t ind;
    if(index > bufferData->rollingIndex)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d908      	bls.n	8002fea <RollingBufferRead+0x4a>
    {
        ind = bufferData->bufferSize-(index-bufferData->rollingIndex);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	1acb      	subs	r3, r1, r3
 8002fe4:	4413      	add	r3, r2
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	e004      	b.n	8002ff4 <RollingBufferRead+0x54>
    } else {
        ind = bufferData->rollingIndex-index;
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	61fb      	str	r3, [r7, #28]
    }
    uint8_t* address = (uint8_t*)(bufferData->data+ind*bufferData->elementSize);
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	68da      	ldr	r2, [r3, #12]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69f9      	ldr	r1, [r7, #28]
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
    memcpy(value,address,bufferData->elementSize);
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	461a      	mov	r2, r3
 800300c:	6979      	ldr	r1, [r7, #20]
 800300e:	68b8      	ldr	r0, [r7, #8]
 8003010:	f7fd f8f6 	bl	8000200 <memcpy>
    return RB_OK;
 8003014:	2301      	movs	r3, #1
}
 8003016:	4618      	mov	r0, r3
 8003018:	3720      	adds	r7, #32
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_Init+0x40>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_Init+0x40>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_Init+0x40>)
 8003036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800303a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_Init+0x40>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f000 fb3a 	bl	80036c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304e:	2000      	movs	r0, #0
 8003050:	f7fe fe92 	bl	8001d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003054:	f7fe fca4 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00

08003064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_IncTick+0x20>)
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	461a      	mov	r2, r3
 800306e:	4b06      	ldr	r3, [pc, #24]	; (8003088 <HAL_IncTick+0x24>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4413      	add	r3, r2
 8003074:	4a04      	ldr	r2, [pc, #16]	; (8003088 <HAL_IncTick+0x24>)
 8003076:	6013      	str	r3, [r2, #0]
}
 8003078:	bf00      	nop
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000064 	.word	0x20000064
 8003088:	20004c78 	.word	0x20004c78

0800308c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return uwTick;
 8003090:	4b03      	ldr	r3, [pc, #12]	; (80030a0 <HAL_GetTick+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20004c78 	.word	0x20004c78

080030a4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e033      	b.n	8003122 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f7fe fc98 	bl	80019f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d118      	bne.n	8003114 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80030ea:	f023 0302 	bic.w	r3, r3, #2
 80030ee:	f043 0202 	orr.w	r2, r3, #2
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f93a 	bl	8003370 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	f023 0303 	bic.w	r3, r3, #3
 800310a:	f043 0201 	orr.w	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
 8003112:	e001      	b.n	8003118 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_ADC_ConfigChannel+0x1c>
 8003144:	2302      	movs	r3, #2
 8003146:	e105      	b.n	8003354 <HAL_ADC_ConfigChannel+0x228>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b09      	cmp	r3, #9
 8003156:	d925      	bls.n	80031a4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68d9      	ldr	r1, [r3, #12]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	4613      	mov	r3, r2
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	4413      	add	r3, r2
 800316c:	3b1e      	subs	r3, #30
 800316e:	2207      	movs	r2, #7
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43da      	mvns	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	400a      	ands	r2, r1
 800317c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68d9      	ldr	r1, [r3, #12]
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689a      	ldr	r2, [r3, #8]
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	4618      	mov	r0, r3
 8003190:	4603      	mov	r3, r0
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4403      	add	r3, r0
 8003196:	3b1e      	subs	r3, #30
 8003198:	409a      	lsls	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e022      	b.n	80031ea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	6919      	ldr	r1, [r3, #16]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	461a      	mov	r2, r3
 80031b2:	4613      	mov	r3, r2
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	4413      	add	r3, r2
 80031b8:	2207      	movs	r2, #7
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43da      	mvns	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	400a      	ands	r2, r1
 80031c6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6919      	ldr	r1, [r3, #16]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689a      	ldr	r2, [r3, #8]
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	4618      	mov	r0, r3
 80031da:	4603      	mov	r3, r0
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	4403      	add	r3, r0
 80031e0:	409a      	lsls	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b06      	cmp	r3, #6
 80031f0:	d824      	bhi.n	800323c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	3b05      	subs	r3, #5
 8003204:	221f      	movs	r2, #31
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43da      	mvns	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	400a      	ands	r2, r1
 8003212:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	b29b      	uxth	r3, r3
 8003220:	4618      	mov	r0, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	4413      	add	r3, r2
 800322c:	3b05      	subs	r3, #5
 800322e:	fa00 f203 	lsl.w	r2, r0, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	430a      	orrs	r2, r1
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
 800323a:	e04c      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b0c      	cmp	r3, #12
 8003242:	d824      	bhi.n	800328e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685a      	ldr	r2, [r3, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	3b23      	subs	r3, #35	; 0x23
 8003256:	221f      	movs	r2, #31
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43da      	mvns	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	400a      	ands	r2, r1
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	b29b      	uxth	r3, r3
 8003272:	4618      	mov	r0, r3
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	685a      	ldr	r2, [r3, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	4413      	add	r3, r2
 800327e:	3b23      	subs	r3, #35	; 0x23
 8003280:	fa00 f203 	lsl.w	r2, r0, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	e023      	b.n	80032d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	3b41      	subs	r3, #65	; 0x41
 80032a0:	221f      	movs	r2, #31
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43da      	mvns	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	400a      	ands	r2, r1
 80032ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	4618      	mov	r0, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	3b41      	subs	r3, #65	; 0x41
 80032ca:	fa00 f203 	lsl.w	r2, r0, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032d6:	4b22      	ldr	r3, [pc, #136]	; (8003360 <HAL_ADC_ConfigChannel+0x234>)
 80032d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a21      	ldr	r2, [pc, #132]	; (8003364 <HAL_ADC_ConfigChannel+0x238>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d109      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1cc>
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2b12      	cmp	r3, #18
 80032ea:	d105      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a19      	ldr	r2, [pc, #100]	; (8003364 <HAL_ADC_ConfigChannel+0x238>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d123      	bne.n	800334a <HAL_ADC_ConfigChannel+0x21e>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2b10      	cmp	r3, #16
 8003308:	d003      	beq.n	8003312 <HAL_ADC_ConfigChannel+0x1e6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	2b11      	cmp	r3, #17
 8003310:	d11b      	bne.n	800334a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b10      	cmp	r3, #16
 8003324:	d111      	bne.n	800334a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_ADC_ConfigChannel+0x23c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a10      	ldr	r2, [pc, #64]	; (800336c <HAL_ADC_ConfigChannel+0x240>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	0c9a      	lsrs	r2, r3, #18
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800333c:	e002      	b.n	8003344 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	3b01      	subs	r3, #1
 8003342:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1f9      	bne.n	800333e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	40012300 	.word	0x40012300
 8003364:	40012000 	.word	0x40012000
 8003368:	20000000 	.word	0x20000000
 800336c:	431bde83 	.word	0x431bde83

08003370 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003378:	4b79      	ldr	r3, [pc, #484]	; (8003560 <ADC_Init+0x1f0>)
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6859      	ldr	r1, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80033c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	430a      	orrs	r2, r1
 80033da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6899      	ldr	r1, [r3, #8]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003402:	4a58      	ldr	r2, [pc, #352]	; (8003564 <ADC_Init+0x1f4>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003416:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6899      	ldr	r1, [r3, #8]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6899      	ldr	r1, [r3, #8]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	e00f      	b.n	800346e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689a      	ldr	r2, [r3, #8]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800345c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800346c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f022 0202 	bic.w	r2, r2, #2
 800347c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6899      	ldr	r1, [r3, #8]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7e1b      	ldrb	r3, [r3, #24]
 8003488:	005a      	lsls	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d01b      	beq.n	80034d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80034ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	3b01      	subs	r3, #1
 80034c8:	035a      	lsls	r2, r3, #13
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	e007      	b.n	80034e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	3b01      	subs	r3, #1
 8003500:	051a      	lsls	r2, r3, #20
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	430a      	orrs	r2, r1
 8003508:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689a      	ldr	r2, [r3, #8]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003518:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6899      	ldr	r1, [r3, #8]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003526:	025a      	lsls	r2, r3, #9
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	029a      	lsls	r2, r3, #10
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	bf00      	nop
 8003556:	3714      	adds	r7, #20
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	40012300 	.word	0x40012300
 8003564:	0f000001 	.word	0x0f000001

08003568 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003578:	4b0c      	ldr	r3, [pc, #48]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003584:	4013      	ands	r3, r2
 8003586:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003590:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003594:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003598:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800359a:	4a04      	ldr	r2, [pc, #16]	; (80035ac <__NVIC_SetPriorityGrouping+0x44>)
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	60d3      	str	r3, [r2, #12]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <__NVIC_GetPriorityGrouping+0x18>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	0a1b      	lsrs	r3, r3, #8
 80035ba:	f003 0307 	and.w	r3, r3, #7
}
 80035be:	4618      	mov	r0, r3
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b083      	sub	sp, #12
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	db0b      	blt.n	80035f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	f003 021f 	and.w	r2, r3, #31
 80035e4:	4907      	ldr	r1, [pc, #28]	; (8003604 <__NVIC_EnableIRQ+0x38>)
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	095b      	lsrs	r3, r3, #5
 80035ec:	2001      	movs	r0, #1
 80035ee:	fa00 f202 	lsl.w	r2, r0, r2
 80035f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035f6:	bf00      	nop
 80035f8:	370c      	adds	r7, #12
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	e000e100 	.word	0xe000e100

08003608 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003608:	b480      	push	{r7}
 800360a:	b083      	sub	sp, #12
 800360c:	af00      	add	r7, sp, #0
 800360e:	4603      	mov	r3, r0
 8003610:	6039      	str	r1, [r7, #0]
 8003612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003618:	2b00      	cmp	r3, #0
 800361a:	db0a      	blt.n	8003632 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	490c      	ldr	r1, [pc, #48]	; (8003654 <__NVIC_SetPriority+0x4c>)
 8003622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003626:	0112      	lsls	r2, r2, #4
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	440b      	add	r3, r1
 800362c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003630:	e00a      	b.n	8003648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	b2da      	uxtb	r2, r3
 8003636:	4908      	ldr	r1, [pc, #32]	; (8003658 <__NVIC_SetPriority+0x50>)
 8003638:	79fb      	ldrb	r3, [r7, #7]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	3b04      	subs	r3, #4
 8003640:	0112      	lsls	r2, r2, #4
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	440b      	add	r3, r1
 8003646:	761a      	strb	r2, [r3, #24]
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000e100 	.word	0xe000e100
 8003658:	e000ed00 	.word	0xe000ed00

0800365c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800365c:	b480      	push	{r7}
 800365e:	b089      	sub	sp, #36	; 0x24
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	f1c3 0307 	rsb	r3, r3, #7
 8003676:	2b04      	cmp	r3, #4
 8003678:	bf28      	it	cs
 800367a:	2304      	movcs	r3, #4
 800367c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3304      	adds	r3, #4
 8003682:	2b06      	cmp	r3, #6
 8003684:	d902      	bls.n	800368c <NVIC_EncodePriority+0x30>
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3b03      	subs	r3, #3
 800368a:	e000      	b.n	800368e <NVIC_EncodePriority+0x32>
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003690:	f04f 32ff 	mov.w	r2, #4294967295
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	401a      	ands	r2, r3
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036a4:	f04f 31ff 	mov.w	r1, #4294967295
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43d9      	mvns	r1, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	4313      	orrs	r3, r2
         );
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3724      	adds	r7, #36	; 0x24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff ff4c 	bl	8003568 <__NVIC_SetPriorityGrouping>
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
 80036e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ea:	f7ff ff61 	bl	80035b0 <__NVIC_GetPriorityGrouping>
 80036ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	6978      	ldr	r0, [r7, #20]
 80036f6:	f7ff ffb1 	bl	800365c <NVIC_EncodePriority>
 80036fa:	4602      	mov	r2, r0
 80036fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff ff80 	bl	8003608 <__NVIC_SetPriority>
}
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800371a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff ff54 	bl	80035cc <__NVIC_EnableIRQ>
}
 8003724:	bf00      	nop
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 031f 	and.w	r3, r3, #31
 800373e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8003740:	2201      	movs	r2, #1
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <HAL_EXTI_GetPending+0x3c>)
 800374c:	695a      	ldr	r2, [r3, #20]
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	401a      	ands	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	fa22 f303 	lsr.w	r3, r2, r3
 8003758:	60fb      	str	r3, [r7, #12]
  return regval;
 800375a:	68fb      	ldr	r3, [r7, #12]
}
 800375c:	4618      	mov	r0, r3
 800375e:	371c      	adds	r7, #28
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr
 8003768:	40013c00 	.word	0x40013c00

0800376c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800376c:	b480      	push	{r7}
 800376e:	b089      	sub	sp, #36	; 0x24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800377a:	2300      	movs	r3, #0
 800377c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800377e:	2300      	movs	r3, #0
 8003780:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
 8003786:	e159      	b.n	8003a3c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	f040 8148 	bne.w	8003a36 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d00b      	beq.n	80037c6 <HAL_GPIO_Init+0x5a>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d007      	beq.n	80037c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80037ba:	2b11      	cmp	r3, #17
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b12      	cmp	r3, #18
 80037c4:	d130      	bne.n	8003828 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	2203      	movs	r2, #3
 80037d2:	fa02 f303 	lsl.w	r3, r2, r3
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68da      	ldr	r2, [r3, #12]
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037fc:	2201      	movs	r2, #1
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	091b      	lsrs	r3, r3, #4
 8003812:	f003 0201 	and.w	r2, r3, #1
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689a      	ldr	r2, [r3, #8]
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d003      	beq.n	8003868 <HAL_GPIO_Init+0xfc>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b12      	cmp	r3, #18
 8003866:	d123      	bne.n	80038b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	08da      	lsrs	r2, r3, #3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	3208      	adds	r2, #8
 8003870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003874:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	220f      	movs	r2, #15
 8003880:	fa02 f303 	lsl.w	r3, r2, r3
 8003884:	43db      	mvns	r3, r3
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	4013      	ands	r3, r2
 800388a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	fa02 f303 	lsl.w	r3, r2, r3
 800389c:	69ba      	ldr	r2, [r7, #24]
 800389e:	4313      	orrs	r3, r2
 80038a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	08da      	lsrs	r2, r3, #3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3208      	adds	r2, #8
 80038aa:	69b9      	ldr	r1, [r7, #24]
 80038ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	005b      	lsls	r3, r3, #1
 80038ba:	2203      	movs	r2, #3
 80038bc:	fa02 f303 	lsl.w	r3, r2, r3
 80038c0:	43db      	mvns	r3, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	4013      	ands	r3, r2
 80038c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f003 0203 	and.w	r2, r3, #3
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	69ba      	ldr	r2, [r7, #24]
 80038da:	4313      	orrs	r3, r2
 80038dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69ba      	ldr	r2, [r7, #24]
 80038e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a2 	beq.w	8003a36 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b56      	ldr	r3, [pc, #344]	; (8003a50 <HAL_GPIO_Init+0x2e4>)
 80038f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fa:	4a55      	ldr	r2, [pc, #340]	; (8003a50 <HAL_GPIO_Init+0x2e4>)
 80038fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003900:	6453      	str	r3, [r2, #68]	; 0x44
 8003902:	4b53      	ldr	r3, [pc, #332]	; (8003a50 <HAL_GPIO_Init+0x2e4>)
 8003904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800390e:	4a51      	ldr	r2, [pc, #324]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800391a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	220f      	movs	r2, #15
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43db      	mvns	r3, r3
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	4013      	ands	r3, r2
 8003930:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a48      	ldr	r2, [pc, #288]	; (8003a58 <HAL_GPIO_Init+0x2ec>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d019      	beq.n	800396e <HAL_GPIO_Init+0x202>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a47      	ldr	r2, [pc, #284]	; (8003a5c <HAL_GPIO_Init+0x2f0>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d013      	beq.n	800396a <HAL_GPIO_Init+0x1fe>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a46      	ldr	r2, [pc, #280]	; (8003a60 <HAL_GPIO_Init+0x2f4>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d00d      	beq.n	8003966 <HAL_GPIO_Init+0x1fa>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a45      	ldr	r2, [pc, #276]	; (8003a64 <HAL_GPIO_Init+0x2f8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d007      	beq.n	8003962 <HAL_GPIO_Init+0x1f6>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a44      	ldr	r2, [pc, #272]	; (8003a68 <HAL_GPIO_Init+0x2fc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_GPIO_Init+0x1f2>
 800395a:	2304      	movs	r3, #4
 800395c:	e008      	b.n	8003970 <HAL_GPIO_Init+0x204>
 800395e:	2307      	movs	r3, #7
 8003960:	e006      	b.n	8003970 <HAL_GPIO_Init+0x204>
 8003962:	2303      	movs	r3, #3
 8003964:	e004      	b.n	8003970 <HAL_GPIO_Init+0x204>
 8003966:	2302      	movs	r3, #2
 8003968:	e002      	b.n	8003970 <HAL_GPIO_Init+0x204>
 800396a:	2301      	movs	r3, #1
 800396c:	e000      	b.n	8003970 <HAL_GPIO_Init+0x204>
 800396e:	2300      	movs	r3, #0
 8003970:	69fa      	ldr	r2, [r7, #28]
 8003972:	f002 0203 	and.w	r2, r2, #3
 8003976:	0092      	lsls	r2, r2, #2
 8003978:	4093      	lsls	r3, r2
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4313      	orrs	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003980:	4934      	ldr	r1, [pc, #208]	; (8003a54 <HAL_GPIO_Init+0x2e8>)
 8003982:	69fb      	ldr	r3, [r7, #28]
 8003984:	089b      	lsrs	r3, r3, #2
 8003986:	3302      	adds	r3, #2
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800398e:	4b37      	ldr	r3, [pc, #220]	; (8003a6c <HAL_GPIO_Init+0x300>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b2:	4a2e      	ldr	r2, [pc, #184]	; (8003a6c <HAL_GPIO_Init+0x300>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039b8:	4b2c      	ldr	r3, [pc, #176]	; (8003a6c <HAL_GPIO_Init+0x300>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039dc:	4a23      	ldr	r2, [pc, #140]	; (8003a6c <HAL_GPIO_Init+0x300>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039e2:	4b22      	ldr	r3, [pc, #136]	; (8003a6c <HAL_GPIO_Init+0x300>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d003      	beq.n	8003a06 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a06:	4a19      	ldr	r2, [pc, #100]	; (8003a6c <HAL_GPIO_Init+0x300>)
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a0c:	4b17      	ldr	r3, [pc, #92]	; (8003a6c <HAL_GPIO_Init+0x300>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a30:	4a0e      	ldr	r2, [pc, #56]	; (8003a6c <HAL_GPIO_Init+0x300>)
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	61fb      	str	r3, [r7, #28]
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b0f      	cmp	r3, #15
 8003a40:	f67f aea2 	bls.w	8003788 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a44:	bf00      	nop
 8003a46:	3724      	adds	r7, #36	; 0x24
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40013800 	.word	0x40013800
 8003a58:	40020000 	.word	0x40020000
 8003a5c:	40020400 	.word	0x40020400
 8003a60:	40020800 	.word	0x40020800
 8003a64:	40020c00 	.word	0x40020c00
 8003a68:	40021000 	.word	0x40021000
 8003a6c:	40013c00 	.word	0x40013c00

08003a70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	887b      	ldrh	r3, [r7, #2]
 8003a82:	4013      	ands	r3, r2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	73fb      	strb	r3, [r7, #15]
 8003a8c:	e001      	b.n	8003a92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	807b      	strh	r3, [r7, #2]
 8003aac:	4613      	mov	r3, r2
 8003aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab0:	787b      	ldrb	r3, [r7, #1]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ab6:	887a      	ldrh	r2, [r7, #2]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003abc:	e003      	b.n	8003ac6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003abe:	887b      	ldrh	r3, [r7, #2]
 8003ac0:	041a      	lsls	r2, r3, #16
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	619a      	str	r2, [r3, #24]
}
 8003ac6:	bf00      	nop
 8003ac8:	370c      	adds	r7, #12
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
	...

08003ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	4603      	mov	r3, r0
 8003adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ade:	4b08      	ldr	r3, [pc, #32]	; (8003b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae0:	695a      	ldr	r2, [r3, #20]
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aea:	4a05      	ldr	r2, [pc, #20]	; (8003b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003af0:	88fb      	ldrh	r3, [r7, #6]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 f806 	bl	8003b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40013c00 	.word	0x40013c00

08003b04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e25b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d075      	beq.n	8003c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3a:	4ba3      	ldr	r3, [pc, #652]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d00c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b46:	4ba0      	ldr	r3, [pc, #640]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d112      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b52:	4b9d      	ldr	r3, [pc, #628]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b60:	4b99      	ldr	r3, [pc, #612]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05b      	beq.n	8003c24 <HAL_RCC_OscConfig+0x108>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d157      	bne.n	8003c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e236      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b80:	d106      	bne.n	8003b90 <HAL_RCC_OscConfig+0x74>
 8003b82:	4b91      	ldr	r3, [pc, #580]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a90      	ldr	r2, [pc, #576]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b8c:	6013      	str	r3, [r2, #0]
 8003b8e:	e01d      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b98:	d10c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x98>
 8003b9a:	4b8b      	ldr	r3, [pc, #556]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a8a      	ldr	r2, [pc, #552]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	4b88      	ldr	r3, [pc, #544]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a87      	ldr	r2, [pc, #540]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb0:	6013      	str	r3, [r2, #0]
 8003bb2:	e00b      	b.n	8003bcc <HAL_RCC_OscConfig+0xb0>
 8003bb4:	4b84      	ldr	r3, [pc, #528]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a83      	ldr	r2, [pc, #524]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b81      	ldr	r3, [pc, #516]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a80      	ldr	r2, [pc, #512]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d013      	beq.n	8003bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd4:	f7ff fa5a 	bl	800308c <HAL_GetTick>
 8003bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bda:	e008      	b.n	8003bee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bdc:	f7ff fa56 	bl	800308c <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b64      	cmp	r3, #100	; 0x64
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e1fb      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bee:	4b76      	ldr	r3, [pc, #472]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d0f0      	beq.n	8003bdc <HAL_RCC_OscConfig+0xc0>
 8003bfa:	e014      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bfc:	f7ff fa46 	bl	800308c <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c04:	f7ff fa42 	bl	800308c <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e1e7      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c16:	4b6c      	ldr	r3, [pc, #432]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f0      	bne.n	8003c04 <HAL_RCC_OscConfig+0xe8>
 8003c22:	e000      	b.n	8003c26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d063      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c32:	4b65      	ldr	r3, [pc, #404]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f003 030c 	and.w	r3, r3, #12
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d00b      	beq.n	8003c56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c3e:	4b62      	ldr	r3, [pc, #392]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d11c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d116      	bne.n	8003c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c56:	4b5c      	ldr	r3, [pc, #368]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d001      	beq.n	8003c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e1bb      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6e:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	4952      	ldr	r1, [pc, #328]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c82:	e03a      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d020      	beq.n	8003cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c8c:	4b4f      	ldr	r3, [pc, #316]	; (8003dcc <HAL_RCC_OscConfig+0x2b0>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7ff f9fb 	bl	800308c <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c98:	e008      	b.n	8003cac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9a:	f7ff f9f7 	bl	800308c <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e19c      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cac:	4b46      	ldr	r3, [pc, #280]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0f0      	beq.n	8003c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cb8:	4b43      	ldr	r3, [pc, #268]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	4940      	ldr	r1, [pc, #256]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	600b      	str	r3, [r1, #0]
 8003ccc:	e015      	b.n	8003cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cce:	4b3f      	ldr	r3, [pc, #252]	; (8003dcc <HAL_RCC_OscConfig+0x2b0>)
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd4:	f7ff f9da 	bl	800308c <HAL_GetTick>
 8003cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cda:	e008      	b.n	8003cee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cdc:	f7ff f9d6 	bl	800308c <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e17b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cee:	4b36      	ldr	r3, [pc, #216]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1f0      	bne.n	8003cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0308 	and.w	r3, r3, #8
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d030      	beq.n	8003d68 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d016      	beq.n	8003d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d0e:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <HAL_RCC_OscConfig+0x2b4>)
 8003d10:	2201      	movs	r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d14:	f7ff f9ba 	bl	800308c <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1a:	e008      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7ff f9b6 	bl	800308c <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d901      	bls.n	8003d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e15b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d2e:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d0f0      	beq.n	8003d1c <HAL_RCC_OscConfig+0x200>
 8003d3a:	e015      	b.n	8003d68 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCC_OscConfig+0x2b4>)
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d42:	f7ff f9a3 	bl	800308c <HAL_GetTick>
 8003d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d48:	e008      	b.n	8003d5c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4a:	f7ff f99f 	bl	800308c <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b02      	cmp	r3, #2
 8003d56:	d901      	bls.n	8003d5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e144      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d5c:	4b1a      	ldr	r3, [pc, #104]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f0      	bne.n	8003d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f000 80a0 	beq.w	8003eb6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d76:	2300      	movs	r3, #0
 8003d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d7a:	4b13      	ldr	r3, [pc, #76]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10f      	bne.n	8003da6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d94:	6413      	str	r3, [r2, #64]	; 0x40
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_RCC_OscConfig+0x2ac>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9e:	60bb      	str	r3, [r7, #8]
 8003da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da2:	2301      	movs	r3, #1
 8003da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da6:	4b0b      	ldr	r3, [pc, #44]	; (8003dd4 <HAL_RCC_OscConfig+0x2b8>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d121      	bne.n	8003df6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <HAL_RCC_OscConfig+0x2b8>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <HAL_RCC_OscConfig+0x2b8>)
 8003db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dbe:	f7ff f965 	bl	800308c <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc4:	e011      	b.n	8003dea <HAL_RCC_OscConfig+0x2ce>
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	42470000 	.word	0x42470000
 8003dd0:	42470e80 	.word	0x42470e80
 8003dd4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd8:	f7ff f958 	bl	800308c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e0fd      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dea:	4b81      	ldr	r3, [pc, #516]	; (8003ff0 <HAL_RCC_OscConfig+0x4d4>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d106      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2f0>
 8003dfe:	4b7d      	ldr	r3, [pc, #500]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a7c      	ldr	r2, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e04:	f043 0301 	orr.w	r3, r3, #1
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCC_OscConfig+0x32a>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b05      	cmp	r3, #5
 8003e12:	d10c      	bne.n	8003e2e <HAL_RCC_OscConfig+0x312>
 8003e14:	4b77      	ldr	r3, [pc, #476]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a76      	ldr	r2, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e1a:	f043 0304 	orr.w	r3, r3, #4
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	4b74      	ldr	r3, [pc, #464]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e24:	4a73      	ldr	r2, [pc, #460]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2c:	e00b      	b.n	8003e46 <HAL_RCC_OscConfig+0x32a>
 8003e2e:	4b71      	ldr	r3, [pc, #452]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e32:	4a70      	ldr	r2, [pc, #448]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6713      	str	r3, [r2, #112]	; 0x70
 8003e3a:	4b6e      	ldr	r3, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3e:	4a6d      	ldr	r2, [pc, #436]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e40:	f023 0304 	bic.w	r3, r3, #4
 8003e44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d015      	beq.n	8003e7a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4e:	f7ff f91d 	bl	800308c <HAL_GetTick>
 8003e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e54:	e00a      	b.n	8003e6c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e56:	f7ff f919 	bl	800308c <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d901      	bls.n	8003e6c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e0bc      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6c:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ee      	beq.n	8003e56 <HAL_RCC_OscConfig+0x33a>
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e7a:	f7ff f907 	bl	800308c <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e82:	f7ff f903 	bl	800308c <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0a6      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e98:	4b56      	ldr	r3, [pc, #344]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1ee      	bne.n	8003e82 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea4:	7dfb      	ldrb	r3, [r7, #23]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d105      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eaa:	4b52      	ldr	r3, [pc, #328]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a51      	ldr	r2, [pc, #324]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 8092 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ec0:	4b4c      	ldr	r3, [pc, #304]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d05c      	beq.n	8003f86 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d141      	bne.n	8003f58 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed4:	4b48      	ldr	r3, [pc, #288]	; (8003ff8 <HAL_RCC_OscConfig+0x4dc>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eda:	f7ff f8d7 	bl	800308c <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee2:	f7ff f8d3 	bl	800308c <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e078      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef4:	4b3f      	ldr	r3, [pc, #252]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1f0      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	019b      	lsls	r3, r3, #6
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f16:	085b      	lsrs	r3, r3, #1
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	041b      	lsls	r3, r3, #16
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f22:	061b      	lsls	r3, r3, #24
 8003f24:	4933      	ldr	r1, [pc, #204]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f2a:	4b33      	ldr	r3, [pc, #204]	; (8003ff8 <HAL_RCC_OscConfig+0x4dc>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f30:	f7ff f8ac 	bl	800308c <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f36:	e008      	b.n	8003f4a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f38:	f7ff f8a8 	bl	800308c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d901      	bls.n	8003f4a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f46:	2303      	movs	r3, #3
 8003f48:	e04d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d0f0      	beq.n	8003f38 <HAL_RCC_OscConfig+0x41c>
 8003f56:	e045      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f58:	4b27      	ldr	r3, [pc, #156]	; (8003ff8 <HAL_RCC_OscConfig+0x4dc>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5e:	f7ff f895 	bl	800308c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f66:	f7ff f891 	bl	800308c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e036      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x44a>
 8003f84:	e02e      	b.n	8003fe4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e029      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f92:	4b18      	ldr	r3, [pc, #96]	; (8003ff4 <HAL_RCC_OscConfig+0x4d8>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d11c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d115      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fb4:	68fa      	ldr	r2, [r7, #12]
 8003fb6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fba:	4013      	ands	r3, r2
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10d      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d001      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e000      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40007000 	.word	0x40007000
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470060 	.word	0x42470060

08003ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e0cc      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004010:	4b68      	ldr	r3, [pc, #416]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 030f 	and.w	r3, r3, #15
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d90c      	bls.n	8004038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800401e:	4b65      	ldr	r3, [pc, #404]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004026:	4b63      	ldr	r3, [pc, #396]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	683a      	ldr	r2, [r7, #0]
 8004030:	429a      	cmp	r2, r3
 8004032:	d001      	beq.n	8004038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e0b8      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d020      	beq.n	8004086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d005      	beq.n	800405c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004050:	4b59      	ldr	r3, [pc, #356]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a58      	ldr	r2, [pc, #352]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004056:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800405a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0308 	and.w	r3, r3, #8
 8004064:	2b00      	cmp	r3, #0
 8004066:	d005      	beq.n	8004074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	4a52      	ldr	r2, [pc, #328]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800406e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004074:	4b50      	ldr	r3, [pc, #320]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	494d      	ldr	r1, [pc, #308]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	4313      	orrs	r3, r2
 8004084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d044      	beq.n	800411c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d107      	bne.n	80040aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800409a:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d119      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e07f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d003      	beq.n	80040ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040b6:	2b03      	cmp	r3, #3
 80040b8:	d107      	bne.n	80040ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ba:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d109      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e06f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e067      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	4934      	ldr	r1, [pc, #208]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040ec:	f7fe ffce 	bl	800308c <HAL_GetTick>
 80040f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040f2:	e00a      	b.n	800410a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040f4:	f7fe ffca 	bl	800308c <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e04f      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800410a:	4b2b      	ldr	r3, [pc, #172]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f003 020c 	and.w	r2, r3, #12
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	429a      	cmp	r2, r3
 800411a:	d1eb      	bne.n	80040f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800411c:	4b25      	ldr	r3, [pc, #148]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	683a      	ldr	r2, [r7, #0]
 8004126:	429a      	cmp	r2, r3
 8004128:	d20c      	bcs.n	8004144 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800412a:	4b22      	ldr	r3, [pc, #136]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 800412c:	683a      	ldr	r2, [r7, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004132:	4b20      	ldr	r3, [pc, #128]	; (80041b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 030f 	and.w	r3, r3, #15
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	429a      	cmp	r2, r3
 800413e:	d001      	beq.n	8004144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e032      	b.n	80041aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b00      	cmp	r3, #0
 800414e:	d008      	beq.n	8004162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	4916      	ldr	r1, [pc, #88]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800415e:	4313      	orrs	r3, r2
 8004160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0308 	and.w	r3, r3, #8
 800416a:	2b00      	cmp	r3, #0
 800416c:	d009      	beq.n	8004182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	490e      	ldr	r1, [pc, #56]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	4313      	orrs	r3, r2
 8004180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004182:	f000 f821 	bl	80041c8 <HAL_RCC_GetSysClockFreq>
 8004186:	4601      	mov	r1, r0
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	4a0a      	ldr	r2, [pc, #40]	; (80041bc <HAL_RCC_ClockConfig+0x1c0>)
 8004194:	5cd3      	ldrb	r3, [r2, r3]
 8004196:	fa21 f303 	lsr.w	r3, r1, r3
 800419a:	4a09      	ldr	r2, [pc, #36]	; (80041c0 <HAL_RCC_ClockConfig+0x1c4>)
 800419c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800419e:	4b09      	ldr	r3, [pc, #36]	; (80041c4 <HAL_RCC_ClockConfig+0x1c8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7fd fde8 	bl	8001d78 <HAL_InitTick>

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40023c00 	.word	0x40023c00
 80041b8:	40023800 	.word	0x40023800
 80041bc:	0800bfb4 	.word	0x0800bfb4
 80041c0:	20000000 	.word	0x20000000
 80041c4:	20000060 	.word	0x20000060

080041c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041ce:	2300      	movs	r3, #0
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	2300      	movs	r3, #0
 80041d8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041de:	4b63      	ldr	r3, [pc, #396]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f003 030c 	and.w	r3, r3, #12
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d007      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0x32>
 80041ea:	2b08      	cmp	r3, #8
 80041ec:	d008      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0x38>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f040 80b4 	bne.w	800435c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041f4:	4b5e      	ldr	r3, [pc, #376]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041f6:	60bb      	str	r3, [r7, #8]
       break;
 80041f8:	e0b3      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041fa:	4b5d      	ldr	r3, [pc, #372]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041fc:	60bb      	str	r3, [r7, #8]
      break;
 80041fe:	e0b0      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004200:	4b5a      	ldr	r3, [pc, #360]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004208:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800420a:	4b58      	ldr	r3, [pc, #352]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d04a      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004216:	4b55      	ldr	r3, [pc, #340]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	099b      	lsrs	r3, r3, #6
 800421c:	f04f 0400 	mov.w	r4, #0
 8004220:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	ea03 0501 	and.w	r5, r3, r1
 800422c:	ea04 0602 	and.w	r6, r4, r2
 8004230:	4629      	mov	r1, r5
 8004232:	4632      	mov	r2, r6
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f04f 0400 	mov.w	r4, #0
 800423c:	0154      	lsls	r4, r2, #5
 800423e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004242:	014b      	lsls	r3, r1, #5
 8004244:	4619      	mov	r1, r3
 8004246:	4622      	mov	r2, r4
 8004248:	1b49      	subs	r1, r1, r5
 800424a:	eb62 0206 	sbc.w	r2, r2, r6
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f04f 0400 	mov.w	r4, #0
 8004256:	0194      	lsls	r4, r2, #6
 8004258:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800425c:	018b      	lsls	r3, r1, #6
 800425e:	1a5b      	subs	r3, r3, r1
 8004260:	eb64 0402 	sbc.w	r4, r4, r2
 8004264:	f04f 0100 	mov.w	r1, #0
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	00e2      	lsls	r2, r4, #3
 800426e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004272:	00d9      	lsls	r1, r3, #3
 8004274:	460b      	mov	r3, r1
 8004276:	4614      	mov	r4, r2
 8004278:	195b      	adds	r3, r3, r5
 800427a:	eb44 0406 	adc.w	r4, r4, r6
 800427e:	f04f 0100 	mov.w	r1, #0
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	02a2      	lsls	r2, r4, #10
 8004288:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800428c:	0299      	lsls	r1, r3, #10
 800428e:	460b      	mov	r3, r1
 8004290:	4614      	mov	r4, r2
 8004292:	4618      	mov	r0, r3
 8004294:	4621      	mov	r1, r4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f04f 0400 	mov.w	r4, #0
 800429c:	461a      	mov	r2, r3
 800429e:	4623      	mov	r3, r4
 80042a0:	f7fc fdf2 	bl	8000e88 <__aeabi_uldivmod>
 80042a4:	4603      	mov	r3, r0
 80042a6:	460c      	mov	r4, r1
 80042a8:	60fb      	str	r3, [r7, #12]
 80042aa:	e049      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ac:	4b2f      	ldr	r3, [pc, #188]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	099b      	lsrs	r3, r3, #6
 80042b2:	f04f 0400 	mov.w	r4, #0
 80042b6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	ea03 0501 	and.w	r5, r3, r1
 80042c2:	ea04 0602 	and.w	r6, r4, r2
 80042c6:	4629      	mov	r1, r5
 80042c8:	4632      	mov	r2, r6
 80042ca:	f04f 0300 	mov.w	r3, #0
 80042ce:	f04f 0400 	mov.w	r4, #0
 80042d2:	0154      	lsls	r4, r2, #5
 80042d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80042d8:	014b      	lsls	r3, r1, #5
 80042da:	4619      	mov	r1, r3
 80042dc:	4622      	mov	r2, r4
 80042de:	1b49      	subs	r1, r1, r5
 80042e0:	eb62 0206 	sbc.w	r2, r2, r6
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	f04f 0400 	mov.w	r4, #0
 80042ec:	0194      	lsls	r4, r2, #6
 80042ee:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80042f2:	018b      	lsls	r3, r1, #6
 80042f4:	1a5b      	subs	r3, r3, r1
 80042f6:	eb64 0402 	sbc.w	r4, r4, r2
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	00e2      	lsls	r2, r4, #3
 8004304:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004308:	00d9      	lsls	r1, r3, #3
 800430a:	460b      	mov	r3, r1
 800430c:	4614      	mov	r4, r2
 800430e:	195b      	adds	r3, r3, r5
 8004310:	eb44 0406 	adc.w	r4, r4, r6
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	f04f 0200 	mov.w	r2, #0
 800431c:	02a2      	lsls	r2, r4, #10
 800431e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004322:	0299      	lsls	r1, r3, #10
 8004324:	460b      	mov	r3, r1
 8004326:	4614      	mov	r4, r2
 8004328:	4618      	mov	r0, r3
 800432a:	4621      	mov	r1, r4
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f04f 0400 	mov.w	r4, #0
 8004332:	461a      	mov	r2, r3
 8004334:	4623      	mov	r3, r4
 8004336:	f7fc fda7 	bl	8000e88 <__aeabi_uldivmod>
 800433a:	4603      	mov	r3, r0
 800433c:	460c      	mov	r4, r1
 800433e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004340:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	0c1b      	lsrs	r3, r3, #16
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	3301      	adds	r3, #1
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	fbb2 f3f3 	udiv	r3, r2, r3
 8004358:	60bb      	str	r3, [r7, #8]
      break;
 800435a:	e002      	b.n	8004362 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800435c:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800435e:	60bb      	str	r3, [r7, #8]
      break;
 8004360:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004362:	68bb      	ldr	r3, [r7, #8]
}
 8004364:	4618      	mov	r0, r3
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800436c:	40023800 	.word	0x40023800
 8004370:	00f42400 	.word	0x00f42400

08004374 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004378:	4b03      	ldr	r3, [pc, #12]	; (8004388 <HAL_RCC_GetHCLKFreq+0x14>)
 800437a:	681b      	ldr	r3, [r3, #0]
}
 800437c:	4618      	mov	r0, r3
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr
 8004386:	bf00      	nop
 8004388:	20000000 	.word	0x20000000

0800438c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004390:	f7ff fff0 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 8004394:	4601      	mov	r1, r0
 8004396:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	0a9b      	lsrs	r3, r3, #10
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	4a03      	ldr	r2, [pc, #12]	; (80043b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043a2:	5cd3      	ldrb	r3, [r2, r3]
 80043a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40023800 	.word	0x40023800
 80043b0:	0800bfc4 	.word	0x0800bfc4

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043b8:	f7ff ffdc 	bl	8004374 <HAL_RCC_GetHCLKFreq>
 80043bc:	4601      	mov	r1, r0
 80043be:	4b05      	ldr	r3, [pc, #20]	; (80043d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	0b5b      	lsrs	r3, r3, #13
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4a03      	ldr	r2, [pc, #12]	; (80043d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043ca:	5cd3      	ldrb	r3, [r2, r3]
 80043cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	40023800 	.word	0x40023800
 80043d8:	0800bfc4 	.word	0x0800bfc4

080043dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	220f      	movs	r2, #15
 80043ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0203 	and.w	r2, r3, #3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <HAL_RCC_GetClockConfig+0x5c>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	08db      	lsrs	r3, r3, #3
 8004416:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <HAL_RCC_GetClockConfig+0x60>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 020f 	and.w	r2, r3, #15
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	601a      	str	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40023800 	.word	0x40023800
 800443c:	40023c00 	.word	0x40023c00

08004440 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e056      	b.n	8004500 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d106      	bne.n	8004472 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800446c:	6878      	ldr	r0, [r7, #4]
 800446e:	f7fd fb07 	bl	8001a80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	431a      	orrs	r2, r3
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044ae:	431a      	orrs	r2, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	ea42 0103 	orr.w	r1, r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	0c1b      	lsrs	r3, r3, #16
 80044d0:	f003 0104 	and.w	r1, r3, #4
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	69da      	ldr	r2, [r3, #28]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2201      	movs	r2, #1
 80044fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b088      	sub	sp, #32
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	603b      	str	r3, [r7, #0]
 8004514:	4613      	mov	r3, r2
 8004516:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004518:	2300      	movs	r3, #0
 800451a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_SPI_Transmit+0x22>
 8004526:	2302      	movs	r3, #2
 8004528:	e11e      	b.n	8004768 <HAL_SPI_Transmit+0x260>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004532:	f7fe fdab 	bl	800308c <HAL_GetTick>
 8004536:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004542:	b2db      	uxtb	r3, r3
 8004544:	2b01      	cmp	r3, #1
 8004546:	d002      	beq.n	800454e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004548:	2302      	movs	r3, #2
 800454a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800454c:	e103      	b.n	8004756 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <HAL_SPI_Transmit+0x52>
 8004554:	88fb      	ldrh	r3, [r7, #6]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800455e:	e0fa      	b.n	8004756 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2203      	movs	r2, #3
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	88fa      	ldrh	r2, [r7, #6]
 800457e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a6:	d107      	bne.n	80045b8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045b6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c2:	2b40      	cmp	r3, #64	; 0x40
 80045c4:	d007      	beq.n	80045d6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d14b      	bne.n	8004678 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d002      	beq.n	80045ee <HAL_SPI_Transmit+0xe6>
 80045e8:	8afb      	ldrh	r3, [r7, #22]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d13e      	bne.n	800466c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	881a      	ldrh	r2, [r3, #0]
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	1c9a      	adds	r2, r3, #2
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004612:	e02b      	b.n	800466c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d112      	bne.n	8004648 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004632:	1c9a      	adds	r2, r3, #2
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	86da      	strh	r2, [r3, #54]	; 0x36
 8004646:	e011      	b.n	800466c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004648:	f7fe fd20 	bl	800308c <HAL_GetTick>
 800464c:	4602      	mov	r2, r0
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	1ad3      	subs	r3, r2, r3
 8004652:	683a      	ldr	r2, [r7, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d803      	bhi.n	8004660 <HAL_SPI_Transmit+0x158>
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465e:	d102      	bne.n	8004666 <HAL_SPI_Transmit+0x15e>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004666:	2303      	movs	r3, #3
 8004668:	77fb      	strb	r3, [r7, #31]
          goto error;
 800466a:	e074      	b.n	8004756 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1ce      	bne.n	8004614 <HAL_SPI_Transmit+0x10c>
 8004676:	e04c      	b.n	8004712 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d002      	beq.n	8004686 <HAL_SPI_Transmit+0x17e>
 8004680:	8afb      	ldrh	r3, [r7, #22]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d140      	bne.n	8004708 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	330c      	adds	r3, #12
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80046ac:	e02c      	b.n	8004708 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0302 	and.w	r3, r3, #2
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d113      	bne.n	80046e4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	330c      	adds	r3, #12
 80046c6:	7812      	ldrb	r2, [r2, #0]
 80046c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ce:	1c5a      	adds	r2, r3, #1
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d8:	b29b      	uxth	r3, r3
 80046da:	3b01      	subs	r3, #1
 80046dc:	b29a      	uxth	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	86da      	strh	r2, [r3, #54]	; 0x36
 80046e2:	e011      	b.n	8004708 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046e4:	f7fe fcd2 	bl	800308c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d803      	bhi.n	80046fc <HAL_SPI_Transmit+0x1f4>
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fa:	d102      	bne.n	8004702 <HAL_SPI_Transmit+0x1fa>
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d102      	bne.n	8004708 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004706:	e026      	b.n	8004756 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1cd      	bne.n	80046ae <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	6839      	ldr	r1, [r7, #0]
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fba4 	bl	8004e64 <SPI_EndRxTxTransaction>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d002      	beq.n	8004728 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004730:	2300      	movs	r3, #0
 8004732:	613b      	str	r3, [r7, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e000      	b.n	8004756 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004754:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004766:	7ffb      	ldrb	r3, [r7, #31]
}
 8004768:	4618      	mov	r0, r3
 800476a:	3720      	adds	r7, #32
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af02      	add	r7, sp, #8
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	603b      	str	r3, [r7, #0]
 800477c:	4613      	mov	r3, r2
 800477e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004780:	2300      	movs	r3, #0
 8004782:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800478c:	d112      	bne.n	80047b4 <HAL_SPI_Receive+0x44>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10e      	bne.n	80047b4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2204      	movs	r2, #4
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800479e:	88fa      	ldrh	r2, [r7, #6]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	4613      	mov	r3, r2
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f8e9 	bl	8004982 <HAL_SPI_TransmitReceive>
 80047b0:	4603      	mov	r3, r0
 80047b2:	e0e2      	b.n	800497a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d101      	bne.n	80047c2 <HAL_SPI_Receive+0x52>
 80047be:	2302      	movs	r3, #2
 80047c0:	e0db      	b.n	800497a <HAL_SPI_Receive+0x20a>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047ca:	f7fe fc5f 	bl	800308c <HAL_GetTick>
 80047ce:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d002      	beq.n	80047e2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
 80047de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047e0:	e0c2      	b.n	8004968 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <HAL_SPI_Receive+0x7e>
 80047e8:	88fb      	ldrh	r3, [r7, #6]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d102      	bne.n	80047f4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80047f2:	e0b9      	b.n	8004968 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2204      	movs	r2, #4
 80047f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2200      	movs	r2, #0
 8004800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	88fa      	ldrh	r2, [r7, #6]
 800480c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	88fa      	ldrh	r2, [r7, #6]
 8004812:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483a:	d107      	bne.n	800484c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800484a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d007      	beq.n	800486a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d162      	bne.n	8004938 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004872:	e02e      	b.n	80048d2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b01      	cmp	r3, #1
 8004880:	d115      	bne.n	80048ae <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f103 020c 	add.w	r2, r3, #12
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488e:	7812      	ldrb	r2, [r2, #0]
 8004890:	b2d2      	uxtb	r2, r2
 8004892:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004898:	1c5a      	adds	r2, r3, #1
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048ac:	e011      	b.n	80048d2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ae:	f7fe fbed 	bl	800308c <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d803      	bhi.n	80048c6 <HAL_SPI_Receive+0x156>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d102      	bne.n	80048cc <HAL_SPI_Receive+0x15c>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d102      	bne.n	80048d2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80048cc:	2303      	movs	r3, #3
 80048ce:	75fb      	strb	r3, [r7, #23]
          goto error;
 80048d0:	e04a      	b.n	8004968 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d1cb      	bne.n	8004874 <HAL_SPI_Receive+0x104>
 80048dc:	e031      	b.n	8004942 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f003 0301 	and.w	r3, r3, #1
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d113      	bne.n	8004914 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048f6:	b292      	uxth	r2, r2
 80048f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fe:	1c9a      	adds	r2, r3, #2
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004908:	b29b      	uxth	r3, r3
 800490a:	3b01      	subs	r3, #1
 800490c:	b29a      	uxth	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004912:	e011      	b.n	8004938 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004914:	f7fe fbba 	bl	800308c <HAL_GetTick>
 8004918:	4602      	mov	r2, r0
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	1ad3      	subs	r3, r2, r3
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d803      	bhi.n	800492c <HAL_SPI_Receive+0x1bc>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492a:	d102      	bne.n	8004932 <HAL_SPI_Receive+0x1c2>
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d102      	bne.n	8004938 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004936:	e017      	b.n	8004968 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1cd      	bne.n	80048de <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	6839      	ldr	r1, [r7, #0]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 fa27 	bl	8004d9a <SPI_EndRxTransaction>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d002      	beq.n	8004958 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2220      	movs	r2, #32
 8004956:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004960:	2301      	movs	r3, #1
 8004962:	75fb      	strb	r3, [r7, #23]
 8004964:	e000      	b.n	8004968 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004966:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004978:	7dfb      	ldrb	r3, [r7, #23]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3718      	adds	r7, #24
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b08c      	sub	sp, #48	; 0x30
 8004986:	af00      	add	r7, sp, #0
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004990:	2301      	movs	r3, #1
 8004992:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x26>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e18a      	b.n	8004cbe <HAL_SPI_TransmitReceive+0x33c>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b0:	f7fe fb6c 	bl	800308c <HAL_GetTick>
 80049b4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80049c6:	887b      	ldrh	r3, [r7, #2]
 80049c8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d00f      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x70>
 80049d2:	69fb      	ldr	r3, [r7, #28]
 80049d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049d8:	d107      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d103      	bne.n	80049ea <HAL_SPI_TransmitReceive+0x68>
 80049e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d003      	beq.n	80049f2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80049ea:	2302      	movs	r3, #2
 80049ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80049f0:	e15b      	b.n	8004caa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x82>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <HAL_SPI_TransmitReceive+0x82>
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d103      	bne.n	8004a0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004a0a:	e14e      	b.n	8004caa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d003      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2205      	movs	r2, #5
 8004a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	887a      	ldrh	r2, [r7, #2]
 8004a30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	887a      	ldrh	r2, [r7, #2]
 8004a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	887a      	ldrh	r2, [r7, #2]
 8004a42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a60:	2b40      	cmp	r3, #64	; 0x40
 8004a62:	d007      	beq.n	8004a74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a7c:	d178      	bne.n	8004b70 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d002      	beq.n	8004a8c <HAL_SPI_TransmitReceive+0x10a>
 8004a86:	8b7b      	ldrh	r3, [r7, #26]
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d166      	bne.n	8004b5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a90:	881a      	ldrh	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9c:	1c9a      	adds	r2, r3, #2
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	3b01      	subs	r3, #1
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ab0:	e053      	b.n	8004b5a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d11b      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x176>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <HAL_SPI_TransmitReceive+0x176>
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d113      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad4:	881a      	ldrh	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae0:	1c9a      	adds	r2, r3, #2
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b01      	cmp	r3, #1
 8004b04:	d119      	bne.n	8004b3a <HAL_SPI_TransmitReceive+0x1b8>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d014      	beq.n	8004b3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1a:	b292      	uxth	r2, r2
 8004b1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b22:	1c9a      	adds	r2, r3, #2
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	b29a      	uxth	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b36:	2301      	movs	r3, #1
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b3a:	f7fe faa7 	bl	800308c <HAL_GetTick>
 8004b3e:	4602      	mov	r2, r0
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	1ad3      	subs	r3, r2, r3
 8004b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d807      	bhi.n	8004b5a <HAL_SPI_TransmitReceive+0x1d8>
 8004b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d003      	beq.n	8004b5a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004b58:	e0a7      	b.n	8004caa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1a6      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x130>
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1a1      	bne.n	8004ab2 <HAL_SPI_TransmitReceive+0x130>
 8004b6e:	e07c      	b.n	8004c6a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x1fc>
 8004b78:	8b7b      	ldrh	r3, [r7, #26]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d16b      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	330c      	adds	r3, #12
 8004b88:	7812      	ldrb	r2, [r2, #0]
 8004b8a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ba4:	e057      	b.n	8004c56 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d11c      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x26c>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d017      	beq.n	8004bee <HAL_SPI_TransmitReceive+0x26c>
 8004bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d114      	bne.n	8004bee <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	7812      	ldrb	r2, [r2, #0]
 8004bd0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	3b01      	subs	r3, #1
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d119      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x2ae>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d014      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004c30:	f7fe fa2c 	bl	800308c <HAL_GetTick>
 8004c34:	4602      	mov	r2, r0
 8004c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c38:	1ad3      	subs	r3, r2, r3
 8004c3a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d803      	bhi.n	8004c48 <HAL_SPI_TransmitReceive+0x2c6>
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d102      	bne.n	8004c4e <HAL_SPI_TransmitReceive+0x2cc>
 8004c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d103      	bne.n	8004c56 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004c54:	e029      	b.n	8004caa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1a2      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x224>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d19d      	bne.n	8004ba6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f8f8 	bl	8004e64 <SPI_EndRxTxTransaction>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d006      	beq.n	8004c88 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004c86:	e010      	b.n	8004caa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	617b      	str	r3, [r7, #20]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	617b      	str	r3, [r7, #20]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	e000      	b.n	8004caa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ca8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2201      	movs	r2, #1
 8004cae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3730      	adds	r7, #48	; 0x30
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}

08004cc6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cc6:	b580      	push	{r7, lr}
 8004cc8:	b084      	sub	sp, #16
 8004cca:	af00      	add	r7, sp, #0
 8004ccc:	60f8      	str	r0, [r7, #12]
 8004cce:	60b9      	str	r1, [r7, #8]
 8004cd0:	603b      	str	r3, [r7, #0]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cd6:	e04c      	b.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d048      	beq.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004ce0:	f7fe f9d4 	bl	800308c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d902      	bls.n	8004cf6 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d13d      	bne.n	8004d72 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d04:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d0e:	d111      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d18:	d004      	beq.n	8004d24 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d22:	d107      	bne.n	8004d34 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d32:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d3c:	d10f      	bne.n	8004d5e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d5c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e00f      	b.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	689a      	ldr	r2, [r3, #8]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	461a      	mov	r2, r3
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d1a3      	bne.n	8004cd8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3710      	adds	r7, #16
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af02      	add	r7, sp, #8
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004dae:	d111      	bne.n	8004dd4 <SPI_EndRxTransaction+0x3a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db8:	d004      	beq.n	8004dc4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dc2:	d107      	bne.n	8004dd4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681a      	ldr	r2, [r3, #0]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dd2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ddc:	d12a      	bne.n	8004e34 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d012      	beq.n	8004e0e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	9300      	str	r3, [sp, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2200      	movs	r2, #0
 8004df0:	2180      	movs	r1, #128	; 0x80
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f7ff ff67 	bl	8004cc6 <SPI_WaitFlagStateUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d02d      	beq.n	8004e5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e02:	f043 0220 	orr.w	r2, r3, #32
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e026      	b.n	8004e5c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2200      	movs	r2, #0
 8004e16:	2101      	movs	r1, #1
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7ff ff54 	bl	8004cc6 <SPI_WaitFlagStateUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01a      	beq.n	8004e5a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e28:	f043 0220 	orr.w	r2, r3, #32
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e013      	b.n	8004e5c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff ff41 	bl	8004cc6 <SPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d007      	beq.n	8004e5a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e000      	b.n	8004e5c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af02      	add	r7, sp, #8
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e70:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <SPI_EndRxTxTransaction+0x7c>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1b      	ldr	r2, [pc, #108]	; (8004ee4 <SPI_EndRxTxTransaction+0x80>)
 8004e76:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7a:	0d5b      	lsrs	r3, r3, #21
 8004e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e80:	fb02 f303 	mul.w	r3, r2, r3
 8004e84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e8e:	d112      	bne.n	8004eb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	2200      	movs	r2, #0
 8004e98:	2180      	movs	r1, #128	; 0x80
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f7ff ff13 	bl	8004cc6 <SPI_WaitFlagStateUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d016      	beq.n	8004ed4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eaa:	f043 0220 	orr.w	r2, r3, #32
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e00f      	b.n	8004ed6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00a      	beq.n	8004ed2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ecc:	2b80      	cmp	r3, #128	; 0x80
 8004ece:	d0f2      	beq.n	8004eb6 <SPI_EndRxTxTransaction+0x52>
 8004ed0:	e000      	b.n	8004ed4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004ed2:	bf00      	nop
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	20000000 	.word	0x20000000
 8004ee4:	165e9f81 	.word	0x165e9f81

08004ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e01d      	b.n	8004f36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7fc fe54 	bl	8001bbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3304      	adds	r3, #4
 8004f24:	4619      	mov	r1, r3
 8004f26:	4610      	mov	r0, r2
 8004f28:	f000 fb10 	bl	800554c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b085      	sub	sp, #20
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68da      	ldr	r2, [r3, #12]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f003 0307 	and.w	r3, r3, #7
 8004f60:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2b06      	cmp	r3, #6
 8004f66:	d007      	beq.n	8004f78 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0201 	orr.w	r2, r2, #1
 8004f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e01d      	b.n	8004fd4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d106      	bne.n	8004fb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f815 	bl	8004fdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	f000 fac1 	bl	800554c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3708      	adds	r7, #8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d122      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b02      	cmp	r3, #2
 8005012:	d11b      	bne.n	800504c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0202 	mvn.w	r2, #2
 800501c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f000 fa6b 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005038:	e005      	b.n	8005046 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fa5d 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f000 fa6e 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	691b      	ldr	r3, [r3, #16]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b04      	cmp	r3, #4
 8005058:	d122      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b04      	cmp	r3, #4
 8005066:	d11b      	bne.n	80050a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f06f 0204 	mvn.w	r2, #4
 8005070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2202      	movs	r2, #2
 8005076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005082:	2b00      	cmp	r3, #0
 8005084:	d003      	beq.n	800508e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa41 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 800508c:	e005      	b.n	800509a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa33 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fa44 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d122      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f003 0308 	and.w	r3, r3, #8
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d11b      	bne.n	80050f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f06f 0208 	mvn.w	r2, #8
 80050c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2204      	movs	r2, #4
 80050ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f003 0303 	and.w	r3, r3, #3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d003      	beq.n	80050e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa17 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 80050e0:	e005      	b.n	80050ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa09 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fa1a 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	f003 0310 	and.w	r3, r3, #16
 80050fe:	2b10      	cmp	r3, #16
 8005100:	d122      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68db      	ldr	r3, [r3, #12]
 8005108:	f003 0310 	and.w	r3, r3, #16
 800510c:	2b10      	cmp	r3, #16
 800510e:	d11b      	bne.n	8005148 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0210 	mvn.w	r2, #16
 8005118:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2208      	movs	r2, #8
 800511e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f9ed 	bl	800550e <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f9df 	bl	80054fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f9f0 	bl	8005522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	f003 0301 	and.w	r3, r3, #1
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10e      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0301 	and.w	r3, r3, #1
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f06f 0201 	mvn.w	r2, #1
 800516c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fc fbfc 	bl	800196c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800517e:	2b80      	cmp	r3, #128	; 0x80
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518c:	2b80      	cmp	r3, #128	; 0x80
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fd46 	bl	8005c2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051aa:	2b40      	cmp	r3, #64	; 0x40
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b8:	2b40      	cmp	r3, #64	; 0x40
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f9b5 	bl	8005536 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0320 	and.w	r3, r3, #32
 80051d6:	2b20      	cmp	r3, #32
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0220 	mvn.w	r2, #32
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 fd10 	bl	8005c18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051f8:	bf00      	nop
 80051fa:	3708      	adds	r7, #8
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005212:	2b01      	cmp	r3, #1
 8005214:	d101      	bne.n	800521a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005216:	2302      	movs	r3, #2
 8005218:	e0b4      	b.n	8005384 <HAL_TIM_PWM_ConfigChannel+0x184>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2202      	movs	r2, #2
 8005226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b0c      	cmp	r3, #12
 800522e:	f200 809f 	bhi.w	8005370 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005232:	a201      	add	r2, pc, #4	; (adr r2, 8005238 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005238:	0800526d 	.word	0x0800526d
 800523c:	08005371 	.word	0x08005371
 8005240:	08005371 	.word	0x08005371
 8005244:	08005371 	.word	0x08005371
 8005248:	080052ad 	.word	0x080052ad
 800524c:	08005371 	.word	0x08005371
 8005250:	08005371 	.word	0x08005371
 8005254:	08005371 	.word	0x08005371
 8005258:	080052ef 	.word	0x080052ef
 800525c:	08005371 	.word	0x08005371
 8005260:	08005371 	.word	0x08005371
 8005264:	08005371 	.word	0x08005371
 8005268:	0800532f 	.word	0x0800532f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68b9      	ldr	r1, [r7, #8]
 8005272:	4618      	mov	r0, r3
 8005274:	f000 f9ea 	bl	800564c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	699a      	ldr	r2, [r3, #24]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f042 0208 	orr.w	r2, r2, #8
 8005286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	699a      	ldr	r2, [r3, #24]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0204 	bic.w	r2, r2, #4
 8005296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6999      	ldr	r1, [r3, #24]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	430a      	orrs	r2, r1
 80052a8:	619a      	str	r2, [r3, #24]
      break;
 80052aa:	e062      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68b9      	ldr	r1, [r7, #8]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fa30 	bl	8005718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	699a      	ldr	r2, [r3, #24]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699a      	ldr	r2, [r3, #24]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6999      	ldr	r1, [r3, #24]
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	021a      	lsls	r2, r3, #8
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	430a      	orrs	r2, r1
 80052ea:	619a      	str	r2, [r3, #24]
      break;
 80052ec:	e041      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fa7b 	bl	80057f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69da      	ldr	r2, [r3, #28]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0208 	orr.w	r2, r2, #8
 8005308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69da      	ldr	r2, [r3, #28]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0204 	bic.w	r2, r2, #4
 8005318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	69d9      	ldr	r1, [r3, #28]
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	430a      	orrs	r2, r1
 800532a:	61da      	str	r2, [r3, #28]
      break;
 800532c:	e021      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	68b9      	ldr	r1, [r7, #8]
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fac5 	bl	80058c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69da      	ldr	r2, [r3, #28]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	69da      	ldr	r2, [r3, #28]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	69d9      	ldr	r1, [r3, #28]
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	021a      	lsls	r2, r3, #8
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	61da      	str	r2, [r3, #28]
      break;
 800536e:	e000      	b.n	8005372 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005370:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2200      	movs	r2, #0
 800537e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005382:	2300      	movs	r3, #0
}
 8005384:	4618      	mov	r0, r3
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800539c:	2b01      	cmp	r3, #1
 800539e:	d101      	bne.n	80053a4 <HAL_TIM_ConfigClockSource+0x18>
 80053a0:	2302      	movs	r3, #2
 80053a2:	e0a6      	b.n	80054f2 <HAL_TIM_ConfigClockSource+0x166>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2202      	movs	r2, #2
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b40      	cmp	r3, #64	; 0x40
 80053da:	d067      	beq.n	80054ac <HAL_TIM_ConfigClockSource+0x120>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d80b      	bhi.n	80053f8 <HAL_TIM_ConfigClockSource+0x6c>
 80053e0:	2b10      	cmp	r3, #16
 80053e2:	d073      	beq.n	80054cc <HAL_TIM_ConfigClockSource+0x140>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d802      	bhi.n	80053ee <HAL_TIM_ConfigClockSource+0x62>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d06f      	beq.n	80054cc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053ec:	e078      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d06c      	beq.n	80054cc <HAL_TIM_ConfigClockSource+0x140>
 80053f2:	2b30      	cmp	r3, #48	; 0x30
 80053f4:	d06a      	beq.n	80054cc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053f6:	e073      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053f8:	2b70      	cmp	r3, #112	; 0x70
 80053fa:	d00d      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0x8c>
 80053fc:	2b70      	cmp	r3, #112	; 0x70
 80053fe:	d804      	bhi.n	800540a <HAL_TIM_ConfigClockSource+0x7e>
 8005400:	2b50      	cmp	r3, #80	; 0x50
 8005402:	d033      	beq.n	800546c <HAL_TIM_ConfigClockSource+0xe0>
 8005404:	2b60      	cmp	r3, #96	; 0x60
 8005406:	d041      	beq.n	800548c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005408:	e06a      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800540a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540e:	d066      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x152>
 8005410:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005414:	d017      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005416:	e063      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f000 fb16 	bl	8005a58 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800543a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	609a      	str	r2, [r3, #8]
      break;
 8005444:	e04c      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6899      	ldr	r1, [r3, #8]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	f000 faff 	bl	8005a58 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689a      	ldr	r2, [r3, #8]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005468:	609a      	str	r2, [r3, #8]
      break;
 800546a:	e039      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6818      	ldr	r0, [r3, #0]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	6859      	ldr	r1, [r3, #4]
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	461a      	mov	r2, r3
 800547a:	f000 fa73 	bl	8005964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2150      	movs	r1, #80	; 0x50
 8005484:	4618      	mov	r0, r3
 8005486:	f000 facc 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 800548a:	e029      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6818      	ldr	r0, [r3, #0]
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	6859      	ldr	r1, [r3, #4]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	461a      	mov	r2, r3
 800549a:	f000 fa92 	bl	80059c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2160      	movs	r1, #96	; 0x60
 80054a4:	4618      	mov	r0, r3
 80054a6:	f000 fabc 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054aa:	e019      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6818      	ldr	r0, [r3, #0]
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	6859      	ldr	r1, [r3, #4]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	461a      	mov	r2, r3
 80054ba:	f000 fa53 	bl	8005964 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2140      	movs	r1, #64	; 0x40
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 faac 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054ca:	e009      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 faa3 	bl	8005a22 <TIM_ITRx_SetConfig>
      break;
 80054dc:	e000      	b.n	80054e0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b083      	sub	sp, #12
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005502:	bf00      	nop
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr

0800550e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800550e:	b480      	push	{r7}
 8005510:	b083      	sub	sp, #12
 8005512:	af00      	add	r7, sp, #0
 8005514:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005516:	bf00      	nop
 8005518:	370c      	adds	r7, #12
 800551a:	46bd      	mov	sp, r7
 800551c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005520:	4770      	bx	lr

08005522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800552a:	bf00      	nop
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr

08005536 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005536:	b480      	push	{r7}
 8005538:	b083      	sub	sp, #12
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	370c      	adds	r7, #12
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
	...

0800554c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a34      	ldr	r2, [pc, #208]	; (8005630 <TIM_Base_SetConfig+0xe4>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00f      	beq.n	8005584 <TIM_Base_SetConfig+0x38>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556a:	d00b      	beq.n	8005584 <TIM_Base_SetConfig+0x38>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a31      	ldr	r2, [pc, #196]	; (8005634 <TIM_Base_SetConfig+0xe8>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d007      	beq.n	8005584 <TIM_Base_SetConfig+0x38>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a30      	ldr	r2, [pc, #192]	; (8005638 <TIM_Base_SetConfig+0xec>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d003      	beq.n	8005584 <TIM_Base_SetConfig+0x38>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a2f      	ldr	r2, [pc, #188]	; (800563c <TIM_Base_SetConfig+0xf0>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d108      	bne.n	8005596 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a25      	ldr	r2, [pc, #148]	; (8005630 <TIM_Base_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d01b      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a4:	d017      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a22      	ldr	r2, [pc, #136]	; (8005634 <TIM_Base_SetConfig+0xe8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a21      	ldr	r2, [pc, #132]	; (8005638 <TIM_Base_SetConfig+0xec>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00f      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a20      	ldr	r2, [pc, #128]	; (800563c <TIM_Base_SetConfig+0xf0>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <TIM_Base_SetConfig+0xf4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a1e      	ldr	r2, [pc, #120]	; (8005644 <TIM_Base_SetConfig+0xf8>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <TIM_Base_SetConfig+0x8a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a1d      	ldr	r2, [pc, #116]	; (8005648 <TIM_Base_SetConfig+0xfc>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d108      	bne.n	80055e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	4a08      	ldr	r2, [pc, #32]	; (8005630 <TIM_Base_SetConfig+0xe4>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d103      	bne.n	800561c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	615a      	str	r2, [r3, #20]
}
 8005622:	bf00      	nop
 8005624:	3714      	adds	r7, #20
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	40010000 	.word	0x40010000
 8005634:	40000400 	.word	0x40000400
 8005638:	40000800 	.word	0x40000800
 800563c:	40000c00 	.word	0x40000c00
 8005640:	40014000 	.word	0x40014000
 8005644:	40014400 	.word	0x40014400
 8005648:	40014800 	.word	0x40014800

0800564c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	f023 0201 	bic.w	r2, r3, #1
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0303 	bic.w	r3, r3, #3
 8005682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4313      	orrs	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f023 0302 	bic.w	r3, r3, #2
 8005694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <TIM_OC1_SetConfig+0xc8>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d10c      	bne.n	80056c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056a8:	697b      	ldr	r3, [r7, #20]
 80056aa:	f023 0308 	bic.w	r3, r3, #8
 80056ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 0304 	bic.w	r3, r3, #4
 80056c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a13      	ldr	r2, [pc, #76]	; (8005714 <TIM_OC1_SetConfig+0xc8>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d111      	bne.n	80056ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	693a      	ldr	r2, [r7, #16]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	685a      	ldr	r2, [r3, #4]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	621a      	str	r2, [r3, #32]
}
 8005708:	bf00      	nop
 800570a:	371c      	adds	r7, #28
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr
 8005714:	40010000 	.word	0x40010000

08005718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005718:	b480      	push	{r7}
 800571a:	b087      	sub	sp, #28
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	f023 0210 	bic.w	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800574e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	021b      	lsls	r3, r3, #8
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	f023 0320 	bic.w	r3, r3, #32
 8005762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	011b      	lsls	r3, r3, #4
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a1e      	ldr	r2, [pc, #120]	; (80057ec <TIM_OC2_SetConfig+0xd4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d10d      	bne.n	8005794 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a15      	ldr	r2, [pc, #84]	; (80057ec <TIM_OC2_SetConfig+0xd4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d113      	bne.n	80057c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	693a      	ldr	r2, [r7, #16]
 80057c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	621a      	str	r2, [r3, #32]
}
 80057de:	bf00      	nop
 80057e0:	371c      	adds	r7, #28
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000

080057f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800581e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0303 	bic.w	r3, r3, #3
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005838:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	021b      	lsls	r3, r3, #8
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4313      	orrs	r3, r2
 8005844:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a1d      	ldr	r2, [pc, #116]	; (80058c0 <TIM_OC3_SetConfig+0xd0>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d10d      	bne.n	800586a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	021b      	lsls	r3, r3, #8
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a14      	ldr	r2, [pc, #80]	; (80058c0 <TIM_OC3_SetConfig+0xd0>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d113      	bne.n	800589a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	011b      	lsls	r3, r3, #4
 8005888:	693a      	ldr	r2, [r7, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	621a      	str	r2, [r3, #32]
}
 80058b4:	bf00      	nop
 80058b6:	371c      	adds	r7, #28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40010000 	.word	0x40010000

080058c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b087      	sub	sp, #28
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	021b      	lsls	r3, r3, #8
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800590e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	031b      	lsls	r3, r3, #12
 8005916:	693a      	ldr	r2, [r7, #16]
 8005918:	4313      	orrs	r3, r2
 800591a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a10      	ldr	r2, [pc, #64]	; (8005960 <TIM_OC4_SetConfig+0x9c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d109      	bne.n	8005938 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800592a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	019b      	lsls	r3, r3, #6
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	4313      	orrs	r3, r2
 8005936:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68fa      	ldr	r2, [r7, #12]
 8005942:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	685a      	ldr	r2, [r3, #4]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr
 800595e:	bf00      	nop
 8005960:	40010000 	.word	0x40010000

08005964 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a1b      	ldr	r3, [r3, #32]
 8005974:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f023 0201 	bic.w	r2, r3, #1
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800598e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	011b      	lsls	r3, r3, #4
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	4313      	orrs	r3, r2
 8005998:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f023 030a 	bic.w	r3, r3, #10
 80059a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	621a      	str	r2, [r3, #32]
}
 80059b6:	bf00      	nop
 80059b8:	371c      	adds	r7, #28
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b087      	sub	sp, #28
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0210 	bic.w	r2, r3, #16
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a1b      	ldr	r3, [r3, #32]
 80059e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	031b      	lsls	r3, r3, #12
 80059f2:	697a      	ldr	r2, [r7, #20]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	011b      	lsls	r3, r3, #4
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr

08005a22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a22:	b480      	push	{r7}
 8005a24:	b085      	sub	sp, #20
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	6078      	str	r0, [r7, #4]
 8005a2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a3a:	683a      	ldr	r2, [r7, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f043 0307 	orr.w	r3, r3, #7
 8005a44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68fa      	ldr	r2, [r7, #12]
 8005a4a:	609a      	str	r2, [r3, #8]
}
 8005a4c:	bf00      	nop
 8005a4e:	3714      	adds	r7, #20
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr

08005a58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	021a      	lsls	r2, r3, #8
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	609a      	str	r2, [r3, #8]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d101      	bne.n	8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aac:	2302      	movs	r3, #2
 8005aae:	e050      	b.n	8005b52 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2202      	movs	r2, #2
 8005abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ad6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68fa      	ldr	r2, [r7, #12]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a1c      	ldr	r2, [pc, #112]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d018      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005afc:	d013      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a18      	ldr	r2, [pc, #96]	; (8005b64 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d00e      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a16      	ldr	r2, [pc, #88]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d009      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a15      	ldr	r2, [pc, #84]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d004      	beq.n	8005b26 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a13      	ldr	r2, [pc, #76]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d10c      	bne.n	8005b40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68ba      	ldr	r2, [r7, #8]
 8005b3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	40010000 	.word	0x40010000
 8005b64:	40000400 	.word	0x40000400
 8005b68:	40000800 	.word	0x40000800
 8005b6c:	40000c00 	.word	0x40000c00
 8005b70:	40014000 	.word	0x40014000

08005b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b085      	sub	sp, #20
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d101      	bne.n	8005b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b8c:	2302      	movs	r3, #2
 8005b8e:	e03d      	b.n	8005c0c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	68db      	ldr	r3, [r3, #12]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3714      	adds	r7, #20
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b082      	sub	sp, #8
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d101      	bne.n	8005c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e03f      	b.n	8005cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d106      	bne.n	8005c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f7fc f83e 	bl	8001ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2224      	movs	r2, #36	; 0x24
 8005c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f90b 	bl	8005ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695a      	ldr	r2, [r3, #20]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2220      	movs	r2, #32
 8005ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b088      	sub	sp, #32
 8005cde:	af02      	add	r7, sp, #8
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	603b      	str	r3, [r7, #0]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	f040 8083 	bne.w	8005e02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_UART_Transmit+0x2e>
 8005d02:	88fb      	ldrh	r3, [r7, #6]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e07b      	b.n	8005e04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_UART_Transmit+0x40>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e074      	b.n	8005e04 <HAL_UART_Transmit+0x12a>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2221      	movs	r2, #33	; 0x21
 8005d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005d30:	f7fd f9ac 	bl	800308c <HAL_GetTick>
 8005d34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	88fa      	ldrh	r2, [r7, #6]
 8005d3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005d4a:	e042      	b.n	8005dd2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	3b01      	subs	r3, #1
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d122      	bne.n	8005daa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	2180      	movs	r1, #128	; 0x80
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 f84c 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005d74:	4603      	mov	r3, r0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d001      	beq.n	8005d7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005d7a:	2303      	movs	r3, #3
 8005d7c:	e042      	b.n	8005e04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	881b      	ldrh	r3, [r3, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d103      	bne.n	8005da2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	3302      	adds	r3, #2
 8005d9e:	60bb      	str	r3, [r7, #8]
 8005da0:	e017      	b.n	8005dd2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60bb      	str	r3, [r7, #8]
 8005da8:	e013      	b.n	8005dd2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2200      	movs	r2, #0
 8005db2:	2180      	movs	r1, #128	; 0x80
 8005db4:	68f8      	ldr	r0, [r7, #12]
 8005db6:	f000 f829 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d001      	beq.n	8005dc4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e01f      	b.n	8005e04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	1c5a      	adds	r2, r3, #1
 8005dc8:	60ba      	str	r2, [r7, #8]
 8005dca:	781a      	ldrb	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1b7      	bne.n	8005d4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	9300      	str	r3, [sp, #0]
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	2200      	movs	r2, #0
 8005de4:	2140      	movs	r1, #64	; 0x40
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f810 	bl	8005e0c <UART_WaitOnFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e006      	b.n	8005e04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2220      	movs	r2, #32
 8005dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e000      	b.n	8005e04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
  }
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3718      	adds	r7, #24
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	bd80      	pop	{r7, pc}

08005e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e1c:	e02c      	b.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d028      	beq.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d007      	beq.n	8005e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e2c:	f7fd f92e 	bl	800308c <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	69ba      	ldr	r2, [r7, #24]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d21d      	bcs.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68da      	ldr	r2, [r3, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005e4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695a      	ldr	r2, [r3, #20]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e00f      	b.n	8005e98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	68ba      	ldr	r2, [r7, #8]
 8005e84:	429a      	cmp	r2, r3
 8005e86:	bf0c      	ite	eq
 8005e88:	2301      	moveq	r3, #1
 8005e8a:	2300      	movne	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	79fb      	ldrb	r3, [r7, #7]
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d0c3      	beq.n	8005e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3710      	adds	r7, #16
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea4:	b085      	sub	sp, #20
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	691b      	ldr	r3, [r3, #16]
 8005ec8:	431a      	orrs	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005ee2:	f023 030c 	bic.w	r3, r3, #12
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6812      	ldr	r2, [r2, #0]
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699a      	ldr	r2, [r3, #24]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f0e:	f040 818b 	bne.w	8006228 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4ac1      	ldr	r2, [pc, #772]	; (800621c <UART_SetConfig+0x37c>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d005      	beq.n	8005f28 <UART_SetConfig+0x88>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4abf      	ldr	r2, [pc, #764]	; (8006220 <UART_SetConfig+0x380>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	f040 80bd 	bne.w	80060a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f28:	f7fe fa44 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8005f2c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	461d      	mov	r5, r3
 8005f32:	f04f 0600 	mov.w	r6, #0
 8005f36:	46a8      	mov	r8, r5
 8005f38:	46b1      	mov	r9, r6
 8005f3a:	eb18 0308 	adds.w	r3, r8, r8
 8005f3e:	eb49 0409 	adc.w	r4, r9, r9
 8005f42:	4698      	mov	r8, r3
 8005f44:	46a1      	mov	r9, r4
 8005f46:	eb18 0805 	adds.w	r8, r8, r5
 8005f4a:	eb49 0906 	adc.w	r9, r9, r6
 8005f4e:	f04f 0100 	mov.w	r1, #0
 8005f52:	f04f 0200 	mov.w	r2, #0
 8005f56:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005f5a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f5e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f62:	4688      	mov	r8, r1
 8005f64:	4691      	mov	r9, r2
 8005f66:	eb18 0005 	adds.w	r0, r8, r5
 8005f6a:	eb49 0106 	adc.w	r1, r9, r6
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	461d      	mov	r5, r3
 8005f74:	f04f 0600 	mov.w	r6, #0
 8005f78:	196b      	adds	r3, r5, r5
 8005f7a:	eb46 0406 	adc.w	r4, r6, r6
 8005f7e:	461a      	mov	r2, r3
 8005f80:	4623      	mov	r3, r4
 8005f82:	f7fa ff81 	bl	8000e88 <__aeabi_uldivmod>
 8005f86:	4603      	mov	r3, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4ba5      	ldr	r3, [pc, #660]	; (8006224 <UART_SetConfig+0x384>)
 8005f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f92:	095b      	lsrs	r3, r3, #5
 8005f94:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	461d      	mov	r5, r3
 8005f9c:	f04f 0600 	mov.w	r6, #0
 8005fa0:	46a9      	mov	r9, r5
 8005fa2:	46b2      	mov	sl, r6
 8005fa4:	eb19 0309 	adds.w	r3, r9, r9
 8005fa8:	eb4a 040a 	adc.w	r4, sl, sl
 8005fac:	4699      	mov	r9, r3
 8005fae:	46a2      	mov	sl, r4
 8005fb0:	eb19 0905 	adds.w	r9, r9, r5
 8005fb4:	eb4a 0a06 	adc.w	sl, sl, r6
 8005fb8:	f04f 0100 	mov.w	r1, #0
 8005fbc:	f04f 0200 	mov.w	r2, #0
 8005fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005fc8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005fcc:	4689      	mov	r9, r1
 8005fce:	4692      	mov	sl, r2
 8005fd0:	eb19 0005 	adds.w	r0, r9, r5
 8005fd4:	eb4a 0106 	adc.w	r1, sl, r6
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	461d      	mov	r5, r3
 8005fde:	f04f 0600 	mov.w	r6, #0
 8005fe2:	196b      	adds	r3, r5, r5
 8005fe4:	eb46 0406 	adc.w	r4, r6, r6
 8005fe8:	461a      	mov	r2, r3
 8005fea:	4623      	mov	r3, r4
 8005fec:	f7fa ff4c 	bl	8000e88 <__aeabi_uldivmod>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	4b8b      	ldr	r3, [pc, #556]	; (8006224 <UART_SetConfig+0x384>)
 8005ff8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ffc:	095b      	lsrs	r3, r3, #5
 8005ffe:	2164      	movs	r1, #100	; 0x64
 8006000:	fb01 f303 	mul.w	r3, r1, r3
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	3332      	adds	r3, #50	; 0x32
 800600a:	4a86      	ldr	r2, [pc, #536]	; (8006224 <UART_SetConfig+0x384>)
 800600c:	fba2 2303 	umull	r2, r3, r2, r3
 8006010:	095b      	lsrs	r3, r3, #5
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006018:	4498      	add	r8, r3
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	461d      	mov	r5, r3
 800601e:	f04f 0600 	mov.w	r6, #0
 8006022:	46a9      	mov	r9, r5
 8006024:	46b2      	mov	sl, r6
 8006026:	eb19 0309 	adds.w	r3, r9, r9
 800602a:	eb4a 040a 	adc.w	r4, sl, sl
 800602e:	4699      	mov	r9, r3
 8006030:	46a2      	mov	sl, r4
 8006032:	eb19 0905 	adds.w	r9, r9, r5
 8006036:	eb4a 0a06 	adc.w	sl, sl, r6
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006046:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800604a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800604e:	4689      	mov	r9, r1
 8006050:	4692      	mov	sl, r2
 8006052:	eb19 0005 	adds.w	r0, r9, r5
 8006056:	eb4a 0106 	adc.w	r1, sl, r6
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	461d      	mov	r5, r3
 8006060:	f04f 0600 	mov.w	r6, #0
 8006064:	196b      	adds	r3, r5, r5
 8006066:	eb46 0406 	adc.w	r4, r6, r6
 800606a:	461a      	mov	r2, r3
 800606c:	4623      	mov	r3, r4
 800606e:	f7fa ff0b 	bl	8000e88 <__aeabi_uldivmod>
 8006072:	4603      	mov	r3, r0
 8006074:	460c      	mov	r4, r1
 8006076:	461a      	mov	r2, r3
 8006078:	4b6a      	ldr	r3, [pc, #424]	; (8006224 <UART_SetConfig+0x384>)
 800607a:	fba3 1302 	umull	r1, r3, r3, r2
 800607e:	095b      	lsrs	r3, r3, #5
 8006080:	2164      	movs	r1, #100	; 0x64
 8006082:	fb01 f303 	mul.w	r3, r1, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	00db      	lsls	r3, r3, #3
 800608a:	3332      	adds	r3, #50	; 0x32
 800608c:	4a65      	ldr	r2, [pc, #404]	; (8006224 <UART_SetConfig+0x384>)
 800608e:	fba2 2303 	umull	r2, r3, r2, r3
 8006092:	095b      	lsrs	r3, r3, #5
 8006094:	f003 0207 	and.w	r2, r3, #7
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4442      	add	r2, r8
 800609e:	609a      	str	r2, [r3, #8]
 80060a0:	e26f      	b.n	8006582 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060a2:	f7fe f973 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 80060a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	461d      	mov	r5, r3
 80060ac:	f04f 0600 	mov.w	r6, #0
 80060b0:	46a8      	mov	r8, r5
 80060b2:	46b1      	mov	r9, r6
 80060b4:	eb18 0308 	adds.w	r3, r8, r8
 80060b8:	eb49 0409 	adc.w	r4, r9, r9
 80060bc:	4698      	mov	r8, r3
 80060be:	46a1      	mov	r9, r4
 80060c0:	eb18 0805 	adds.w	r8, r8, r5
 80060c4:	eb49 0906 	adc.w	r9, r9, r6
 80060c8:	f04f 0100 	mov.w	r1, #0
 80060cc:	f04f 0200 	mov.w	r2, #0
 80060d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060dc:	4688      	mov	r8, r1
 80060de:	4691      	mov	r9, r2
 80060e0:	eb18 0005 	adds.w	r0, r8, r5
 80060e4:	eb49 0106 	adc.w	r1, r9, r6
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	461d      	mov	r5, r3
 80060ee:	f04f 0600 	mov.w	r6, #0
 80060f2:	196b      	adds	r3, r5, r5
 80060f4:	eb46 0406 	adc.w	r4, r6, r6
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	f7fa fec4 	bl	8000e88 <__aeabi_uldivmod>
 8006100:	4603      	mov	r3, r0
 8006102:	460c      	mov	r4, r1
 8006104:	461a      	mov	r2, r3
 8006106:	4b47      	ldr	r3, [pc, #284]	; (8006224 <UART_SetConfig+0x384>)
 8006108:	fba3 2302 	umull	r2, r3, r3, r2
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	461d      	mov	r5, r3
 8006116:	f04f 0600 	mov.w	r6, #0
 800611a:	46a9      	mov	r9, r5
 800611c:	46b2      	mov	sl, r6
 800611e:	eb19 0309 	adds.w	r3, r9, r9
 8006122:	eb4a 040a 	adc.w	r4, sl, sl
 8006126:	4699      	mov	r9, r3
 8006128:	46a2      	mov	sl, r4
 800612a:	eb19 0905 	adds.w	r9, r9, r5
 800612e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006132:	f04f 0100 	mov.w	r1, #0
 8006136:	f04f 0200 	mov.w	r2, #0
 800613a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800613e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006142:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006146:	4689      	mov	r9, r1
 8006148:	4692      	mov	sl, r2
 800614a:	eb19 0005 	adds.w	r0, r9, r5
 800614e:	eb4a 0106 	adc.w	r1, sl, r6
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	461d      	mov	r5, r3
 8006158:	f04f 0600 	mov.w	r6, #0
 800615c:	196b      	adds	r3, r5, r5
 800615e:	eb46 0406 	adc.w	r4, r6, r6
 8006162:	461a      	mov	r2, r3
 8006164:	4623      	mov	r3, r4
 8006166:	f7fa fe8f 	bl	8000e88 <__aeabi_uldivmod>
 800616a:	4603      	mov	r3, r0
 800616c:	460c      	mov	r4, r1
 800616e:	461a      	mov	r2, r3
 8006170:	4b2c      	ldr	r3, [pc, #176]	; (8006224 <UART_SetConfig+0x384>)
 8006172:	fba3 1302 	umull	r1, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	2164      	movs	r1, #100	; 0x64
 800617a:	fb01 f303 	mul.w	r3, r1, r3
 800617e:	1ad3      	subs	r3, r2, r3
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	3332      	adds	r3, #50	; 0x32
 8006184:	4a27      	ldr	r2, [pc, #156]	; (8006224 <UART_SetConfig+0x384>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	095b      	lsrs	r3, r3, #5
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006192:	4498      	add	r8, r3
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	461d      	mov	r5, r3
 8006198:	f04f 0600 	mov.w	r6, #0
 800619c:	46a9      	mov	r9, r5
 800619e:	46b2      	mov	sl, r6
 80061a0:	eb19 0309 	adds.w	r3, r9, r9
 80061a4:	eb4a 040a 	adc.w	r4, sl, sl
 80061a8:	4699      	mov	r9, r3
 80061aa:	46a2      	mov	sl, r4
 80061ac:	eb19 0905 	adds.w	r9, r9, r5
 80061b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80061b4:	f04f 0100 	mov.w	r1, #0
 80061b8:	f04f 0200 	mov.w	r2, #0
 80061bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061c8:	4689      	mov	r9, r1
 80061ca:	4692      	mov	sl, r2
 80061cc:	eb19 0005 	adds.w	r0, r9, r5
 80061d0:	eb4a 0106 	adc.w	r1, sl, r6
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	461d      	mov	r5, r3
 80061da:	f04f 0600 	mov.w	r6, #0
 80061de:	196b      	adds	r3, r5, r5
 80061e0:	eb46 0406 	adc.w	r4, r6, r6
 80061e4:	461a      	mov	r2, r3
 80061e6:	4623      	mov	r3, r4
 80061e8:	f7fa fe4e 	bl	8000e88 <__aeabi_uldivmod>
 80061ec:	4603      	mov	r3, r0
 80061ee:	460c      	mov	r4, r1
 80061f0:	461a      	mov	r2, r3
 80061f2:	4b0c      	ldr	r3, [pc, #48]	; (8006224 <UART_SetConfig+0x384>)
 80061f4:	fba3 1302 	umull	r1, r3, r3, r2
 80061f8:	095b      	lsrs	r3, r3, #5
 80061fa:	2164      	movs	r1, #100	; 0x64
 80061fc:	fb01 f303 	mul.w	r3, r1, r3
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	3332      	adds	r3, #50	; 0x32
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <UART_SetConfig+0x384>)
 8006208:	fba2 2303 	umull	r2, r3, r2, r3
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	f003 0207 	and.w	r2, r3, #7
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4442      	add	r2, r8
 8006218:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800621a:	e1b2      	b.n	8006582 <UART_SetConfig+0x6e2>
 800621c:	40011000 	.word	0x40011000
 8006220:	40011400 	.word	0x40011400
 8006224:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4ad7      	ldr	r2, [pc, #860]	; (800658c <UART_SetConfig+0x6ec>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d005      	beq.n	800623e <UART_SetConfig+0x39e>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4ad6      	ldr	r2, [pc, #856]	; (8006590 <UART_SetConfig+0x6f0>)
 8006238:	4293      	cmp	r3, r2
 800623a:	f040 80d1 	bne.w	80063e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800623e:	f7fe f8b9 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8006242:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	469a      	mov	sl, r3
 8006248:	f04f 0b00 	mov.w	fp, #0
 800624c:	46d0      	mov	r8, sl
 800624e:	46d9      	mov	r9, fp
 8006250:	eb18 0308 	adds.w	r3, r8, r8
 8006254:	eb49 0409 	adc.w	r4, r9, r9
 8006258:	4698      	mov	r8, r3
 800625a:	46a1      	mov	r9, r4
 800625c:	eb18 080a 	adds.w	r8, r8, sl
 8006260:	eb49 090b 	adc.w	r9, r9, fp
 8006264:	f04f 0100 	mov.w	r1, #0
 8006268:	f04f 0200 	mov.w	r2, #0
 800626c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006270:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006274:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006278:	4688      	mov	r8, r1
 800627a:	4691      	mov	r9, r2
 800627c:	eb1a 0508 	adds.w	r5, sl, r8
 8006280:	eb4b 0609 	adc.w	r6, fp, r9
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	4619      	mov	r1, r3
 800628a:	f04f 0200 	mov.w	r2, #0
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	f04f 0400 	mov.w	r4, #0
 8006296:	0094      	lsls	r4, r2, #2
 8006298:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800629c:	008b      	lsls	r3, r1, #2
 800629e:	461a      	mov	r2, r3
 80062a0:	4623      	mov	r3, r4
 80062a2:	4628      	mov	r0, r5
 80062a4:	4631      	mov	r1, r6
 80062a6:	f7fa fdef 	bl	8000e88 <__aeabi_uldivmod>
 80062aa:	4603      	mov	r3, r0
 80062ac:	460c      	mov	r4, r1
 80062ae:	461a      	mov	r2, r3
 80062b0:	4bb8      	ldr	r3, [pc, #736]	; (8006594 <UART_SetConfig+0x6f4>)
 80062b2:	fba3 2302 	umull	r2, r3, r3, r2
 80062b6:	095b      	lsrs	r3, r3, #5
 80062b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	469b      	mov	fp, r3
 80062c0:	f04f 0c00 	mov.w	ip, #0
 80062c4:	46d9      	mov	r9, fp
 80062c6:	46e2      	mov	sl, ip
 80062c8:	eb19 0309 	adds.w	r3, r9, r9
 80062cc:	eb4a 040a 	adc.w	r4, sl, sl
 80062d0:	4699      	mov	r9, r3
 80062d2:	46a2      	mov	sl, r4
 80062d4:	eb19 090b 	adds.w	r9, r9, fp
 80062d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80062dc:	f04f 0100 	mov.w	r1, #0
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062f0:	4689      	mov	r9, r1
 80062f2:	4692      	mov	sl, r2
 80062f4:	eb1b 0509 	adds.w	r5, fp, r9
 80062f8:	eb4c 060a 	adc.w	r6, ip, sl
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	4619      	mov	r1, r3
 8006302:	f04f 0200 	mov.w	r2, #0
 8006306:	f04f 0300 	mov.w	r3, #0
 800630a:	f04f 0400 	mov.w	r4, #0
 800630e:	0094      	lsls	r4, r2, #2
 8006310:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006314:	008b      	lsls	r3, r1, #2
 8006316:	461a      	mov	r2, r3
 8006318:	4623      	mov	r3, r4
 800631a:	4628      	mov	r0, r5
 800631c:	4631      	mov	r1, r6
 800631e:	f7fa fdb3 	bl	8000e88 <__aeabi_uldivmod>
 8006322:	4603      	mov	r3, r0
 8006324:	460c      	mov	r4, r1
 8006326:	461a      	mov	r2, r3
 8006328:	4b9a      	ldr	r3, [pc, #616]	; (8006594 <UART_SetConfig+0x6f4>)
 800632a:	fba3 1302 	umull	r1, r3, r3, r2
 800632e:	095b      	lsrs	r3, r3, #5
 8006330:	2164      	movs	r1, #100	; 0x64
 8006332:	fb01 f303 	mul.w	r3, r1, r3
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	011b      	lsls	r3, r3, #4
 800633a:	3332      	adds	r3, #50	; 0x32
 800633c:	4a95      	ldr	r2, [pc, #596]	; (8006594 <UART_SetConfig+0x6f4>)
 800633e:	fba2 2303 	umull	r2, r3, r2, r3
 8006342:	095b      	lsrs	r3, r3, #5
 8006344:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006348:	4498      	add	r8, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	469b      	mov	fp, r3
 800634e:	f04f 0c00 	mov.w	ip, #0
 8006352:	46d9      	mov	r9, fp
 8006354:	46e2      	mov	sl, ip
 8006356:	eb19 0309 	adds.w	r3, r9, r9
 800635a:	eb4a 040a 	adc.w	r4, sl, sl
 800635e:	4699      	mov	r9, r3
 8006360:	46a2      	mov	sl, r4
 8006362:	eb19 090b 	adds.w	r9, r9, fp
 8006366:	eb4a 0a0c 	adc.w	sl, sl, ip
 800636a:	f04f 0100 	mov.w	r1, #0
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800637a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800637e:	4689      	mov	r9, r1
 8006380:	4692      	mov	sl, r2
 8006382:	eb1b 0509 	adds.w	r5, fp, r9
 8006386:	eb4c 060a 	adc.w	r6, ip, sl
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	4619      	mov	r1, r3
 8006390:	f04f 0200 	mov.w	r2, #0
 8006394:	f04f 0300 	mov.w	r3, #0
 8006398:	f04f 0400 	mov.w	r4, #0
 800639c:	0094      	lsls	r4, r2, #2
 800639e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063a2:	008b      	lsls	r3, r1, #2
 80063a4:	461a      	mov	r2, r3
 80063a6:	4623      	mov	r3, r4
 80063a8:	4628      	mov	r0, r5
 80063aa:	4631      	mov	r1, r6
 80063ac:	f7fa fd6c 	bl	8000e88 <__aeabi_uldivmod>
 80063b0:	4603      	mov	r3, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	461a      	mov	r2, r3
 80063b6:	4b77      	ldr	r3, [pc, #476]	; (8006594 <UART_SetConfig+0x6f4>)
 80063b8:	fba3 1302 	umull	r1, r3, r3, r2
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	2164      	movs	r1, #100	; 0x64
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	011b      	lsls	r3, r3, #4
 80063c8:	3332      	adds	r3, #50	; 0x32
 80063ca:	4a72      	ldr	r2, [pc, #456]	; (8006594 <UART_SetConfig+0x6f4>)
 80063cc:	fba2 2303 	umull	r2, r3, r2, r3
 80063d0:	095b      	lsrs	r3, r3, #5
 80063d2:	f003 020f 	and.w	r2, r3, #15
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	4442      	add	r2, r8
 80063dc:	609a      	str	r2, [r3, #8]
 80063de:	e0d0      	b.n	8006582 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80063e0:	f7fd ffd4 	bl	800438c <HAL_RCC_GetPCLK1Freq>
 80063e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	469a      	mov	sl, r3
 80063ea:	f04f 0b00 	mov.w	fp, #0
 80063ee:	46d0      	mov	r8, sl
 80063f0:	46d9      	mov	r9, fp
 80063f2:	eb18 0308 	adds.w	r3, r8, r8
 80063f6:	eb49 0409 	adc.w	r4, r9, r9
 80063fa:	4698      	mov	r8, r3
 80063fc:	46a1      	mov	r9, r4
 80063fe:	eb18 080a 	adds.w	r8, r8, sl
 8006402:	eb49 090b 	adc.w	r9, r9, fp
 8006406:	f04f 0100 	mov.w	r1, #0
 800640a:	f04f 0200 	mov.w	r2, #0
 800640e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006412:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006416:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800641a:	4688      	mov	r8, r1
 800641c:	4691      	mov	r9, r2
 800641e:	eb1a 0508 	adds.w	r5, sl, r8
 8006422:	eb4b 0609 	adc.w	r6, fp, r9
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	4619      	mov	r1, r3
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	f04f 0400 	mov.w	r4, #0
 8006438:	0094      	lsls	r4, r2, #2
 800643a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800643e:	008b      	lsls	r3, r1, #2
 8006440:	461a      	mov	r2, r3
 8006442:	4623      	mov	r3, r4
 8006444:	4628      	mov	r0, r5
 8006446:	4631      	mov	r1, r6
 8006448:	f7fa fd1e 	bl	8000e88 <__aeabi_uldivmod>
 800644c:	4603      	mov	r3, r0
 800644e:	460c      	mov	r4, r1
 8006450:	461a      	mov	r2, r3
 8006452:	4b50      	ldr	r3, [pc, #320]	; (8006594 <UART_SetConfig+0x6f4>)
 8006454:	fba3 2302 	umull	r2, r3, r3, r2
 8006458:	095b      	lsrs	r3, r3, #5
 800645a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	469b      	mov	fp, r3
 8006462:	f04f 0c00 	mov.w	ip, #0
 8006466:	46d9      	mov	r9, fp
 8006468:	46e2      	mov	sl, ip
 800646a:	eb19 0309 	adds.w	r3, r9, r9
 800646e:	eb4a 040a 	adc.w	r4, sl, sl
 8006472:	4699      	mov	r9, r3
 8006474:	46a2      	mov	sl, r4
 8006476:	eb19 090b 	adds.w	r9, r9, fp
 800647a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800647e:	f04f 0100 	mov.w	r1, #0
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800648a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800648e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006492:	4689      	mov	r9, r1
 8006494:	4692      	mov	sl, r2
 8006496:	eb1b 0509 	adds.w	r5, fp, r9
 800649a:	eb4c 060a 	adc.w	r6, ip, sl
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	4619      	mov	r1, r3
 80064a4:	f04f 0200 	mov.w	r2, #0
 80064a8:	f04f 0300 	mov.w	r3, #0
 80064ac:	f04f 0400 	mov.w	r4, #0
 80064b0:	0094      	lsls	r4, r2, #2
 80064b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064b6:	008b      	lsls	r3, r1, #2
 80064b8:	461a      	mov	r2, r3
 80064ba:	4623      	mov	r3, r4
 80064bc:	4628      	mov	r0, r5
 80064be:	4631      	mov	r1, r6
 80064c0:	f7fa fce2 	bl	8000e88 <__aeabi_uldivmod>
 80064c4:	4603      	mov	r3, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b32      	ldr	r3, [pc, #200]	; (8006594 <UART_SetConfig+0x6f4>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	; 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	011b      	lsls	r3, r3, #4
 80064dc:	3332      	adds	r3, #50	; 0x32
 80064de:	4a2d      	ldr	r2, [pc, #180]	; (8006594 <UART_SetConfig+0x6f4>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064ea:	4498      	add	r8, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	469b      	mov	fp, r3
 80064f0:	f04f 0c00 	mov.w	ip, #0
 80064f4:	46d9      	mov	r9, fp
 80064f6:	46e2      	mov	sl, ip
 80064f8:	eb19 0309 	adds.w	r3, r9, r9
 80064fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006500:	4699      	mov	r9, r3
 8006502:	46a2      	mov	sl, r4
 8006504:	eb19 090b 	adds.w	r9, r9, fp
 8006508:	eb4a 0a0c 	adc.w	sl, sl, ip
 800650c:	f04f 0100 	mov.w	r1, #0
 8006510:	f04f 0200 	mov.w	r2, #0
 8006514:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006518:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800651c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006520:	4689      	mov	r9, r1
 8006522:	4692      	mov	sl, r2
 8006524:	eb1b 0509 	adds.w	r5, fp, r9
 8006528:	eb4c 060a 	adc.w	r6, ip, sl
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4619      	mov	r1, r3
 8006532:	f04f 0200 	mov.w	r2, #0
 8006536:	f04f 0300 	mov.w	r3, #0
 800653a:	f04f 0400 	mov.w	r4, #0
 800653e:	0094      	lsls	r4, r2, #2
 8006540:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006544:	008b      	lsls	r3, r1, #2
 8006546:	461a      	mov	r2, r3
 8006548:	4623      	mov	r3, r4
 800654a:	4628      	mov	r0, r5
 800654c:	4631      	mov	r1, r6
 800654e:	f7fa fc9b 	bl	8000e88 <__aeabi_uldivmod>
 8006552:	4603      	mov	r3, r0
 8006554:	460c      	mov	r4, r1
 8006556:	461a      	mov	r2, r3
 8006558:	4b0e      	ldr	r3, [pc, #56]	; (8006594 <UART_SetConfig+0x6f4>)
 800655a:	fba3 1302 	umull	r1, r3, r3, r2
 800655e:	095b      	lsrs	r3, r3, #5
 8006560:	2164      	movs	r1, #100	; 0x64
 8006562:	fb01 f303 	mul.w	r3, r1, r3
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	011b      	lsls	r3, r3, #4
 800656a:	3332      	adds	r3, #50	; 0x32
 800656c:	4a09      	ldr	r2, [pc, #36]	; (8006594 <UART_SetConfig+0x6f4>)
 800656e:	fba2 2303 	umull	r2, r3, r2, r3
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	f003 020f 	and.w	r2, r3, #15
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4442      	add	r2, r8
 800657e:	609a      	str	r2, [r3, #8]
}
 8006580:	e7ff      	b.n	8006582 <UART_SetConfig+0x6e2>
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658c:	40011000 	.word	0x40011000
 8006590:	40011400 	.word	0x40011400
 8006594:	51eb851f 	.word	0x51eb851f

08006598 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
 800659e:	4603      	mov	r3, r0
 80065a0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80065a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065aa:	2b84      	cmp	r3, #132	; 0x84
 80065ac:	d005      	beq.n	80065ba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80065ae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	3303      	adds	r3, #3
 80065b8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80065ba:	68fb      	ldr	r3, [r7, #12]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3714      	adds	r7, #20
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80065cc:	f000 fada 	bl	8006b84 <vTaskStartScheduler>
  
  return osOK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80065d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065d8:	b089      	sub	sp, #36	; 0x24
 80065da:	af04      	add	r7, sp, #16
 80065dc:	6078      	str	r0, [r7, #4]
 80065de:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	695b      	ldr	r3, [r3, #20]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d020      	beq.n	800662a <osThreadCreate+0x54>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	699b      	ldr	r3, [r3, #24]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d01c      	beq.n	800662a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	685c      	ldr	r4, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681d      	ldr	r5, [r3, #0]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	691e      	ldr	r6, [r3, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006602:	4618      	mov	r0, r3
 8006604:	f7ff ffc8 	bl	8006598 <makeFreeRtosPriority>
 8006608:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	695b      	ldr	r3, [r3, #20]
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006612:	9202      	str	r2, [sp, #8]
 8006614:	9301      	str	r3, [sp, #4]
 8006616:	9100      	str	r1, [sp, #0]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	4632      	mov	r2, r6
 800661c:	4629      	mov	r1, r5
 800661e:	4620      	mov	r0, r4
 8006620:	f000 f8ed 	bl	80067fe <xTaskCreateStatic>
 8006624:	4603      	mov	r3, r0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	e01c      	b.n	8006664 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	685c      	ldr	r4, [r3, #4]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006636:	b29e      	uxth	r6, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ffaa 	bl	8006598 <makeFreeRtosPriority>
 8006644:	4602      	mov	r2, r0
 8006646:	f107 030c 	add.w	r3, r7, #12
 800664a:	9301      	str	r3, [sp, #4]
 800664c:	9200      	str	r2, [sp, #0]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	4632      	mov	r2, r6
 8006652:	4629      	mov	r1, r5
 8006654:	4620      	mov	r0, r4
 8006656:	f000 f92c 	bl	80068b2 <xTaskCreate>
 800665a:	4603      	mov	r3, r0
 800665c:	2b01      	cmp	r3, #1
 800665e:	d001      	beq.n	8006664 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006664:	68fb      	ldr	r3, [r7, #12]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800666e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b084      	sub	sp, #16
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <osDelay+0x16>
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	e000      	b.n	8006686 <osDelay+0x18>
 8006684:	2301      	movs	r3, #1
 8006686:	4618      	mov	r0, r3
 8006688:	f000 fa48 	bl	8006b1c <vTaskDelay>
  
  return osOK;
 800668c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006696:	b480      	push	{r7}
 8006698:	b083      	sub	sp, #12
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f103 0208 	add.w	r2, r3, #8
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f04f 32ff 	mov.w	r2, #4294967295
 80066ae:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f103 0208 	add.w	r2, r3, #8
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f103 0208 	add.w	r2, r3, #8
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr

080066d6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689a      	ldr	r2, [r3, #8]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	683a      	ldr	r2, [r7, #0]
 800671a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	601a      	str	r2, [r3, #0]
}
 800672c:	bf00      	nop
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674e:	d103      	bne.n	8006758 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	e00c      	b.n	8006772 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3308      	adds	r3, #8
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	e002      	b.n	8006766 <vListInsert+0x2e>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	685b      	ldr	r3, [r3, #4]
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	429a      	cmp	r2, r3
 8006770:	d2f6      	bcs.n	8006760 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	685a      	ldr	r2, [r3, #4]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	683a      	ldr	r2, [r7, #0]
 8006780:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	601a      	str	r2, [r3, #0]
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr

080067aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80067aa:	b480      	push	{r7}
 80067ac:	b085      	sub	sp, #20
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	6892      	ldr	r2, [r2, #8]
 80067c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	6852      	ldr	r2, [r2, #4]
 80067ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d103      	bne.n	80067de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	1e5a      	subs	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80067fe:	b580      	push	{r7, lr}
 8006800:	b08e      	sub	sp, #56	; 0x38
 8006802:	af04      	add	r7, sp, #16
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
 800680a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800680c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800680e:	2b00      	cmp	r3, #0
 8006810:	d109      	bne.n	8006826 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	623b      	str	r3, [r7, #32]
 8006824:	e7fe      	b.n	8006824 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	2b00      	cmp	r3, #0
 800682a:	d109      	bne.n	8006840 <xTaskCreateStatic+0x42>
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	61fb      	str	r3, [r7, #28]
 800683e:	e7fe      	b.n	800683e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006840:	2354      	movs	r3, #84	; 0x54
 8006842:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	2b54      	cmp	r3, #84	; 0x54
 8006848:	d009      	beq.n	800685e <xTaskCreateStatic+0x60>
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	61bb      	str	r3, [r7, #24]
 800685c:	e7fe      	b.n	800685c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800685e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006862:	2b00      	cmp	r3, #0
 8006864:	d01e      	beq.n	80068a4 <xTaskCreateStatic+0xa6>
 8006866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01b      	beq.n	80068a4 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800686e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006874:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	2202      	movs	r2, #2
 800687a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800687e:	2300      	movs	r3, #0
 8006880:	9303      	str	r3, [sp, #12]
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	9302      	str	r3, [sp, #8]
 8006886:	f107 0314 	add.w	r3, r7, #20
 800688a:	9301      	str	r3, [sp, #4]
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	687a      	ldr	r2, [r7, #4]
 8006894:	68b9      	ldr	r1, [r7, #8]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f850 	bl	800693c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800689c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800689e:	f000 f8d3 	bl	8006a48 <prvAddNewTaskToReadyList>
 80068a2:	e001      	b.n	80068a8 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068a8:	697b      	ldr	r3, [r7, #20]
	}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3728      	adds	r7, #40	; 0x28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}

080068b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80068b2:	b580      	push	{r7, lr}
 80068b4:	b08c      	sub	sp, #48	; 0x30
 80068b6:	af04      	add	r7, sp, #16
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	60b9      	str	r1, [r7, #8]
 80068bc:	603b      	str	r3, [r7, #0]
 80068be:	4613      	mov	r3, r2
 80068c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f000 feb4 	bl	8007634 <pvPortMalloc>
 80068cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00e      	beq.n	80068f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80068d4:	2054      	movs	r0, #84	; 0x54
 80068d6:	f000 fead 	bl	8007634 <pvPortMalloc>
 80068da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d003      	beq.n	80068ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80068e2:	69fb      	ldr	r3, [r7, #28]
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	631a      	str	r2, [r3, #48]	; 0x30
 80068e8:	e005      	b.n	80068f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80068ea:	6978      	ldr	r0, [r7, #20]
 80068ec:	f000 ff64 	bl	80077b8 <vPortFree>
 80068f0:	e001      	b.n	80068f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d017      	beq.n	800692c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006904:	88fa      	ldrh	r2, [r7, #6]
 8006906:	2300      	movs	r3, #0
 8006908:	9303      	str	r3, [sp, #12]
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	9302      	str	r3, [sp, #8]
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	9301      	str	r3, [sp, #4]
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	9300      	str	r3, [sp, #0]
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68b9      	ldr	r1, [r7, #8]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f80e 	bl	800693c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006920:	69f8      	ldr	r0, [r7, #28]
 8006922:	f000 f891 	bl	8006a48 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006926:	2301      	movs	r3, #1
 8006928:	61bb      	str	r3, [r7, #24]
 800692a:	e002      	b.n	8006932 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800692c:	f04f 33ff 	mov.w	r3, #4294967295
 8006930:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006932:	69bb      	ldr	r3, [r7, #24]
	}
 8006934:	4618      	mov	r0, r3
 8006936:	3720      	adds	r7, #32
 8006938:	46bd      	mov	sp, r7
 800693a:	bd80      	pop	{r7, pc}

0800693c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]
 8006948:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006954:	3b01      	subs	r3, #1
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	4413      	add	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	f023 0307 	bic.w	r3, r3, #7
 8006962:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d009      	beq.n	8006982 <prvInitialiseNewTask+0x46>
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e7fe      	b.n	8006980 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01f      	beq.n	80069c8 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006988:	2300      	movs	r3, #0
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e012      	b.n	80069b4 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	4413      	add	r3, r2
 8006994:	7819      	ldrb	r1, [r3, #0]
 8006996:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	3334      	adds	r3, #52	; 0x34
 800699e:	460a      	mov	r2, r1
 80069a0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80069a2:	68ba      	ldr	r2, [r7, #8]
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	4413      	add	r3, r2
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d006      	beq.n	80069bc <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	3301      	adds	r3, #1
 80069b2:	61fb      	str	r3, [r7, #28]
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	2b0f      	cmp	r3, #15
 80069b8:	d9e9      	bls.n	800698e <prvInitialiseNewTask+0x52>
 80069ba:	e000      	b.n	80069be <prvInitialiseNewTask+0x82>
			{
				break;
 80069bc:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80069be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069c6:	e003      	b.n	80069d0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80069c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80069d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d2:	2b06      	cmp	r3, #6
 80069d4:	d901      	bls.n	80069da <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80069d6:	2306      	movs	r3, #6
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80069da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069de:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	2200      	movs	r2, #0
 80069ea:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80069ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ee:	3304      	adds	r3, #4
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff fe70 	bl	80066d6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80069f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f8:	3318      	adds	r3, #24
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fe6b 	bl	80066d6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a04:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	f1c3 0207 	rsb	r2, r3, #7
 8006a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a0e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a14:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a18:	2200      	movs	r2, #0
 8006a1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	69b8      	ldr	r0, [r7, #24]
 8006a2a:	f000 fbfd 	bl	8007228 <pxPortInitialiseStack>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d002      	beq.n	8006a40 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006a40:	bf00      	nop
 8006a42:	3720      	adds	r7, #32
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006a50:	f000 fd14 	bl	800747c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006a54:	4b2a      	ldr	r3, [pc, #168]	; (8006b00 <prvAddNewTaskToReadyList+0xb8>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	4a29      	ldr	r2, [pc, #164]	; (8006b00 <prvAddNewTaskToReadyList+0xb8>)
 8006a5c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006a5e:	4b29      	ldr	r3, [pc, #164]	; (8006b04 <prvAddNewTaskToReadyList+0xbc>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006a66:	4a27      	ldr	r2, [pc, #156]	; (8006b04 <prvAddNewTaskToReadyList+0xbc>)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006a6c:	4b24      	ldr	r3, [pc, #144]	; (8006b00 <prvAddNewTaskToReadyList+0xb8>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d110      	bne.n	8006a96 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006a74:	f000 fab8 	bl	8006fe8 <prvInitialiseTaskLists>
 8006a78:	e00d      	b.n	8006a96 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006a7a:	4b23      	ldr	r3, [pc, #140]	; (8006b08 <prvAddNewTaskToReadyList+0xc0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d109      	bne.n	8006a96 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006a82:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <prvAddNewTaskToReadyList+0xbc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d802      	bhi.n	8006a96 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <prvAddNewTaskToReadyList+0xbc>)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006a96:	4b1d      	ldr	r3, [pc, #116]	; (8006b0c <prvAddNewTaskToReadyList+0xc4>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	4a1b      	ldr	r2, [pc, #108]	; (8006b0c <prvAddNewTaskToReadyList+0xc4>)
 8006a9e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa4:	2201      	movs	r2, #1
 8006aa6:	409a      	lsls	r2, r3
 8006aa8:	4b19      	ldr	r3, [pc, #100]	; (8006b10 <prvAddNewTaskToReadyList+0xc8>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	4a18      	ldr	r2, [pc, #96]	; (8006b10 <prvAddNewTaskToReadyList+0xc8>)
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a15      	ldr	r2, [pc, #84]	; (8006b14 <prvAddNewTaskToReadyList+0xcc>)
 8006ac0:	441a      	add	r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7ff fe11 	bl	80066f0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ace:	f000 fd03 	bl	80074d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	; (8006b08 <prvAddNewTaskToReadyList+0xc0>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d00e      	beq.n	8006af8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ada:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <prvAddNewTaskToReadyList+0xbc>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d207      	bcs.n	8006af8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006ae8:	4b0b      	ldr	r3, [pc, #44]	; (8006b18 <prvAddNewTaskToReadyList+0xd0>)
 8006aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006aee:	601a      	str	r2, [r3, #0]
 8006af0:	f3bf 8f4f 	dsb	sy
 8006af4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000ddc 	.word	0x20000ddc
 8006b04:	20000cdc 	.word	0x20000cdc
 8006b08:	20000de8 	.word	0x20000de8
 8006b0c:	20000df8 	.word	0x20000df8
 8006b10:	20000de4 	.word	0x20000de4
 8006b14:	20000ce0 	.word	0x20000ce0
 8006b18:	e000ed04 	.word	0xe000ed04

08006b1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b24:	2300      	movs	r3, #0
 8006b26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d016      	beq.n	8006b5c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006b2e:	4b13      	ldr	r3, [pc, #76]	; (8006b7c <vTaskDelay+0x60>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d009      	beq.n	8006b4a <vTaskDelay+0x2e>
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	e7fe      	b.n	8006b48 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006b4a:	f000 f879 	bl	8006c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006b4e:	2100      	movs	r1, #0
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 fb03 	bl	800715c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006b56:	f000 f881 	bl	8006c5c <xTaskResumeAll>
 8006b5a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d107      	bne.n	8006b72 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <vTaskDelay+0x64>)
 8006b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b68:	601a      	str	r2, [r3, #0]
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000e04 	.word	0x20000e04
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006b92:	463a      	mov	r2, r7
 8006b94:	1d39      	adds	r1, r7, #4
 8006b96:	f107 0308 	add.w	r3, r7, #8
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f7fa faf4 	bl	8001188 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ba0:	6839      	ldr	r1, [r7, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	9202      	str	r2, [sp, #8]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	2300      	movs	r3, #0
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	491d      	ldr	r1, [pc, #116]	; (8006c28 <vTaskStartScheduler+0xa4>)
 8006bb4:	481d      	ldr	r0, [pc, #116]	; (8006c2c <vTaskStartScheduler+0xa8>)
 8006bb6:	f7ff fe22 	bl	80067fe <xTaskCreateStatic>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	4b1c      	ldr	r3, [pc, #112]	; (8006c30 <vTaskStartScheduler+0xac>)
 8006bbe:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <vTaskStartScheduler+0xac>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
 8006bcc:	e001      	b.n	8006bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d115      	bne.n	8006c04 <vTaskStartScheduler+0x80>
 8006bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bdc:	f383 8811 	msr	BASEPRI, r3
 8006be0:	f3bf 8f6f 	isb	sy
 8006be4:	f3bf 8f4f 	dsb	sy
 8006be8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <vTaskStartScheduler+0xb0>)
 8006bec:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006bf2:	4b11      	ldr	r3, [pc, #68]	; (8006c38 <vTaskStartScheduler+0xb4>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006bf8:	4b10      	ldr	r3, [pc, #64]	; (8006c3c <vTaskStartScheduler+0xb8>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006bfe:	f000 fb9f 	bl	8007340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c02:	e00d      	b.n	8006c20 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0a:	d109      	bne.n	8006c20 <vTaskStartScheduler+0x9c>
 8006c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c10:	f383 8811 	msr	BASEPRI, r3
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	60fb      	str	r3, [r7, #12]
 8006c1e:	e7fe      	b.n	8006c1e <vTaskStartScheduler+0x9a>
}
 8006c20:	bf00      	nop
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	0800bfac 	.word	0x0800bfac
 8006c2c:	08006fb9 	.word	0x08006fb9
 8006c30:	20000e00 	.word	0x20000e00
 8006c34:	20000dfc 	.word	0x20000dfc
 8006c38:	20000de8 	.word	0x20000de8
 8006c3c:	20000de0 	.word	0x20000de0

08006c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006c40:	b480      	push	{r7}
 8006c42:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006c44:	4b04      	ldr	r3, [pc, #16]	; (8006c58 <vTaskSuspendAll+0x18>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	4a03      	ldr	r2, [pc, #12]	; (8006c58 <vTaskSuspendAll+0x18>)
 8006c4c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006c4e:	bf00      	nop
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000e04 	.word	0x20000e04

08006c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006c66:	2300      	movs	r3, #0
 8006c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006c6a:	4b41      	ldr	r3, [pc, #260]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d109      	bne.n	8006c86 <xTaskResumeAll+0x2a>
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	e7fe      	b.n	8006c84 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006c86:	f000 fbf9 	bl	800747c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006c8a:	4b39      	ldr	r3, [pc, #228]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	4a37      	ldr	r2, [pc, #220]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c92:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c94:	4b36      	ldr	r3, [pc, #216]	; (8006d70 <xTaskResumeAll+0x114>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d161      	bne.n	8006d60 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006c9c:	4b35      	ldr	r3, [pc, #212]	; (8006d74 <xTaskResumeAll+0x118>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d05d      	beq.n	8006d60 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ca4:	e02e      	b.n	8006d04 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ca6:	4b34      	ldr	r3, [pc, #208]	; (8006d78 <xTaskResumeAll+0x11c>)
 8006ca8:	68db      	ldr	r3, [r3, #12]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3318      	adds	r3, #24
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f7ff fd79 	bl	80067aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3304      	adds	r3, #4
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7ff fd74 	bl	80067aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	409a      	lsls	r2, r3
 8006cca:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <xTaskResumeAll+0x120>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	4a2a      	ldr	r2, [pc, #168]	; (8006d7c <xTaskResumeAll+0x120>)
 8006cd2:	6013      	str	r3, [r2, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd8:	4613      	mov	r3, r2
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	4a27      	ldr	r2, [pc, #156]	; (8006d80 <xTaskResumeAll+0x124>)
 8006ce2:	441a      	add	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4610      	mov	r0, r2
 8006cec:	f7ff fd00 	bl	80066f0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf4:	4b23      	ldr	r3, [pc, #140]	; (8006d84 <xTaskResumeAll+0x128>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d302      	bcc.n	8006d04 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006cfe:	4b22      	ldr	r3, [pc, #136]	; (8006d88 <xTaskResumeAll+0x12c>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d04:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <xTaskResumeAll+0x11c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1cc      	bne.n	8006ca6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006d12:	f000 fa03 	bl	800711c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006d16:	4b1d      	ldr	r3, [pc, #116]	; (8006d8c <xTaskResumeAll+0x130>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d010      	beq.n	8006d44 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006d22:	f000 f837 	bl	8006d94 <xTaskIncrementTick>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d002      	beq.n	8006d32 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006d2c:	4b16      	ldr	r3, [pc, #88]	; (8006d88 <xTaskResumeAll+0x12c>)
 8006d2e:	2201      	movs	r2, #1
 8006d30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1f1      	bne.n	8006d22 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <xTaskResumeAll+0x130>)
 8006d40:	2200      	movs	r2, #0
 8006d42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006d44:	4b10      	ldr	r3, [pc, #64]	; (8006d88 <xTaskResumeAll+0x12c>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d009      	beq.n	8006d60 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006d50:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <xTaskResumeAll+0x134>)
 8006d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d56:	601a      	str	r2, [r3, #0]
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d60:	f000 fbba 	bl	80074d8 <vPortExitCritical>

	return xAlreadyYielded;
 8006d64:	68bb      	ldr	r3, [r7, #8]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000e04 	.word	0x20000e04
 8006d74:	20000ddc 	.word	0x20000ddc
 8006d78:	20000d9c 	.word	0x20000d9c
 8006d7c:	20000de4 	.word	0x20000de4
 8006d80:	20000ce0 	.word	0x20000ce0
 8006d84:	20000cdc 	.word	0x20000cdc
 8006d88:	20000df0 	.word	0x20000df0
 8006d8c:	20000dec 	.word	0x20000dec
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b086      	sub	sp, #24
 8006d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d9e:	4b4e      	ldr	r3, [pc, #312]	; (8006ed8 <xTaskIncrementTick+0x144>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f040 8087 	bne.w	8006eb6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006da8:	4b4c      	ldr	r3, [pc, #304]	; (8006edc <xTaskIncrementTick+0x148>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3301      	adds	r3, #1
 8006dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006db0:	4a4a      	ldr	r2, [pc, #296]	; (8006edc <xTaskIncrementTick+0x148>)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11f      	bne.n	8006dfc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006dbc:	4b48      	ldr	r3, [pc, #288]	; (8006ee0 <xTaskIncrementTick+0x14c>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d009      	beq.n	8006dda <xTaskIncrementTick+0x46>
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	603b      	str	r3, [r7, #0]
 8006dd8:	e7fe      	b.n	8006dd8 <xTaskIncrementTick+0x44>
 8006dda:	4b41      	ldr	r3, [pc, #260]	; (8006ee0 <xTaskIncrementTick+0x14c>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	4b40      	ldr	r3, [pc, #256]	; (8006ee4 <xTaskIncrementTick+0x150>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a3e      	ldr	r2, [pc, #248]	; (8006ee0 <xTaskIncrementTick+0x14c>)
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	4a3e      	ldr	r2, [pc, #248]	; (8006ee4 <xTaskIncrementTick+0x150>)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6013      	str	r3, [r2, #0]
 8006dee:	4b3e      	ldr	r3, [pc, #248]	; (8006ee8 <xTaskIncrementTick+0x154>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a3c      	ldr	r2, [pc, #240]	; (8006ee8 <xTaskIncrementTick+0x154>)
 8006df6:	6013      	str	r3, [r2, #0]
 8006df8:	f000 f990 	bl	800711c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006dfc:	4b3b      	ldr	r3, [pc, #236]	; (8006eec <xTaskIncrementTick+0x158>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	693a      	ldr	r2, [r7, #16]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d348      	bcc.n	8006e98 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e06:	4b36      	ldr	r3, [pc, #216]	; (8006ee0 <xTaskIncrementTick+0x14c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d104      	bne.n	8006e1a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e10:	4b36      	ldr	r3, [pc, #216]	; (8006eec <xTaskIncrementTick+0x158>)
 8006e12:	f04f 32ff 	mov.w	r2, #4294967295
 8006e16:	601a      	str	r2, [r3, #0]
					break;
 8006e18:	e03e      	b.n	8006e98 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1a:	4b31      	ldr	r3, [pc, #196]	; (8006ee0 <xTaskIncrementTick+0x14c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d203      	bcs.n	8006e3a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006e32:	4a2e      	ldr	r2, [pc, #184]	; (8006eec <xTaskIncrementTick+0x158>)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006e38:	e02e      	b.n	8006e98 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	3304      	adds	r3, #4
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff fcb3 	bl	80067aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	3318      	adds	r3, #24
 8006e50:	4618      	mov	r0, r3
 8006e52:	f7ff fcaa 	bl	80067aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	409a      	lsls	r2, r3
 8006e5e:	4b24      	ldr	r3, [pc, #144]	; (8006ef0 <xTaskIncrementTick+0x15c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	4a22      	ldr	r2, [pc, #136]	; (8006ef0 <xTaskIncrementTick+0x15c>)
 8006e66:	6013      	str	r3, [r2, #0]
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	4413      	add	r3, r2
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	4a1f      	ldr	r2, [pc, #124]	; (8006ef4 <xTaskIncrementTick+0x160>)
 8006e76:	441a      	add	r2, r3
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	3304      	adds	r3, #4
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	4610      	mov	r0, r2
 8006e80:	f7ff fc36 	bl	80066f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e88:	4b1b      	ldr	r3, [pc, #108]	; (8006ef8 <xTaskIncrementTick+0x164>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d3b9      	bcc.n	8006e06 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8006e92:	2301      	movs	r3, #1
 8006e94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e96:	e7b6      	b.n	8006e06 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006e98:	4b17      	ldr	r3, [pc, #92]	; (8006ef8 <xTaskIncrementTick+0x164>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e9e:	4915      	ldr	r1, [pc, #84]	; (8006ef4 <xTaskIncrementTick+0x160>)
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	440b      	add	r3, r1
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b01      	cmp	r3, #1
 8006eae:	d907      	bls.n	8006ec0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	617b      	str	r3, [r7, #20]
 8006eb4:	e004      	b.n	8006ec0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006eb6:	4b11      	ldr	r3, [pc, #68]	; (8006efc <xTaskIncrementTick+0x168>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	3301      	adds	r3, #1
 8006ebc:	4a0f      	ldr	r2, [pc, #60]	; (8006efc <xTaskIncrementTick+0x168>)
 8006ebe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006ec0:	4b0f      	ldr	r3, [pc, #60]	; (8006f00 <xTaskIncrementTick+0x16c>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006ecc:	697b      	ldr	r3, [r7, #20]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000e04 	.word	0x20000e04
 8006edc:	20000de0 	.word	0x20000de0
 8006ee0:	20000d94 	.word	0x20000d94
 8006ee4:	20000d98 	.word	0x20000d98
 8006ee8:	20000df4 	.word	0x20000df4
 8006eec:	20000dfc 	.word	0x20000dfc
 8006ef0:	20000de4 	.word	0x20000de4
 8006ef4:	20000ce0 	.word	0x20000ce0
 8006ef8:	20000cdc 	.word	0x20000cdc
 8006efc:	20000dec 	.word	0x20000dec
 8006f00:	20000df0 	.word	0x20000df0

08006f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006f0a:	4b26      	ldr	r3, [pc, #152]	; (8006fa4 <vTaskSwitchContext+0xa0>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006f12:	4b25      	ldr	r3, [pc, #148]	; (8006fa8 <vTaskSwitchContext+0xa4>)
 8006f14:	2201      	movs	r2, #1
 8006f16:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006f18:	e03e      	b.n	8006f98 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006f1a:	4b23      	ldr	r3, [pc, #140]	; (8006fa8 <vTaskSwitchContext+0xa4>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f20:	4b22      	ldr	r3, [pc, #136]	; (8006fac <vTaskSwitchContext+0xa8>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	fab3 f383 	clz	r3, r3
 8006f2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	f1c3 031f 	rsb	r3, r3, #31
 8006f34:	617b      	str	r3, [r7, #20]
 8006f36:	491e      	ldr	r1, [pc, #120]	; (8006fb0 <vTaskSwitchContext+0xac>)
 8006f38:	697a      	ldr	r2, [r7, #20]
 8006f3a:	4613      	mov	r3, r2
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	4413      	add	r3, r2
 8006f40:	009b      	lsls	r3, r3, #2
 8006f42:	440b      	add	r3, r1
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d109      	bne.n	8006f5e <vTaskSwitchContext+0x5a>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	e7fe      	b.n	8006f5c <vTaskSwitchContext+0x58>
 8006f5e:	697a      	ldr	r2, [r7, #20]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4a11      	ldr	r2, [pc, #68]	; (8006fb0 <vTaskSwitchContext+0xac>)
 8006f6a:	4413      	add	r3, r2
 8006f6c:	613b      	str	r3, [r7, #16]
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	685a      	ldr	r2, [r3, #4]
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	605a      	str	r2, [r3, #4]
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	685a      	ldr	r2, [r3, #4]
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d104      	bne.n	8006f8e <vTaskSwitchContext+0x8a>
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	605a      	str	r2, [r3, #4]
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	4a07      	ldr	r2, [pc, #28]	; (8006fb4 <vTaskSwitchContext+0xb0>)
 8006f96:	6013      	str	r3, [r2, #0]
}
 8006f98:	bf00      	nop
 8006f9a:	371c      	adds	r7, #28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr
 8006fa4:	20000e04 	.word	0x20000e04
 8006fa8:	20000df0 	.word	0x20000df0
 8006fac:	20000de4 	.word	0x20000de4
 8006fb0:	20000ce0 	.word	0x20000ce0
 8006fb4:	20000cdc 	.word	0x20000cdc

08006fb8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006fc0:	f000 f852 	bl	8007068 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006fc4:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <prvIdleTask+0x28>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d9f9      	bls.n	8006fc0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006fcc:	4b05      	ldr	r3, [pc, #20]	; (8006fe4 <prvIdleTask+0x2c>)
 8006fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	f3bf 8f4f 	dsb	sy
 8006fd8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006fdc:	e7f0      	b.n	8006fc0 <prvIdleTask+0x8>
 8006fde:	bf00      	nop
 8006fe0:	20000ce0 	.word	0x20000ce0
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006fee:	2300      	movs	r3, #0
 8006ff0:	607b      	str	r3, [r7, #4]
 8006ff2:	e00c      	b.n	800700e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4a12      	ldr	r2, [pc, #72]	; (8007048 <prvInitialiseTaskLists+0x60>)
 8007000:	4413      	add	r3, r2
 8007002:	4618      	mov	r0, r3
 8007004:	f7ff fb47 	bl	8006696 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	3301      	adds	r3, #1
 800700c:	607b      	str	r3, [r7, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2b06      	cmp	r3, #6
 8007012:	d9ef      	bls.n	8006ff4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007014:	480d      	ldr	r0, [pc, #52]	; (800704c <prvInitialiseTaskLists+0x64>)
 8007016:	f7ff fb3e 	bl	8006696 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800701a:	480d      	ldr	r0, [pc, #52]	; (8007050 <prvInitialiseTaskLists+0x68>)
 800701c:	f7ff fb3b 	bl	8006696 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007020:	480c      	ldr	r0, [pc, #48]	; (8007054 <prvInitialiseTaskLists+0x6c>)
 8007022:	f7ff fb38 	bl	8006696 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007026:	480c      	ldr	r0, [pc, #48]	; (8007058 <prvInitialiseTaskLists+0x70>)
 8007028:	f7ff fb35 	bl	8006696 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800702c:	480b      	ldr	r0, [pc, #44]	; (800705c <prvInitialiseTaskLists+0x74>)
 800702e:	f7ff fb32 	bl	8006696 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007032:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <prvInitialiseTaskLists+0x78>)
 8007034:	4a05      	ldr	r2, [pc, #20]	; (800704c <prvInitialiseTaskLists+0x64>)
 8007036:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007038:	4b0a      	ldr	r3, [pc, #40]	; (8007064 <prvInitialiseTaskLists+0x7c>)
 800703a:	4a05      	ldr	r2, [pc, #20]	; (8007050 <prvInitialiseTaskLists+0x68>)
 800703c:	601a      	str	r2, [r3, #0]
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	20000ce0 	.word	0x20000ce0
 800704c:	20000d6c 	.word	0x20000d6c
 8007050:	20000d80 	.word	0x20000d80
 8007054:	20000d9c 	.word	0x20000d9c
 8007058:	20000db0 	.word	0x20000db0
 800705c:	20000dc8 	.word	0x20000dc8
 8007060:	20000d94 	.word	0x20000d94
 8007064:	20000d98 	.word	0x20000d98

08007068 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800706e:	e019      	b.n	80070a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007070:	f000 fa04 	bl	800747c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007074:	4b0f      	ldr	r3, [pc, #60]	; (80070b4 <prvCheckTasksWaitingTermination+0x4c>)
 8007076:	68db      	ldr	r3, [r3, #12]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	3304      	adds	r3, #4
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff fb92 	bl	80067aa <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007086:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <prvCheckTasksWaitingTermination+0x50>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	3b01      	subs	r3, #1
 800708c:	4a0a      	ldr	r2, [pc, #40]	; (80070b8 <prvCheckTasksWaitingTermination+0x50>)
 800708e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007090:	4b0a      	ldr	r3, [pc, #40]	; (80070bc <prvCheckTasksWaitingTermination+0x54>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	3b01      	subs	r3, #1
 8007096:	4a09      	ldr	r2, [pc, #36]	; (80070bc <prvCheckTasksWaitingTermination+0x54>)
 8007098:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800709a:	f000 fa1d 	bl	80074d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 f80e 	bl	80070c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070a4:	4b05      	ldr	r3, [pc, #20]	; (80070bc <prvCheckTasksWaitingTermination+0x54>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d1e1      	bne.n	8007070 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	20000db0 	.word	0x20000db0
 80070b8:	20000ddc 	.word	0x20000ddc
 80070bc:	20000dc4 	.word	0x20000dc4

080070c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d108      	bne.n	80070e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d6:	4618      	mov	r0, r3
 80070d8:	f000 fb6e 	bl	80077b8 <vPortFree>
				vPortFree( pxTCB );
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 fb6b 	bl	80077b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80070e2:	e017      	b.n	8007114 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d103      	bne.n	80070f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fb62 	bl	80077b8 <vPortFree>
	}
 80070f4:	e00e      	b.n	8007114 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d009      	beq.n	8007114 <prvDeleteTCB+0x54>
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	60fb      	str	r3, [r7, #12]
 8007112:	e7fe      	b.n	8007112 <prvDeleteTCB+0x52>
	}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007122:	4b0c      	ldr	r3, [pc, #48]	; (8007154 <prvResetNextTaskUnblockTime+0x38>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d104      	bne.n	8007136 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800712c:	4b0a      	ldr	r3, [pc, #40]	; (8007158 <prvResetNextTaskUnblockTime+0x3c>)
 800712e:	f04f 32ff 	mov.w	r2, #4294967295
 8007132:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007134:	e008      	b.n	8007148 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <prvResetNextTaskUnblockTime+0x38>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	4a04      	ldr	r2, [pc, #16]	; (8007158 <prvResetNextTaskUnblockTime+0x3c>)
 8007146:	6013      	str	r3, [r2, #0]
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr
 8007154:	20000d94 	.word	0x20000d94
 8007158:	20000dfc 	.word	0x20000dfc

0800715c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b084      	sub	sp, #16
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <prvAddCurrentTaskToDelayedList+0xb0>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800716c:	4b28      	ldr	r3, [pc, #160]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb4>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3304      	adds	r3, #4
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff fb19 	bl	80067aa <uxListRemove>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10b      	bne.n	8007196 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800717e:	4b24      	ldr	r3, [pc, #144]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007184:	2201      	movs	r2, #1
 8007186:	fa02 f303 	lsl.w	r3, r2, r3
 800718a:	43da      	mvns	r2, r3
 800718c:	4b21      	ldr	r3, [pc, #132]	; (8007214 <prvAddCurrentTaskToDelayedList+0xb8>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4013      	ands	r3, r2
 8007192:	4a20      	ldr	r2, [pc, #128]	; (8007214 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007194:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f1b3 3fff 	cmp.w	r3, #4294967295
 800719c:	d10a      	bne.n	80071b4 <prvAddCurrentTaskToDelayedList+0x58>
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d007      	beq.n	80071b4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3304      	adds	r3, #4
 80071aa:	4619      	mov	r1, r3
 80071ac:	481a      	ldr	r0, [pc, #104]	; (8007218 <prvAddCurrentTaskToDelayedList+0xbc>)
 80071ae:	f7ff fa9f 	bl	80066f0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071b2:	e026      	b.n	8007202 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	4413      	add	r3, r2
 80071ba:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071bc:	4b14      	ldr	r3, [pc, #80]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d209      	bcs.n	80071e0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071cc:	4b13      	ldr	r3, [pc, #76]	; (800721c <prvAddCurrentTaskToDelayedList+0xc0>)
 80071ce:	681a      	ldr	r2, [r3, #0]
 80071d0:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	3304      	adds	r3, #4
 80071d6:	4619      	mov	r1, r3
 80071d8:	4610      	mov	r0, r2
 80071da:	f7ff faad 	bl	8006738 <vListInsert>
}
 80071de:	e010      	b.n	8007202 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e0:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <prvAddCurrentTaskToDelayedList+0xc4>)
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	4b0a      	ldr	r3, [pc, #40]	; (8007210 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3304      	adds	r3, #4
 80071ea:	4619      	mov	r1, r3
 80071ec:	4610      	mov	r0, r2
 80071ee:	f7ff faa3 	bl	8006738 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071f2:	4b0c      	ldr	r3, [pc, #48]	; (8007224 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d202      	bcs.n	8007202 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80071fc:	4a09      	ldr	r2, [pc, #36]	; (8007224 <prvAddCurrentTaskToDelayedList+0xc8>)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	6013      	str	r3, [r2, #0]
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000de0 	.word	0x20000de0
 8007210:	20000cdc 	.word	0x20000cdc
 8007214:	20000de4 	.word	0x20000de4
 8007218:	20000dc8 	.word	0x20000dc8
 800721c:	20000d98 	.word	0x20000d98
 8007220:	20000d94 	.word	0x20000d94
 8007224:	20000dfc 	.word	0x20000dfc

08007228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	3b04      	subs	r3, #4
 8007238:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3b04      	subs	r3, #4
 8007246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	f023 0201 	bic.w	r2, r3, #1
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	3b04      	subs	r3, #4
 8007256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007258:	4a0c      	ldr	r2, [pc, #48]	; (800728c <pxPortInitialiseStack+0x64>)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3b14      	subs	r3, #20
 8007262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	3b04      	subs	r3, #4
 800726e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f06f 0202 	mvn.w	r2, #2
 8007276:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	3b20      	subs	r3, #32
 800727c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800727e:	68fb      	ldr	r3, [r7, #12]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3714      	adds	r7, #20
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	08007291 	.word	0x08007291

08007290 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007290:	b480      	push	{r7}
 8007292:	b085      	sub	sp, #20
 8007294:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007296:	2300      	movs	r3, #0
 8007298:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800729a:	4b11      	ldr	r3, [pc, #68]	; (80072e0 <prvTaskExitError+0x50>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072a2:	d009      	beq.n	80072b8 <prvTaskExitError+0x28>
 80072a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a8:	f383 8811 	msr	BASEPRI, r3
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	f3bf 8f4f 	dsb	sy
 80072b4:	60fb      	str	r3, [r7, #12]
 80072b6:	e7fe      	b.n	80072b6 <prvTaskExitError+0x26>
 80072b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80072ca:	bf00      	nop
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d0fc      	beq.n	80072cc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80072d2:	bf00      	nop
 80072d4:	3714      	adds	r7, #20
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	20000068 	.word	0x20000068
	...

080072f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80072f0:	4b07      	ldr	r3, [pc, #28]	; (8007310 <pxCurrentTCBConst2>)
 80072f2:	6819      	ldr	r1, [r3, #0]
 80072f4:	6808      	ldr	r0, [r1, #0]
 80072f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fa:	f380 8809 	msr	PSP, r0
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f04f 0000 	mov.w	r0, #0
 8007306:	f380 8811 	msr	BASEPRI, r0
 800730a:	4770      	bx	lr
 800730c:	f3af 8000 	nop.w

08007310 <pxCurrentTCBConst2>:
 8007310:	20000cdc 	.word	0x20000cdc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop

08007318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007318:	4808      	ldr	r0, [pc, #32]	; (800733c <prvPortStartFirstTask+0x24>)
 800731a:	6800      	ldr	r0, [r0, #0]
 800731c:	6800      	ldr	r0, [r0, #0]
 800731e:	f380 8808 	msr	MSP, r0
 8007322:	f04f 0000 	mov.w	r0, #0
 8007326:	f380 8814 	msr	CONTROL, r0
 800732a:	b662      	cpsie	i
 800732c:	b661      	cpsie	f
 800732e:	f3bf 8f4f 	dsb	sy
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	df00      	svc	0
 8007338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800733a:	bf00      	nop
 800733c:	e000ed08 	.word	0xe000ed08

08007340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007346:	4b44      	ldr	r3, [pc, #272]	; (8007458 <xPortStartScheduler+0x118>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a44      	ldr	r2, [pc, #272]	; (800745c <xPortStartScheduler+0x11c>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d109      	bne.n	8007364 <xPortStartScheduler+0x24>
 8007350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	613b      	str	r3, [r7, #16]
 8007362:	e7fe      	b.n	8007362 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007364:	4b3c      	ldr	r3, [pc, #240]	; (8007458 <xPortStartScheduler+0x118>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a3d      	ldr	r2, [pc, #244]	; (8007460 <xPortStartScheduler+0x120>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d109      	bne.n	8007382 <xPortStartScheduler+0x42>
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60fb      	str	r3, [r7, #12]
 8007380:	e7fe      	b.n	8007380 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007382:	4b38      	ldr	r3, [pc, #224]	; (8007464 <xPortStartScheduler+0x124>)
 8007384:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	22ff      	movs	r2, #255	; 0xff
 8007392:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	b2db      	uxtb	r3, r3
 800739a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	4b30      	ldr	r3, [pc, #192]	; (8007468 <xPortStartScheduler+0x128>)
 80073a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80073aa:	4b30      	ldr	r3, [pc, #192]	; (800746c <xPortStartScheduler+0x12c>)
 80073ac:	2207      	movs	r2, #7
 80073ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073b0:	e009      	b.n	80073c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80073b2:	4b2e      	ldr	r3, [pc, #184]	; (800746c <xPortStartScheduler+0x12c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	3b01      	subs	r3, #1
 80073b8:	4a2c      	ldr	r2, [pc, #176]	; (800746c <xPortStartScheduler+0x12c>)
 80073ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073bc:	78fb      	ldrb	r3, [r7, #3]
 80073be:	b2db      	uxtb	r3, r3
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073c6:	78fb      	ldrb	r3, [r7, #3]
 80073c8:	b2db      	uxtb	r3, r3
 80073ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ce:	2b80      	cmp	r3, #128	; 0x80
 80073d0:	d0ef      	beq.n	80073b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073d2:	4b26      	ldr	r3, [pc, #152]	; (800746c <xPortStartScheduler+0x12c>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f1c3 0307 	rsb	r3, r3, #7
 80073da:	2b04      	cmp	r3, #4
 80073dc:	d009      	beq.n	80073f2 <xPortStartScheduler+0xb2>
 80073de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e2:	f383 8811 	msr	BASEPRI, r3
 80073e6:	f3bf 8f6f 	isb	sy
 80073ea:	f3bf 8f4f 	dsb	sy
 80073ee:	60bb      	str	r3, [r7, #8]
 80073f0:	e7fe      	b.n	80073f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073f2:	4b1e      	ldr	r3, [pc, #120]	; (800746c <xPortStartScheduler+0x12c>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	021b      	lsls	r3, r3, #8
 80073f8:	4a1c      	ldr	r2, [pc, #112]	; (800746c <xPortStartScheduler+0x12c>)
 80073fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073fc:	4b1b      	ldr	r3, [pc, #108]	; (800746c <xPortStartScheduler+0x12c>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007404:	4a19      	ldr	r2, [pc, #100]	; (800746c <xPortStartScheduler+0x12c>)
 8007406:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	b2da      	uxtb	r2, r3
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007410:	4b17      	ldr	r3, [pc, #92]	; (8007470 <xPortStartScheduler+0x130>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a16      	ldr	r2, [pc, #88]	; (8007470 <xPortStartScheduler+0x130>)
 8007416:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800741a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800741c:	4b14      	ldr	r3, [pc, #80]	; (8007470 <xPortStartScheduler+0x130>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a13      	ldr	r2, [pc, #76]	; (8007470 <xPortStartScheduler+0x130>)
 8007422:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007426:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007428:	f000 f8d6 	bl	80075d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800742c:	4b11      	ldr	r3, [pc, #68]	; (8007474 <xPortStartScheduler+0x134>)
 800742e:	2200      	movs	r2, #0
 8007430:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007432:	f000 f8f5 	bl	8007620 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007436:	4b10      	ldr	r3, [pc, #64]	; (8007478 <xPortStartScheduler+0x138>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a0f      	ldr	r2, [pc, #60]	; (8007478 <xPortStartScheduler+0x138>)
 800743c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007440:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007442:	f7ff ff69 	bl	8007318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007446:	f7ff fd5d 	bl	8006f04 <vTaskSwitchContext>
	prvTaskExitError();
 800744a:	f7ff ff21 	bl	8007290 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800744e:	2300      	movs	r3, #0
}
 8007450:	4618      	mov	r0, r3
 8007452:	3718      	adds	r7, #24
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}
 8007458:	e000ed00 	.word	0xe000ed00
 800745c:	410fc271 	.word	0x410fc271
 8007460:	410fc270 	.word	0x410fc270
 8007464:	e000e400 	.word	0xe000e400
 8007468:	20000e08 	.word	0x20000e08
 800746c:	20000e0c 	.word	0x20000e0c
 8007470:	e000ed20 	.word	0xe000ed20
 8007474:	20000068 	.word	0x20000068
 8007478:	e000ef34 	.word	0xe000ef34

0800747c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
 8007482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007494:	4b0e      	ldr	r3, [pc, #56]	; (80074d0 <vPortEnterCritical+0x54>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3301      	adds	r3, #1
 800749a:	4a0d      	ldr	r2, [pc, #52]	; (80074d0 <vPortEnterCritical+0x54>)
 800749c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800749e:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <vPortEnterCritical+0x54>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b01      	cmp	r3, #1
 80074a4:	d10e      	bne.n	80074c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <vPortEnterCritical+0x58>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d009      	beq.n	80074c4 <vPortEnterCritical+0x48>
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	e7fe      	b.n	80074c2 <vPortEnterCritical+0x46>
	}
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr
 80074d0:	20000068 	.word	0x20000068
 80074d4:	e000ed04 	.word	0xe000ed04

080074d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074de:	4b11      	ldr	r3, [pc, #68]	; (8007524 <vPortExitCritical+0x4c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d109      	bne.n	80074fa <vPortExitCritical+0x22>
 80074e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ea:	f383 8811 	msr	BASEPRI, r3
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	f3bf 8f4f 	dsb	sy
 80074f6:	607b      	str	r3, [r7, #4]
 80074f8:	e7fe      	b.n	80074f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80074fa:	4b0a      	ldr	r3, [pc, #40]	; (8007524 <vPortExitCritical+0x4c>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3b01      	subs	r3, #1
 8007500:	4a08      	ldr	r2, [pc, #32]	; (8007524 <vPortExitCritical+0x4c>)
 8007502:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007504:	4b07      	ldr	r3, [pc, #28]	; (8007524 <vPortExitCritical+0x4c>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d104      	bne.n	8007516 <vPortExitCritical+0x3e>
 800750c:	2300      	movs	r3, #0
 800750e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007510:	683b      	ldr	r3, [r7, #0]
 8007512:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8007516:	bf00      	nop
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	20000068 	.word	0x20000068
	...

08007530 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007530:	f3ef 8009 	mrs	r0, PSP
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	4b15      	ldr	r3, [pc, #84]	; (8007590 <pxCurrentTCBConst>)
 800753a:	681a      	ldr	r2, [r3, #0]
 800753c:	f01e 0f10 	tst.w	lr, #16
 8007540:	bf08      	it	eq
 8007542:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007546:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800754a:	6010      	str	r0, [r2, #0]
 800754c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007550:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007554:	f380 8811 	msr	BASEPRI, r0
 8007558:	f3bf 8f4f 	dsb	sy
 800755c:	f3bf 8f6f 	isb	sy
 8007560:	f7ff fcd0 	bl	8006f04 <vTaskSwitchContext>
 8007564:	f04f 0000 	mov.w	r0, #0
 8007568:	f380 8811 	msr	BASEPRI, r0
 800756c:	bc09      	pop	{r0, r3}
 800756e:	6819      	ldr	r1, [r3, #0]
 8007570:	6808      	ldr	r0, [r1, #0]
 8007572:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007576:	f01e 0f10 	tst.w	lr, #16
 800757a:	bf08      	it	eq
 800757c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007580:	f380 8809 	msr	PSP, r0
 8007584:	f3bf 8f6f 	isb	sy
 8007588:	4770      	bx	lr
 800758a:	bf00      	nop
 800758c:	f3af 8000 	nop.w

08007590 <pxCurrentTCBConst>:
 8007590:	20000cdc 	.word	0x20000cdc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop

08007598 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b082      	sub	sp, #8
 800759c:	af00      	add	r7, sp, #0
	__asm volatile
 800759e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a2:	f383 8811 	msr	BASEPRI, r3
 80075a6:	f3bf 8f6f 	isb	sy
 80075aa:	f3bf 8f4f 	dsb	sy
 80075ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80075b0:	f7ff fbf0 	bl	8006d94 <xTaskIncrementTick>
 80075b4:	4603      	mov	r3, r0
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d003      	beq.n	80075c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80075ba:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <SysTick_Handler+0x3c>)
 80075bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075c0:	601a      	str	r2, [r3, #0]
 80075c2:	2300      	movs	r3, #0
 80075c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80075d8:	b480      	push	{r7}
 80075da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <vPortSetupTimerInterrupt+0x34>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80075e2:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <vPortSetupTimerInterrupt+0x38>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <vPortSetupTimerInterrupt+0x3c>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a0a      	ldr	r2, [pc, #40]	; (8007618 <vPortSetupTimerInterrupt+0x40>)
 80075ee:	fba2 2303 	umull	r2, r3, r2, r3
 80075f2:	099b      	lsrs	r3, r3, #6
 80075f4:	4a09      	ldr	r2, [pc, #36]	; (800761c <vPortSetupTimerInterrupt+0x44>)
 80075f6:	3b01      	subs	r3, #1
 80075f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075fa:	4b04      	ldr	r3, [pc, #16]	; (800760c <vPortSetupTimerInterrupt+0x34>)
 80075fc:	2207      	movs	r2, #7
 80075fe:	601a      	str	r2, [r3, #0]
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	e000e010 	.word	0xe000e010
 8007610:	e000e018 	.word	0xe000e018
 8007614:	20000000 	.word	0x20000000
 8007618:	10624dd3 	.word	0x10624dd3
 800761c:	e000e014 	.word	0xe000e014

08007620 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007620:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007630 <vPortEnableVFP+0x10>
 8007624:	6801      	ldr	r1, [r0, #0]
 8007626:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800762a:	6001      	str	r1, [r0, #0]
 800762c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800762e:	bf00      	nop
 8007630:	e000ed88 	.word	0xe000ed88

08007634 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b08a      	sub	sp, #40	; 0x28
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800763c:	2300      	movs	r3, #0
 800763e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007640:	f7ff fafe 	bl	8006c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007644:	4b57      	ldr	r3, [pc, #348]	; (80077a4 <pvPortMalloc+0x170>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d101      	bne.n	8007650 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800764c:	f000 f90c 	bl	8007868 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007650:	4b55      	ldr	r3, [pc, #340]	; (80077a8 <pvPortMalloc+0x174>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	4013      	ands	r3, r2
 8007658:	2b00      	cmp	r3, #0
 800765a:	f040 808c 	bne.w	8007776 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01c      	beq.n	800769e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8007664:	2208      	movs	r2, #8
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f003 0307 	and.w	r3, r3, #7
 8007672:	2b00      	cmp	r3, #0
 8007674:	d013      	beq.n	800769e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f023 0307 	bic.w	r3, r3, #7
 800767c:	3308      	adds	r3, #8
 800767e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <pvPortMalloc+0x6a>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	617b      	str	r3, [r7, #20]
 800769c:	e7fe      	b.n	800769c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d068      	beq.n	8007776 <pvPortMalloc+0x142>
 80076a4:	4b41      	ldr	r3, [pc, #260]	; (80077ac <pvPortMalloc+0x178>)
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	429a      	cmp	r2, r3
 80076ac:	d863      	bhi.n	8007776 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ae:	4b40      	ldr	r3, [pc, #256]	; (80077b0 <pvPortMalloc+0x17c>)
 80076b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076b2:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <pvPortMalloc+0x17c>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076b8:	e004      	b.n	80076c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80076ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d903      	bls.n	80076d6 <pvPortMalloc+0xa2>
 80076ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1f1      	bne.n	80076ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076d6:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <pvPortMalloc+0x170>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076dc:	429a      	cmp	r2, r3
 80076de:	d04a      	beq.n	8007776 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80076e0:	6a3b      	ldr	r3, [r7, #32]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2208      	movs	r2, #8
 80076e6:	4413      	add	r3, r2
 80076e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	681a      	ldr	r2, [r3, #0]
 80076ee:	6a3b      	ldr	r3, [r7, #32]
 80076f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	2308      	movs	r3, #8
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	429a      	cmp	r2, r3
 8007700:	d91e      	bls.n	8007740 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4413      	add	r3, r2
 8007708:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	f003 0307 	and.w	r3, r3, #7
 8007710:	2b00      	cmp	r3, #0
 8007712:	d009      	beq.n	8007728 <pvPortMalloc+0xf4>
 8007714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007718:	f383 8811 	msr	BASEPRI, r3
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	613b      	str	r3, [r7, #16]
 8007726:	e7fe      	b.n	8007726 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	1ad2      	subs	r2, r2, r3
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800773a:	69b8      	ldr	r0, [r7, #24]
 800773c:	f000 f8f6 	bl	800792c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <pvPortMalloc+0x178>)
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	4a18      	ldr	r2, [pc, #96]	; (80077ac <pvPortMalloc+0x178>)
 800774c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800774e:	4b17      	ldr	r3, [pc, #92]	; (80077ac <pvPortMalloc+0x178>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b18      	ldr	r3, [pc, #96]	; (80077b4 <pvPortMalloc+0x180>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	429a      	cmp	r2, r3
 8007758:	d203      	bcs.n	8007762 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <pvPortMalloc+0x178>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a15      	ldr	r2, [pc, #84]	; (80077b4 <pvPortMalloc+0x180>)
 8007760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	685a      	ldr	r2, [r3, #4]
 8007766:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <pvPortMalloc+0x174>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	431a      	orrs	r2, r3
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	2200      	movs	r2, #0
 8007774:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007776:	f7ff fa71 	bl	8006c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f003 0307 	and.w	r3, r3, #7
 8007780:	2b00      	cmp	r3, #0
 8007782:	d009      	beq.n	8007798 <pvPortMalloc+0x164>
 8007784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007788:	f383 8811 	msr	BASEPRI, r3
 800778c:	f3bf 8f6f 	isb	sy
 8007790:	f3bf 8f4f 	dsb	sy
 8007794:	60fb      	str	r3, [r7, #12]
 8007796:	e7fe      	b.n	8007796 <pvPortMalloc+0x162>
	return pvReturn;
 8007798:	69fb      	ldr	r3, [r7, #28]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3728      	adds	r7, #40	; 0x28
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	20004a18 	.word	0x20004a18
 80077a8:	20004a24 	.word	0x20004a24
 80077ac:	20004a1c 	.word	0x20004a1c
 80077b0:	20004a10 	.word	0x20004a10
 80077b4:	20004a20 	.word	0x20004a20

080077b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b086      	sub	sp, #24
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d046      	beq.n	8007858 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077ca:	2308      	movs	r3, #8
 80077cc:	425b      	negs	r3, r3
 80077ce:	697a      	ldr	r2, [r7, #20]
 80077d0:	4413      	add	r3, r2
 80077d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	685a      	ldr	r2, [r3, #4]
 80077dc:	4b20      	ldr	r3, [pc, #128]	; (8007860 <vPortFree+0xa8>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4013      	ands	r3, r2
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d109      	bne.n	80077fa <vPortFree+0x42>
 80077e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
 80077f8:	e7fe      	b.n	80077f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d009      	beq.n	8007816 <vPortFree+0x5e>
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60bb      	str	r3, [r7, #8]
 8007814:	e7fe      	b.n	8007814 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	4b11      	ldr	r3, [pc, #68]	; (8007860 <vPortFree+0xa8>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d019      	beq.n	8007858 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d115      	bne.n	8007858 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <vPortFree+0xa8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	43db      	mvns	r3, r3
 8007836:	401a      	ands	r2, r3
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800783c:	f7ff fa00 	bl	8006c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685a      	ldr	r2, [r3, #4]
 8007844:	4b07      	ldr	r3, [pc, #28]	; (8007864 <vPortFree+0xac>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4413      	add	r3, r2
 800784a:	4a06      	ldr	r2, [pc, #24]	; (8007864 <vPortFree+0xac>)
 800784c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800784e:	6938      	ldr	r0, [r7, #16]
 8007850:	f000 f86c 	bl	800792c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007854:	f7ff fa02 	bl	8006c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007858:	bf00      	nop
 800785a:	3718      	adds	r7, #24
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	20004a24 	.word	0x20004a24
 8007864:	20004a1c 	.word	0x20004a1c

08007868 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800786e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007872:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007874:	4b27      	ldr	r3, [pc, #156]	; (8007914 <prvHeapInit+0xac>)
 8007876:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f003 0307 	and.w	r3, r3, #7
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3307      	adds	r3, #7
 8007886:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f023 0307 	bic.w	r3, r3, #7
 800788e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	4a1f      	ldr	r2, [pc, #124]	; (8007914 <prvHeapInit+0xac>)
 8007898:	4413      	add	r3, r2
 800789a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078a0:	4a1d      	ldr	r2, [pc, #116]	; (8007918 <prvHeapInit+0xb0>)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078a6:	4b1c      	ldr	r3, [pc, #112]	; (8007918 <prvHeapInit+0xb0>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	4413      	add	r3, r2
 80078b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80078b4:	2208      	movs	r2, #8
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	1a9b      	subs	r3, r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 0307 	bic.w	r3, r3, #7
 80078c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	4a15      	ldr	r2, [pc, #84]	; (800791c <prvHeapInit+0xb4>)
 80078c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80078ca:	4b14      	ldr	r3, [pc, #80]	; (800791c <prvHeapInit+0xb4>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2200      	movs	r2, #0
 80078d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80078d2:	4b12      	ldr	r3, [pc, #72]	; (800791c <prvHeapInit+0xb4>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2200      	movs	r2, #0
 80078d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	1ad2      	subs	r2, r2, r3
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80078e8:	4b0c      	ldr	r3, [pc, #48]	; (800791c <prvHeapInit+0xb4>)
 80078ea:	681a      	ldr	r2, [r3, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	4a0a      	ldr	r2, [pc, #40]	; (8007920 <prvHeapInit+0xb8>)
 80078f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	4a09      	ldr	r2, [pc, #36]	; (8007924 <prvHeapInit+0xbc>)
 80078fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007900:	4b09      	ldr	r3, [pc, #36]	; (8007928 <prvHeapInit+0xc0>)
 8007902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007906:	601a      	str	r2, [r3, #0]
}
 8007908:	bf00      	nop
 800790a:	3714      	adds	r7, #20
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr
 8007914:	20000e10 	.word	0x20000e10
 8007918:	20004a10 	.word	0x20004a10
 800791c:	20004a18 	.word	0x20004a18
 8007920:	20004a20 	.word	0x20004a20
 8007924:	20004a1c 	.word	0x20004a1c
 8007928:	20004a24 	.word	0x20004a24

0800792c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007934:	4b28      	ldr	r3, [pc, #160]	; (80079d8 <prvInsertBlockIntoFreeList+0xac>)
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	e002      	b.n	8007940 <prvInsertBlockIntoFreeList+0x14>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	60fb      	str	r3, [r7, #12]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	429a      	cmp	r2, r3
 8007948:	d8f7      	bhi.n	800793a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	68ba      	ldr	r2, [r7, #8]
 8007954:	4413      	add	r3, r2
 8007956:	687a      	ldr	r2, [r7, #4]
 8007958:	429a      	cmp	r2, r3
 800795a:	d108      	bne.n	800796e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	685a      	ldr	r2, [r3, #4]
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	441a      	add	r2, r3
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	441a      	add	r2, r3
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	429a      	cmp	r2, r3
 8007980:	d118      	bne.n	80079b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	4b15      	ldr	r3, [pc, #84]	; (80079dc <prvInsertBlockIntoFreeList+0xb0>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	429a      	cmp	r2, r3
 800798c:	d00d      	beq.n	80079aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	441a      	add	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	681a      	ldr	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	e008      	b.n	80079bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079aa:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <prvInsertBlockIntoFreeList+0xb0>)
 80079ac:	681a      	ldr	r2, [r3, #0]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	e003      	b.n	80079bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d002      	beq.n	80079ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079ca:	bf00      	nop
 80079cc:	3714      	adds	r7, #20
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr
 80079d6:	bf00      	nop
 80079d8:	20004a10 	.word	0x20004a10
 80079dc:	20004a18 	.word	0x20004a18

080079e0 <__errno>:
 80079e0:	4b01      	ldr	r3, [pc, #4]	; (80079e8 <__errno+0x8>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	4770      	bx	lr
 80079e6:	bf00      	nop
 80079e8:	2000006c 	.word	0x2000006c

080079ec <__libc_init_array>:
 80079ec:	b570      	push	{r4, r5, r6, lr}
 80079ee:	4e0d      	ldr	r6, [pc, #52]	; (8007a24 <__libc_init_array+0x38>)
 80079f0:	4d0d      	ldr	r5, [pc, #52]	; (8007a28 <__libc_init_array+0x3c>)
 80079f2:	1b76      	subs	r6, r6, r5
 80079f4:	10b6      	asrs	r6, r6, #2
 80079f6:	d006      	beq.n	8007a06 <__libc_init_array+0x1a>
 80079f8:	2400      	movs	r4, #0
 80079fa:	3401      	adds	r4, #1
 80079fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a00:	4798      	blx	r3
 8007a02:	42a6      	cmp	r6, r4
 8007a04:	d1f9      	bne.n	80079fa <__libc_init_array+0xe>
 8007a06:	4e09      	ldr	r6, [pc, #36]	; (8007a2c <__libc_init_array+0x40>)
 8007a08:	4d09      	ldr	r5, [pc, #36]	; (8007a30 <__libc_init_array+0x44>)
 8007a0a:	1b76      	subs	r6, r6, r5
 8007a0c:	f004 fa9e 	bl	800bf4c <_init>
 8007a10:	10b6      	asrs	r6, r6, #2
 8007a12:	d006      	beq.n	8007a22 <__libc_init_array+0x36>
 8007a14:	2400      	movs	r4, #0
 8007a16:	3401      	adds	r4, #1
 8007a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a1c:	4798      	blx	r3
 8007a1e:	42a6      	cmp	r6, r4
 8007a20:	d1f9      	bne.n	8007a16 <__libc_init_array+0x2a>
 8007a22:	bd70      	pop	{r4, r5, r6, pc}
 8007a24:	0800c2a0 	.word	0x0800c2a0
 8007a28:	0800c2a0 	.word	0x0800c2a0
 8007a2c:	0800c2a8 	.word	0x0800c2a8
 8007a30:	0800c2a0 	.word	0x0800c2a0

08007a34 <malloc>:
 8007a34:	4b02      	ldr	r3, [pc, #8]	; (8007a40 <malloc+0xc>)
 8007a36:	4601      	mov	r1, r0
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	f000 b803 	b.w	8007a44 <_malloc_r>
 8007a3e:	bf00      	nop
 8007a40:	2000006c 	.word	0x2000006c

08007a44 <_malloc_r>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	f101 050b 	add.w	r5, r1, #11
 8007a4c:	2d16      	cmp	r5, #22
 8007a4e:	b083      	sub	sp, #12
 8007a50:	4606      	mov	r6, r0
 8007a52:	d823      	bhi.n	8007a9c <_malloc_r+0x58>
 8007a54:	2910      	cmp	r1, #16
 8007a56:	f200 80b9 	bhi.w	8007bcc <_malloc_r+0x188>
 8007a5a:	f000 fae1 	bl	8008020 <__malloc_lock>
 8007a5e:	2510      	movs	r5, #16
 8007a60:	2318      	movs	r3, #24
 8007a62:	2002      	movs	r0, #2
 8007a64:	4fc5      	ldr	r7, [pc, #788]	; (8007d7c <_malloc_r+0x338>)
 8007a66:	443b      	add	r3, r7
 8007a68:	f1a3 0208 	sub.w	r2, r3, #8
 8007a6c:	685c      	ldr	r4, [r3, #4]
 8007a6e:	4294      	cmp	r4, r2
 8007a70:	f000 8166 	beq.w	8007d40 <_malloc_r+0x2fc>
 8007a74:	6863      	ldr	r3, [r4, #4]
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	4423      	add	r3, r4
 8007a7c:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	60e9      	str	r1, [r5, #12]
 8007a84:	f042 0201 	orr.w	r2, r2, #1
 8007a88:	608d      	str	r5, [r1, #8]
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	f000 facd 	bl	800802c <__malloc_unlock>
 8007a92:	3408      	adds	r4, #8
 8007a94:	4620      	mov	r0, r4
 8007a96:	b003      	add	sp, #12
 8007a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9c:	f035 0507 	bics.w	r5, r5, #7
 8007aa0:	f100 8094 	bmi.w	8007bcc <_malloc_r+0x188>
 8007aa4:	42a9      	cmp	r1, r5
 8007aa6:	f200 8091 	bhi.w	8007bcc <_malloc_r+0x188>
 8007aaa:	f000 fab9 	bl	8008020 <__malloc_lock>
 8007aae:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8007ab2:	f0c0 8183 	bcc.w	8007dbc <_malloc_r+0x378>
 8007ab6:	0a6b      	lsrs	r3, r5, #9
 8007ab8:	f000 808f 	beq.w	8007bda <_malloc_r+0x196>
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	f200 8146 	bhi.w	8007d4e <_malloc_r+0x30a>
 8007ac2:	09ab      	lsrs	r3, r5, #6
 8007ac4:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8007ac8:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8007acc:	00c3      	lsls	r3, r0, #3
 8007ace:	4fab      	ldr	r7, [pc, #684]	; (8007d7c <_malloc_r+0x338>)
 8007ad0:	443b      	add	r3, r7
 8007ad2:	f1a3 0108 	sub.w	r1, r3, #8
 8007ad6:	685c      	ldr	r4, [r3, #4]
 8007ad8:	42a1      	cmp	r1, r4
 8007ada:	d106      	bne.n	8007aea <_malloc_r+0xa6>
 8007adc:	e00c      	b.n	8007af8 <_malloc_r+0xb4>
 8007ade:	2a00      	cmp	r2, #0
 8007ae0:	f280 811d 	bge.w	8007d1e <_malloc_r+0x2da>
 8007ae4:	68e4      	ldr	r4, [r4, #12]
 8007ae6:	42a1      	cmp	r1, r4
 8007ae8:	d006      	beq.n	8007af8 <_malloc_r+0xb4>
 8007aea:	6863      	ldr	r3, [r4, #4]
 8007aec:	f023 0303 	bic.w	r3, r3, #3
 8007af0:	1b5a      	subs	r2, r3, r5
 8007af2:	2a0f      	cmp	r2, #15
 8007af4:	ddf3      	ble.n	8007ade <_malloc_r+0x9a>
 8007af6:	4660      	mov	r0, ip
 8007af8:	693c      	ldr	r4, [r7, #16]
 8007afa:	f8df c294 	ldr.w	ip, [pc, #660]	; 8007d90 <_malloc_r+0x34c>
 8007afe:	4564      	cmp	r4, ip
 8007b00:	d071      	beq.n	8007be6 <_malloc_r+0x1a2>
 8007b02:	6863      	ldr	r3, [r4, #4]
 8007b04:	f023 0303 	bic.w	r3, r3, #3
 8007b08:	1b5a      	subs	r2, r3, r5
 8007b0a:	2a0f      	cmp	r2, #15
 8007b0c:	f300 8144 	bgt.w	8007d98 <_malloc_r+0x354>
 8007b10:	2a00      	cmp	r2, #0
 8007b12:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 8007b16:	f280 8126 	bge.w	8007d66 <_malloc_r+0x322>
 8007b1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b1e:	f080 8169 	bcs.w	8007df4 <_malloc_r+0x3b0>
 8007b22:	08db      	lsrs	r3, r3, #3
 8007b24:	1c59      	adds	r1, r3, #1
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 8007b2c:	f8c4 8008 	str.w	r8, [r4, #8]
 8007b30:	f04f 0e01 	mov.w	lr, #1
 8007b34:	109b      	asrs	r3, r3, #2
 8007b36:	fa0e f303 	lsl.w	r3, lr, r3
 8007b3a:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	f1ae 0208 	sub.w	r2, lr, #8
 8007b44:	60e2      	str	r2, [r4, #12]
 8007b46:	607b      	str	r3, [r7, #4]
 8007b48:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8007b4c:	f8c8 400c 	str.w	r4, [r8, #12]
 8007b50:	1082      	asrs	r2, r0, #2
 8007b52:	2401      	movs	r4, #1
 8007b54:	4094      	lsls	r4, r2
 8007b56:	429c      	cmp	r4, r3
 8007b58:	d84b      	bhi.n	8007bf2 <_malloc_r+0x1ae>
 8007b5a:	421c      	tst	r4, r3
 8007b5c:	d106      	bne.n	8007b6c <_malloc_r+0x128>
 8007b5e:	f020 0003 	bic.w	r0, r0, #3
 8007b62:	0064      	lsls	r4, r4, #1
 8007b64:	421c      	tst	r4, r3
 8007b66:	f100 0004 	add.w	r0, r0, #4
 8007b6a:	d0fa      	beq.n	8007b62 <_malloc_r+0x11e>
 8007b6c:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8007b70:	46ce      	mov	lr, r9
 8007b72:	4680      	mov	r8, r0
 8007b74:	f8de 300c 	ldr.w	r3, [lr, #12]
 8007b78:	459e      	cmp	lr, r3
 8007b7a:	d107      	bne.n	8007b8c <_malloc_r+0x148>
 8007b7c:	e122      	b.n	8007dc4 <_malloc_r+0x380>
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	f280 8129 	bge.w	8007dd6 <_malloc_r+0x392>
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	459e      	cmp	lr, r3
 8007b88:	f000 811c 	beq.w	8007dc4 <_malloc_r+0x380>
 8007b8c:	6859      	ldr	r1, [r3, #4]
 8007b8e:	f021 0103 	bic.w	r1, r1, #3
 8007b92:	1b4a      	subs	r2, r1, r5
 8007b94:	2a0f      	cmp	r2, #15
 8007b96:	ddf2      	ble.n	8007b7e <_malloc_r+0x13a>
 8007b98:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8007b9c:	195c      	adds	r4, r3, r5
 8007b9e:	f045 0501 	orr.w	r5, r5, #1
 8007ba2:	605d      	str	r5, [r3, #4]
 8007ba4:	f042 0501 	orr.w	r5, r2, #1
 8007ba8:	f8c8 e00c 	str.w	lr, [r8, #12]
 8007bac:	4630      	mov	r0, r6
 8007bae:	f8ce 8008 	str.w	r8, [lr, #8]
 8007bb2:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8007bb6:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 8007bba:	6065      	str	r5, [r4, #4]
 8007bbc:	505a      	str	r2, [r3, r1]
 8007bbe:	9301      	str	r3, [sp, #4]
 8007bc0:	f000 fa34 	bl	800802c <__malloc_unlock>
 8007bc4:	9b01      	ldr	r3, [sp, #4]
 8007bc6:	f103 0408 	add.w	r4, r3, #8
 8007bca:	e763      	b.n	8007a94 <_malloc_r+0x50>
 8007bcc:	2400      	movs	r4, #0
 8007bce:	230c      	movs	r3, #12
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	6033      	str	r3, [r6, #0]
 8007bd4:	b003      	add	sp, #12
 8007bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bde:	2040      	movs	r0, #64	; 0x40
 8007be0:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8007be4:	e773      	b.n	8007ace <_malloc_r+0x8a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	1082      	asrs	r2, r0, #2
 8007bea:	2401      	movs	r4, #1
 8007bec:	4094      	lsls	r4, r2
 8007bee:	429c      	cmp	r4, r3
 8007bf0:	d9b3      	bls.n	8007b5a <_malloc_r+0x116>
 8007bf2:	68bc      	ldr	r4, [r7, #8]
 8007bf4:	6863      	ldr	r3, [r4, #4]
 8007bf6:	f023 0903 	bic.w	r9, r3, #3
 8007bfa:	45a9      	cmp	r9, r5
 8007bfc:	d303      	bcc.n	8007c06 <_malloc_r+0x1c2>
 8007bfe:	eba9 0305 	sub.w	r3, r9, r5
 8007c02:	2b0f      	cmp	r3, #15
 8007c04:	dc7b      	bgt.n	8007cfe <_malloc_r+0x2ba>
 8007c06:	4b5e      	ldr	r3, [pc, #376]	; (8007d80 <_malloc_r+0x33c>)
 8007c08:	f8df a188 	ldr.w	sl, [pc, #392]	; 8007d94 <_malloc_r+0x350>
 8007c0c:	681a      	ldr	r2, [r3, #0]
 8007c0e:	f8da 3000 	ldr.w	r3, [sl]
 8007c12:	3301      	adds	r3, #1
 8007c14:	eb05 0802 	add.w	r8, r5, r2
 8007c18:	f000 8148 	beq.w	8007eac <_malloc_r+0x468>
 8007c1c:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8007c20:	f108 080f 	add.w	r8, r8, #15
 8007c24:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8007c28:	f028 080f 	bic.w	r8, r8, #15
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 fa02 	bl	8008038 <_sbrk_r>
 8007c34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007c38:	4683      	mov	fp, r0
 8007c3a:	f000 8104 	beq.w	8007e46 <_malloc_r+0x402>
 8007c3e:	eb04 0009 	add.w	r0, r4, r9
 8007c42:	4558      	cmp	r0, fp
 8007c44:	f200 80fd 	bhi.w	8007e42 <_malloc_r+0x3fe>
 8007c48:	4a4e      	ldr	r2, [pc, #312]	; (8007d84 <_malloc_r+0x340>)
 8007c4a:	6813      	ldr	r3, [r2, #0]
 8007c4c:	4443      	add	r3, r8
 8007c4e:	6013      	str	r3, [r2, #0]
 8007c50:	f000 814d 	beq.w	8007eee <_malloc_r+0x4aa>
 8007c54:	f8da 1000 	ldr.w	r1, [sl]
 8007c58:	3101      	adds	r1, #1
 8007c5a:	bf1b      	ittet	ne
 8007c5c:	ebab 0000 	subne.w	r0, fp, r0
 8007c60:	181b      	addne	r3, r3, r0
 8007c62:	f8ca b000 	streq.w	fp, [sl]
 8007c66:	6013      	strne	r3, [r2, #0]
 8007c68:	f01b 0307 	ands.w	r3, fp, #7
 8007c6c:	f000 8134 	beq.w	8007ed8 <_malloc_r+0x494>
 8007c70:	f1c3 0108 	rsb	r1, r3, #8
 8007c74:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8007c78:	448b      	add	fp, r1
 8007c7a:	3308      	adds	r3, #8
 8007c7c:	44d8      	add	r8, fp
 8007c7e:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8007c82:	eba3 0808 	sub.w	r8, r3, r8
 8007c86:	4641      	mov	r1, r8
 8007c88:	4630      	mov	r0, r6
 8007c8a:	9201      	str	r2, [sp, #4]
 8007c8c:	f000 f9d4 	bl	8008038 <_sbrk_r>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	9a01      	ldr	r2, [sp, #4]
 8007c94:	f000 8146 	beq.w	8007f24 <_malloc_r+0x4e0>
 8007c98:	eba0 010b 	sub.w	r1, r0, fp
 8007c9c:	4441      	add	r1, r8
 8007c9e:	f041 0101 	orr.w	r1, r1, #1
 8007ca2:	6813      	ldr	r3, [r2, #0]
 8007ca4:	f8c7 b008 	str.w	fp, [r7, #8]
 8007ca8:	4443      	add	r3, r8
 8007caa:	42bc      	cmp	r4, r7
 8007cac:	f8cb 1004 	str.w	r1, [fp, #4]
 8007cb0:	6013      	str	r3, [r2, #0]
 8007cb2:	d015      	beq.n	8007ce0 <_malloc_r+0x29c>
 8007cb4:	f1b9 0f0f 	cmp.w	r9, #15
 8007cb8:	f240 8130 	bls.w	8007f1c <_malloc_r+0x4d8>
 8007cbc:	6860      	ldr	r0, [r4, #4]
 8007cbe:	f1a9 010c 	sub.w	r1, r9, #12
 8007cc2:	f021 0107 	bic.w	r1, r1, #7
 8007cc6:	f000 0001 	and.w	r0, r0, #1
 8007cca:	eb04 0c01 	add.w	ip, r4, r1
 8007cce:	4308      	orrs	r0, r1
 8007cd0:	f04f 0e05 	mov.w	lr, #5
 8007cd4:	290f      	cmp	r1, #15
 8007cd6:	6060      	str	r0, [r4, #4]
 8007cd8:	e9cc ee01 	strd	lr, lr, [ip, #4]
 8007cdc:	f200 813a 	bhi.w	8007f54 <_malloc_r+0x510>
 8007ce0:	4a29      	ldr	r2, [pc, #164]	; (8007d88 <_malloc_r+0x344>)
 8007ce2:	482a      	ldr	r0, [pc, #168]	; (8007d8c <_malloc_r+0x348>)
 8007ce4:	6811      	ldr	r1, [r2, #0]
 8007ce6:	68bc      	ldr	r4, [r7, #8]
 8007ce8:	428b      	cmp	r3, r1
 8007cea:	6801      	ldr	r1, [r0, #0]
 8007cec:	bf88      	it	hi
 8007cee:	6013      	strhi	r3, [r2, #0]
 8007cf0:	6862      	ldr	r2, [r4, #4]
 8007cf2:	428b      	cmp	r3, r1
 8007cf4:	f022 0203 	bic.w	r2, r2, #3
 8007cf8:	bf88      	it	hi
 8007cfa:	6003      	strhi	r3, [r0, #0]
 8007cfc:	e0a7      	b.n	8007e4e <_malloc_r+0x40a>
 8007cfe:	1962      	adds	r2, r4, r5
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	f045 0501 	orr.w	r5, r5, #1
 8007d08:	6065      	str	r5, [r4, #4]
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	60ba      	str	r2, [r7, #8]
 8007d0e:	6053      	str	r3, [r2, #4]
 8007d10:	f000 f98c 	bl	800802c <__malloc_unlock>
 8007d14:	3408      	adds	r4, #8
 8007d16:	4620      	mov	r0, r4
 8007d18:	b003      	add	sp, #12
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	4423      	add	r3, r4
 8007d20:	68e1      	ldr	r1, [r4, #12]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	68a5      	ldr	r5, [r4, #8]
 8007d26:	f042 0201 	orr.w	r2, r2, #1
 8007d2a:	60e9      	str	r1, [r5, #12]
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	608d      	str	r5, [r1, #8]
 8007d30:	605a      	str	r2, [r3, #4]
 8007d32:	f000 f97b 	bl	800802c <__malloc_unlock>
 8007d36:	3408      	adds	r4, #8
 8007d38:	4620      	mov	r0, r4
 8007d3a:	b003      	add	sp, #12
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	68dc      	ldr	r4, [r3, #12]
 8007d42:	42a3      	cmp	r3, r4
 8007d44:	bf08      	it	eq
 8007d46:	3002      	addeq	r0, #2
 8007d48:	f43f aed6 	beq.w	8007af8 <_malloc_r+0xb4>
 8007d4c:	e692      	b.n	8007a74 <_malloc_r+0x30>
 8007d4e:	2b14      	cmp	r3, #20
 8007d50:	d971      	bls.n	8007e36 <_malloc_r+0x3f2>
 8007d52:	2b54      	cmp	r3, #84	; 0x54
 8007d54:	f200 80ad 	bhi.w	8007eb2 <_malloc_r+0x46e>
 8007d58:	0b2b      	lsrs	r3, r5, #12
 8007d5a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8007d5e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8007d62:	00c3      	lsls	r3, r0, #3
 8007d64:	e6b3      	b.n	8007ace <_malloc_r+0x8a>
 8007d66:	4423      	add	r3, r4
 8007d68:	4630      	mov	r0, r6
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	f042 0201 	orr.w	r2, r2, #1
 8007d70:	605a      	str	r2, [r3, #4]
 8007d72:	3408      	adds	r4, #8
 8007d74:	f000 f95a 	bl	800802c <__malloc_unlock>
 8007d78:	e68c      	b.n	8007a94 <_malloc_r+0x50>
 8007d7a:	bf00      	nop
 8007d7c:	20000498 	.word	0x20000498
 8007d80:	20004a58 	.word	0x20004a58
 8007d84:	20004a28 	.word	0x20004a28
 8007d88:	20004a50 	.word	0x20004a50
 8007d8c:	20004a54 	.word	0x20004a54
 8007d90:	200004a0 	.word	0x200004a0
 8007d94:	200008a0 	.word	0x200008a0
 8007d98:	1961      	adds	r1, r4, r5
 8007d9a:	f045 0e01 	orr.w	lr, r5, #1
 8007d9e:	f042 0501 	orr.w	r5, r2, #1
 8007da2:	f8c4 e004 	str.w	lr, [r4, #4]
 8007da6:	4630      	mov	r0, r6
 8007da8:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8007dac:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8007db0:	604d      	str	r5, [r1, #4]
 8007db2:	50e2      	str	r2, [r4, r3]
 8007db4:	f000 f93a 	bl	800802c <__malloc_unlock>
 8007db8:	3408      	adds	r4, #8
 8007dba:	e66b      	b.n	8007a94 <_malloc_r+0x50>
 8007dbc:	08e8      	lsrs	r0, r5, #3
 8007dbe:	f105 0308 	add.w	r3, r5, #8
 8007dc2:	e64f      	b.n	8007a64 <_malloc_r+0x20>
 8007dc4:	f108 0801 	add.w	r8, r8, #1
 8007dc8:	f018 0f03 	tst.w	r8, #3
 8007dcc:	f10e 0e08 	add.w	lr, lr, #8
 8007dd0:	f47f aed0 	bne.w	8007b74 <_malloc_r+0x130>
 8007dd4:	e052      	b.n	8007e7c <_malloc_r+0x438>
 8007dd6:	4419      	add	r1, r3
 8007dd8:	461c      	mov	r4, r3
 8007dda:	684a      	ldr	r2, [r1, #4]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8007de2:	f042 0201 	orr.w	r2, r2, #1
 8007de6:	604a      	str	r2, [r1, #4]
 8007de8:	4630      	mov	r0, r6
 8007dea:	60eb      	str	r3, [r5, #12]
 8007dec:	609d      	str	r5, [r3, #8]
 8007dee:	f000 f91d 	bl	800802c <__malloc_unlock>
 8007df2:	e64f      	b.n	8007a94 <_malloc_r+0x50>
 8007df4:	0a5a      	lsrs	r2, r3, #9
 8007df6:	2a04      	cmp	r2, #4
 8007df8:	d935      	bls.n	8007e66 <_malloc_r+0x422>
 8007dfa:	2a14      	cmp	r2, #20
 8007dfc:	d86f      	bhi.n	8007ede <_malloc_r+0x49a>
 8007dfe:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8007e02:	00c9      	lsls	r1, r1, #3
 8007e04:	325b      	adds	r2, #91	; 0x5b
 8007e06:	eb07 0e01 	add.w	lr, r7, r1
 8007e0a:	5879      	ldr	r1, [r7, r1]
 8007e0c:	f1ae 0e08 	sub.w	lr, lr, #8
 8007e10:	458e      	cmp	lr, r1
 8007e12:	d058      	beq.n	8007ec6 <_malloc_r+0x482>
 8007e14:	684a      	ldr	r2, [r1, #4]
 8007e16:	f022 0203 	bic.w	r2, r2, #3
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d902      	bls.n	8007e24 <_malloc_r+0x3e0>
 8007e1e:	6889      	ldr	r1, [r1, #8]
 8007e20:	458e      	cmp	lr, r1
 8007e22:	d1f7      	bne.n	8007e14 <_malloc_r+0x3d0>
 8007e24:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8007e2e:	f8ce 4008 	str.w	r4, [lr, #8]
 8007e32:	60cc      	str	r4, [r1, #12]
 8007e34:	e68c      	b.n	8007b50 <_malloc_r+0x10c>
 8007e36:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8007e3a:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8007e3e:	00c3      	lsls	r3, r0, #3
 8007e40:	e645      	b.n	8007ace <_malloc_r+0x8a>
 8007e42:	42bc      	cmp	r4, r7
 8007e44:	d072      	beq.n	8007f2c <_malloc_r+0x4e8>
 8007e46:	68bc      	ldr	r4, [r7, #8]
 8007e48:	6862      	ldr	r2, [r4, #4]
 8007e4a:	f022 0203 	bic.w	r2, r2, #3
 8007e4e:	4295      	cmp	r5, r2
 8007e50:	eba2 0305 	sub.w	r3, r2, r5
 8007e54:	d802      	bhi.n	8007e5c <_malloc_r+0x418>
 8007e56:	2b0f      	cmp	r3, #15
 8007e58:	f73f af51 	bgt.w	8007cfe <_malloc_r+0x2ba>
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	f000 f8e5 	bl	800802c <__malloc_unlock>
 8007e62:	2400      	movs	r4, #0
 8007e64:	e616      	b.n	8007a94 <_malloc_r+0x50>
 8007e66:	099a      	lsrs	r2, r3, #6
 8007e68:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8007e6c:	00c9      	lsls	r1, r1, #3
 8007e6e:	3238      	adds	r2, #56	; 0x38
 8007e70:	e7c9      	b.n	8007e06 <_malloc_r+0x3c2>
 8007e72:	f8d9 9000 	ldr.w	r9, [r9]
 8007e76:	4599      	cmp	r9, r3
 8007e78:	f040 8083 	bne.w	8007f82 <_malloc_r+0x53e>
 8007e7c:	f010 0f03 	tst.w	r0, #3
 8007e80:	f1a9 0308 	sub.w	r3, r9, #8
 8007e84:	f100 30ff 	add.w	r0, r0, #4294967295
 8007e88:	d1f3      	bne.n	8007e72 <_malloc_r+0x42e>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	ea23 0304 	bic.w	r3, r3, r4
 8007e90:	607b      	str	r3, [r7, #4]
 8007e92:	0064      	lsls	r4, r4, #1
 8007e94:	429c      	cmp	r4, r3
 8007e96:	f63f aeac 	bhi.w	8007bf2 <_malloc_r+0x1ae>
 8007e9a:	b91c      	cbnz	r4, 8007ea4 <_malloc_r+0x460>
 8007e9c:	e6a9      	b.n	8007bf2 <_malloc_r+0x1ae>
 8007e9e:	0064      	lsls	r4, r4, #1
 8007ea0:	f108 0804 	add.w	r8, r8, #4
 8007ea4:	421c      	tst	r4, r3
 8007ea6:	d0fa      	beq.n	8007e9e <_malloc_r+0x45a>
 8007ea8:	4640      	mov	r0, r8
 8007eaa:	e65f      	b.n	8007b6c <_malloc_r+0x128>
 8007eac:	f108 0810 	add.w	r8, r8, #16
 8007eb0:	e6bc      	b.n	8007c2c <_malloc_r+0x1e8>
 8007eb2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007eb6:	d826      	bhi.n	8007f06 <_malloc_r+0x4c2>
 8007eb8:	0beb      	lsrs	r3, r5, #15
 8007eba:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8007ebe:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8007ec2:	00c3      	lsls	r3, r0, #3
 8007ec4:	e603      	b.n	8007ace <_malloc_r+0x8a>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	1092      	asrs	r2, r2, #2
 8007eca:	f04f 0801 	mov.w	r8, #1
 8007ece:	fa08 f202 	lsl.w	r2, r8, r2
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	607b      	str	r3, [r7, #4]
 8007ed6:	e7a8      	b.n	8007e2a <_malloc_r+0x3e6>
 8007ed8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007edc:	e6ce      	b.n	8007c7c <_malloc_r+0x238>
 8007ede:	2a54      	cmp	r2, #84	; 0x54
 8007ee0:	d829      	bhi.n	8007f36 <_malloc_r+0x4f2>
 8007ee2:	0b1a      	lsrs	r2, r3, #12
 8007ee4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8007ee8:	00c9      	lsls	r1, r1, #3
 8007eea:	326e      	adds	r2, #110	; 0x6e
 8007eec:	e78b      	b.n	8007e06 <_malloc_r+0x3c2>
 8007eee:	f3c0 010b 	ubfx	r1, r0, #0, #12
 8007ef2:	2900      	cmp	r1, #0
 8007ef4:	f47f aeae 	bne.w	8007c54 <_malloc_r+0x210>
 8007ef8:	eb09 0208 	add.w	r2, r9, r8
 8007efc:	68b9      	ldr	r1, [r7, #8]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	604a      	str	r2, [r1, #4]
 8007f04:	e6ec      	b.n	8007ce0 <_malloc_r+0x29c>
 8007f06:	f240 5254 	movw	r2, #1364	; 0x554
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d81c      	bhi.n	8007f48 <_malloc_r+0x504>
 8007f0e:	0cab      	lsrs	r3, r5, #18
 8007f10:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8007f14:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8007f18:	00c3      	lsls	r3, r0, #3
 8007f1a:	e5d8      	b.n	8007ace <_malloc_r+0x8a>
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f8cb 3004 	str.w	r3, [fp, #4]
 8007f22:	e79b      	b.n	8007e5c <_malloc_r+0x418>
 8007f24:	2101      	movs	r1, #1
 8007f26:	f04f 0800 	mov.w	r8, #0
 8007f2a:	e6ba      	b.n	8007ca2 <_malloc_r+0x25e>
 8007f2c:	4a16      	ldr	r2, [pc, #88]	; (8007f88 <_malloc_r+0x544>)
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	4443      	add	r3, r8
 8007f32:	6013      	str	r3, [r2, #0]
 8007f34:	e68e      	b.n	8007c54 <_malloc_r+0x210>
 8007f36:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8007f3a:	d814      	bhi.n	8007f66 <_malloc_r+0x522>
 8007f3c:	0bda      	lsrs	r2, r3, #15
 8007f3e:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8007f42:	00c9      	lsls	r1, r1, #3
 8007f44:	3277      	adds	r2, #119	; 0x77
 8007f46:	e75e      	b.n	8007e06 <_malloc_r+0x3c2>
 8007f48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8007f4c:	207f      	movs	r0, #127	; 0x7f
 8007f4e:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8007f52:	e5bc      	b.n	8007ace <_malloc_r+0x8a>
 8007f54:	f104 0108 	add.w	r1, r4, #8
 8007f58:	4630      	mov	r0, r6
 8007f5a:	9201      	str	r2, [sp, #4]
 8007f5c:	f000 f918 	bl	8008190 <_free_r>
 8007f60:	9a01      	ldr	r2, [sp, #4]
 8007f62:	6813      	ldr	r3, [r2, #0]
 8007f64:	e6bc      	b.n	8007ce0 <_malloc_r+0x29c>
 8007f66:	f240 5154 	movw	r1, #1364	; 0x554
 8007f6a:	428a      	cmp	r2, r1
 8007f6c:	d805      	bhi.n	8007f7a <_malloc_r+0x536>
 8007f6e:	0c9a      	lsrs	r2, r3, #18
 8007f70:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8007f74:	00c9      	lsls	r1, r1, #3
 8007f76:	327c      	adds	r2, #124	; 0x7c
 8007f78:	e745      	b.n	8007e06 <_malloc_r+0x3c2>
 8007f7a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8007f7e:	227e      	movs	r2, #126	; 0x7e
 8007f80:	e741      	b.n	8007e06 <_malloc_r+0x3c2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	e785      	b.n	8007e92 <_malloc_r+0x44e>
 8007f86:	bf00      	nop
 8007f88:	20004a28 	.word	0x20004a28

08007f8c <memset>:
 8007f8c:	b4f0      	push	{r4, r5, r6, r7}
 8007f8e:	0786      	lsls	r6, r0, #30
 8007f90:	d043      	beq.n	800801a <memset+0x8e>
 8007f92:	1e54      	subs	r4, r2, #1
 8007f94:	2a00      	cmp	r2, #0
 8007f96:	d03e      	beq.n	8008016 <memset+0x8a>
 8007f98:	b2ca      	uxtb	r2, r1
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	e002      	b.n	8007fa4 <memset+0x18>
 8007f9e:	f114 34ff 	adds.w	r4, r4, #4294967295
 8007fa2:	d338      	bcc.n	8008016 <memset+0x8a>
 8007fa4:	f803 2b01 	strb.w	r2, [r3], #1
 8007fa8:	079d      	lsls	r5, r3, #30
 8007faa:	d1f8      	bne.n	8007f9e <memset+0x12>
 8007fac:	2c03      	cmp	r4, #3
 8007fae:	d92b      	bls.n	8008008 <memset+0x7c>
 8007fb0:	b2cd      	uxtb	r5, r1
 8007fb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8007fb6:	2c0f      	cmp	r4, #15
 8007fb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8007fbc:	d916      	bls.n	8007fec <memset+0x60>
 8007fbe:	f1a4 0710 	sub.w	r7, r4, #16
 8007fc2:	093f      	lsrs	r7, r7, #4
 8007fc4:	f103 0620 	add.w	r6, r3, #32
 8007fc8:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 8007fcc:	f103 0210 	add.w	r2, r3, #16
 8007fd0:	e942 5504 	strd	r5, r5, [r2, #-16]
 8007fd4:	e942 5502 	strd	r5, r5, [r2, #-8]
 8007fd8:	3210      	adds	r2, #16
 8007fda:	42b2      	cmp	r2, r6
 8007fdc:	d1f8      	bne.n	8007fd0 <memset+0x44>
 8007fde:	f004 040f 	and.w	r4, r4, #15
 8007fe2:	3701      	adds	r7, #1
 8007fe4:	2c03      	cmp	r4, #3
 8007fe6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8007fea:	d90d      	bls.n	8008008 <memset+0x7c>
 8007fec:	461e      	mov	r6, r3
 8007fee:	4622      	mov	r2, r4
 8007ff0:	3a04      	subs	r2, #4
 8007ff2:	2a03      	cmp	r2, #3
 8007ff4:	f846 5b04 	str.w	r5, [r6], #4
 8007ff8:	d8fa      	bhi.n	8007ff0 <memset+0x64>
 8007ffa:	1f22      	subs	r2, r4, #4
 8007ffc:	f022 0203 	bic.w	r2, r2, #3
 8008000:	3204      	adds	r2, #4
 8008002:	4413      	add	r3, r2
 8008004:	f004 0403 	and.w	r4, r4, #3
 8008008:	b12c      	cbz	r4, 8008016 <memset+0x8a>
 800800a:	b2c9      	uxtb	r1, r1
 800800c:	441c      	add	r4, r3
 800800e:	f803 1b01 	strb.w	r1, [r3], #1
 8008012:	429c      	cmp	r4, r3
 8008014:	d1fb      	bne.n	800800e <memset+0x82>
 8008016:	bcf0      	pop	{r4, r5, r6, r7}
 8008018:	4770      	bx	lr
 800801a:	4614      	mov	r4, r2
 800801c:	4603      	mov	r3, r0
 800801e:	e7c5      	b.n	8007fac <memset+0x20>

08008020 <__malloc_lock>:
 8008020:	4801      	ldr	r0, [pc, #4]	; (8008028 <__malloc_lock+0x8>)
 8008022:	f000 b9a9 	b.w	8008378 <__retarget_lock_acquire_recursive>
 8008026:	bf00      	nop
 8008028:	20004c8c 	.word	0x20004c8c

0800802c <__malloc_unlock>:
 800802c:	4801      	ldr	r0, [pc, #4]	; (8008034 <__malloc_unlock+0x8>)
 800802e:	f000 b9a5 	b.w	800837c <__retarget_lock_release_recursive>
 8008032:	bf00      	nop
 8008034:	20004c8c 	.word	0x20004c8c

08008038 <_sbrk_r>:
 8008038:	b538      	push	{r3, r4, r5, lr}
 800803a:	4c07      	ldr	r4, [pc, #28]	; (8008058 <_sbrk_r+0x20>)
 800803c:	2300      	movs	r3, #0
 800803e:	4605      	mov	r5, r0
 8008040:	4608      	mov	r0, r1
 8008042:	6023      	str	r3, [r4, #0]
 8008044:	f7f9 ff6c 	bl	8001f20 <_sbrk>
 8008048:	1c43      	adds	r3, r0, #1
 800804a:	d000      	beq.n	800804e <_sbrk_r+0x16>
 800804c:	bd38      	pop	{r3, r4, r5, pc}
 800804e:	6823      	ldr	r3, [r4, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d0fb      	beq.n	800804c <_sbrk_r+0x14>
 8008054:	602b      	str	r3, [r5, #0]
 8008056:	bd38      	pop	{r3, r4, r5, pc}
 8008058:	20004ca0 	.word	0x20004ca0

0800805c <_vsprintf_r>:
 800805c:	b530      	push	{r4, r5, lr}
 800805e:	b09b      	sub	sp, #108	; 0x6c
 8008060:	4d07      	ldr	r5, [pc, #28]	; (8008080 <_vsprintf_r+0x24>)
 8008062:	9100      	str	r1, [sp, #0]
 8008064:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 8008068:	9104      	str	r1, [sp, #16]
 800806a:	4669      	mov	r1, sp
 800806c:	9405      	str	r4, [sp, #20]
 800806e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008072:	f000 f985 	bl	8008380 <_svfprintf_r>
 8008076:	9b00      	ldr	r3, [sp, #0]
 8008078:	2200      	movs	r2, #0
 800807a:	701a      	strb	r2, [r3, #0]
 800807c:	b01b      	add	sp, #108	; 0x6c
 800807e:	bd30      	pop	{r4, r5, pc}
 8008080:	ffff0208 	.word	0xffff0208

08008084 <vsprintf>:
 8008084:	b410      	push	{r4}
 8008086:	4c04      	ldr	r4, [pc, #16]	; (8008098 <vsprintf+0x14>)
 8008088:	4613      	mov	r3, r2
 800808a:	460a      	mov	r2, r1
 800808c:	4601      	mov	r1, r0
 800808e:	6820      	ldr	r0, [r4, #0]
 8008090:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008094:	f7ff bfe2 	b.w	800805c <_vsprintf_r>
 8008098:	2000006c 	.word	0x2000006c

0800809c <register_fini>:
 800809c:	4b02      	ldr	r3, [pc, #8]	; (80080a8 <register_fini+0xc>)
 800809e:	b113      	cbz	r3, 80080a6 <register_fini+0xa>
 80080a0:	4802      	ldr	r0, [pc, #8]	; (80080ac <register_fini+0x10>)
 80080a2:	f000 b805 	b.w	80080b0 <atexit>
 80080a6:	4770      	bx	lr
 80080a8:	00000000 	.word	0x00000000
 80080ac:	080080bd 	.word	0x080080bd

080080b0 <atexit>:
 80080b0:	2300      	movs	r3, #0
 80080b2:	4601      	mov	r1, r0
 80080b4:	461a      	mov	r2, r3
 80080b6:	4618      	mov	r0, r3
 80080b8:	f001 be48 	b.w	8009d4c <__register_exitproc>

080080bc <__libc_fini_array>:
 80080bc:	b538      	push	{r3, r4, r5, lr}
 80080be:	4c0a      	ldr	r4, [pc, #40]	; (80080e8 <__libc_fini_array+0x2c>)
 80080c0:	4d0a      	ldr	r5, [pc, #40]	; (80080ec <__libc_fini_array+0x30>)
 80080c2:	1b64      	subs	r4, r4, r5
 80080c4:	10a4      	asrs	r4, r4, #2
 80080c6:	d00a      	beq.n	80080de <__libc_fini_array+0x22>
 80080c8:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 80080cc:	3b01      	subs	r3, #1
 80080ce:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80080d2:	3c01      	subs	r4, #1
 80080d4:	f855 3904 	ldr.w	r3, [r5], #-4
 80080d8:	4798      	blx	r3
 80080da:	2c00      	cmp	r4, #0
 80080dc:	d1f9      	bne.n	80080d2 <__libc_fini_array+0x16>
 80080de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080e2:	f003 bf39 	b.w	800bf58 <_fini>
 80080e6:	bf00      	nop
 80080e8:	0800c2ac 	.word	0x0800c2ac
 80080ec:	0800c2a8 	.word	0x0800c2a8

080080f0 <_malloc_trim_r>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	4f24      	ldr	r7, [pc, #144]	; (8008184 <_malloc_trim_r+0x94>)
 80080f4:	460c      	mov	r4, r1
 80080f6:	4606      	mov	r6, r0
 80080f8:	f7ff ff92 	bl	8008020 <__malloc_lock>
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	685d      	ldr	r5, [r3, #4]
 8008100:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 8008104:	310f      	adds	r1, #15
 8008106:	f025 0503 	bic.w	r5, r5, #3
 800810a:	4429      	add	r1, r5
 800810c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8008110:	f021 010f 	bic.w	r1, r1, #15
 8008114:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8008118:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800811c:	db07      	blt.n	800812e <_malloc_trim_r+0x3e>
 800811e:	2100      	movs	r1, #0
 8008120:	4630      	mov	r0, r6
 8008122:	f7ff ff89 	bl	8008038 <_sbrk_r>
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	442b      	add	r3, r5
 800812a:	4298      	cmp	r0, r3
 800812c:	d004      	beq.n	8008138 <_malloc_trim_r+0x48>
 800812e:	4630      	mov	r0, r6
 8008130:	f7ff ff7c 	bl	800802c <__malloc_unlock>
 8008134:	2000      	movs	r0, #0
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008138:	4261      	negs	r1, r4
 800813a:	4630      	mov	r0, r6
 800813c:	f7ff ff7c 	bl	8008038 <_sbrk_r>
 8008140:	3001      	adds	r0, #1
 8008142:	d00d      	beq.n	8008160 <_malloc_trim_r+0x70>
 8008144:	4b10      	ldr	r3, [pc, #64]	; (8008188 <_malloc_trim_r+0x98>)
 8008146:	68ba      	ldr	r2, [r7, #8]
 8008148:	6819      	ldr	r1, [r3, #0]
 800814a:	1b2d      	subs	r5, r5, r4
 800814c:	f045 0501 	orr.w	r5, r5, #1
 8008150:	4630      	mov	r0, r6
 8008152:	1b09      	subs	r1, r1, r4
 8008154:	6055      	str	r5, [r2, #4]
 8008156:	6019      	str	r1, [r3, #0]
 8008158:	f7ff ff68 	bl	800802c <__malloc_unlock>
 800815c:	2001      	movs	r0, #1
 800815e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008160:	2100      	movs	r1, #0
 8008162:	4630      	mov	r0, r6
 8008164:	f7ff ff68 	bl	8008038 <_sbrk_r>
 8008168:	68ba      	ldr	r2, [r7, #8]
 800816a:	1a83      	subs	r3, r0, r2
 800816c:	2b0f      	cmp	r3, #15
 800816e:	ddde      	ble.n	800812e <_malloc_trim_r+0x3e>
 8008170:	4c06      	ldr	r4, [pc, #24]	; (800818c <_malloc_trim_r+0x9c>)
 8008172:	4905      	ldr	r1, [pc, #20]	; (8008188 <_malloc_trim_r+0x98>)
 8008174:	6824      	ldr	r4, [r4, #0]
 8008176:	f043 0301 	orr.w	r3, r3, #1
 800817a:	1b00      	subs	r0, r0, r4
 800817c:	6053      	str	r3, [r2, #4]
 800817e:	6008      	str	r0, [r1, #0]
 8008180:	e7d5      	b.n	800812e <_malloc_trim_r+0x3e>
 8008182:	bf00      	nop
 8008184:	20000498 	.word	0x20000498
 8008188:	20004a28 	.word	0x20004a28
 800818c:	200008a0 	.word	0x200008a0

08008190 <_free_r>:
 8008190:	2900      	cmp	r1, #0
 8008192:	d053      	beq.n	800823c <_free_r+0xac>
 8008194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008196:	460c      	mov	r4, r1
 8008198:	4606      	mov	r6, r0
 800819a:	f7ff ff41 	bl	8008020 <__malloc_lock>
 800819e:	f854 cc04 	ldr.w	ip, [r4, #-4]
 80081a2:	4f71      	ldr	r7, [pc, #452]	; (8008368 <_free_r+0x1d8>)
 80081a4:	f02c 0101 	bic.w	r1, ip, #1
 80081a8:	f1a4 0508 	sub.w	r5, r4, #8
 80081ac:	186b      	adds	r3, r5, r1
 80081ae:	68b8      	ldr	r0, [r7, #8]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	4298      	cmp	r0, r3
 80081b4:	f022 0203 	bic.w	r2, r2, #3
 80081b8:	d053      	beq.n	8008262 <_free_r+0xd2>
 80081ba:	f01c 0f01 	tst.w	ip, #1
 80081be:	605a      	str	r2, [r3, #4]
 80081c0:	eb03 0002 	add.w	r0, r3, r2
 80081c4:	d13b      	bne.n	800823e <_free_r+0xae>
 80081c6:	f854 cc08 	ldr.w	ip, [r4, #-8]
 80081ca:	6840      	ldr	r0, [r0, #4]
 80081cc:	eba5 050c 	sub.w	r5, r5, ip
 80081d0:	f107 0e08 	add.w	lr, r7, #8
 80081d4:	68ac      	ldr	r4, [r5, #8]
 80081d6:	4574      	cmp	r4, lr
 80081d8:	4461      	add	r1, ip
 80081da:	f000 0001 	and.w	r0, r0, #1
 80081de:	d075      	beq.n	80082cc <_free_r+0x13c>
 80081e0:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80081e4:	f8c4 c00c 	str.w	ip, [r4, #12]
 80081e8:	f8cc 4008 	str.w	r4, [ip, #8]
 80081ec:	b360      	cbz	r0, 8008248 <_free_r+0xb8>
 80081ee:	f041 0301 	orr.w	r3, r1, #1
 80081f2:	606b      	str	r3, [r5, #4]
 80081f4:	5069      	str	r1, [r5, r1]
 80081f6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80081fa:	d350      	bcc.n	800829e <_free_r+0x10e>
 80081fc:	0a4b      	lsrs	r3, r1, #9
 80081fe:	2b04      	cmp	r3, #4
 8008200:	d870      	bhi.n	80082e4 <_free_r+0x154>
 8008202:	098b      	lsrs	r3, r1, #6
 8008204:	f103 0439 	add.w	r4, r3, #57	; 0x39
 8008208:	00e4      	lsls	r4, r4, #3
 800820a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800820e:	1938      	adds	r0, r7, r4
 8008210:	593b      	ldr	r3, [r7, r4]
 8008212:	3808      	subs	r0, #8
 8008214:	4298      	cmp	r0, r3
 8008216:	d078      	beq.n	800830a <_free_r+0x17a>
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	f022 0203 	bic.w	r2, r2, #3
 800821e:	428a      	cmp	r2, r1
 8008220:	d971      	bls.n	8008306 <_free_r+0x176>
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	4298      	cmp	r0, r3
 8008226:	d1f7      	bne.n	8008218 <_free_r+0x88>
 8008228:	68c3      	ldr	r3, [r0, #12]
 800822a:	e9c5 0302 	strd	r0, r3, [r5, #8]
 800822e:	609d      	str	r5, [r3, #8]
 8008230:	60c5      	str	r5, [r0, #12]
 8008232:	4630      	mov	r0, r6
 8008234:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008238:	f7ff bef8 	b.w	800802c <__malloc_unlock>
 800823c:	4770      	bx	lr
 800823e:	6840      	ldr	r0, [r0, #4]
 8008240:	f000 0001 	and.w	r0, r0, #1
 8008244:	2800      	cmp	r0, #0
 8008246:	d1d2      	bne.n	80081ee <_free_r+0x5e>
 8008248:	6898      	ldr	r0, [r3, #8]
 800824a:	4c48      	ldr	r4, [pc, #288]	; (800836c <_free_r+0x1dc>)
 800824c:	4411      	add	r1, r2
 800824e:	42a0      	cmp	r0, r4
 8008250:	f041 0201 	orr.w	r2, r1, #1
 8008254:	d062      	beq.n	800831c <_free_r+0x18c>
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	60c3      	str	r3, [r0, #12]
 800825a:	6098      	str	r0, [r3, #8]
 800825c:	606a      	str	r2, [r5, #4]
 800825e:	5069      	str	r1, [r5, r1]
 8008260:	e7c9      	b.n	80081f6 <_free_r+0x66>
 8008262:	f01c 0f01 	tst.w	ip, #1
 8008266:	440a      	add	r2, r1
 8008268:	d107      	bne.n	800827a <_free_r+0xea>
 800826a:	f854 3c08 	ldr.w	r3, [r4, #-8]
 800826e:	1aed      	subs	r5, r5, r3
 8008270:	441a      	add	r2, r3
 8008272:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 8008276:	60cb      	str	r3, [r1, #12]
 8008278:	6099      	str	r1, [r3, #8]
 800827a:	4b3d      	ldr	r3, [pc, #244]	; (8008370 <_free_r+0x1e0>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f042 0101 	orr.w	r1, r2, #1
 8008282:	4293      	cmp	r3, r2
 8008284:	6069      	str	r1, [r5, #4]
 8008286:	60bd      	str	r5, [r7, #8]
 8008288:	d804      	bhi.n	8008294 <_free_r+0x104>
 800828a:	4b3a      	ldr	r3, [pc, #232]	; (8008374 <_free_r+0x1e4>)
 800828c:	4630      	mov	r0, r6
 800828e:	6819      	ldr	r1, [r3, #0]
 8008290:	f7ff ff2e 	bl	80080f0 <_malloc_trim_r>
 8008294:	4630      	mov	r0, r6
 8008296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800829a:	f7ff bec7 	b.w	800802c <__malloc_unlock>
 800829e:	08c9      	lsrs	r1, r1, #3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	1c4a      	adds	r2, r1, #1
 80082a4:	2301      	movs	r3, #1
 80082a6:	1089      	asrs	r1, r1, #2
 80082a8:	408b      	lsls	r3, r1
 80082aa:	4303      	orrs	r3, r0
 80082ac:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 80082b0:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 80082b4:	607b      	str	r3, [r7, #4]
 80082b6:	3908      	subs	r1, #8
 80082b8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80082bc:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 80082c0:	60c5      	str	r5, [r0, #12]
 80082c2:	4630      	mov	r0, r6
 80082c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082c8:	f7ff beb0 	b.w	800802c <__malloc_unlock>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d145      	bne.n	800835c <_free_r+0x1cc>
 80082d0:	440a      	add	r2, r1
 80082d2:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 80082d6:	f042 0001 	orr.w	r0, r2, #1
 80082da:	60cb      	str	r3, [r1, #12]
 80082dc:	6099      	str	r1, [r3, #8]
 80082de:	6068      	str	r0, [r5, #4]
 80082e0:	50aa      	str	r2, [r5, r2]
 80082e2:	e7d7      	b.n	8008294 <_free_r+0x104>
 80082e4:	2b14      	cmp	r3, #20
 80082e6:	d908      	bls.n	80082fa <_free_r+0x16a>
 80082e8:	2b54      	cmp	r3, #84	; 0x54
 80082ea:	d81e      	bhi.n	800832a <_free_r+0x19a>
 80082ec:	0b0b      	lsrs	r3, r1, #12
 80082ee:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80082f2:	00e4      	lsls	r4, r4, #3
 80082f4:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80082f8:	e789      	b.n	800820e <_free_r+0x7e>
 80082fa:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80082fe:	00e4      	lsls	r4, r4, #3
 8008300:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 8008304:	e783      	b.n	800820e <_free_r+0x7e>
 8008306:	4618      	mov	r0, r3
 8008308:	e78e      	b.n	8008228 <_free_r+0x98>
 800830a:	1093      	asrs	r3, r2, #2
 800830c:	6879      	ldr	r1, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	fa02 f303 	lsl.w	r3, r2, r3
 8008314:	430b      	orrs	r3, r1
 8008316:	607b      	str	r3, [r7, #4]
 8008318:	4603      	mov	r3, r0
 800831a:	e786      	b.n	800822a <_free_r+0x9a>
 800831c:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8008320:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8008324:	606a      	str	r2, [r5, #4]
 8008326:	5069      	str	r1, [r5, r1]
 8008328:	e7b4      	b.n	8008294 <_free_r+0x104>
 800832a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800832e:	d806      	bhi.n	800833e <_free_r+0x1ae>
 8008330:	0bcb      	lsrs	r3, r1, #15
 8008332:	f103 0478 	add.w	r4, r3, #120	; 0x78
 8008336:	00e4      	lsls	r4, r4, #3
 8008338:	f103 0277 	add.w	r2, r3, #119	; 0x77
 800833c:	e767      	b.n	800820e <_free_r+0x7e>
 800833e:	f240 5254 	movw	r2, #1364	; 0x554
 8008342:	4293      	cmp	r3, r2
 8008344:	d806      	bhi.n	8008354 <_free_r+0x1c4>
 8008346:	0c8b      	lsrs	r3, r1, #18
 8008348:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 800834c:	00e4      	lsls	r4, r4, #3
 800834e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008352:	e75c      	b.n	800820e <_free_r+0x7e>
 8008354:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 8008358:	227e      	movs	r2, #126	; 0x7e
 800835a:	e758      	b.n	800820e <_free_r+0x7e>
 800835c:	f041 0201 	orr.w	r2, r1, #1
 8008360:	606a      	str	r2, [r5, #4]
 8008362:	6019      	str	r1, [r3, #0]
 8008364:	e796      	b.n	8008294 <_free_r+0x104>
 8008366:	bf00      	nop
 8008368:	20000498 	.word	0x20000498
 800836c:	200004a0 	.word	0x200004a0
 8008370:	200008a4 	.word	0x200008a4
 8008374:	20004a58 	.word	0x20004a58

08008378 <__retarget_lock_acquire_recursive>:
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop

0800837c <__retarget_lock_release_recursive>:
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <_svfprintf_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	b0d7      	sub	sp, #348	; 0x15c
 8008386:	460c      	mov	r4, r1
 8008388:	9106      	str	r1, [sp, #24]
 800838a:	4693      	mov	fp, r2
 800838c:	9309      	str	r3, [sp, #36]	; 0x24
 800838e:	9003      	str	r0, [sp, #12]
 8008390:	f002 fcde 	bl	800ad50 <_localeconv_r>
 8008394:	6803      	ldr	r3, [r0, #0]
 8008396:	9317      	str	r3, [sp, #92]	; 0x5c
 8008398:	4618      	mov	r0, r3
 800839a:	f7f7 ffd1 	bl	8000340 <strlen>
 800839e:	89a3      	ldrh	r3, [r4, #12]
 80083a0:	9016      	str	r0, [sp, #88]	; 0x58
 80083a2:	061f      	lsls	r7, r3, #24
 80083a4:	d503      	bpl.n	80083ae <_svfprintf_r+0x2e>
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 8755 	beq.w	8009258 <_svfprintf_r+0xed8>
 80083ae:	2300      	movs	r3, #0
 80083b0:	465e      	mov	r6, fp
 80083b2:	ed9f 7b8f 	vldr	d7, [pc, #572]	; 80085f0 <_svfprintf_r+0x270>
 80083b6:	9310      	str	r3, [sp, #64]	; 0x40
 80083b8:	e9cd 332b 	strd	r3, r3, [sp, #172]	; 0xac
 80083bc:	9315      	str	r3, [sp, #84]	; 0x54
 80083be:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
 80083c2:	931b      	str	r3, [sp, #108]	; 0x6c
 80083c4:	9318      	str	r3, [sp, #96]	; 0x60
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	ab2d      	add	r3, sp, #180	; 0xb4
 80083ca:	932a      	str	r3, [sp, #168]	; 0xa8
 80083cc:	4699      	mov	r9, r3
 80083ce:	7833      	ldrb	r3, [r6, #0]
 80083d0:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	f000 82ce 	beq.w	8008976 <_svfprintf_r+0x5f6>
 80083da:	2b25      	cmp	r3, #37	; 0x25
 80083dc:	4634      	mov	r4, r6
 80083de:	d102      	bne.n	80083e6 <_svfprintf_r+0x66>
 80083e0:	e01c      	b.n	800841c <_svfprintf_r+0x9c>
 80083e2:	2b25      	cmp	r3, #37	; 0x25
 80083e4:	d003      	beq.n	80083ee <_svfprintf_r+0x6e>
 80083e6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f9      	bne.n	80083e2 <_svfprintf_r+0x62>
 80083ee:	1ba5      	subs	r5, r4, r6
 80083f0:	b185      	cbz	r5, 8008414 <_svfprintf_r+0x94>
 80083f2:	e9dd 322b 	ldrd	r3, r2, [sp, #172]	; 0xac
 80083f6:	3301      	adds	r3, #1
 80083f8:	442a      	add	r2, r5
 80083fa:	2b07      	cmp	r3, #7
 80083fc:	f8c9 6000 	str.w	r6, [r9]
 8008400:	f8c9 5004 	str.w	r5, [r9, #4]
 8008404:	e9cd 322b 	strd	r3, r2, [sp, #172]	; 0xac
 8008408:	dc7c      	bgt.n	8008504 <_svfprintf_r+0x184>
 800840a:	f109 0908 	add.w	r9, r9, #8
 800840e:	9b05      	ldr	r3, [sp, #20]
 8008410:	442b      	add	r3, r5
 8008412:	9305      	str	r3, [sp, #20]
 8008414:	7823      	ldrb	r3, [r4, #0]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 82ad 	beq.w	8008976 <_svfprintf_r+0x5f6>
 800841c:	2300      	movs	r3, #0
 800841e:	7867      	ldrb	r7, [r4, #1]
 8008420:	9307      	str	r3, [sp, #28]
 8008422:	4698      	mov	r8, r3
 8008424:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8008428:	f104 0b01 	add.w	fp, r4, #1
 800842c:	f04f 3aff 	mov.w	sl, #4294967295
 8008430:	252b      	movs	r5, #43	; 0x2b
 8008432:	f10b 0b01 	add.w	fp, fp, #1
 8008436:	f1a7 0320 	sub.w	r3, r7, #32
 800843a:	2b5a      	cmp	r3, #90	; 0x5a
 800843c:	f200 83e4 	bhi.w	8008c08 <_svfprintf_r+0x888>
 8008440:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008444:	03e203a5 	.word	0x03e203a5
 8008448:	03a003e2 	.word	0x03a003e2
 800844c:	03e203e2 	.word	0x03e203e2
 8008450:	038103e2 	.word	0x038103e2
 8008454:	03e203e2 	.word	0x03e203e2
 8008458:	03b003b5 	.word	0x03b003b5
 800845c:	017203e2 	.word	0x017203e2
 8008460:	03e20158 	.word	0x03e20158
 8008464:	00c6033b 	.word	0x00c6033b
 8008468:	00c600c6 	.word	0x00c600c6
 800846c:	00c600c6 	.word	0x00c600c6
 8008470:	00c600c6 	.word	0x00c600c6
 8008474:	00c600c6 	.word	0x00c600c6
 8008478:	03e203e2 	.word	0x03e203e2
 800847c:	03e203e2 	.word	0x03e203e2
 8008480:	03e203e2 	.word	0x03e203e2
 8008484:	034003e2 	.word	0x034003e2
 8008488:	017703e2 	.word	0x017703e2
 800848c:	034002f0 	.word	0x034002f0
 8008490:	03400340 	.word	0x03400340
 8008494:	03e203e2 	.word	0x03e203e2
 8008498:	03e203e2 	.word	0x03e203e2
 800849c:	03e202eb 	.word	0x03e202eb
 80084a0:	008403e2 	.word	0x008403e2
 80084a4:	03e203e2 	.word	0x03e203e2
 80084a8:	02c203e2 	.word	0x02c203e2
 80084ac:	03ce03e2 	.word	0x03ce03e2
 80084b0:	03e203e2 	.word	0x03e203e2
 80084b4:	03e202ac 	.word	0x03e202ac
 80084b8:	03e203e2 	.word	0x03e203e2
 80084bc:	03e203e2 	.word	0x03e203e2
 80084c0:	03e203e2 	.word	0x03e203e2
 80084c4:	034003e2 	.word	0x034003e2
 80084c8:	017703e2 	.word	0x017703e2
 80084cc:	034000da 	.word	0x034000da
 80084d0:	03400340 	.word	0x03400340
 80084d4:	00da03c1 	.word	0x00da03c1
 80084d8:	03e2005b 	.word	0x03e2005b
 80084dc:	03e2031e 	.word	0x03e2031e
 80084e0:	00860306 	.word	0x00860306
 80084e4:	005b032b 	.word	0x005b032b
 80084e8:	02c203e2 	.word	0x02c203e2
 80084ec:	0129005d 	.word	0x0129005d
 80084f0:	03e203e2 	.word	0x03e203e2
 80084f4:	03e20138 	.word	0x03e20138
 80084f8:	005d      	.short	0x005d
 80084fa:	f048 0820 	orr.w	r8, r8, #32
 80084fe:	f89b 7000 	ldrb.w	r7, [fp]
 8008502:	e796      	b.n	8008432 <_svfprintf_r+0xb2>
 8008504:	aa2a      	add	r2, sp, #168	; 0xa8
 8008506:	9906      	ldr	r1, [sp, #24]
 8008508:	9803      	ldr	r0, [sp, #12]
 800850a:	f002 ff9f 	bl	800b44c <__ssprint_r>
 800850e:	b980      	cbnz	r0, 8008532 <_svfprintf_r+0x1b2>
 8008510:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008514:	e77b      	b.n	800840e <_svfprintf_r+0x8e>
 8008516:	aa2a      	add	r2, sp, #168	; 0xa8
 8008518:	4659      	mov	r1, fp
 800851a:	4650      	mov	r0, sl
 800851c:	f002 ff96 	bl	800b44c <__ssprint_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	f001 80c5 	beq.w	80096b0 <_svfprintf_r+0x1330>
 8008526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008528:	b11b      	cbz	r3, 8008532 <_svfprintf_r+0x1b2>
 800852a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800852c:	9803      	ldr	r0, [sp, #12]
 800852e:	f7ff fe2f 	bl	8008190 <_free_r>
 8008532:	9b06      	ldr	r3, [sp, #24]
 8008534:	899b      	ldrh	r3, [r3, #12]
 8008536:	f013 0f40 	tst.w	r3, #64	; 0x40
 800853a:	9b05      	ldr	r3, [sp, #20]
 800853c:	bf18      	it	ne
 800853e:	f04f 33ff 	movne.w	r3, #4294967295
 8008542:	9305      	str	r3, [sp, #20]
 8008544:	9805      	ldr	r0, [sp, #20]
 8008546:	b057      	add	sp, #348	; 0x15c
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	f048 0810 	orr.w	r8, r8, #16
 8008550:	f018 0f20 	tst.w	r8, #32
 8008554:	f000 8573 	beq.w	800903e <_svfprintf_r+0xcbe>
 8008558:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800855a:	3407      	adds	r4, #7
 800855c:	f024 0307 	bic.w	r3, r4, #7
 8008560:	e9d3 4500 	ldrd	r4, r5, [r3]
 8008564:	f103 0208 	add.w	r2, r3, #8
 8008568:	9209      	str	r2, [sp, #36]	; 0x24
 800856a:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800856e:	2200      	movs	r2, #0
 8008570:	2100      	movs	r1, #0
 8008572:	f88d 108b 	strb.w	r1, [sp, #139]	; 0x8b
 8008576:	f1ba 3fff 	cmp.w	sl, #4294967295
 800857a:	a956      	add	r1, sp, #344	; 0x158
 800857c:	9104      	str	r1, [sp, #16]
 800857e:	f000 84a7 	beq.w	8008ed0 <_svfprintf_r+0xb50>
 8008582:	ea54 0105 	orrs.w	r1, r4, r5
 8008586:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 800858a:	d15b      	bne.n	8008644 <_svfprintf_r+0x2c4>
 800858c:	f1ba 0f00 	cmp.w	sl, #0
 8008590:	f040 8796 	bne.w	80094c0 <_svfprintf_r+0x1140>
 8008594:	2a00      	cmp	r2, #0
 8008596:	f040 851f 	bne.w	8008fd8 <_svfprintf_r+0xc58>
 800859a:	f013 0301 	ands.w	r3, r3, #1
 800859e:	ae56      	add	r6, sp, #344	; 0x158
 80085a0:	9308      	str	r3, [sp, #32]
 80085a2:	d002      	beq.n	80085aa <_svfprintf_r+0x22a>
 80085a4:	2330      	movs	r3, #48	; 0x30
 80085a6:	f806 3d01 	strb.w	r3, [r6, #-1]!
 80085aa:	2300      	movs	r3, #0
 80085ac:	930a      	str	r3, [sp, #40]	; 0x28
 80085ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80085b0:	9314      	str	r3, [sp, #80]	; 0x50
 80085b2:	9311      	str	r3, [sp, #68]	; 0x44
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 80085ba:	4553      	cmp	r3, sl
 80085bc:	bfb8      	it	lt
 80085be:	4653      	movlt	r3, sl
 80085c0:	9304      	str	r3, [sp, #16]
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	f000 80c8 	beq.w	8008758 <_svfprintf_r+0x3d8>
 80085c8:	9b04      	ldr	r3, [sp, #16]
 80085ca:	3301      	adds	r3, #1
 80085cc:	9304      	str	r3, [sp, #16]
 80085ce:	e0c3      	b.n	8008758 <_svfprintf_r+0x3d8>
 80085d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80085d4:	2200      	movs	r2, #0
 80085d6:	f81b 7b01 	ldrb.w	r7, [fp], #1
 80085da:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80085de:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80085e2:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d9f5      	bls.n	80085d6 <_svfprintf_r+0x256>
 80085ea:	9207      	str	r2, [sp, #28]
 80085ec:	e723      	b.n	8008436 <_svfprintf_r+0xb6>
 80085ee:	bf00      	nop
	...
 80085f8:	4643      	mov	r3, r8
 80085fa:	069e      	lsls	r6, r3, #26
 80085fc:	f140 8217 	bpl.w	8008a2e <_svfprintf_r+0x6ae>
 8008600:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008602:	3407      	adds	r4, #7
 8008604:	f024 0407 	bic.w	r4, r4, #7
 8008608:	e9d4 0100 	ldrd	r0, r1, [r4]
 800860c:	f104 0208 	add.w	r2, r4, #8
 8008610:	9209      	str	r2, [sp, #36]	; 0x24
 8008612:	4604      	mov	r4, r0
 8008614:	460d      	mov	r5, r1
 8008616:	2800      	cmp	r0, #0
 8008618:	f171 0200 	sbcs.w	r2, r1, #0
 800861c:	da05      	bge.n	800862a <_svfprintf_r+0x2aa>
 800861e:	222d      	movs	r2, #45	; 0x2d
 8008620:	4264      	negs	r4, r4
 8008622:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8008626:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 800862a:	aa56      	add	r2, sp, #344	; 0x158
 800862c:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008630:	9204      	str	r2, [sp, #16]
 8008632:	f000 86e3 	beq.w	80093fc <_svfprintf_r+0x107c>
 8008636:	ea54 0105 	orrs.w	r1, r4, r5
 800863a:	f04f 0201 	mov.w	r2, #1
 800863e:	f023 0880 	bic.w	r8, r3, #128	; 0x80
 8008642:	d0a3      	beq.n	800858c <_svfprintf_r+0x20c>
 8008644:	2a01      	cmp	r2, #1
 8008646:	f000 8447 	beq.w	8008ed8 <_svfprintf_r+0xb58>
 800864a:	2a02      	cmp	r2, #2
 800864c:	f000 82ef 	beq.w	8008c2e <_svfprintf_r+0x8ae>
 8008650:	a956      	add	r1, sp, #344	; 0x158
 8008652:	e000      	b.n	8008656 <_svfprintf_r+0x2d6>
 8008654:	4631      	mov	r1, r6
 8008656:	08e2      	lsrs	r2, r4, #3
 8008658:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800865c:	08e8      	lsrs	r0, r5, #3
 800865e:	f004 0307 	and.w	r3, r4, #7
 8008662:	4605      	mov	r5, r0
 8008664:	4614      	mov	r4, r2
 8008666:	3330      	adds	r3, #48	; 0x30
 8008668:	ea54 0205 	orrs.w	r2, r4, r5
 800866c:	f801 3c01 	strb.w	r3, [r1, #-1]
 8008670:	f101 36ff 	add.w	r6, r1, #4294967295
 8008674:	d1ee      	bne.n	8008654 <_svfprintf_r+0x2d4>
 8008676:	f018 0f01 	tst.w	r8, #1
 800867a:	f000 82e8 	beq.w	8008c4e <_svfprintf_r+0x8ce>
 800867e:	2b30      	cmp	r3, #48	; 0x30
 8008680:	f000 82e5 	beq.w	8008c4e <_svfprintf_r+0x8ce>
 8008684:	9a04      	ldr	r2, [sp, #16]
 8008686:	3902      	subs	r1, #2
 8008688:	2330      	movs	r3, #48	; 0x30
 800868a:	1a52      	subs	r2, r2, r1
 800868c:	f806 3c01 	strb.w	r3, [r6, #-1]
 8008690:	9208      	str	r2, [sp, #32]
 8008692:	460e      	mov	r6, r1
 8008694:	e789      	b.n	80085aa <_svfprintf_r+0x22a>
 8008696:	4643      	mov	r3, r8
 8008698:	069e      	lsls	r6, r3, #26
 800869a:	f140 82a6 	bpl.w	8008bea <_svfprintf_r+0x86a>
 800869e:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80086a0:	3407      	adds	r4, #7
 80086a2:	f024 0207 	bic.w	r2, r4, #7
 80086a6:	f102 0108 	add.w	r1, r2, #8
 80086aa:	e9d2 4500 	ldrd	r4, r5, [r2]
 80086ae:	9109      	str	r1, [sp, #36]	; 0x24
 80086b0:	2201      	movs	r2, #1
 80086b2:	e75d      	b.n	8008570 <_svfprintf_r+0x1f0>
 80086b4:	4bb6      	ldr	r3, [pc, #728]	; (8008990 <_svfprintf_r+0x610>)
 80086b6:	9315      	str	r3, [sp, #84]	; 0x54
 80086b8:	f018 0f20 	tst.w	r8, #32
 80086bc:	f000 8174 	beq.w	80089a8 <_svfprintf_r+0x628>
 80086c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80086c2:	3407      	adds	r4, #7
 80086c4:	f024 0307 	bic.w	r3, r4, #7
 80086c8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80086cc:	f103 0208 	add.w	r2, r3, #8
 80086d0:	9209      	str	r2, [sp, #36]	; 0x24
 80086d2:	f018 0f01 	tst.w	r8, #1
 80086d6:	d009      	beq.n	80086ec <_svfprintf_r+0x36c>
 80086d8:	ea54 0305 	orrs.w	r3, r4, r5
 80086dc:	d006      	beq.n	80086ec <_svfprintf_r+0x36c>
 80086de:	2330      	movs	r3, #48	; 0x30
 80086e0:	f88d 708d 	strb.w	r7, [sp, #141]	; 0x8d
 80086e4:	f048 0802 	orr.w	r8, r8, #2
 80086e8:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 80086ec:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80086f0:	2202      	movs	r2, #2
 80086f2:	e73d      	b.n	8008570 <_svfprintf_r+0x1f0>
 80086f4:	f89b 7000 	ldrb.w	r7, [fp]
 80086f8:	2f2a      	cmp	r7, #42	; 0x2a
 80086fa:	f10b 0201 	add.w	r2, fp, #1
 80086fe:	f001 82eb 	beq.w	8009cd8 <_svfprintf_r+0x1958>
 8008702:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008706:	2b09      	cmp	r3, #9
 8008708:	4693      	mov	fp, r2
 800870a:	f04f 0a00 	mov.w	sl, #0
 800870e:	f63f ae92 	bhi.w	8008436 <_svfprintf_r+0xb6>
 8008712:	f81b 7b01 	ldrb.w	r7, [fp], #1
 8008716:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 800871a:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
 800871e:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008722:	2b09      	cmp	r3, #9
 8008724:	d9f5      	bls.n	8008712 <_svfprintf_r+0x392>
 8008726:	e686      	b.n	8008436 <_svfprintf_r+0xb6>
 8008728:	f89b 7000 	ldrb.w	r7, [fp]
 800872c:	f048 0804 	orr.w	r8, r8, #4
 8008730:	e67f      	b.n	8008432 <_svfprintf_r+0xb2>
 8008732:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008734:	2300      	movs	r3, #0
 8008736:	6801      	ldr	r1, [r0, #0]
 8008738:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 800873c:	461a      	mov	r2, r3
 800873e:	f88d 10f4 	strb.w	r1, [sp, #244]	; 0xf4
 8008742:	2301      	movs	r3, #1
 8008744:	1d01      	adds	r1, r0, #4
 8008746:	e9cd 3108 	strd	r3, r1, [sp, #32]
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	920a      	str	r2, [sp, #40]	; 0x28
 800874e:	4692      	mov	sl, r2
 8008750:	920f      	str	r2, [sp, #60]	; 0x3c
 8008752:	9214      	str	r2, [sp, #80]	; 0x50
 8008754:	9211      	str	r2, [sp, #68]	; 0x44
 8008756:	ae3d      	add	r6, sp, #244	; 0xf4
 8008758:	f018 0302 	ands.w	r3, r8, #2
 800875c:	930b      	str	r3, [sp, #44]	; 0x2c
 800875e:	d002      	beq.n	8008766 <_svfprintf_r+0x3e6>
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	3302      	adds	r3, #2
 8008764:	9304      	str	r3, [sp, #16]
 8008766:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800876a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800876c:	930e      	str	r3, [sp, #56]	; 0x38
 800876e:	d13f      	bne.n	80087f0 <_svfprintf_r+0x470>
 8008770:	9b07      	ldr	r3, [sp, #28]
 8008772:	9904      	ldr	r1, [sp, #16]
 8008774:	1a5d      	subs	r5, r3, r1
 8008776:	2d00      	cmp	r5, #0
 8008778:	dd3a      	ble.n	80087f0 <_svfprintf_r+0x470>
 800877a:	2d10      	cmp	r5, #16
 800877c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800877e:	dd29      	ble.n	80087d4 <_svfprintf_r+0x454>
 8008780:	4649      	mov	r1, r9
 8008782:	4620      	mov	r0, r4
 8008784:	46b1      	mov	r9, r6
 8008786:	2310      	movs	r3, #16
 8008788:	9720      	str	r7, [sp, #128]	; 0x80
 800878a:	9c03      	ldr	r4, [sp, #12]
 800878c:	9e06      	ldr	r6, [sp, #24]
 800878e:	e004      	b.n	800879a <_svfprintf_r+0x41a>
 8008790:	3d10      	subs	r5, #16
 8008792:	2d10      	cmp	r5, #16
 8008794:	f101 0108 	add.w	r1, r1, #8
 8008798:	dd18      	ble.n	80087cc <_svfprintf_r+0x44c>
 800879a:	3201      	adds	r2, #1
 800879c:	4f7d      	ldr	r7, [pc, #500]	; (8008994 <_svfprintf_r+0x614>)
 800879e:	3010      	adds	r0, #16
 80087a0:	2a07      	cmp	r2, #7
 80087a2:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
 80087a6:	e9c1 7300 	strd	r7, r3, [r1]
 80087aa:	ddf1      	ble.n	8008790 <_svfprintf_r+0x410>
 80087ac:	aa2a      	add	r2, sp, #168	; 0xa8
 80087ae:	4631      	mov	r1, r6
 80087b0:	4620      	mov	r0, r4
 80087b2:	930c      	str	r3, [sp, #48]	; 0x30
 80087b4:	f002 fe4a 	bl	800b44c <__ssprint_r>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	f47f aeb4 	bne.w	8008526 <_svfprintf_r+0x1a6>
 80087be:	3d10      	subs	r5, #16
 80087c0:	2d10      	cmp	r5, #16
 80087c2:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
 80087c6:	a92d      	add	r1, sp, #180	; 0xb4
 80087c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80087ca:	dce6      	bgt.n	800879a <_svfprintf_r+0x41a>
 80087cc:	9f20      	ldr	r7, [sp, #128]	; 0x80
 80087ce:	464e      	mov	r6, r9
 80087d0:	4604      	mov	r4, r0
 80087d2:	4689      	mov	r9, r1
 80087d4:	3201      	adds	r2, #1
 80087d6:	4b6f      	ldr	r3, [pc, #444]	; (8008994 <_svfprintf_r+0x614>)
 80087d8:	442c      	add	r4, r5
 80087da:	2a07      	cmp	r2, #7
 80087dc:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 80087e0:	e9c9 3500 	strd	r3, r5, [r9]
 80087e4:	f300 857c 	bgt.w	80092e0 <_svfprintf_r+0xf60>
 80087e8:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 80087ec:	f109 0908 	add.w	r9, r9, #8
 80087f0:	b172      	cbz	r2, 8008810 <_svfprintf_r+0x490>
 80087f2:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80087f4:	3201      	adds	r2, #1
 80087f6:	3401      	adds	r4, #1
 80087f8:	f10d 008b 	add.w	r0, sp, #139	; 0x8b
 80087fc:	2101      	movs	r1, #1
 80087fe:	2a07      	cmp	r2, #7
 8008800:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008804:	e9c9 0100 	strd	r0, r1, [r9]
 8008808:	f300 8373 	bgt.w	8008ef2 <_svfprintf_r+0xb72>
 800880c:	f109 0908 	add.w	r9, r9, #8
 8008810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008812:	b16b      	cbz	r3, 8008830 <_svfprintf_r+0x4b0>
 8008814:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008816:	3301      	adds	r3, #1
 8008818:	3402      	adds	r4, #2
 800881a:	a923      	add	r1, sp, #140	; 0x8c
 800881c:	2202      	movs	r2, #2
 800881e:	2b07      	cmp	r3, #7
 8008820:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008824:	e9c9 1200 	strd	r1, r2, [r9]
 8008828:	f300 836f 	bgt.w	8008f0a <_svfprintf_r+0xb8a>
 800882c:	f109 0908 	add.w	r9, r9, #8
 8008830:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	f000 8279 	beq.w	8008d2a <_svfprintf_r+0x9aa>
 8008838:	9b08      	ldr	r3, [sp, #32]
 800883a:	ebaa 0503 	sub.w	r5, sl, r3
 800883e:	2d00      	cmp	r5, #0
 8008840:	dd35      	ble.n	80088ae <_svfprintf_r+0x52e>
 8008842:	2d10      	cmp	r5, #16
 8008844:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008846:	4b54      	ldr	r3, [pc, #336]	; (8008998 <_svfprintf_r+0x618>)
 8008848:	dd26      	ble.n	8008898 <_svfprintf_r+0x518>
 800884a:	4649      	mov	r1, r9
 800884c:	4620      	mov	r0, r4
 800884e:	46b1      	mov	r9, r6
 8008850:	f04f 0a10 	mov.w	sl, #16
 8008854:	9e06      	ldr	r6, [sp, #24]
 8008856:	461c      	mov	r4, r3
 8008858:	e004      	b.n	8008864 <_svfprintf_r+0x4e4>
 800885a:	3d10      	subs	r5, #16
 800885c:	2d10      	cmp	r5, #16
 800885e:	f101 0108 	add.w	r1, r1, #8
 8008862:	dd15      	ble.n	8008890 <_svfprintf_r+0x510>
 8008864:	3201      	adds	r2, #1
 8008866:	3010      	adds	r0, #16
 8008868:	2a07      	cmp	r2, #7
 800886a:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
 800886e:	e9c1 4a00 	strd	r4, sl, [r1]
 8008872:	ddf2      	ble.n	800885a <_svfprintf_r+0x4da>
 8008874:	aa2a      	add	r2, sp, #168	; 0xa8
 8008876:	4631      	mov	r1, r6
 8008878:	9803      	ldr	r0, [sp, #12]
 800887a:	f002 fde7 	bl	800b44c <__ssprint_r>
 800887e:	2800      	cmp	r0, #0
 8008880:	f47f ae51 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008884:	3d10      	subs	r5, #16
 8008886:	2d10      	cmp	r5, #16
 8008888:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
 800888c:	a92d      	add	r1, sp, #180	; 0xb4
 800888e:	dce9      	bgt.n	8008864 <_svfprintf_r+0x4e4>
 8008890:	464e      	mov	r6, r9
 8008892:	4623      	mov	r3, r4
 8008894:	4689      	mov	r9, r1
 8008896:	4604      	mov	r4, r0
 8008898:	3201      	adds	r2, #1
 800889a:	442c      	add	r4, r5
 800889c:	2a07      	cmp	r2, #7
 800889e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 80088a2:	e9c9 3500 	strd	r3, r5, [r9]
 80088a6:	f300 833c 	bgt.w	8008f22 <_svfprintf_r+0xba2>
 80088aa:	f109 0908 	add.w	r9, r9, #8
 80088ae:	f418 7f80 	tst.w	r8, #256	; 0x100
 80088b2:	f040 81db 	bne.w	8008c6c <_svfprintf_r+0x8ec>
 80088b6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80088b8:	9a08      	ldr	r2, [sp, #32]
 80088ba:	f8c9 6000 	str.w	r6, [r9]
 80088be:	3301      	adds	r3, #1
 80088c0:	4414      	add	r4, r2
 80088c2:	2b07      	cmp	r3, #7
 80088c4:	942c      	str	r4, [sp, #176]	; 0xb0
 80088c6:	f8c9 2004 	str.w	r2, [r9, #4]
 80088ca:	932b      	str	r3, [sp, #172]	; 0xac
 80088cc:	f300 82a1 	bgt.w	8008e12 <_svfprintf_r+0xa92>
 80088d0:	f109 0908 	add.w	r9, r9, #8
 80088d4:	f018 0f04 	tst.w	r8, #4
 80088d8:	d033      	beq.n	8008942 <_svfprintf_r+0x5c2>
 80088da:	9b07      	ldr	r3, [sp, #28]
 80088dc:	9a04      	ldr	r2, [sp, #16]
 80088de:	1a9d      	subs	r5, r3, r2
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	dd2e      	ble.n	8008942 <_svfprintf_r+0x5c2>
 80088e4:	2d10      	cmp	r5, #16
 80088e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80088e8:	dd21      	ble.n	800892e <_svfprintf_r+0x5ae>
 80088ea:	2610      	movs	r6, #16
 80088ec:	9f03      	ldr	r7, [sp, #12]
 80088ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80088f2:	e004      	b.n	80088fe <_svfprintf_r+0x57e>
 80088f4:	3d10      	subs	r5, #16
 80088f6:	2d10      	cmp	r5, #16
 80088f8:	f109 0908 	add.w	r9, r9, #8
 80088fc:	dd17      	ble.n	800892e <_svfprintf_r+0x5ae>
 80088fe:	3301      	adds	r3, #1
 8008900:	4a24      	ldr	r2, [pc, #144]	; (8008994 <_svfprintf_r+0x614>)
 8008902:	3410      	adds	r4, #16
 8008904:	2b07      	cmp	r3, #7
 8008906:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800890a:	e9c9 2600 	strd	r2, r6, [r9]
 800890e:	ddf1      	ble.n	80088f4 <_svfprintf_r+0x574>
 8008910:	aa2a      	add	r2, sp, #168	; 0xa8
 8008912:	4641      	mov	r1, r8
 8008914:	4638      	mov	r0, r7
 8008916:	f002 fd99 	bl	800b44c <__ssprint_r>
 800891a:	2800      	cmp	r0, #0
 800891c:	f47f ae03 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008920:	3d10      	subs	r5, #16
 8008922:	2d10      	cmp	r5, #16
 8008924:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 8008928:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800892c:	dce7      	bgt.n	80088fe <_svfprintf_r+0x57e>
 800892e:	3301      	adds	r3, #1
 8008930:	4a18      	ldr	r2, [pc, #96]	; (8008994 <_svfprintf_r+0x614>)
 8008932:	442c      	add	r4, r5
 8008934:	2b07      	cmp	r3, #7
 8008936:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 800893a:	e9c9 2500 	strd	r2, r5, [r9]
 800893e:	f300 83a5 	bgt.w	800908c <_svfprintf_r+0xd0c>
 8008942:	9b05      	ldr	r3, [sp, #20]
 8008944:	9a07      	ldr	r2, [sp, #28]
 8008946:	9904      	ldr	r1, [sp, #16]
 8008948:	428a      	cmp	r2, r1
 800894a:	bfac      	ite	ge
 800894c:	189b      	addge	r3, r3, r2
 800894e:	185b      	addlt	r3, r3, r1
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	2c00      	cmp	r4, #0
 8008954:	f040 8225 	bne.w	8008da2 <_svfprintf_r+0xa22>
 8008958:	2300      	movs	r3, #0
 800895a:	932b      	str	r3, [sp, #172]	; 0xac
 800895c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800895e:	b11b      	cbz	r3, 8008968 <_svfprintf_r+0x5e8>
 8008960:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008962:	9803      	ldr	r0, [sp, #12]
 8008964:	f7ff fc14 	bl	8008190 <_free_r>
 8008968:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800896c:	465e      	mov	r6, fp
 800896e:	7833      	ldrb	r3, [r6, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	f47f ad32 	bne.w	80083da <_svfprintf_r+0x5a>
 8008976:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8008978:	2b00      	cmp	r3, #0
 800897a:	f43f adda 	beq.w	8008532 <_svfprintf_r+0x1b2>
 800897e:	9c06      	ldr	r4, [sp, #24]
 8008980:	9803      	ldr	r0, [sp, #12]
 8008982:	aa2a      	add	r2, sp, #168	; 0xa8
 8008984:	4621      	mov	r1, r4
 8008986:	f002 fd61 	bl	800b44c <__ssprint_r>
 800898a:	89a3      	ldrh	r3, [r4, #12]
 800898c:	e5d3      	b.n	8008536 <_svfprintf_r+0x1b6>
 800898e:	bf00      	nop
 8008990:	0800bfe0 	.word	0x0800bfe0
 8008994:	0800c014 	.word	0x0800c014
 8008998:	0800c024 	.word	0x0800c024
 800899c:	4bae      	ldr	r3, [pc, #696]	; (8008c58 <_svfprintf_r+0x8d8>)
 800899e:	9315      	str	r3, [sp, #84]	; 0x54
 80089a0:	f018 0f20 	tst.w	r8, #32
 80089a4:	f47f ae8c 	bne.w	80086c0 <_svfprintf_r+0x340>
 80089a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089aa:	f018 0f10 	tst.w	r8, #16
 80089ae:	f102 0304 	add.w	r3, r2, #4
 80089b2:	f040 8379 	bne.w	80090a8 <_svfprintf_r+0xd28>
 80089b6:	f018 0f40 	tst.w	r8, #64	; 0x40
 80089ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089bc:	f000 8370 	beq.w	80090a0 <_svfprintf_r+0xd20>
 80089c0:	8814      	ldrh	r4, [r2, #0]
 80089c2:	9309      	str	r3, [sp, #36]	; 0x24
 80089c4:	2500      	movs	r5, #0
 80089c6:	e684      	b.n	80086d2 <_svfprintf_r+0x352>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	681e      	ldr	r6, [r3, #0]
 80089cc:	2500      	movs	r5, #0
 80089ce:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
 80089d2:	1d1c      	adds	r4, r3, #4
 80089d4:	2e00      	cmp	r6, #0
 80089d6:	f000 8473 	beq.w	80092c0 <_svfprintf_r+0xf40>
 80089da:	f1ba 3fff 	cmp.w	sl, #4294967295
 80089de:	f000 865f 	beq.w	80096a0 <_svfprintf_r+0x1320>
 80089e2:	4652      	mov	r2, sl
 80089e4:	4629      	mov	r1, r5
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7f7 fd1a 	bl	8000420 <memchr>
 80089ec:	900a      	str	r0, [sp, #40]	; 0x28
 80089ee:	2800      	cmp	r0, #0
 80089f0:	f000 879a 	beq.w	8009928 <_svfprintf_r+0x15a8>
 80089f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f6:	1b9b      	subs	r3, r3, r6
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	46aa      	mov	sl, r5
 80089fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a00:	9409      	str	r4, [sp, #36]	; 0x24
 8008a02:	9304      	str	r3, [sp, #16]
 8008a04:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8008a08:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8008a0c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8008a10:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8008a14:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008a18:	e5d3      	b.n	80085c2 <_svfprintf_r+0x242>
 8008a1a:	f048 0808 	orr.w	r8, r8, #8
 8008a1e:	f89b 7000 	ldrb.w	r7, [fp]
 8008a22:	e506      	b.n	8008432 <_svfprintf_r+0xb2>
 8008a24:	f048 0310 	orr.w	r3, r8, #16
 8008a28:	069e      	lsls	r6, r3, #26
 8008a2a:	f53f ade9 	bmi.w	8008600 <_svfprintf_r+0x280>
 8008a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a30:	06dd      	lsls	r5, r3, #27
 8008a32:	f101 0204 	add.w	r2, r1, #4
 8008a36:	f100 8351 	bmi.w	80090dc <_svfprintf_r+0xd5c>
 8008a3a:	065c      	lsls	r4, r3, #25
 8008a3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a3e:	f140 834a 	bpl.w	80090d6 <_svfprintf_r+0xd56>
 8008a42:	f9b1 4000 	ldrsh.w	r4, [r1]
 8008a46:	9209      	str	r2, [sp, #36]	; 0x24
 8008a48:	17e5      	asrs	r5, r4, #31
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	e5e2      	b.n	8008616 <_svfprintf_r+0x296>
 8008a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a52:	f018 0f20 	tst.w	r8, #32
 8008a56:	f852 3b04 	ldr.w	r3, [r2], #4
 8008a5a:	9209      	str	r2, [sp, #36]	; 0x24
 8008a5c:	f040 8345 	bne.w	80090ea <_svfprintf_r+0xd6a>
 8008a60:	f018 0f10 	tst.w	r8, #16
 8008a64:	f040 857c 	bne.w	8009560 <_svfprintf_r+0x11e0>
 8008a68:	f018 0f40 	tst.w	r8, #64	; 0x40
 8008a6c:	f040 862e 	bne.w	80096cc <_svfprintf_r+0x134c>
 8008a70:	f418 7f00 	tst.w	r8, #512	; 0x200
 8008a74:	f000 8574 	beq.w	8009560 <_svfprintf_r+0x11e0>
 8008a78:	9a05      	ldr	r2, [sp, #20]
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	465e      	mov	r6, fp
 8008a7e:	e776      	b.n	800896e <_svfprintf_r+0x5ee>
 8008a80:	f89b 7000 	ldrb.w	r7, [fp]
 8008a84:	2f6c      	cmp	r7, #108	; 0x6c
 8008a86:	bf03      	ittte	eq
 8008a88:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 8008a8c:	f048 0820 	orreq.w	r8, r8, #32
 8008a90:	f10b 0b01 	addeq.w	fp, fp, #1
 8008a94:	f048 0810 	orrne.w	r8, r8, #16
 8008a98:	e4cb      	b.n	8008432 <_svfprintf_r+0xb2>
 8008a9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9c:	4b6f      	ldr	r3, [pc, #444]	; (8008c5c <_svfprintf_r+0x8dc>)
 8008a9e:	680c      	ldr	r4, [r1, #0]
 8008aa0:	9315      	str	r3, [sp, #84]	; 0x54
 8008aa2:	f647 0230 	movw	r2, #30768	; 0x7830
 8008aa6:	3104      	adds	r1, #4
 8008aa8:	f8ad 208c 	strh.w	r2, [sp, #140]	; 0x8c
 8008aac:	f048 0302 	orr.w	r3, r8, #2
 8008ab0:	9109      	str	r1, [sp, #36]	; 0x24
 8008ab2:	2500      	movs	r5, #0
 8008ab4:	2202      	movs	r2, #2
 8008ab6:	2778      	movs	r7, #120	; 0x78
 8008ab8:	e55a      	b.n	8008570 <_svfprintf_r+0x1f0>
 8008aba:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8008abe:	f89b 7000 	ldrb.w	r7, [fp]
 8008ac2:	e4b6      	b.n	8008432 <_svfprintf_r+0xb2>
 8008ac4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8008ac6:	3407      	adds	r4, #7
 8008ac8:	f024 0407 	bic.w	r4, r4, #7
 8008acc:	ed94 7b00 	vldr	d7, [r4]
 8008ad0:	ec52 1b17 	vmov	r1, r2, d7
 8008ad4:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8008ad8:	931d      	str	r3, [sp, #116]	; 0x74
 8008ada:	ed8d 7a1c 	vstr	s14, [sp, #112]	; 0x70
 8008ade:	3408      	adds	r4, #8
 8008ae0:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae8:	4b5d      	ldr	r3, [pc, #372]	; (8008c60 <_svfprintf_r+0x8e0>)
 8008aea:	9409      	str	r4, [sp, #36]	; 0x24
 8008aec:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8008af0:	f7f8 f93c 	bl	8000d6c <__aeabi_dcmpun>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f040 82ff 	bne.w	80090f8 <_svfprintf_r+0xd78>
 8008afa:	f04f 32ff 	mov.w	r2, #4294967295
 8008afe:	4b58      	ldr	r3, [pc, #352]	; (8008c60 <_svfprintf_r+0x8e0>)
 8008b00:	e9dd 011c 	ldrd	r0, r1, [sp, #112]	; 0x70
 8008b04:	f7f8 f914 	bl	8000d30 <__aeabi_dcmple>
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	f040 82f5 	bne.w	80090f8 <_svfprintf_r+0xd78>
 8008b0e:	2200      	movs	r2, #0
 8008b10:	2300      	movs	r3, #0
 8008b12:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008b16:	f7f8 f901 	bl	8000d1c <__aeabi_dcmplt>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	f040 86e3 	bne.w	80098e6 <_svfprintf_r+0x1566>
 8008b20:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8008b24:	4e4f      	ldr	r6, [pc, #316]	; (8008c64 <_svfprintf_r+0x8e4>)
 8008b26:	4b50      	ldr	r3, [pc, #320]	; (8008c68 <_svfprintf_r+0x8e8>)
 8008b28:	2000      	movs	r0, #0
 8008b2a:	2103      	movs	r1, #3
 8008b2c:	9104      	str	r1, [sp, #16]
 8008b2e:	900a      	str	r0, [sp, #40]	; 0x28
 8008b30:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8008b34:	2f47      	cmp	r7, #71	; 0x47
 8008b36:	bfd8      	it	le
 8008b38:	461e      	movle	r6, r3
 8008b3a:	9108      	str	r1, [sp, #32]
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	900f      	str	r0, [sp, #60]	; 0x3c
 8008b40:	9014      	str	r0, [sp, #80]	; 0x50
 8008b42:	9011      	str	r0, [sp, #68]	; 0x44
 8008b44:	e53d      	b.n	80085c2 <_svfprintf_r+0x242>
 8008b46:	9f03      	ldr	r7, [sp, #12]
 8008b48:	4638      	mov	r0, r7
 8008b4a:	f002 f901 	bl	800ad50 <_localeconv_r>
 8008b4e:	6843      	ldr	r3, [r0, #4]
 8008b50:	9318      	str	r3, [sp, #96]	; 0x60
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7f7 fbf4 	bl	8000340 <strlen>
 8008b58:	901b      	str	r0, [sp, #108]	; 0x6c
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f002 f8f7 	bl	800ad50 <_localeconv_r>
 8008b62:	6883      	ldr	r3, [r0, #8]
 8008b64:	931a      	str	r3, [sp, #104]	; 0x68
 8008b66:	2c00      	cmp	r4, #0
 8008b68:	f43f acc9 	beq.w	80084fe <_svfprintf_r+0x17e>
 8008b6c:	f89b 7000 	ldrb.w	r7, [fp]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f43f ac5e 	beq.w	8008432 <_svfprintf_r+0xb2>
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f43f ac5a 	beq.w	8008432 <_svfprintf_r+0xb2>
 8008b7e:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 8008b82:	e456      	b.n	8008432 <_svfprintf_r+0xb2>
 8008b84:	f048 0801 	orr.w	r8, r8, #1
 8008b88:	f89b 7000 	ldrb.w	r7, [fp]
 8008b8c:	e451      	b.n	8008432 <_svfprintf_r+0xb2>
 8008b8e:	f89d 308b 	ldrb.w	r3, [sp, #139]	; 0x8b
 8008b92:	f89b 7000 	ldrb.w	r7, [fp]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f47f ac4b 	bne.w	8008432 <_svfprintf_r+0xb2>
 8008b9c:	2320      	movs	r3, #32
 8008b9e:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8008ba2:	e446      	b.n	8008432 <_svfprintf_r+0xb2>
 8008ba4:	f88d 508b 	strb.w	r5, [sp, #139]	; 0x8b
 8008ba8:	f89b 7000 	ldrb.w	r7, [fp]
 8008bac:	e441      	b.n	8008432 <_svfprintf_r+0xb2>
 8008bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bb0:	f89b 7000 	ldrb.w	r7, [fp]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	9207      	str	r2, [sp, #28]
 8008bb8:	2a00      	cmp	r2, #0
 8008bba:	f103 0304 	add.w	r3, r3, #4
 8008bbe:	f2c0 835a 	blt.w	8009276 <_svfprintf_r+0xef6>
 8008bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8008bc4:	e435      	b.n	8008432 <_svfprintf_r+0xb2>
 8008bc6:	f89b 7000 	ldrb.w	r7, [fp]
 8008bca:	2f68      	cmp	r7, #104	; 0x68
 8008bcc:	bf03      	ittte	eq
 8008bce:	f89b 7001 	ldrbeq.w	r7, [fp, #1]
 8008bd2:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 8008bd6:	f10b 0b01 	addeq.w	fp, fp, #1
 8008bda:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8008bde:	e428      	b.n	8008432 <_svfprintf_r+0xb2>
 8008be0:	f048 0310 	orr.w	r3, r8, #16
 8008be4:	069e      	lsls	r6, r3, #26
 8008be6:	f53f ad5a 	bmi.w	800869e <_svfprintf_r+0x31e>
 8008bea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bec:	06dd      	lsls	r5, r3, #27
 8008bee:	f102 0104 	add.w	r1, r2, #4
 8008bf2:	f100 8261 	bmi.w	80090b8 <_svfprintf_r+0xd38>
 8008bf6:	065c      	lsls	r4, r3, #25
 8008bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008bfa:	f140 825a 	bpl.w	80090b2 <_svfprintf_r+0xd32>
 8008bfe:	8814      	ldrh	r4, [r2, #0]
 8008c00:	9109      	str	r1, [sp, #36]	; 0x24
 8008c02:	2500      	movs	r5, #0
 8008c04:	2201      	movs	r2, #1
 8008c06:	e4b3      	b.n	8008570 <_svfprintf_r+0x1f0>
 8008c08:	2f00      	cmp	r7, #0
 8008c0a:	f43f aeb4 	beq.w	8008976 <_svfprintf_r+0x5f6>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	2101      	movs	r1, #1
 8008c12:	461a      	mov	r2, r3
 8008c14:	9104      	str	r1, [sp, #16]
 8008c16:	f88d 70f4 	strb.w	r7, [sp, #244]	; 0xf4
 8008c1a:	f88d 308b 	strb.w	r3, [sp, #139]	; 0x8b
 8008c1e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c20:	469a      	mov	sl, r3
 8008c22:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c24:	9314      	str	r3, [sp, #80]	; 0x50
 8008c26:	9311      	str	r3, [sp, #68]	; 0x44
 8008c28:	9108      	str	r1, [sp, #32]
 8008c2a:	ae3d      	add	r6, sp, #244	; 0xf4
 8008c2c:	e594      	b.n	8008758 <_svfprintf_r+0x3d8>
 8008c2e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008c30:	ae56      	add	r6, sp, #344	; 0x158
 8008c32:	0923      	lsrs	r3, r4, #4
 8008c34:	f004 010f 	and.w	r1, r4, #15
 8008c38:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8008c3c:	092a      	lsrs	r2, r5, #4
 8008c3e:	461c      	mov	r4, r3
 8008c40:	4615      	mov	r5, r2
 8008c42:	5c43      	ldrb	r3, [r0, r1]
 8008c44:	f806 3d01 	strb.w	r3, [r6, #-1]!
 8008c48:	ea54 0305 	orrs.w	r3, r4, r5
 8008c4c:	d1f1      	bne.n	8008c32 <_svfprintf_r+0x8b2>
 8008c4e:	9b04      	ldr	r3, [sp, #16]
 8008c50:	1b9b      	subs	r3, r3, r6
 8008c52:	9308      	str	r3, [sp, #32]
 8008c54:	e4a9      	b.n	80085aa <_svfprintf_r+0x22a>
 8008c56:	bf00      	nop
 8008c58:	0800bff4 	.word	0x0800bff4
 8008c5c:	0800bfe0 	.word	0x0800bfe0
 8008c60:	7fefffff 	.word	0x7fefffff
 8008c64:	0800bfd4 	.word	0x0800bfd4
 8008c68:	0800bfd0 	.word	0x0800bfd0
 8008c6c:	2f65      	cmp	r7, #101	; 0x65
 8008c6e:	f340 80dc 	ble.w	8008e2a <_svfprintf_r+0xaaa>
 8008c72:	2200      	movs	r2, #0
 8008c74:	2300      	movs	r3, #0
 8008c76:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008c7a:	f7f8 f845 	bl	8000d08 <__aeabi_dcmpeq>
 8008c7e:	2800      	cmp	r0, #0
 8008c80:	f000 8160 	beq.w	8008f44 <_svfprintf_r+0xbc4>
 8008c84:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008c86:	4aad      	ldr	r2, [pc, #692]	; (8008f3c <_svfprintf_r+0xbbc>)
 8008c88:	f8c9 2000 	str.w	r2, [r9]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	3401      	adds	r4, #1
 8008c90:	2201      	movs	r2, #1
 8008c92:	2b07      	cmp	r3, #7
 8008c94:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008c98:	f8c9 2004 	str.w	r2, [r9, #4]
 8008c9c:	f300 843c 	bgt.w	8009518 <_svfprintf_r+0x1198>
 8008ca0:	f109 0908 	add.w	r9, r9, #8
 8008ca4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008ca6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008ca8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008caa:	4293      	cmp	r3, r2
 8008cac:	f280 81e9 	bge.w	8009082 <_svfprintf_r+0xd02>
 8008cb0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008cb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008cb4:	f8c9 2000 	str.w	r2, [r9]
 8008cb8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008cba:	f8c9 2004 	str.w	r2, [r9, #4]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	4414      	add	r4, r2
 8008cc2:	2b07      	cmp	r3, #7
 8008cc4:	e9cd 342b 	strd	r3, r4, [sp, #172]	; 0xac
 8008cc8:	f300 82ee 	bgt.w	80092a8 <_svfprintf_r+0xf28>
 8008ccc:	f109 0908 	add.w	r9, r9, #8
 8008cd0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008cd2:	1e5d      	subs	r5, r3, #1
 8008cd4:	2d00      	cmp	r5, #0
 8008cd6:	f77f adfd 	ble.w	80088d4 <_svfprintf_r+0x554>
 8008cda:	2d10      	cmp	r5, #16
 8008cdc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008cde:	4b98      	ldr	r3, [pc, #608]	; (8008f40 <_svfprintf_r+0xbc0>)
 8008ce0:	f340 8403 	ble.w	80094ea <_svfprintf_r+0x116a>
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	2610      	movs	r6, #16
 8008ce8:	4623      	mov	r3, r4
 8008cea:	9f03      	ldr	r7, [sp, #12]
 8008cec:	f8dd a018 	ldr.w	sl, [sp, #24]
 8008cf0:	460c      	mov	r4, r1
 8008cf2:	e005      	b.n	8008d00 <_svfprintf_r+0x980>
 8008cf4:	f109 0908 	add.w	r9, r9, #8
 8008cf8:	3d10      	subs	r5, #16
 8008cfa:	2d10      	cmp	r5, #16
 8008cfc:	f340 83f2 	ble.w	80094e4 <_svfprintf_r+0x1164>
 8008d00:	3201      	adds	r2, #1
 8008d02:	3310      	adds	r3, #16
 8008d04:	2a07      	cmp	r2, #7
 8008d06:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 8008d0a:	e9c9 4600 	strd	r4, r6, [r9]
 8008d0e:	ddf1      	ble.n	8008cf4 <_svfprintf_r+0x974>
 8008d10:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d12:	4651      	mov	r1, sl
 8008d14:	4638      	mov	r0, r7
 8008d16:	f002 fb99 	bl	800b44c <__ssprint_r>
 8008d1a:	2800      	cmp	r0, #0
 8008d1c:	f47f ac03 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008d20:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 8008d24:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008d28:	e7e6      	b.n	8008cf8 <_svfprintf_r+0x978>
 8008d2a:	9b07      	ldr	r3, [sp, #28]
 8008d2c:	9a04      	ldr	r2, [sp, #16]
 8008d2e:	1a9d      	subs	r5, r3, r2
 8008d30:	2d00      	cmp	r5, #0
 8008d32:	f77f ad81 	ble.w	8008838 <_svfprintf_r+0x4b8>
 8008d36:	2d10      	cmp	r5, #16
 8008d38:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008d3a:	4b81      	ldr	r3, [pc, #516]	; (8008f40 <_svfprintf_r+0xbc0>)
 8008d3c:	dd25      	ble.n	8008d8a <_svfprintf_r+0xa0a>
 8008d3e:	4649      	mov	r1, r9
 8008d40:	4620      	mov	r0, r4
 8008d42:	46b1      	mov	r9, r6
 8008d44:	461c      	mov	r4, r3
 8008d46:	9e06      	ldr	r6, [sp, #24]
 8008d48:	e004      	b.n	8008d54 <_svfprintf_r+0x9d4>
 8008d4a:	3d10      	subs	r5, #16
 8008d4c:	2d10      	cmp	r5, #16
 8008d4e:	f101 0108 	add.w	r1, r1, #8
 8008d52:	dd16      	ble.n	8008d82 <_svfprintf_r+0xa02>
 8008d54:	3201      	adds	r2, #1
 8008d56:	3010      	adds	r0, #16
 8008d58:	2310      	movs	r3, #16
 8008d5a:	2a07      	cmp	r2, #7
 8008d5c:	e9cd 202b 	strd	r2, r0, [sp, #172]	; 0xac
 8008d60:	600c      	str	r4, [r1, #0]
 8008d62:	604b      	str	r3, [r1, #4]
 8008d64:	ddf1      	ble.n	8008d4a <_svfprintf_r+0x9ca>
 8008d66:	aa2a      	add	r2, sp, #168	; 0xa8
 8008d68:	4631      	mov	r1, r6
 8008d6a:	9803      	ldr	r0, [sp, #12]
 8008d6c:	f002 fb6e 	bl	800b44c <__ssprint_r>
 8008d70:	2800      	cmp	r0, #0
 8008d72:	f47f abd8 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008d76:	3d10      	subs	r5, #16
 8008d78:	2d10      	cmp	r5, #16
 8008d7a:	e9dd 202b 	ldrd	r2, r0, [sp, #172]	; 0xac
 8008d7e:	a92d      	add	r1, sp, #180	; 0xb4
 8008d80:	dce8      	bgt.n	8008d54 <_svfprintf_r+0x9d4>
 8008d82:	464e      	mov	r6, r9
 8008d84:	4623      	mov	r3, r4
 8008d86:	4689      	mov	r9, r1
 8008d88:	4604      	mov	r4, r0
 8008d8a:	3201      	adds	r2, #1
 8008d8c:	442c      	add	r4, r5
 8008d8e:	2a07      	cmp	r2, #7
 8008d90:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008d94:	e9c9 3500 	strd	r3, r5, [r9]
 8008d98:	f300 83b1 	bgt.w	80094fe <_svfprintf_r+0x117e>
 8008d9c:	f109 0908 	add.w	r9, r9, #8
 8008da0:	e54a      	b.n	8008838 <_svfprintf_r+0x4b8>
 8008da2:	aa2a      	add	r2, sp, #168	; 0xa8
 8008da4:	9906      	ldr	r1, [sp, #24]
 8008da6:	9803      	ldr	r0, [sp, #12]
 8008da8:	f002 fb50 	bl	800b44c <__ssprint_r>
 8008dac:	2800      	cmp	r0, #0
 8008dae:	f43f add3 	beq.w	8008958 <_svfprintf_r+0x5d8>
 8008db2:	f7ff bbb8 	b.w	8008526 <_svfprintf_r+0x1a6>
 8008db6:	aa2a      	add	r2, sp, #168	; 0xa8
 8008db8:	9906      	ldr	r1, [sp, #24]
 8008dba:	9803      	ldr	r0, [sp, #12]
 8008dbc:	f002 fb46 	bl	800b44c <__ssprint_r>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	f47f abb0 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008dc6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008dc8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008dca:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008dce:	b91b      	cbnz	r3, 8008dd8 <_svfprintf_r+0xa58>
 8008dd0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	f000 8492 	beq.w	80096fc <_svfprintf_r+0x137c>
 8008dd8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008dda:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8008ddc:	f8c9 1000 	str.w	r1, [r9]
 8008de0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008de2:	f8c9 1004 	str.w	r1, [r9, #4]
 8008de6:	3201      	adds	r2, #1
 8008de8:	440c      	add	r4, r1
 8008dea:	2a07      	cmp	r2, #7
 8008dec:	942c      	str	r4, [sp, #176]	; 0xb0
 8008dee:	922b      	str	r2, [sp, #172]	; 0xac
 8008df0:	f300 85a7 	bgt.w	8009942 <_svfprintf_r+0x15c2>
 8008df4:	f109 0908 	add.w	r9, r9, #8
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f2c0 8620 	blt.w	8009a3e <_svfprintf_r+0x16be>
 8008dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e00:	3201      	adds	r2, #1
 8008e02:	441c      	add	r4, r3
 8008e04:	2a07      	cmp	r2, #7
 8008e06:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8008e0a:	e9c9 6300 	strd	r6, r3, [r9]
 8008e0e:	f77f ad5f 	ble.w	80088d0 <_svfprintf_r+0x550>
 8008e12:	aa2a      	add	r2, sp, #168	; 0xa8
 8008e14:	9906      	ldr	r1, [sp, #24]
 8008e16:	9803      	ldr	r0, [sp, #12]
 8008e18:	f002 fb18 	bl	800b44c <__ssprint_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	f47f ab82 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008e22:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008e24:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008e28:	e554      	b.n	80088d4 <_svfprintf_r+0x554>
 8008e2a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008e2c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008e2e:	2a01      	cmp	r2, #1
 8008e30:	f104 0401 	add.w	r4, r4, #1
 8008e34:	f103 0501 	add.w	r5, r3, #1
 8008e38:	f109 0708 	add.w	r7, r9, #8
 8008e3c:	f340 810e 	ble.w	800905c <_svfprintf_r+0xcdc>
 8008e40:	2301      	movs	r3, #1
 8008e42:	2d07      	cmp	r5, #7
 8008e44:	f8c9 6000 	str.w	r6, [r9]
 8008e48:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8008e4c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008e50:	f300 831d 	bgt.w	800948e <_svfprintf_r+0x110e>
 8008e54:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008e56:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008e58:	1c69      	adds	r1, r5, #1
 8008e5a:	441c      	add	r4, r3
 8008e5c:	2907      	cmp	r1, #7
 8008e5e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008e60:	e9cd 142b 	strd	r1, r4, [sp, #172]	; 0xac
 8008e64:	e9c7 2300 	strd	r2, r3, [r7]
 8008e68:	f300 831d 	bgt.w	80094a6 <_svfprintf_r+0x1126>
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008e70:	1c53      	adds	r3, r2, #1
 8008e72:	461d      	mov	r5, r3
 8008e74:	9508      	str	r5, [sp, #32]
 8008e76:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008e78:	930e      	str	r3, [sp, #56]	; 0x38
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008e82:	f105 3aff 	add.w	sl, r5, #4294967295
 8008e86:	f107 0908 	add.w	r9, r7, #8
 8008e8a:	f7f7 ff3d 	bl	8000d08 <__aeabi_dcmpeq>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f040 80a7 	bne.w	8008fe2 <_svfprintf_r+0xc62>
 8008e94:	9d08      	ldr	r5, [sp, #32]
 8008e96:	f8c7 a004 	str.w	sl, [r7, #4]
 8008e9a:	3601      	adds	r6, #1
 8008e9c:	4454      	add	r4, sl
 8008e9e:	2d07      	cmp	r5, #7
 8008ea0:	603e      	str	r6, [r7, #0]
 8008ea2:	942c      	str	r4, [sp, #176]	; 0xb0
 8008ea4:	952b      	str	r5, [sp, #172]	; 0xac
 8008ea6:	f300 81ef 	bgt.w	8009288 <_svfprintf_r+0xf08>
 8008eaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008eac:	f107 0310 	add.w	r3, r7, #16
 8008eb0:	3202      	adds	r2, #2
 8008eb2:	464f      	mov	r7, r9
 8008eb4:	9208      	str	r2, [sp, #32]
 8008eb6:	4699      	mov	r9, r3
 8008eb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008eba:	607a      	str	r2, [r7, #4]
 8008ebc:	4414      	add	r4, r2
 8008ebe:	9a08      	ldr	r2, [sp, #32]
 8008ec0:	942c      	str	r4, [sp, #176]	; 0xb0
 8008ec2:	ab26      	add	r3, sp, #152	; 0x98
 8008ec4:	2a07      	cmp	r2, #7
 8008ec6:	922b      	str	r2, [sp, #172]	; 0xac
 8008ec8:	603b      	str	r3, [r7, #0]
 8008eca:	f77f ad03 	ble.w	80088d4 <_svfprintf_r+0x554>
 8008ece:	e7a0      	b.n	8008e12 <_svfprintf_r+0xa92>
 8008ed0:	2a01      	cmp	r2, #1
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	f47f abb9 	bne.w	800864a <_svfprintf_r+0x2ca>
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	bf08      	it	eq
 8008edc:	2c0a      	cmpeq	r4, #10
 8008ede:	f080 8293 	bcs.w	8009408 <_svfprintf_r+0x1088>
 8008ee2:	ae56      	add	r6, sp, #344	; 0x158
 8008ee4:	3430      	adds	r4, #48	; 0x30
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	f806 4d01 	strb.w	r4, [r6, #-1]!
 8008eec:	9308      	str	r3, [sp, #32]
 8008eee:	f7ff bb5c 	b.w	80085aa <_svfprintf_r+0x22a>
 8008ef2:	aa2a      	add	r2, sp, #168	; 0xa8
 8008ef4:	9906      	ldr	r1, [sp, #24]
 8008ef6:	9803      	ldr	r0, [sp, #12]
 8008ef8:	f002 faa8 	bl	800b44c <__ssprint_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	f47f ab12 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008f02:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008f04:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008f08:	e482      	b.n	8008810 <_svfprintf_r+0x490>
 8008f0a:	aa2a      	add	r2, sp, #168	; 0xa8
 8008f0c:	9906      	ldr	r1, [sp, #24]
 8008f0e:	9803      	ldr	r0, [sp, #12]
 8008f10:	f002 fa9c 	bl	800b44c <__ssprint_r>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f47f ab06 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008f1a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008f1c:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008f20:	e486      	b.n	8008830 <_svfprintf_r+0x4b0>
 8008f22:	aa2a      	add	r2, sp, #168	; 0xa8
 8008f24:	9906      	ldr	r1, [sp, #24]
 8008f26:	9803      	ldr	r0, [sp, #12]
 8008f28:	f002 fa90 	bl	800b44c <__ssprint_r>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f47f aafa 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008f32:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8008f34:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8008f38:	e4b9      	b.n	80088ae <_svfprintf_r+0x52e>
 8008f3a:	bf00      	nop
 8008f3c:	0800c010 	.word	0x0800c010
 8008f40:	0800c024 	.word	0x0800c024
 8008f44:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f340 8175 	ble.w	8009236 <_svfprintf_r+0xeb6>
 8008f4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f50:	4293      	cmp	r3, r2
 8008f52:	bfa8      	it	ge
 8008f54:	4613      	movge	r3, r2
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	461d      	mov	r5, r3
 8008f5a:	dd0d      	ble.n	8008f78 <_svfprintf_r+0xbf8>
 8008f5c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8008f5e:	f8c9 6000 	str.w	r6, [r9]
 8008f62:	3301      	adds	r3, #1
 8008f64:	442c      	add	r4, r5
 8008f66:	2b07      	cmp	r3, #7
 8008f68:	942c      	str	r4, [sp, #176]	; 0xb0
 8008f6a:	f8c9 5004 	str.w	r5, [r9, #4]
 8008f6e:	932b      	str	r3, [sp, #172]	; 0xac
 8008f70:	f300 84be 	bgt.w	80098f0 <_svfprintf_r+0x1570>
 8008f74:	f109 0908 	add.w	r9, r9, #8
 8008f78:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	bfa8      	it	ge
 8008f7e:	1b5b      	subge	r3, r3, r5
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	461d      	mov	r5, r3
 8008f84:	f340 81d4 	ble.w	8009330 <_svfprintf_r+0xfb0>
 8008f88:	2d10      	cmp	r5, #16
 8008f8a:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8008f8c:	4bbc      	ldr	r3, [pc, #752]	; (8009280 <_svfprintf_r+0xf00>)
 8008f8e:	f340 81bb 	ble.w	8009308 <_svfprintf_r+0xf88>
 8008f92:	4618      	mov	r0, r3
 8008f94:	4621      	mov	r1, r4
 8008f96:	464b      	mov	r3, r9
 8008f98:	2710      	movs	r7, #16
 8008f9a:	46b1      	mov	r9, r6
 8008f9c:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8008fa0:	9c06      	ldr	r4, [sp, #24]
 8008fa2:	4606      	mov	r6, r0
 8008fa4:	e004      	b.n	8008fb0 <_svfprintf_r+0xc30>
 8008fa6:	3308      	adds	r3, #8
 8008fa8:	3d10      	subs	r5, #16
 8008faa:	2d10      	cmp	r5, #16
 8008fac:	f340 81a7 	ble.w	80092fe <_svfprintf_r+0xf7e>
 8008fb0:	3201      	adds	r2, #1
 8008fb2:	3110      	adds	r1, #16
 8008fb4:	2a07      	cmp	r2, #7
 8008fb6:	e9cd 212b 	strd	r2, r1, [sp, #172]	; 0xac
 8008fba:	e9c3 6700 	strd	r6, r7, [r3]
 8008fbe:	ddf2      	ble.n	8008fa6 <_svfprintf_r+0xc26>
 8008fc0:	aa2a      	add	r2, sp, #168	; 0xa8
 8008fc2:	4621      	mov	r1, r4
 8008fc4:	4650      	mov	r0, sl
 8008fc6:	f002 fa41 	bl	800b44c <__ssprint_r>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f47f aaab 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8008fd0:	e9dd 212b 	ldrd	r2, r1, [sp, #172]	; 0xac
 8008fd4:	ab2d      	add	r3, sp, #180	; 0xb4
 8008fd6:	e7e7      	b.n	8008fa8 <_svfprintf_r+0xc28>
 8008fd8:	f8cd a020 	str.w	sl, [sp, #32]
 8008fdc:	ae56      	add	r6, sp, #344	; 0x158
 8008fde:	f7ff bae4 	b.w	80085aa <_svfprintf_r+0x22a>
 8008fe2:	f1ba 0f00 	cmp.w	sl, #0
 8008fe6:	f77f af67 	ble.w	8008eb8 <_svfprintf_r+0xb38>
 8008fea:	f1ba 0f10 	cmp.w	sl, #16
 8008fee:	4ba4      	ldr	r3, [pc, #656]	; (8009280 <_svfprintf_r+0xf00>)
 8008ff0:	f340 864e 	ble.w	8009c90 <_svfprintf_r+0x1910>
 8008ff4:	4619      	mov	r1, r3
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	463b      	mov	r3, r7
 8008ffa:	2610      	movs	r6, #16
 8008ffc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009000:	9c06      	ldr	r4, [sp, #24]
 8009002:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8009004:	460f      	mov	r7, r1
 8009006:	e007      	b.n	8009018 <_svfprintf_r+0xc98>
 8009008:	3308      	adds	r3, #8
 800900a:	f1aa 0a10 	sub.w	sl, sl, #16
 800900e:	f1ba 0f10 	cmp.w	sl, #16
 8009012:	f340 828d 	ble.w	8009530 <_svfprintf_r+0x11b0>
 8009016:	3501      	adds	r5, #1
 8009018:	3210      	adds	r2, #16
 800901a:	2d07      	cmp	r5, #7
 800901c:	e9cd 522b 	strd	r5, r2, [sp, #172]	; 0xac
 8009020:	e9c3 7600 	strd	r7, r6, [r3]
 8009024:	ddf0      	ble.n	8009008 <_svfprintf_r+0xc88>
 8009026:	aa2a      	add	r2, sp, #168	; 0xa8
 8009028:	4621      	mov	r1, r4
 800902a:	4648      	mov	r0, r9
 800902c:	f002 fa0e 	bl	800b44c <__ssprint_r>
 8009030:	2800      	cmp	r0, #0
 8009032:	f47f aa78 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009036:	e9dd 522b 	ldrd	r5, r2, [sp, #172]	; 0xac
 800903a:	ab2d      	add	r3, sp, #180	; 0xb4
 800903c:	e7e5      	b.n	800900a <_svfprintf_r+0xc8a>
 800903e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009040:	f018 0f10 	tst.w	r8, #16
 8009044:	f102 0304 	add.w	r3, r2, #4
 8009048:	d140      	bne.n	80090cc <_svfprintf_r+0xd4c>
 800904a:	f018 0f40 	tst.w	r8, #64	; 0x40
 800904e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009050:	d038      	beq.n	80090c4 <_svfprintf_r+0xd44>
 8009052:	8814      	ldrh	r4, [r2, #0]
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	2500      	movs	r5, #0
 8009058:	f7ff ba87 	b.w	800856a <_svfprintf_r+0x1ea>
 800905c:	f018 0f01 	tst.w	r8, #1
 8009060:	f47f aeee 	bne.w	8008e40 <_svfprintf_r+0xac0>
 8009064:	2201      	movs	r2, #1
 8009066:	2d07      	cmp	r5, #7
 8009068:	f8c9 6000 	str.w	r6, [r9]
 800906c:	e9cd 542b 	strd	r5, r4, [sp, #172]	; 0xac
 8009070:	f8c9 2004 	str.w	r2, [r9, #4]
 8009074:	f300 8108 	bgt.w	8009288 <_svfprintf_r+0xf08>
 8009078:	3302      	adds	r3, #2
 800907a:	9308      	str	r3, [sp, #32]
 800907c:	f109 0910 	add.w	r9, r9, #16
 8009080:	e71a      	b.n	8008eb8 <_svfprintf_r+0xb38>
 8009082:	f018 0f01 	tst.w	r8, #1
 8009086:	f47f ae13 	bne.w	8008cb0 <_svfprintf_r+0x930>
 800908a:	e423      	b.n	80088d4 <_svfprintf_r+0x554>
 800908c:	aa2a      	add	r2, sp, #168	; 0xa8
 800908e:	9906      	ldr	r1, [sp, #24]
 8009090:	9803      	ldr	r0, [sp, #12]
 8009092:	f002 f9db 	bl	800b44c <__ssprint_r>
 8009096:	2800      	cmp	r0, #0
 8009098:	f47f aa45 	bne.w	8008526 <_svfprintf_r+0x1a6>
 800909c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800909e:	e450      	b.n	8008942 <_svfprintf_r+0x5c2>
 80090a0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80090a4:	f040 830d 	bne.w	80096c2 <_svfprintf_r+0x1342>
 80090a8:	6814      	ldr	r4, [r2, #0]
 80090aa:	9309      	str	r3, [sp, #36]	; 0x24
 80090ac:	2500      	movs	r5, #0
 80090ae:	f7ff bb10 	b.w	80086d2 <_svfprintf_r+0x352>
 80090b2:	0598      	lsls	r0, r3, #22
 80090b4:	f100 830f 	bmi.w	80096d6 <_svfprintf_r+0x1356>
 80090b8:	6814      	ldr	r4, [r2, #0]
 80090ba:	9109      	str	r1, [sp, #36]	; 0x24
 80090bc:	2201      	movs	r2, #1
 80090be:	2500      	movs	r5, #0
 80090c0:	f7ff ba56 	b.w	8008570 <_svfprintf_r+0x1f0>
 80090c4:	f418 7f00 	tst.w	r8, #512	; 0x200
 80090c8:	f040 8313 	bne.w	80096f2 <_svfprintf_r+0x1372>
 80090cc:	6814      	ldr	r4, [r2, #0]
 80090ce:	9309      	str	r3, [sp, #36]	; 0x24
 80090d0:	2500      	movs	r5, #0
 80090d2:	f7ff ba4a 	b.w	800856a <_svfprintf_r+0x1ea>
 80090d6:	0598      	lsls	r0, r3, #22
 80090d8:	f100 8303 	bmi.w	80096e2 <_svfprintf_r+0x1362>
 80090dc:	680c      	ldr	r4, [r1, #0]
 80090de:	9209      	str	r2, [sp, #36]	; 0x24
 80090e0:	17e5      	asrs	r5, r4, #31
 80090e2:	4620      	mov	r0, r4
 80090e4:	4629      	mov	r1, r5
 80090e6:	f7ff ba96 	b.w	8008616 <_svfprintf_r+0x296>
 80090ea:	9a05      	ldr	r2, [sp, #20]
 80090ec:	4610      	mov	r0, r2
 80090ee:	17d1      	asrs	r1, r2, #31
 80090f0:	e9c3 0100 	strd	r0, r1, [r3]
 80090f4:	465e      	mov	r6, fp
 80090f6:	e43a      	b.n	800896e <_svfprintf_r+0x5ee>
 80090f8:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80090fc:	4602      	mov	r2, r0
 80090fe:	460b      	mov	r3, r1
 8009100:	f7f7 fe34 	bl	8000d6c <__aeabi_dcmpun>
 8009104:	2800      	cmp	r0, #0
 8009106:	f040 8599 	bne.w	8009c3c <_svfprintf_r+0x18bc>
 800910a:	2f61      	cmp	r7, #97	; 0x61
 800910c:	f000 8407 	beq.w	800991e <_svfprintf_r+0x159e>
 8009110:	2f41      	cmp	r7, #65	; 0x41
 8009112:	f000 82f9 	beq.w	8009708 <_svfprintf_r+0x1388>
 8009116:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800911a:	f027 0220 	bic.w	r2, r7, #32
 800911e:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009122:	930e      	str	r3, [sp, #56]	; 0x38
 8009124:	9204      	str	r2, [sp, #16]
 8009126:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009128:	f000 851f 	beq.w	8009b6a <_svfprintf_r+0x17ea>
 800912c:	2a47      	cmp	r2, #71	; 0x47
 800912e:	f000 8516 	beq.w	8009b5e <_svfprintf_r+0x17de>
 8009132:	2b00      	cmp	r3, #0
 8009134:	f2c0 83e9 	blt.w	800990a <_svfprintf_r+0x158a>
 8009138:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 800913c:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 8009140:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8009144:	2f66      	cmp	r7, #102	; 0x66
 8009146:	f000 84dd 	beq.w	8009b04 <_svfprintf_r+0x1784>
 800914a:	2f46      	cmp	r7, #70	; 0x46
 800914c:	f000 8562 	beq.w	8009c14 <_svfprintf_r+0x1894>
 8009150:	9b04      	ldr	r3, [sp, #16]
 8009152:	9803      	ldr	r0, [sp, #12]
 8009154:	2b45      	cmp	r3, #69	; 0x45
 8009156:	bf0c      	ite	eq
 8009158:	f10a 0501 	addeq.w	r5, sl, #1
 800915c:	4655      	movne	r5, sl
 800915e:	aa28      	add	r2, sp, #160	; 0xa0
 8009160:	ab25      	add	r3, sp, #148	; 0x94
 8009162:	e9cd 3200 	strd	r3, r2, [sp]
 8009166:	2102      	movs	r1, #2
 8009168:	ab24      	add	r3, sp, #144	; 0x90
 800916a:	462a      	mov	r2, r5
 800916c:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8009170:	f000 fede 	bl	8009f30 <_dtoa_r>
 8009174:	2f67      	cmp	r7, #103	; 0x67
 8009176:	4606      	mov	r6, r0
 8009178:	f040 8595 	bne.w	8009ca6 <_svfprintf_r+0x1926>
 800917c:	f018 0f01 	tst.w	r8, #1
 8009180:	f040 84f7 	bne.w	8009b72 <_svfprintf_r+0x17f2>
 8009184:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009186:	4640      	mov	r0, r8
 8009188:	1b9b      	subs	r3, r3, r6
 800918a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800918e:	9310      	str	r3, [sp, #64]	; 0x40
 8009190:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009192:	9311      	str	r3, [sp, #68]	; 0x44
 8009194:	9b04      	ldr	r3, [sp, #16]
 8009196:	2b47      	cmp	r3, #71	; 0x47
 8009198:	f000 8371 	beq.w	800987e <_svfprintf_r+0x14fe>
 800919c:	9b04      	ldr	r3, [sp, #16]
 800919e:	2b46      	cmp	r3, #70	; 0x46
 80091a0:	f000 8407 	beq.w	80099b2 <_svfprintf_r+0x1632>
 80091a4:	9904      	ldr	r1, [sp, #16]
 80091a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80091a8:	b2fa      	uxtb	r2, r7
 80091aa:	2941      	cmp	r1, #65	; 0x41
 80091ac:	bf08      	it	eq
 80091ae:	320f      	addeq	r2, #15
 80091b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80091b4:	bf06      	itte	eq
 80091b6:	b2d2      	uxtbeq	r2, r2
 80091b8:	2101      	moveq	r1, #1
 80091ba:	2100      	movne	r1, #0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	9324      	str	r3, [sp, #144]	; 0x90
 80091c0:	bfb8      	it	lt
 80091c2:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
 80091c4:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 80091c8:	bfba      	itte	lt
 80091ca:	f1c3 0301 	rsblt	r3, r3, #1
 80091ce:	222d      	movlt	r2, #45	; 0x2d
 80091d0:	222b      	movge	r2, #43	; 0x2b
 80091d2:	2b09      	cmp	r3, #9
 80091d4:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
 80091d8:	f300 84e5 	bgt.w	8009ba6 <_svfprintf_r+0x1826>
 80091dc:	2900      	cmp	r1, #0
 80091de:	f040 856a 	bne.w	8009cb6 <_svfprintf_r+0x1936>
 80091e2:	2230      	movs	r2, #48	; 0x30
 80091e4:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
 80091e8:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
 80091ec:	3330      	adds	r3, #48	; 0x30
 80091ee:	7013      	strb	r3, [r2, #0]
 80091f0:	1c53      	adds	r3, r2, #1
 80091f2:	aa26      	add	r2, sp, #152	; 0x98
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80091f8:	9319      	str	r3, [sp, #100]	; 0x64
 80091fa:	2a01      	cmp	r2, #1
 80091fc:	4413      	add	r3, r2
 80091fe:	9308      	str	r3, [sp, #32]
 8009200:	f340 8528 	ble.w	8009c54 <_svfprintf_r+0x18d4>
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009208:	4413      	add	r3, r2
 800920a:	9308      	str	r3, [sp, #32]
 800920c:	2300      	movs	r3, #0
 800920e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009210:	9314      	str	r3, [sp, #80]	; 0x50
 8009212:	9311      	str	r3, [sp, #68]	; 0x44
 8009214:	9b08      	ldr	r3, [sp, #32]
 8009216:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 800921a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800921e:	f440 7880 	orr.w	r8, r0, #256	; 0x100
 8009222:	9304      	str	r3, [sp, #16]
 8009224:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009226:	2b00      	cmp	r3, #0
 8009228:	f040 833c 	bne.w	80098a4 <_svfprintf_r+0x1524>
 800922c:	469a      	mov	sl, r3
 800922e:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 8009232:	f7ff b9c6 	b.w	80085c2 <_svfprintf_r+0x242>
 8009236:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009238:	4912      	ldr	r1, [pc, #72]	; (8009284 <_svfprintf_r+0xf04>)
 800923a:	f8c9 1000 	str.w	r1, [r9]
 800923e:	3201      	adds	r2, #1
 8009240:	3401      	adds	r4, #1
 8009242:	2101      	movs	r1, #1
 8009244:	2a07      	cmp	r2, #7
 8009246:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 800924a:	f8c9 1004 	str.w	r1, [r9, #4]
 800924e:	f73f adb2 	bgt.w	8008db6 <_svfprintf_r+0xa36>
 8009252:	f109 0908 	add.w	r9, r9, #8
 8009256:	e5ba      	b.n	8008dce <_svfprintf_r+0xa4e>
 8009258:	2140      	movs	r1, #64	; 0x40
 800925a:	9803      	ldr	r0, [sp, #12]
 800925c:	f7fe fbf2 	bl	8007a44 <_malloc_r>
 8009260:	9b06      	ldr	r3, [sp, #24]
 8009262:	6018      	str	r0, [r3, #0]
 8009264:	6118      	str	r0, [r3, #16]
 8009266:	2800      	cmp	r0, #0
 8009268:	f000 8553 	beq.w	8009d12 <_svfprintf_r+0x1992>
 800926c:	9a06      	ldr	r2, [sp, #24]
 800926e:	2340      	movs	r3, #64	; 0x40
 8009270:	6153      	str	r3, [r2, #20]
 8009272:	f7ff b89c 	b.w	80083ae <_svfprintf_r+0x2e>
 8009276:	4252      	negs	r2, r2
 8009278:	9207      	str	r2, [sp, #28]
 800927a:	9309      	str	r3, [sp, #36]	; 0x24
 800927c:	f7ff ba56 	b.w	800872c <_svfprintf_r+0x3ac>
 8009280:	0800c024 	.word	0x0800c024
 8009284:	0800c010 	.word	0x0800c010
 8009288:	aa2a      	add	r2, sp, #168	; 0xa8
 800928a:	9906      	ldr	r1, [sp, #24]
 800928c:	9803      	ldr	r0, [sp, #12]
 800928e:	f002 f8dd 	bl	800b44c <__ssprint_r>
 8009292:	2800      	cmp	r0, #0
 8009294:	f47f a947 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009298:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 800929c:	3301      	adds	r3, #1
 800929e:	9308      	str	r3, [sp, #32]
 80092a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
 80092a4:	af2d      	add	r7, sp, #180	; 0xb4
 80092a6:	e607      	b.n	8008eb8 <_svfprintf_r+0xb38>
 80092a8:	aa2a      	add	r2, sp, #168	; 0xa8
 80092aa:	9906      	ldr	r1, [sp, #24]
 80092ac:	9803      	ldr	r0, [sp, #12]
 80092ae:	f002 f8cd 	bl	800b44c <__ssprint_r>
 80092b2:	2800      	cmp	r0, #0
 80092b4:	f47f a937 	bne.w	8008526 <_svfprintf_r+0x1a6>
 80092b8:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80092ba:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 80092be:	e507      	b.n	8008cd0 <_svfprintf_r+0x950>
 80092c0:	4653      	mov	r3, sl
 80092c2:	2b06      	cmp	r3, #6
 80092c4:	bf28      	it	cs
 80092c6:	2306      	movcs	r3, #6
 80092c8:	46b2      	mov	sl, r6
 80092ca:	960f      	str	r6, [sp, #60]	; 0x3c
 80092cc:	9614      	str	r6, [sp, #80]	; 0x50
 80092ce:	9611      	str	r6, [sp, #68]	; 0x44
 80092d0:	960a      	str	r6, [sp, #40]	; 0x28
 80092d2:	4632      	mov	r2, r6
 80092d4:	9304      	str	r3, [sp, #16]
 80092d6:	e9cd 3408 	strd	r3, r4, [sp, #32]
 80092da:	4ea4      	ldr	r6, [pc, #656]	; (800956c <_svfprintf_r+0x11ec>)
 80092dc:	f7ff b971 	b.w	80085c2 <_svfprintf_r+0x242>
 80092e0:	aa2a      	add	r2, sp, #168	; 0xa8
 80092e2:	9906      	ldr	r1, [sp, #24]
 80092e4:	9803      	ldr	r0, [sp, #12]
 80092e6:	f002 f8b1 	bl	800b44c <__ssprint_r>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	f47f a91b 	bne.w	8008526 <_svfprintf_r+0x1a6>
 80092f0:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 80092f4:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80092f6:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 80092fa:	f7ff ba79 	b.w	80087f0 <_svfprintf_r+0x470>
 80092fe:	460c      	mov	r4, r1
 8009300:	4631      	mov	r1, r6
 8009302:	464e      	mov	r6, r9
 8009304:	4699      	mov	r9, r3
 8009306:	460b      	mov	r3, r1
 8009308:	3201      	adds	r2, #1
 800930a:	442c      	add	r4, r5
 800930c:	2a07      	cmp	r2, #7
 800930e:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8009312:	e9c9 3500 	strd	r3, r5, [r9]
 8009316:	f340 81d1 	ble.w	80096bc <_svfprintf_r+0x133c>
 800931a:	aa2a      	add	r2, sp, #168	; 0xa8
 800931c:	9906      	ldr	r1, [sp, #24]
 800931e:	9803      	ldr	r0, [sp, #12]
 8009320:	f002 f894 	bl	800b44c <__ssprint_r>
 8009324:	2800      	cmp	r0, #0
 8009326:	f47f a8fe 	bne.w	8008526 <_svfprintf_r+0x1a6>
 800932a:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 800932c:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009330:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009332:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8009336:	4433      	add	r3, r6
 8009338:	469a      	mov	sl, r3
 800933a:	f040 811b 	bne.w	8009574 <_svfprintf_r+0x11f4>
 800933e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009340:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009342:	4293      	cmp	r3, r2
 8009344:	db49      	blt.n	80093da <_svfprintf_r+0x105a>
 8009346:	f018 0f01 	tst.w	r8, #1
 800934a:	d146      	bne.n	80093da <_svfprintf_r+0x105a>
 800934c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800934e:	18b5      	adds	r5, r6, r2
 8009350:	eba5 050a 	sub.w	r5, r5, sl
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	429d      	cmp	r5, r3
 8009358:	bfa8      	it	ge
 800935a:	461d      	movge	r5, r3
 800935c:	2d00      	cmp	r5, #0
 800935e:	dd0d      	ble.n	800937c <_svfprintf_r+0xffc>
 8009360:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8009362:	f8c9 a000 	str.w	sl, [r9]
 8009366:	3201      	adds	r2, #1
 8009368:	442c      	add	r4, r5
 800936a:	2a07      	cmp	r2, #7
 800936c:	942c      	str	r4, [sp, #176]	; 0xb0
 800936e:	f8c9 5004 	str.w	r5, [r9, #4]
 8009372:	922b      	str	r2, [sp, #172]	; 0xac
 8009374:	f300 833c 	bgt.w	80099f0 <_svfprintf_r+0x1670>
 8009378:	f109 0908 	add.w	r9, r9, #8
 800937c:	2d00      	cmp	r5, #0
 800937e:	bfac      	ite	ge
 8009380:	1b5d      	subge	r5, r3, r5
 8009382:	461d      	movlt	r5, r3
 8009384:	2d00      	cmp	r5, #0
 8009386:	f77f aaa5 	ble.w	80088d4 <_svfprintf_r+0x554>
 800938a:	2d10      	cmp	r5, #16
 800938c:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800938e:	4b78      	ldr	r3, [pc, #480]	; (8009570 <_svfprintf_r+0x11f0>)
 8009390:	f340 80ab 	ble.w	80094ea <_svfprintf_r+0x116a>
 8009394:	4619      	mov	r1, r3
 8009396:	2610      	movs	r6, #16
 8009398:	4623      	mov	r3, r4
 800939a:	9f03      	ldr	r7, [sp, #12]
 800939c:	f8dd a018 	ldr.w	sl, [sp, #24]
 80093a0:	460c      	mov	r4, r1
 80093a2:	e005      	b.n	80093b0 <_svfprintf_r+0x1030>
 80093a4:	f109 0908 	add.w	r9, r9, #8
 80093a8:	3d10      	subs	r5, #16
 80093aa:	2d10      	cmp	r5, #16
 80093ac:	f340 809a 	ble.w	80094e4 <_svfprintf_r+0x1164>
 80093b0:	3201      	adds	r2, #1
 80093b2:	3310      	adds	r3, #16
 80093b4:	2a07      	cmp	r2, #7
 80093b6:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 80093ba:	e9c9 4600 	strd	r4, r6, [r9]
 80093be:	ddf1      	ble.n	80093a4 <_svfprintf_r+0x1024>
 80093c0:	aa2a      	add	r2, sp, #168	; 0xa8
 80093c2:	4651      	mov	r1, sl
 80093c4:	4638      	mov	r0, r7
 80093c6:	f002 f841 	bl	800b44c <__ssprint_r>
 80093ca:	2800      	cmp	r0, #0
 80093cc:	f47f a8ab 	bne.w	8008526 <_svfprintf_r+0x1a6>
 80093d0:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 80093d4:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 80093d8:	e7e6      	b.n	80093a8 <_svfprintf_r+0x1028>
 80093da:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80093dc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80093de:	f8c9 1000 	str.w	r1, [r9]
 80093e2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80093e4:	f8c9 1004 	str.w	r1, [r9, #4]
 80093e8:	3201      	adds	r2, #1
 80093ea:	440c      	add	r4, r1
 80093ec:	2a07      	cmp	r2, #7
 80093ee:	942c      	str	r4, [sp, #176]	; 0xb0
 80093f0:	922b      	str	r2, [sp, #172]	; 0xac
 80093f2:	f300 82b5 	bgt.w	8009960 <_svfprintf_r+0x15e0>
 80093f6:	f109 0908 	add.w	r9, r9, #8
 80093fa:	e7a7      	b.n	800934c <_svfprintf_r+0xfcc>
 80093fc:	2d00      	cmp	r5, #0
 80093fe:	bf08      	it	eq
 8009400:	2c0a      	cmpeq	r4, #10
 8009402:	4698      	mov	r8, r3
 8009404:	f4ff ad6d 	bcc.w	8008ee2 <_svfprintf_r+0xb62>
 8009408:	f408 6380 	and.w	r3, r8, #1024	; 0x400
 800940c:	2200      	movs	r2, #0
 800940e:	f8cd 9020 	str.w	r9, [sp, #32]
 8009412:	970a      	str	r7, [sp, #40]	; 0x28
 8009414:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8009418:	ae56      	add	r6, sp, #344	; 0x158
 800941a:	4691      	mov	r9, r2
 800941c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009420:	461f      	mov	r7, r3
 8009422:	e00a      	b.n	800943a <_svfprintf_r+0x10ba>
 8009424:	2300      	movs	r3, #0
 8009426:	4620      	mov	r0, r4
 8009428:	4629      	mov	r1, r5
 800942a:	220a      	movs	r2, #10
 800942c:	f7f7 fd2c 	bl	8000e88 <__aeabi_uldivmod>
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	ea54 0305 	orrs.w	r3, r4, r5
 8009438:	d046      	beq.n	80094c8 <_svfprintf_r+0x1148>
 800943a:	220a      	movs	r2, #10
 800943c:	2300      	movs	r3, #0
 800943e:	4620      	mov	r0, r4
 8009440:	4629      	mov	r1, r5
 8009442:	f7f7 fd21 	bl	8000e88 <__aeabi_uldivmod>
 8009446:	3230      	adds	r2, #48	; 0x30
 8009448:	f806 2c01 	strb.w	r2, [r6, #-1]
 800944c:	f109 0901 	add.w	r9, r9, #1
 8009450:	3e01      	subs	r6, #1
 8009452:	2f00      	cmp	r7, #0
 8009454:	d0e6      	beq.n	8009424 <_svfprintf_r+0x10a4>
 8009456:	f898 3000 	ldrb.w	r3, [r8]
 800945a:	4599      	cmp	r9, r3
 800945c:	d1e2      	bne.n	8009424 <_svfprintf_r+0x10a4>
 800945e:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8009462:	d0df      	beq.n	8009424 <_svfprintf_r+0x10a4>
 8009464:	2d00      	cmp	r5, #0
 8009466:	bf08      	it	eq
 8009468:	2c0a      	cmpeq	r4, #10
 800946a:	d3db      	bcc.n	8009424 <_svfprintf_r+0x10a4>
 800946c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800946e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009470:	1af6      	subs	r6, r6, r3
 8009472:	461a      	mov	r2, r3
 8009474:	4630      	mov	r0, r6
 8009476:	f001 ffb7 	bl	800b3e8 <strncpy>
 800947a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800947e:	2b00      	cmp	r3, #0
 8009480:	f000 8389 	beq.w	8009b96 <_svfprintf_r+0x1816>
 8009484:	f108 0801 	add.w	r8, r8, #1
 8009488:	f04f 0900 	mov.w	r9, #0
 800948c:	e7ca      	b.n	8009424 <_svfprintf_r+0x10a4>
 800948e:	aa2a      	add	r2, sp, #168	; 0xa8
 8009490:	9906      	ldr	r1, [sp, #24]
 8009492:	9803      	ldr	r0, [sp, #12]
 8009494:	f001 ffda 	bl	800b44c <__ssprint_r>
 8009498:	2800      	cmp	r0, #0
 800949a:	f47f a844 	bne.w	8008526 <_svfprintf_r+0x1a6>
 800949e:	e9dd 542b 	ldrd	r5, r4, [sp, #172]	; 0xac
 80094a2:	af2d      	add	r7, sp, #180	; 0xb4
 80094a4:	e4d6      	b.n	8008e54 <_svfprintf_r+0xad4>
 80094a6:	aa2a      	add	r2, sp, #168	; 0xa8
 80094a8:	9906      	ldr	r1, [sp, #24]
 80094aa:	9803      	ldr	r0, [sp, #12]
 80094ac:	f001 ffce 	bl	800b44c <__ssprint_r>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	f47f a838 	bne.w	8008526 <_svfprintf_r+0x1a6>
 80094b6:	e9dd 342b 	ldrd	r3, r4, [sp, #172]	; 0xac
 80094ba:	af2d      	add	r7, sp, #180	; 0xb4
 80094bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80094be:	e4d6      	b.n	8008e6e <_svfprintf_r+0xaee>
 80094c0:	2a01      	cmp	r2, #1
 80094c2:	f47f a8c2 	bne.w	800864a <_svfprintf_r+0x2ca>
 80094c6:	e50c      	b.n	8008ee2 <_svfprintf_r+0xb62>
 80094c8:	9b04      	ldr	r3, [sp, #16]
 80094ca:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80094ce:	1b9b      	subs	r3, r3, r6
 80094d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80094d4:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80094d8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80094da:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80094de:	9308      	str	r3, [sp, #32]
 80094e0:	f7ff b863 	b.w	80085aa <_svfprintf_r+0x22a>
 80094e4:	4621      	mov	r1, r4
 80094e6:	461c      	mov	r4, r3
 80094e8:	460b      	mov	r3, r1
 80094ea:	3201      	adds	r2, #1
 80094ec:	442c      	add	r4, r5
 80094ee:	2a07      	cmp	r2, #7
 80094f0:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 80094f4:	e9c9 3500 	strd	r3, r5, [r9]
 80094f8:	f77f a9ea 	ble.w	80088d0 <_svfprintf_r+0x550>
 80094fc:	e489      	b.n	8008e12 <_svfprintf_r+0xa92>
 80094fe:	aa2a      	add	r2, sp, #168	; 0xa8
 8009500:	9906      	ldr	r1, [sp, #24]
 8009502:	9803      	ldr	r0, [sp, #12]
 8009504:	f001 ffa2 	bl	800b44c <__ssprint_r>
 8009508:	2800      	cmp	r0, #0
 800950a:	f47f a80c 	bne.w	8008526 <_svfprintf_r+0x1a6>
 800950e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009510:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009514:	f7ff b990 	b.w	8008838 <_svfprintf_r+0x4b8>
 8009518:	aa2a      	add	r2, sp, #168	; 0xa8
 800951a:	9906      	ldr	r1, [sp, #24]
 800951c:	9803      	ldr	r0, [sp, #12]
 800951e:	f001 ff95 	bl	800b44c <__ssprint_r>
 8009522:	2800      	cmp	r0, #0
 8009524:	f47e afff 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009528:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800952c:	f7ff bbba 	b.w	8008ca4 <_svfprintf_r+0x924>
 8009530:	4614      	mov	r4, r2
 8009532:	463a      	mov	r2, r7
 8009534:	461f      	mov	r7, r3
 8009536:	4613      	mov	r3, r2
 8009538:	462a      	mov	r2, r5
 800953a:	3201      	adds	r2, #1
 800953c:	9208      	str	r2, [sp, #32]
 800953e:	f107 0208 	add.w	r2, r7, #8
 8009542:	e9c7 3a00 	strd	r3, sl, [r7]
 8009546:	9b08      	ldr	r3, [sp, #32]
 8009548:	932b      	str	r3, [sp, #172]	; 0xac
 800954a:	4454      	add	r4, sl
 800954c:	2b07      	cmp	r3, #7
 800954e:	942c      	str	r4, [sp, #176]	; 0xb0
 8009550:	f73f ae9a 	bgt.w	8009288 <_svfprintf_r+0xf08>
 8009554:	3301      	adds	r3, #1
 8009556:	9308      	str	r3, [sp, #32]
 8009558:	f102 0908 	add.w	r9, r2, #8
 800955c:	4617      	mov	r7, r2
 800955e:	e4ab      	b.n	8008eb8 <_svfprintf_r+0xb38>
 8009560:	9a05      	ldr	r2, [sp, #20]
 8009562:	601a      	str	r2, [r3, #0]
 8009564:	465e      	mov	r6, fp
 8009566:	f7ff ba02 	b.w	800896e <_svfprintf_r+0x5ee>
 800956a:	bf00      	nop
 800956c:	0800c008 	.word	0x0800c008
 8009570:	0800c024 	.word	0x0800c024
 8009574:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009576:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800957a:	18f3      	adds	r3, r6, r3
 800957c:	9308      	str	r3, [sp, #32]
 800957e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009580:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009584:	464a      	mov	r2, r9
 8009586:	960c      	str	r6, [sp, #48]	; 0x30
 8009588:	4fc2      	ldr	r7, [pc, #776]	; (8009894 <_svfprintf_r+0x1514>)
 800958a:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 800958e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8009592:	f8dd b018 	ldr.w	fp, [sp, #24]
 8009596:	4656      	mov	r6, sl
 8009598:	4621      	mov	r1, r4
 800959a:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d05e      	beq.n	8009660 <_svfprintf_r+0x12e0>
 80095a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d15f      	bne.n	8009668 <_svfprintf_r+0x12e8>
 80095a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80095aa:	3b01      	subs	r3, #1
 80095ac:	f108 38ff 	add.w	r8, r8, #4294967295
 80095b0:	9314      	str	r3, [sp, #80]	; 0x50
 80095b2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80095b4:	9818      	ldr	r0, [sp, #96]	; 0x60
 80095b6:	6010      	str	r0, [r2, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	4449      	add	r1, r9
 80095bc:	2b07      	cmp	r3, #7
 80095be:	912c      	str	r1, [sp, #176]	; 0xb0
 80095c0:	f8c2 9004 	str.w	r9, [r2, #4]
 80095c4:	932b      	str	r3, [sp, #172]	; 0xac
 80095c6:	dc53      	bgt.n	8009670 <_svfprintf_r+0x12f0>
 80095c8:	3208      	adds	r2, #8
 80095ca:	9808      	ldr	r0, [sp, #32]
 80095cc:	f898 3000 	ldrb.w	r3, [r8]
 80095d0:	1b85      	subs	r5, r0, r6
 80095d2:	429d      	cmp	r5, r3
 80095d4:	bfa8      	it	ge
 80095d6:	461d      	movge	r5, r3
 80095d8:	2d00      	cmp	r5, #0
 80095da:	dd0b      	ble.n	80095f4 <_svfprintf_r+0x1274>
 80095dc:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80095de:	6016      	str	r6, [r2, #0]
 80095e0:	3301      	adds	r3, #1
 80095e2:	4429      	add	r1, r5
 80095e4:	2b07      	cmp	r3, #7
 80095e6:	912c      	str	r1, [sp, #176]	; 0xb0
 80095e8:	6055      	str	r5, [r2, #4]
 80095ea:	932b      	str	r3, [sp, #172]	; 0xac
 80095ec:	dc4b      	bgt.n	8009686 <_svfprintf_r+0x1306>
 80095ee:	f898 3000 	ldrb.w	r3, [r8]
 80095f2:	3208      	adds	r2, #8
 80095f4:	2d00      	cmp	r5, #0
 80095f6:	bfac      	ite	ge
 80095f8:	1b5d      	subge	r5, r3, r5
 80095fa:	461d      	movlt	r5, r3
 80095fc:	2d00      	cmp	r5, #0
 80095fe:	dd2b      	ble.n	8009658 <_svfprintf_r+0x12d8>
 8009600:	2d10      	cmp	r5, #16
 8009602:	982b      	ldr	r0, [sp, #172]	; 0xac
 8009604:	dd1c      	ble.n	8009640 <_svfprintf_r+0x12c0>
 8009606:	2410      	movs	r4, #16
 8009608:	e004      	b.n	8009614 <_svfprintf_r+0x1294>
 800960a:	3d10      	subs	r5, #16
 800960c:	2d10      	cmp	r5, #16
 800960e:	f102 0208 	add.w	r2, r2, #8
 8009612:	dd15      	ble.n	8009640 <_svfprintf_r+0x12c0>
 8009614:	3001      	adds	r0, #1
 8009616:	3110      	adds	r1, #16
 8009618:	2807      	cmp	r0, #7
 800961a:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 800961e:	e9c2 7400 	strd	r7, r4, [r2]
 8009622:	ddf2      	ble.n	800960a <_svfprintf_r+0x128a>
 8009624:	aa2a      	add	r2, sp, #168	; 0xa8
 8009626:	4659      	mov	r1, fp
 8009628:	4650      	mov	r0, sl
 800962a:	f001 ff0f 	bl	800b44c <__ssprint_r>
 800962e:	2800      	cmp	r0, #0
 8009630:	f47e af79 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009634:	3d10      	subs	r5, #16
 8009636:	2d10      	cmp	r5, #16
 8009638:	e9dd 012b 	ldrd	r0, r1, [sp, #172]	; 0xac
 800963c:	aa2d      	add	r2, sp, #180	; 0xb4
 800963e:	dce9      	bgt.n	8009614 <_svfprintf_r+0x1294>
 8009640:	3001      	adds	r0, #1
 8009642:	4429      	add	r1, r5
 8009644:	2807      	cmp	r0, #7
 8009646:	e9cd 012b 	strd	r0, r1, [sp, #172]	; 0xac
 800964a:	e9c2 7500 	strd	r7, r5, [r2]
 800964e:	f73e af62 	bgt.w	8008516 <_svfprintf_r+0x196>
 8009652:	f898 3000 	ldrb.w	r3, [r8]
 8009656:	3208      	adds	r2, #8
 8009658:	441e      	add	r6, r3
 800965a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800965c:	2b00      	cmp	r3, #0
 800965e:	d1a0      	bne.n	80095a2 <_svfprintf_r+0x1222>
 8009660:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 80fb 	beq.w	800985e <_svfprintf_r+0x14de>
 8009668:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800966a:	3b01      	subs	r3, #1
 800966c:	930f      	str	r3, [sp, #60]	; 0x3c
 800966e:	e7a0      	b.n	80095b2 <_svfprintf_r+0x1232>
 8009670:	aa2a      	add	r2, sp, #168	; 0xa8
 8009672:	4659      	mov	r1, fp
 8009674:	4650      	mov	r0, sl
 8009676:	f001 fee9 	bl	800b44c <__ssprint_r>
 800967a:	2800      	cmp	r0, #0
 800967c:	f47e af53 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009680:	992c      	ldr	r1, [sp, #176]	; 0xb0
 8009682:	aa2d      	add	r2, sp, #180	; 0xb4
 8009684:	e7a1      	b.n	80095ca <_svfprintf_r+0x124a>
 8009686:	aa2a      	add	r2, sp, #168	; 0xa8
 8009688:	4659      	mov	r1, fp
 800968a:	4650      	mov	r0, sl
 800968c:	f001 fede 	bl	800b44c <__ssprint_r>
 8009690:	2800      	cmp	r0, #0
 8009692:	f47e af48 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009696:	f898 3000 	ldrb.w	r3, [r8]
 800969a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 800969c:	aa2d      	add	r2, sp, #180	; 0xb4
 800969e:	e7a9      	b.n	80095f4 <_svfprintf_r+0x1274>
 80096a0:	4630      	mov	r0, r6
 80096a2:	f7f6 fe4d 	bl	8000340 <strlen>
 80096a6:	46aa      	mov	sl, r5
 80096a8:	4603      	mov	r3, r0
 80096aa:	9008      	str	r0, [sp, #32]
 80096ac:	f7ff b9a6 	b.w	80089fc <_svfprintf_r+0x67c>
 80096b0:	f898 3000 	ldrb.w	r3, [r8]
 80096b4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80096b6:	aa2d      	add	r2, sp, #180	; 0xb4
 80096b8:	441e      	add	r6, r3
 80096ba:	e7ce      	b.n	800965a <_svfprintf_r+0x12da>
 80096bc:	f109 0908 	add.w	r9, r9, #8
 80096c0:	e636      	b.n	8009330 <_svfprintf_r+0xfb0>
 80096c2:	7814      	ldrb	r4, [r2, #0]
 80096c4:	9309      	str	r3, [sp, #36]	; 0x24
 80096c6:	2500      	movs	r5, #0
 80096c8:	f7ff b803 	b.w	80086d2 <_svfprintf_r+0x352>
 80096cc:	9a05      	ldr	r2, [sp, #20]
 80096ce:	801a      	strh	r2, [r3, #0]
 80096d0:	465e      	mov	r6, fp
 80096d2:	f7ff b94c 	b.w	800896e <_svfprintf_r+0x5ee>
 80096d6:	7814      	ldrb	r4, [r2, #0]
 80096d8:	9109      	str	r1, [sp, #36]	; 0x24
 80096da:	2500      	movs	r5, #0
 80096dc:	2201      	movs	r2, #1
 80096de:	f7fe bf47 	b.w	8008570 <_svfprintf_r+0x1f0>
 80096e2:	f991 4000 	ldrsb.w	r4, [r1]
 80096e6:	9209      	str	r2, [sp, #36]	; 0x24
 80096e8:	17e5      	asrs	r5, r4, #31
 80096ea:	4620      	mov	r0, r4
 80096ec:	4629      	mov	r1, r5
 80096ee:	f7fe bf92 	b.w	8008616 <_svfprintf_r+0x296>
 80096f2:	7814      	ldrb	r4, [r2, #0]
 80096f4:	9309      	str	r3, [sp, #36]	; 0x24
 80096f6:	2500      	movs	r5, #0
 80096f8:	f7fe bf37 	b.w	800856a <_svfprintf_r+0x1ea>
 80096fc:	f018 0f01 	tst.w	r8, #1
 8009700:	f43f a8e8 	beq.w	80088d4 <_svfprintf_r+0x554>
 8009704:	f7ff bb68 	b.w	8008dd8 <_svfprintf_r+0xa58>
 8009708:	2330      	movs	r3, #48	; 0x30
 800970a:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 800970e:	2358      	movs	r3, #88	; 0x58
 8009710:	f1ba 0f63 	cmp.w	sl, #99	; 0x63
 8009714:	f88d 308d 	strb.w	r3, [sp, #141]	; 0x8d
 8009718:	f048 0402 	orr.w	r4, r8, #2
 800971c:	f300 81b6 	bgt.w	8009a8c <_svfprintf_r+0x170c>
 8009720:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 8009724:	930e      	str	r3, [sp, #56]	; 0x38
 8009726:	f027 0320 	bic.w	r3, r7, #32
 800972a:	9304      	str	r3, [sp, #16]
 800972c:	2200      	movs	r2, #0
 800972e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009730:	920a      	str	r2, [sp, #40]	; 0x28
 8009732:	46a0      	mov	r8, r4
 8009734:	ae3d      	add	r6, sp, #244	; 0xf4
 8009736:	2b00      	cmp	r3, #0
 8009738:	f2c0 80e8 	blt.w	800990c <_svfprintf_r+0x158c>
 800973c:	ed9d 7b12 	vldr	d7, [sp, #72]	; 0x48
 8009740:	ed8d 7b1e 	vstr	d7, [sp, #120]	; 0x78
 8009744:	2300      	movs	r3, #0
 8009746:	930b      	str	r3, [sp, #44]	; 0x2c
 8009748:	2f61      	cmp	r7, #97	; 0x61
 800974a:	f000 8160 	beq.w	8009a0e <_svfprintf_r+0x168e>
 800974e:	2f41      	cmp	r7, #65	; 0x41
 8009750:	f47f acf8 	bne.w	8009144 <_svfprintf_r+0xdc4>
 8009754:	a824      	add	r0, sp, #144	; 0x90
 8009756:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 800975a:	f001 fe11 	bl	800b380 <frexp>
 800975e:	2200      	movs	r2, #0
 8009760:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009764:	ec51 0b10 	vmov	r0, r1, d0
 8009768:	f7f7 f866 	bl	8000838 <__aeabi_dmul>
 800976c:	2200      	movs	r2, #0
 800976e:	2300      	movs	r3, #0
 8009770:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009774:	f7f7 fac8 	bl	8000d08 <__aeabi_dcmpeq>
 8009778:	2800      	cmp	r0, #0
 800977a:	f040 8243 	bne.w	8009c04 <_svfprintf_r+0x1884>
 800977e:	4b46      	ldr	r3, [pc, #280]	; (8009898 <_svfprintf_r+0x1518>)
 8009780:	9308      	str	r3, [sp, #32]
 8009782:	f10a 34ff 	add.w	r4, sl, #4294967295
 8009786:	e9cd 9b0f 	strd	r9, fp, [sp, #60]	; 0x3c
 800978a:	9711      	str	r7, [sp, #68]	; 0x44
 800978c:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8009790:	46b1      	mov	r9, r6
 8009792:	9621      	str	r6, [sp, #132]	; 0x84
 8009794:	f8cd 8080 	str.w	r8, [sp, #128]	; 0x80
 8009798:	f8dd a020 	ldr.w	sl, [sp, #32]
 800979c:	e9dd 670c 	ldrd	r6, r7, [sp, #48]	; 0x30
 80097a0:	e003      	b.n	80097aa <_svfprintf_r+0x142a>
 80097a2:	f7f7 fab1 	bl	8000d08 <__aeabi_dcmpeq>
 80097a6:	bb20      	cbnz	r0, 80097f2 <_svfprintf_r+0x1472>
 80097a8:	46a9      	mov	r9, r5
 80097aa:	2200      	movs	r2, #0
 80097ac:	4b3b      	ldr	r3, [pc, #236]	; (800989c <_svfprintf_r+0x151c>)
 80097ae:	4630      	mov	r0, r6
 80097b0:	4639      	mov	r1, r7
 80097b2:	f7f7 f841 	bl	8000838 <__aeabi_dmul>
 80097b6:	460f      	mov	r7, r1
 80097b8:	4606      	mov	r6, r0
 80097ba:	f7f7 faed 	bl	8000d98 <__aeabi_d2iz>
 80097be:	4680      	mov	r8, r0
 80097c0:	f7f6 ffd0 	bl	8000764 <__aeabi_i2d>
 80097c4:	4602      	mov	r2, r0
 80097c6:	460b      	mov	r3, r1
 80097c8:	4630      	mov	r0, r6
 80097ca:	4639      	mov	r1, r7
 80097cc:	f7f6 fe7c 	bl	80004c8 <__aeabi_dsub>
 80097d0:	464d      	mov	r5, r9
 80097d2:	f81a c008 	ldrb.w	ip, [sl, r8]
 80097d6:	f805 cb01 	strb.w	ip, [r5], #1
 80097da:	f1b4 3fff 	cmp.w	r4, #4294967295
 80097de:	46a3      	mov	fp, r4
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	f04f 0200 	mov.w	r2, #0
 80097e8:	f04f 0300 	mov.w	r3, #0
 80097ec:	f104 34ff 	add.w	r4, r4, #4294967295
 80097f0:	d1d7      	bne.n	80097a2 <_svfprintf_r+0x1422>
 80097f2:	4630      	mov	r0, r6
 80097f4:	4639      	mov	r1, r7
 80097f6:	2200      	movs	r2, #0
 80097f8:	4b29      	ldr	r3, [pc, #164]	; (80098a0 <_svfprintf_r+0x1520>)
 80097fa:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80097fc:	f8dd a050 	ldr.w	sl, [sp, #80]	; 0x50
 8009800:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
 8009804:	4644      	mov	r4, r8
 8009806:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 800980a:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800980e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8009812:	9e21      	ldr	r6, [sp, #132]	; 0x84
 8009814:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8009818:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800981c:	f7f7 fa9c 	bl	8000d58 <__aeabi_dcmpgt>
 8009820:	2800      	cmp	r0, #0
 8009822:	f040 80aa 	bne.w	800997a <_svfprintf_r+0x15fa>
 8009826:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800982a:	2200      	movs	r2, #0
 800982c:	4b1c      	ldr	r3, [pc, #112]	; (80098a0 <_svfprintf_r+0x1520>)
 800982e:	f7f7 fa6b 	bl	8000d08 <__aeabi_dcmpeq>
 8009832:	b118      	cbz	r0, 800983c <_svfprintf_r+0x14bc>
 8009834:	4623      	mov	r3, r4
 8009836:	07db      	lsls	r3, r3, #31
 8009838:	f100 809f 	bmi.w	800997a <_svfprintf_r+0x15fa>
 800983c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800983e:	2b00      	cmp	r3, #0
 8009840:	db07      	blt.n	8009852 <_svfprintf_r+0x14d2>
 8009842:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009844:	3301      	adds	r3, #1
 8009846:	442b      	add	r3, r5
 8009848:	2230      	movs	r2, #48	; 0x30
 800984a:	f805 2b01 	strb.w	r2, [r5], #1
 800984e:	42ab      	cmp	r3, r5
 8009850:	d1fb      	bne.n	800984a <_svfprintf_r+0x14ca>
 8009852:	1bab      	subs	r3, r5, r6
 8009854:	4640      	mov	r0, r8
 8009856:	9310      	str	r3, [sp, #64]	; 0x40
 8009858:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 800985c:	e498      	b.n	8009190 <_svfprintf_r+0xe10>
 800985e:	46b2      	mov	sl, r6
 8009860:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009862:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009864:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8009868:	18f3      	adds	r3, r6, r3
 800986a:	459a      	cmp	sl, r3
 800986c:	4691      	mov	r9, r2
 800986e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8009872:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8009876:	460c      	mov	r4, r1
 8009878:	bf28      	it	cs
 800987a:	469a      	movcs	sl, r3
 800987c:	e55f      	b.n	800933e <_svfprintf_r+0xfbe>
 800987e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009880:	1cda      	adds	r2, r3, #3
 8009882:	db01      	blt.n	8009888 <_svfprintf_r+0x1508>
 8009884:	4553      	cmp	r3, sl
 8009886:	dd14      	ble.n	80098b2 <_svfprintf_r+0x1532>
 8009888:	3f02      	subs	r7, #2
 800988a:	f027 0320 	bic.w	r3, r7, #32
 800988e:	9304      	str	r3, [sp, #16]
 8009890:	e488      	b.n	80091a4 <_svfprintf_r+0xe24>
 8009892:	bf00      	nop
 8009894:	0800c024 	.word	0x0800c024
 8009898:	0800bff4 	.word	0x0800bff4
 800989c:	40300000 	.word	0x40300000
 80098a0:	3fe00000 	.word	0x3fe00000
 80098a4:	222d      	movs	r2, #45	; 0x2d
 80098a6:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80098aa:	f04f 0a00 	mov.w	sl, #0
 80098ae:	f7fe be8b 	b.w	80085c8 <_svfprintf_r+0x248>
 80098b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098b4:	9910      	ldr	r1, [sp, #64]	; 0x40
 80098b6:	428b      	cmp	r3, r1
 80098b8:	f2c0 8090 	blt.w	80099dc <_svfprintf_r+0x165c>
 80098bc:	07c2      	lsls	r2, r0, #31
 80098be:	f140 81a6 	bpl.w	8009c0e <_svfprintf_r+0x188e>
 80098c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80098c4:	4413      	add	r3, r2
 80098c6:	9308      	str	r3, [sp, #32]
 80098c8:	0547      	lsls	r7, r0, #21
 80098ca:	d503      	bpl.n	80098d4 <_svfprintf_r+0x1554>
 80098cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f300 80ef 	bgt.w	8009ab2 <_svfprintf_r+0x1732>
 80098d4:	9b08      	ldr	r3, [sp, #32]
 80098d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80098da:	9304      	str	r3, [sp, #16]
 80098dc:	2767      	movs	r7, #103	; 0x67
 80098de:	2300      	movs	r3, #0
 80098e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80098e2:	9314      	str	r3, [sp, #80]	; 0x50
 80098e4:	e49e      	b.n	8009224 <_svfprintf_r+0xea4>
 80098e6:	222d      	movs	r2, #45	; 0x2d
 80098e8:	f88d 208b 	strb.w	r2, [sp, #139]	; 0x8b
 80098ec:	f7ff b91a 	b.w	8008b24 <_svfprintf_r+0x7a4>
 80098f0:	aa2a      	add	r2, sp, #168	; 0xa8
 80098f2:	9906      	ldr	r1, [sp, #24]
 80098f4:	9803      	ldr	r0, [sp, #12]
 80098f6:	f001 fda9 	bl	800b44c <__ssprint_r>
 80098fa:	2800      	cmp	r0, #0
 80098fc:	f47e ae13 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009900:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009902:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009906:	f7ff bb37 	b.w	8008f78 <_svfprintf_r+0xbf8>
 800990a:	900a      	str	r0, [sp, #40]	; 0x28
 800990c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8009910:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8009914:	931f      	str	r3, [sp, #124]	; 0x7c
 8009916:	232d      	movs	r3, #45	; 0x2d
 8009918:	911e      	str	r1, [sp, #120]	; 0x78
 800991a:	930b      	str	r3, [sp, #44]	; 0x2c
 800991c:	e714      	b.n	8009748 <_svfprintf_r+0x13c8>
 800991e:	2330      	movs	r3, #48	; 0x30
 8009920:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
 8009924:	2378      	movs	r3, #120	; 0x78
 8009926:	e6f3      	b.n	8009710 <_svfprintf_r+0x1390>
 8009928:	f8cd a010 	str.w	sl, [sp, #16]
 800992c:	f8cd a020 	str.w	sl, [sp, #32]
 8009930:	9409      	str	r4, [sp, #36]	; 0x24
 8009932:	4682      	mov	sl, r0
 8009934:	900f      	str	r0, [sp, #60]	; 0x3c
 8009936:	9014      	str	r0, [sp, #80]	; 0x50
 8009938:	9011      	str	r0, [sp, #68]	; 0x44
 800993a:	f89d 208b 	ldrb.w	r2, [sp, #139]	; 0x8b
 800993e:	f7fe be40 	b.w	80085c2 <_svfprintf_r+0x242>
 8009942:	aa2a      	add	r2, sp, #168	; 0xa8
 8009944:	9906      	ldr	r1, [sp, #24]
 8009946:	9803      	ldr	r0, [sp, #12]
 8009948:	f001 fd80 	bl	800b44c <__ssprint_r>
 800994c:	2800      	cmp	r0, #0
 800994e:	f47e adea 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009952:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009954:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
 8009958:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 800995c:	f7ff ba4c 	b.w	8008df8 <_svfprintf_r+0xa78>
 8009960:	aa2a      	add	r2, sp, #168	; 0xa8
 8009962:	9906      	ldr	r1, [sp, #24]
 8009964:	9803      	ldr	r0, [sp, #12]
 8009966:	f001 fd71 	bl	800b44c <__ssprint_r>
 800996a:	2800      	cmp	r0, #0
 800996c:	f47e addb 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009970:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009972:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009974:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009978:	e4e8      	b.n	800934c <_svfprintf_r+0xfcc>
 800997a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800997c:	9328      	str	r3, [sp, #160]	; 0xa0
 800997e:	9b08      	ldr	r3, [sp, #32]
 8009980:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009984:	7bd9      	ldrb	r1, [r3, #15]
 8009986:	4291      	cmp	r1, r2
 8009988:	462b      	mov	r3, r5
 800998a:	d109      	bne.n	80099a0 <_svfprintf_r+0x1620>
 800998c:	2030      	movs	r0, #48	; 0x30
 800998e:	f803 0c01 	strb.w	r0, [r3, #-1]
 8009992:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009994:	1e5a      	subs	r2, r3, #1
 8009996:	9228      	str	r2, [sp, #160]	; 0xa0
 8009998:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800999c:	4291      	cmp	r1, r2
 800999e:	d0f6      	beq.n	800998e <_svfprintf_r+0x160e>
 80099a0:	2a39      	cmp	r2, #57	; 0x39
 80099a2:	bf0b      	itete	eq
 80099a4:	9a08      	ldreq	r2, [sp, #32]
 80099a6:	3201      	addne	r2, #1
 80099a8:	7a92      	ldrbeq	r2, [r2, #10]
 80099aa:	b2d2      	uxtbne	r2, r2
 80099ac:	f803 2c01 	strb.w	r2, [r3, #-1]
 80099b0:	e74f      	b.n	8009852 <_svfprintf_r+0x14d2>
 80099b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f340 8152 	ble.w	8009c5e <_svfprintf_r+0x18de>
 80099ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099bc:	f1ba 0f00 	cmp.w	sl, #0
 80099c0:	f040 80eb 	bne.w	8009b9a <_svfprintf_r+0x181a>
 80099c4:	07c4      	lsls	r4, r0, #31
 80099c6:	f100 80e8 	bmi.w	8009b9a <_svfprintf_r+0x181a>
 80099ca:	9308      	str	r3, [sp, #32]
 80099cc:	2766      	movs	r7, #102	; 0x66
 80099ce:	0543      	lsls	r3, r0, #21
 80099d0:	d470      	bmi.n	8009ab4 <_svfprintf_r+0x1734>
 80099d2:	9b08      	ldr	r3, [sp, #32]
 80099d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	e780      	b.n	80098de <_svfprintf_r+0x155e>
 80099dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80099de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80099e0:	4413      	add	r3, r2
 80099e2:	9308      	str	r3, [sp, #32]
 80099e4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f340 8148 	ble.w	8009c7c <_svfprintf_r+0x18fc>
 80099ec:	2767      	movs	r7, #103	; 0x67
 80099ee:	e7ee      	b.n	80099ce <_svfprintf_r+0x164e>
 80099f0:	aa2a      	add	r2, sp, #168	; 0xa8
 80099f2:	9906      	ldr	r1, [sp, #24]
 80099f4:	9803      	ldr	r0, [sp, #12]
 80099f6:	f001 fd29 	bl	800b44c <__ssprint_r>
 80099fa:	2800      	cmp	r0, #0
 80099fc:	f47e ad93 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009a00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009a02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009a04:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009a0c:	e4b6      	b.n	800937c <_svfprintf_r+0xffc>
 8009a0e:	a824      	add	r0, sp, #144	; 0x90
 8009a10:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8009a14:	f001 fcb4 	bl	800b380 <frexp>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009a1e:	ec51 0b10 	vmov	r0, r1, d0
 8009a22:	f7f6 ff09 	bl	8000838 <__aeabi_dmul>
 8009a26:	2200      	movs	r2, #0
 8009a28:	2300      	movs	r3, #0
 8009a2a:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a2e:	f7f7 f96b 	bl	8000d08 <__aeabi_dcmpeq>
 8009a32:	b108      	cbz	r0, 8009a38 <_svfprintf_r+0x16b8>
 8009a34:	2301      	movs	r3, #1
 8009a36:	9324      	str	r3, [sp, #144]	; 0x90
 8009a38:	4bba      	ldr	r3, [pc, #744]	; (8009d24 <_svfprintf_r+0x19a4>)
 8009a3a:	9308      	str	r3, [sp, #32]
 8009a3c:	e6a1      	b.n	8009782 <_svfprintf_r+0x1402>
 8009a3e:	425d      	negs	r5, r3
 8009a40:	3310      	adds	r3, #16
 8009a42:	4bb9      	ldr	r3, [pc, #740]	; (8009d28 <_svfprintf_r+0x19a8>)
 8009a44:	f280 809a 	bge.w	8009b7c <_svfprintf_r+0x17fc>
 8009a48:	4619      	mov	r1, r3
 8009a4a:	2710      	movs	r7, #16
 8009a4c:	4623      	mov	r3, r4
 8009a4e:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8009a52:	460c      	mov	r4, r1
 8009a54:	e005      	b.n	8009a62 <_svfprintf_r+0x16e2>
 8009a56:	f109 0908 	add.w	r9, r9, #8
 8009a5a:	3d10      	subs	r5, #16
 8009a5c:	2d10      	cmp	r5, #16
 8009a5e:	f340 808a 	ble.w	8009b76 <_svfprintf_r+0x17f6>
 8009a62:	3201      	adds	r2, #1
 8009a64:	3310      	adds	r3, #16
 8009a66:	2a07      	cmp	r2, #7
 8009a68:	e9cd 232b 	strd	r2, r3, [sp, #172]	; 0xac
 8009a6c:	e9c9 4700 	strd	r4, r7, [r9]
 8009a70:	ddf1      	ble.n	8009a56 <_svfprintf_r+0x16d6>
 8009a72:	aa2a      	add	r2, sp, #168	; 0xa8
 8009a74:	9906      	ldr	r1, [sp, #24]
 8009a76:	4650      	mov	r0, sl
 8009a78:	f001 fce8 	bl	800b44c <__ssprint_r>
 8009a7c:	2800      	cmp	r0, #0
 8009a7e:	f47e ad52 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009a82:	e9dd 232b 	ldrd	r2, r3, [sp, #172]	; 0xac
 8009a86:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009a8a:	e7e6      	b.n	8009a5a <_svfprintf_r+0x16da>
 8009a8c:	f10a 0101 	add.w	r1, sl, #1
 8009a90:	9803      	ldr	r0, [sp, #12]
 8009a92:	f7fd ffd7 	bl	8007a44 <_malloc_r>
 8009a96:	4606      	mov	r6, r0
 8009a98:	2800      	cmp	r0, #0
 8009a9a:	f000 814f 	beq.w	8009d3c <_svfprintf_r+0x19bc>
 8009a9e:	f448 7381 	orr.w	r3, r8, #258	; 0x102
 8009aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8009aa4:	f027 0320 	bic.w	r3, r7, #32
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	46a0      	mov	r8, r4
 8009aac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009aae:	900a      	str	r0, [sp, #40]	; 0x28
 8009ab0:	e641      	b.n	8009736 <_svfprintf_r+0x13b6>
 8009ab2:	2767      	movs	r7, #103	; 0x67
 8009ab4:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	920f      	str	r2, [sp, #60]	; 0x3c
 8009aba:	9214      	str	r2, [sp, #80]	; 0x50
 8009abc:	7803      	ldrb	r3, [r0, #0]
 8009abe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009ac0:	2bff      	cmp	r3, #255	; 0xff
 8009ac2:	d00c      	beq.n	8009ade <_svfprintf_r+0x175e>
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	da0a      	bge.n	8009ade <_svfprintf_r+0x175e>
 8009ac8:	7841      	ldrb	r1, [r0, #1]
 8009aca:	1ad2      	subs	r2, r2, r3
 8009acc:	b1b1      	cbz	r1, 8009afc <_svfprintf_r+0x177c>
 8009ace:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9314      	str	r3, [sp, #80]	; 0x50
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	2bff      	cmp	r3, #255	; 0xff
 8009ad8:	f100 0001 	add.w	r0, r0, #1
 8009adc:	d1f2      	bne.n	8009ac4 <_svfprintf_r+0x1744>
 8009ade:	9211      	str	r2, [sp, #68]	; 0x44
 8009ae0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ae2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009ae4:	9908      	ldr	r1, [sp, #32]
 8009ae6:	901a      	str	r0, [sp, #104]	; 0x68
 8009ae8:	4413      	add	r3, r2
 8009aea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8009aec:	fb02 1303 	mla	r3, r2, r3, r1
 8009af0:	9308      	str	r3, [sp, #32]
 8009af2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	f7ff bb94 	b.w	8009224 <_svfprintf_r+0xea4>
 8009afc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009afe:	3101      	adds	r1, #1
 8009b00:	910f      	str	r1, [sp, #60]	; 0x3c
 8009b02:	e7dd      	b.n	8009ac0 <_svfprintf_r+0x1740>
 8009b04:	aa28      	add	r2, sp, #160	; 0xa0
 8009b06:	ab25      	add	r3, sp, #148	; 0x94
 8009b08:	e9cd 3200 	strd	r3, r2, [sp]
 8009b0c:	2103      	movs	r1, #3
 8009b0e:	ab24      	add	r3, sp, #144	; 0x90
 8009b10:	4652      	mov	r2, sl
 8009b12:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8009b16:	9803      	ldr	r0, [sp, #12]
 8009b18:	f000 fa0a 	bl	8009f30 <_dtoa_r>
 8009b1c:	4655      	mov	r5, sl
 8009b1e:	4606      	mov	r6, r0
 8009b20:	eb00 040a 	add.w	r4, r0, sl
 8009b24:	7833      	ldrb	r3, [r6, #0]
 8009b26:	2b30      	cmp	r3, #48	; 0x30
 8009b28:	f000 80c9 	beq.w	8009cbe <_svfprintf_r+0x193e>
 8009b2c:	9d24      	ldr	r5, [sp, #144]	; 0x90
 8009b2e:	442c      	add	r4, r5
 8009b30:	2200      	movs	r2, #0
 8009b32:	2300      	movs	r3, #0
 8009b34:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8009b38:	f7f7 f8e6 	bl	8000d08 <__aeabi_dcmpeq>
 8009b3c:	b110      	cbz	r0, 8009b44 <_svfprintf_r+0x17c4>
 8009b3e:	4623      	mov	r3, r4
 8009b40:	f7ff bb21 	b.w	8009186 <_svfprintf_r+0xe06>
 8009b44:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009b46:	42a3      	cmp	r3, r4
 8009b48:	f4bf ab1d 	bcs.w	8009186 <_svfprintf_r+0xe06>
 8009b4c:	2130      	movs	r1, #48	; 0x30
 8009b4e:	1c5a      	adds	r2, r3, #1
 8009b50:	9228      	str	r2, [sp, #160]	; 0xa0
 8009b52:	7019      	strb	r1, [r3, #0]
 8009b54:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009b56:	429c      	cmp	r4, r3
 8009b58:	d8f9      	bhi.n	8009b4e <_svfprintf_r+0x17ce>
 8009b5a:	f7ff bb14 	b.w	8009186 <_svfprintf_r+0xe06>
 8009b5e:	f1ba 0f00 	cmp.w	sl, #0
 8009b62:	f000 8086 	beq.w	8009c72 <_svfprintf_r+0x18f2>
 8009b66:	900a      	str	r0, [sp, #40]	; 0x28
 8009b68:	e5e5      	b.n	8009736 <_svfprintf_r+0x13b6>
 8009b6a:	900a      	str	r0, [sp, #40]	; 0x28
 8009b6c:	f04f 0a06 	mov.w	sl, #6
 8009b70:	e5e1      	b.n	8009736 <_svfprintf_r+0x13b6>
 8009b72:	1974      	adds	r4, r6, r5
 8009b74:	e7dc      	b.n	8009b30 <_svfprintf_r+0x17b0>
 8009b76:	4621      	mov	r1, r4
 8009b78:	461c      	mov	r4, r3
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	3201      	adds	r2, #1
 8009b7e:	442c      	add	r4, r5
 8009b80:	2a07      	cmp	r2, #7
 8009b82:	e9cd 242b 	strd	r2, r4, [sp, #172]	; 0xac
 8009b86:	e9c9 3500 	strd	r3, r5, [r9]
 8009b8a:	f300 80b0 	bgt.w	8009cee <_svfprintf_r+0x196e>
 8009b8e:	f109 0908 	add.w	r9, r9, #8
 8009b92:	f7ff b934 	b.w	8008dfe <_svfprintf_r+0xa7e>
 8009b96:	4699      	mov	r9, r3
 8009b98:	e444      	b.n	8009424 <_svfprintf_r+0x10a4>
 8009b9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009b9c:	4413      	add	r3, r2
 8009b9e:	4453      	add	r3, sl
 8009ba0:	9308      	str	r3, [sp, #32]
 8009ba2:	2766      	movs	r7, #102	; 0x66
 8009ba4:	e713      	b.n	80099ce <_svfprintf_r+0x164e>
 8009ba6:	f10d 0ca7 	add.w	ip, sp, #167	; 0xa7
 8009baa:	4664      	mov	r4, ip
 8009bac:	4d5f      	ldr	r5, [pc, #380]	; (8009d2c <_svfprintf_r+0x19ac>)
 8009bae:	e000      	b.n	8009bb2 <_svfprintf_r+0x1832>
 8009bb0:	4614      	mov	r4, r2
 8009bb2:	fba5 1203 	umull	r1, r2, r5, r3
 8009bb6:	08d2      	lsrs	r2, r2, #3
 8009bb8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8009bbc:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8009bc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	2b09      	cmp	r3, #9
 8009bc8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009bcc:	f104 32ff 	add.w	r2, r4, #4294967295
 8009bd0:	dcee      	bgt.n	8009bb0 <_svfprintf_r+0x1830>
 8009bd2:	3330      	adds	r3, #48	; 0x30
 8009bd4:	3c02      	subs	r4, #2
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	45a4      	cmp	ip, r4
 8009bda:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009bde:	f240 8094 	bls.w	8009d0a <_svfprintf_r+0x198a>
 8009be2:	f10d 049a 	add.w	r4, sp, #154	; 0x9a
 8009be6:	4611      	mov	r1, r2
 8009be8:	e001      	b.n	8009bee <_svfprintf_r+0x186e>
 8009bea:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009bee:	f804 3b01 	strb.w	r3, [r4], #1
 8009bf2:	458c      	cmp	ip, r1
 8009bf4:	d1f9      	bne.n	8009bea <_svfprintf_r+0x186a>
 8009bf6:	ab2a      	add	r3, sp, #168	; 0xa8
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8009bfe:	4413      	add	r3, r2
 8009c00:	f7ff baf7 	b.w	80091f2 <_svfprintf_r+0xe72>
 8009c04:	2301      	movs	r3, #1
 8009c06:	9324      	str	r3, [sp, #144]	; 0x90
 8009c08:	4b49      	ldr	r3, [pc, #292]	; (8009d30 <_svfprintf_r+0x19b0>)
 8009c0a:	9308      	str	r3, [sp, #32]
 8009c0c:	e5b9      	b.n	8009782 <_svfprintf_r+0x1402>
 8009c0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c10:	9308      	str	r3, [sp, #32]
 8009c12:	e659      	b.n	80098c8 <_svfprintf_r+0x1548>
 8009c14:	aa28      	add	r2, sp, #160	; 0xa0
 8009c16:	ab25      	add	r3, sp, #148	; 0x94
 8009c18:	e9cd 3200 	strd	r3, r2, [sp]
 8009c1c:	2103      	movs	r1, #3
 8009c1e:	ab24      	add	r3, sp, #144	; 0x90
 8009c20:	4652      	mov	r2, sl
 8009c22:	ed9d 0b1e 	vldr	d0, [sp, #120]	; 0x78
 8009c26:	9803      	ldr	r0, [sp, #12]
 8009c28:	f000 f982 	bl	8009f30 <_dtoa_r>
 8009c2c:	4655      	mov	r5, sl
 8009c2e:	4606      	mov	r6, r0
 8009c30:	2f46      	cmp	r7, #70	; 0x46
 8009c32:	eb06 0405 	add.w	r4, r6, r5
 8009c36:	f43f af75 	beq.w	8009b24 <_svfprintf_r+0x17a4>
 8009c3a:	e779      	b.n	8009b30 <_svfprintf_r+0x17b0>
 8009c3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009c3e:	4e3d      	ldr	r6, [pc, #244]	; (8009d34 <_svfprintf_r+0x19b4>)
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	bfb6      	itet	lt
 8009c44:	222d      	movlt	r2, #45	; 0x2d
 8009c46:	f89d 208b 	ldrbge.w	r2, [sp, #139]	; 0x8b
 8009c4a:	f88d 208b 	strblt.w	r2, [sp, #139]	; 0x8b
 8009c4e:	4b3a      	ldr	r3, [pc, #232]	; (8009d38 <_svfprintf_r+0x19b8>)
 8009c50:	f7fe bf6a 	b.w	8008b28 <_svfprintf_r+0x7a8>
 8009c54:	07c5      	lsls	r5, r0, #31
 8009c56:	f57f aad9 	bpl.w	800920c <_svfprintf_r+0xe8c>
 8009c5a:	f7ff bad3 	b.w	8009204 <_svfprintf_r+0xe84>
 8009c5e:	f1ba 0f00 	cmp.w	sl, #0
 8009c62:	d117      	bne.n	8009c94 <_svfprintf_r+0x1914>
 8009c64:	07c1      	lsls	r1, r0, #31
 8009c66:	d415      	bmi.n	8009c94 <_svfprintf_r+0x1914>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	9304      	str	r3, [sp, #16]
 8009c6c:	9308      	str	r3, [sp, #32]
 8009c6e:	2766      	movs	r7, #102	; 0x66
 8009c70:	e635      	b.n	80098de <_svfprintf_r+0x155e>
 8009c72:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8009c76:	f04f 0a01 	mov.w	sl, #1
 8009c7a:	e55c      	b.n	8009736 <_svfprintf_r+0x13b6>
 8009c7c:	9a08      	ldr	r2, [sp, #32]
 8009c7e:	f1c3 0301 	rsb	r3, r3, #1
 8009c82:	441a      	add	r2, r3
 8009c84:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009c88:	9208      	str	r2, [sp, #32]
 8009c8a:	9304      	str	r3, [sp, #16]
 8009c8c:	2767      	movs	r7, #103	; 0x67
 8009c8e:	e626      	b.n	80098de <_svfprintf_r+0x155e>
 8009c90:	464a      	mov	r2, r9
 8009c92:	e456      	b.n	8009542 <_svfprintf_r+0x11c2>
 8009c94:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009c96:	3301      	adds	r3, #1
 8009c98:	4453      	add	r3, sl
 8009c9a:	9308      	str	r3, [sp, #32]
 8009c9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	2766      	movs	r7, #102	; 0x66
 8009ca4:	e61b      	b.n	80098de <_svfprintf_r+0x155e>
 8009ca6:	2f47      	cmp	r7, #71	; 0x47
 8009ca8:	f47f af63 	bne.w	8009b72 <_svfprintf_r+0x17f2>
 8009cac:	f018 0f01 	tst.w	r8, #1
 8009cb0:	f43f aa68 	beq.w	8009184 <_svfprintf_r+0xe04>
 8009cb4:	e7bc      	b.n	8009c30 <_svfprintf_r+0x18b0>
 8009cb6:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
 8009cba:	f7ff ba97 	b.w	80091ec <_svfprintf_r+0xe6c>
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e9dd 011e 	ldrd	r0, r1, [sp, #120]	; 0x78
 8009cc6:	f7f7 f81f 	bl	8000d08 <__aeabi_dcmpeq>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	f47f af2e 	bne.w	8009b2c <_svfprintf_r+0x17ac>
 8009cd0:	f1c5 0501 	rsb	r5, r5, #1
 8009cd4:	9524      	str	r5, [sp, #144]	; 0x90
 8009cd6:	e72a      	b.n	8009b2e <_svfprintf_r+0x17ae>
 8009cd8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cda:	f89b 7001 	ldrb.w	r7, [fp, #1]
 8009cde:	680b      	ldr	r3, [r1, #0]
 8009ce0:	ea43 7ae3 	orr.w	sl, r3, r3, asr #31
 8009ce4:	1d0b      	adds	r3, r1, #4
 8009ce6:	4693      	mov	fp, r2
 8009ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cea:	f7fe bba2 	b.w	8008432 <_svfprintf_r+0xb2>
 8009cee:	aa2a      	add	r2, sp, #168	; 0xa8
 8009cf0:	9906      	ldr	r1, [sp, #24]
 8009cf2:	9803      	ldr	r0, [sp, #12]
 8009cf4:	f001 fbaa 	bl	800b44c <__ssprint_r>
 8009cf8:	2800      	cmp	r0, #0
 8009cfa:	f47e ac14 	bne.w	8008526 <_svfprintf_r+0x1a6>
 8009cfe:	e9dd 242b 	ldrd	r2, r4, [sp, #172]	; 0xac
 8009d02:	f10d 09b4 	add.w	r9, sp, #180	; 0xb4
 8009d06:	f7ff b87a 	b.w	8008dfe <_svfprintf_r+0xa7e>
 8009d0a:	f10d 039a 	add.w	r3, sp, #154	; 0x9a
 8009d0e:	f7ff ba70 	b.w	80091f2 <_svfprintf_r+0xe72>
 8009d12:	9a03      	ldr	r2, [sp, #12]
 8009d14:	230c      	movs	r3, #12
 8009d16:	6013      	str	r3, [r2, #0]
 8009d18:	f04f 33ff 	mov.w	r3, #4294967295
 8009d1c:	9305      	str	r3, [sp, #20]
 8009d1e:	f7fe bc11 	b.w	8008544 <_svfprintf_r+0x1c4>
 8009d22:	bf00      	nop
 8009d24:	0800bfe0 	.word	0x0800bfe0
 8009d28:	0800c024 	.word	0x0800c024
 8009d2c:	cccccccd 	.word	0xcccccccd
 8009d30:	0800bff4 	.word	0x0800bff4
 8009d34:	0800bfdc 	.word	0x0800bfdc
 8009d38:	0800bfd8 	.word	0x0800bfd8
 8009d3c:	9a06      	ldr	r2, [sp, #24]
 8009d3e:	8993      	ldrh	r3, [r2, #12]
 8009d40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d44:	8193      	strh	r3, [r2, #12]
 8009d46:	f7fe bbf6 	b.w	8008536 <_svfprintf_r+0x1b6>
 8009d4a:	bf00      	nop

08009d4c <__register_exitproc>:
 8009d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d50:	4d2b      	ldr	r5, [pc, #172]	; (8009e00 <__register_exitproc+0xb4>)
 8009d52:	4606      	mov	r6, r0
 8009d54:	6828      	ldr	r0, [r5, #0]
 8009d56:	4698      	mov	r8, r3
 8009d58:	460f      	mov	r7, r1
 8009d5a:	4691      	mov	r9, r2
 8009d5c:	f7fe fb0c 	bl	8008378 <__retarget_lock_acquire_recursive>
 8009d60:	4b28      	ldr	r3, [pc, #160]	; (8009e04 <__register_exitproc+0xb8>)
 8009d62:	681c      	ldr	r4, [r3, #0]
 8009d64:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d03d      	beq.n	8009de8 <__register_exitproc+0x9c>
 8009d6c:	685a      	ldr	r2, [r3, #4]
 8009d6e:	2a1f      	cmp	r2, #31
 8009d70:	dc0d      	bgt.n	8009d8e <__register_exitproc+0x42>
 8009d72:	f102 0c01 	add.w	ip, r2, #1
 8009d76:	bb16      	cbnz	r6, 8009dbe <__register_exitproc+0x72>
 8009d78:	3202      	adds	r2, #2
 8009d7a:	f8c3 c004 	str.w	ip, [r3, #4]
 8009d7e:	6828      	ldr	r0, [r5, #0]
 8009d80:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
 8009d84:	f7fe fafa 	bl	800837c <__retarget_lock_release_recursive>
 8009d88:	2000      	movs	r0, #0
 8009d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	; (8009e08 <__register_exitproc+0xbc>)
 8009d90:	b37b      	cbz	r3, 8009df2 <__register_exitproc+0xa6>
 8009d92:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8009d96:	f7fd fe4d 	bl	8007a34 <malloc>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	b348      	cbz	r0, 8009df2 <__register_exitproc+0xa6>
 8009d9e:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
 8009da2:	2100      	movs	r1, #0
 8009da4:	e9c0 2100 	strd	r2, r1, [r0]
 8009da8:	f04f 0c01 	mov.w	ip, #1
 8009dac:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
 8009db0:	460a      	mov	r2, r1
 8009db2:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8009db6:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
 8009dba:	2e00      	cmp	r6, #0
 8009dbc:	d0dc      	beq.n	8009d78 <__register_exitproc+0x2c>
 8009dbe:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8009dc2:	2401      	movs	r4, #1
 8009dc4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8009dc8:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
 8009dcc:	4094      	lsls	r4, r2
 8009dce:	4320      	orrs	r0, r4
 8009dd0:	2e02      	cmp	r6, #2
 8009dd2:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
 8009dd6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8009dda:	d1cd      	bne.n	8009d78 <__register_exitproc+0x2c>
 8009ddc:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
 8009de0:	430c      	orrs	r4, r1
 8009de2:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
 8009de6:	e7c7      	b.n	8009d78 <__register_exitproc+0x2c>
 8009de8:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
 8009dec:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
 8009df0:	e7bc      	b.n	8009d6c <__register_exitproc+0x20>
 8009df2:	6828      	ldr	r0, [r5, #0]
 8009df4:	f7fe fac2 	bl	800837c <__retarget_lock_release_recursive>
 8009df8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dfc:	e7c5      	b.n	8009d8a <__register_exitproc+0x3e>
 8009dfe:	bf00      	nop
 8009e00:	200008a8 	.word	0x200008a8
 8009e04:	0800bfcc 	.word	0x0800bfcc
 8009e08:	08007a35 	.word	0x08007a35

08009e0c <quorem>:
 8009e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e10:	6903      	ldr	r3, [r0, #16]
 8009e12:	690f      	ldr	r7, [r1, #16]
 8009e14:	42bb      	cmp	r3, r7
 8009e16:	b083      	sub	sp, #12
 8009e18:	f2c0 8086 	blt.w	8009f28 <quorem+0x11c>
 8009e1c:	3f01      	subs	r7, #1
 8009e1e:	f101 0914 	add.w	r9, r1, #20
 8009e22:	f100 0a14 	add.w	sl, r0, #20
 8009e26:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 8009e2a:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 8009e2e:	00bc      	lsls	r4, r7, #2
 8009e30:	3201      	adds	r2, #1
 8009e32:	fbb3 f8f2 	udiv	r8, r3, r2
 8009e36:	eb0a 0304 	add.w	r3, sl, r4
 8009e3a:	9400      	str	r4, [sp, #0]
 8009e3c:	eb09 0b04 	add.w	fp, r9, r4
 8009e40:	9301      	str	r3, [sp, #4]
 8009e42:	f1b8 0f00 	cmp.w	r8, #0
 8009e46:	d038      	beq.n	8009eba <quorem+0xae>
 8009e48:	2500      	movs	r5, #0
 8009e4a:	462e      	mov	r6, r5
 8009e4c:	46ce      	mov	lr, r9
 8009e4e:	46d4      	mov	ip, sl
 8009e50:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009e54:	f8dc 3000 	ldr.w	r3, [ip]
 8009e58:	b2a2      	uxth	r2, r4
 8009e5a:	fb08 5502 	mla	r5, r8, r2, r5
 8009e5e:	0c22      	lsrs	r2, r4, #16
 8009e60:	0c2c      	lsrs	r4, r5, #16
 8009e62:	fb08 4202 	mla	r2, r8, r2, r4
 8009e66:	b2ad      	uxth	r5, r5
 8009e68:	1b75      	subs	r5, r6, r5
 8009e6a:	b296      	uxth	r6, r2
 8009e6c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 8009e70:	fa15 f383 	uxtah	r3, r5, r3
 8009e74:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009e7e:	45f3      	cmp	fp, lr
 8009e80:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8009e84:	f84c 3b04 	str.w	r3, [ip], #4
 8009e88:	ea4f 4626 	mov.w	r6, r6, asr #16
 8009e8c:	d2e0      	bcs.n	8009e50 <quorem+0x44>
 8009e8e:	9b00      	ldr	r3, [sp, #0]
 8009e90:	f85a 3003 	ldr.w	r3, [sl, r3]
 8009e94:	b98b      	cbnz	r3, 8009eba <quorem+0xae>
 8009e96:	9a01      	ldr	r2, [sp, #4]
 8009e98:	1f13      	subs	r3, r2, #4
 8009e9a:	459a      	cmp	sl, r3
 8009e9c:	d20c      	bcs.n	8009eb8 <quorem+0xac>
 8009e9e:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009ea2:	b94b      	cbnz	r3, 8009eb8 <quorem+0xac>
 8009ea4:	f1a2 0308 	sub.w	r3, r2, #8
 8009ea8:	e002      	b.n	8009eb0 <quorem+0xa4>
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	3b04      	subs	r3, #4
 8009eae:	b91a      	cbnz	r2, 8009eb8 <quorem+0xac>
 8009eb0:	459a      	cmp	sl, r3
 8009eb2:	f107 37ff 	add.w	r7, r7, #4294967295
 8009eb6:	d3f8      	bcc.n	8009eaa <quorem+0x9e>
 8009eb8:	6107      	str	r7, [r0, #16]
 8009eba:	4604      	mov	r4, r0
 8009ebc:	f001 f96c 	bl	800b198 <__mcmp>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	db2d      	blt.n	8009f20 <quorem+0x114>
 8009ec4:	f108 0801 	add.w	r8, r8, #1
 8009ec8:	4655      	mov	r5, sl
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f859 1b04 	ldr.w	r1, [r9], #4
 8009ed0:	6828      	ldr	r0, [r5, #0]
 8009ed2:	b28a      	uxth	r2, r1
 8009ed4:	1a9a      	subs	r2, r3, r2
 8009ed6:	0c0b      	lsrs	r3, r1, #16
 8009ed8:	fa12 f280 	uxtah	r2, r2, r0
 8009edc:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 8009ee0:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8009ee4:	b292      	uxth	r2, r2
 8009ee6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009eea:	45cb      	cmp	fp, r9
 8009eec:	f845 2b04 	str.w	r2, [r5], #4
 8009ef0:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009ef4:	d2ea      	bcs.n	8009ecc <quorem+0xc0>
 8009ef6:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 8009efa:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 8009efe:	b97a      	cbnz	r2, 8009f20 <quorem+0x114>
 8009f00:	1f1a      	subs	r2, r3, #4
 8009f02:	4592      	cmp	sl, r2
 8009f04:	d20b      	bcs.n	8009f1e <quorem+0x112>
 8009f06:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8009f0a:	b942      	cbnz	r2, 8009f1e <quorem+0x112>
 8009f0c:	3b08      	subs	r3, #8
 8009f0e:	e002      	b.n	8009f16 <quorem+0x10a>
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	3b04      	subs	r3, #4
 8009f14:	b91a      	cbnz	r2, 8009f1e <quorem+0x112>
 8009f16:	459a      	cmp	sl, r3
 8009f18:	f107 37ff 	add.w	r7, r7, #4294967295
 8009f1c:	d3f8      	bcc.n	8009f10 <quorem+0x104>
 8009f1e:	6127      	str	r7, [r4, #16]
 8009f20:	4640      	mov	r0, r8
 8009f22:	b003      	add	sp, #12
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	2000      	movs	r0, #0
 8009f2a:	b003      	add	sp, #12
 8009f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009f30 <_dtoa_r>:
 8009f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f34:	ec55 4b10 	vmov	r4, r5, d0
 8009f38:	b09b      	sub	sp, #108	; 0x6c
 8009f3a:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8009f3c:	9102      	str	r1, [sp, #8]
 8009f3e:	4681      	mov	r9, r0
 8009f40:	9207      	str	r2, [sp, #28]
 8009f42:	9305      	str	r3, [sp, #20]
 8009f44:	e9cd 4500 	strd	r4, r5, [sp]
 8009f48:	b156      	cbz	r6, 8009f60 <_dtoa_r+0x30>
 8009f4a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009f4c:	6072      	str	r2, [r6, #4]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	4093      	lsls	r3, r2
 8009f52:	60b3      	str	r3, [r6, #8]
 8009f54:	4631      	mov	r1, r6
 8009f56:	f000 ff2f 	bl	800adb8 <_Bfree>
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8009f60:	f1b5 0800 	subs.w	r8, r5, #0
 8009f64:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009f66:	bfb4      	ite	lt
 8009f68:	2301      	movlt	r3, #1
 8009f6a:	2300      	movge	r3, #0
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4b76      	ldr	r3, [pc, #472]	; (800a148 <_dtoa_r+0x218>)
 8009f70:	bfbc      	itt	lt
 8009f72:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
 8009f76:	f8cd 8004 	strlt.w	r8, [sp, #4]
 8009f7a:	ea33 0308 	bics.w	r3, r3, r8
 8009f7e:	f000 80a6 	beq.w	800a0ce <_dtoa_r+0x19e>
 8009f82:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009f86:	2200      	movs	r2, #0
 8009f88:	2300      	movs	r3, #0
 8009f8a:	4630      	mov	r0, r6
 8009f8c:	4639      	mov	r1, r7
 8009f8e:	f7f6 febb 	bl	8000d08 <__aeabi_dcmpeq>
 8009f92:	4605      	mov	r5, r0
 8009f94:	b178      	cbz	r0, 8009fb6 <_dtoa_r+0x86>
 8009f96:	9a05      	ldr	r2, [sp, #20]
 8009f98:	2301      	movs	r3, #1
 8009f9a:	6013      	str	r3, [r2, #0]
 8009f9c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f000 80c0 	beq.w	800a124 <_dtoa_r+0x1f4>
 8009fa4:	4b69      	ldr	r3, [pc, #420]	; (800a14c <_dtoa_r+0x21c>)
 8009fa6:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8009fa8:	f103 3bff 	add.w	fp, r3, #4294967295
 8009fac:	6013      	str	r3, [r2, #0]
 8009fae:	4658      	mov	r0, fp
 8009fb0:	b01b      	add	sp, #108	; 0x6c
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	aa18      	add	r2, sp, #96	; 0x60
 8009fb8:	a919      	add	r1, sp, #100	; 0x64
 8009fba:	ec47 6b10 	vmov	d0, r6, r7
 8009fbe:	4648      	mov	r0, r9
 8009fc0:	f001 f97c 	bl	800b2bc <__d2b>
 8009fc4:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8009fc8:	4682      	mov	sl, r0
 8009fca:	f040 80a0 	bne.w	800a10e <_dtoa_r+0x1de>
 8009fce:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
 8009fd2:	442c      	add	r4, r5
 8009fd4:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009fd8:	2b20      	cmp	r3, #32
 8009fda:	f340 842c 	ble.w	800a836 <_dtoa_r+0x906>
 8009fde:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8009fe2:	fa08 f803 	lsl.w	r8, r8, r3
 8009fe6:	9b00      	ldr	r3, [sp, #0]
 8009fe8:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8009fec:	fa23 f000 	lsr.w	r0, r3, r0
 8009ff0:	ea48 0000 	orr.w	r0, r8, r0
 8009ff4:	f7f6 fba6 	bl	8000744 <__aeabi_ui2d>
 8009ff8:	2301      	movs	r3, #1
 8009ffa:	4606      	mov	r6, r0
 8009ffc:	3c01      	subs	r4, #1
 8009ffe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a002:	930f      	str	r3, [sp, #60]	; 0x3c
 800a004:	4630      	mov	r0, r6
 800a006:	4639      	mov	r1, r7
 800a008:	2200      	movs	r2, #0
 800a00a:	4b51      	ldr	r3, [pc, #324]	; (800a150 <_dtoa_r+0x220>)
 800a00c:	f7f6 fa5c 	bl	80004c8 <__aeabi_dsub>
 800a010:	a347      	add	r3, pc, #284	; (adr r3, 800a130 <_dtoa_r+0x200>)
 800a012:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a016:	f7f6 fc0f 	bl	8000838 <__aeabi_dmul>
 800a01a:	a347      	add	r3, pc, #284	; (adr r3, 800a138 <_dtoa_r+0x208>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 fa54 	bl	80004cc <__adddf3>
 800a024:	4606      	mov	r6, r0
 800a026:	4620      	mov	r0, r4
 800a028:	460f      	mov	r7, r1
 800a02a:	f7f6 fb9b 	bl	8000764 <__aeabi_i2d>
 800a02e:	a344      	add	r3, pc, #272	; (adr r3, 800a140 <_dtoa_r+0x210>)
 800a030:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a034:	f7f6 fc00 	bl	8000838 <__aeabi_dmul>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4630      	mov	r0, r6
 800a03e:	4639      	mov	r1, r7
 800a040:	f7f6 fa44 	bl	80004cc <__adddf3>
 800a044:	4606      	mov	r6, r0
 800a046:	460f      	mov	r7, r1
 800a048:	f7f6 fea6 	bl	8000d98 <__aeabi_d2iz>
 800a04c:	2200      	movs	r2, #0
 800a04e:	9006      	str	r0, [sp, #24]
 800a050:	2300      	movs	r3, #0
 800a052:	4630      	mov	r0, r6
 800a054:	4639      	mov	r1, r7
 800a056:	f7f6 fe61 	bl	8000d1c <__aeabi_dcmplt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f040 8273 	bne.w	800a546 <_dtoa_r+0x616>
 800a060:	9e06      	ldr	r6, [sp, #24]
 800a062:	2e16      	cmp	r6, #22
 800a064:	f200 825d 	bhi.w	800a522 <_dtoa_r+0x5f2>
 800a068:	4b3a      	ldr	r3, [pc, #232]	; (800a154 <_dtoa_r+0x224>)
 800a06a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a06e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a072:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a076:	f7f6 fe6f 	bl	8000d58 <__aeabi_dcmpgt>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	f000 83d7 	beq.w	800a82e <_dtoa_r+0x8fe>
 800a080:	1e73      	subs	r3, r6, #1
 800a082:	9306      	str	r3, [sp, #24]
 800a084:	2300      	movs	r3, #0
 800a086:	930d      	str	r3, [sp, #52]	; 0x34
 800a088:	1b2c      	subs	r4, r5, r4
 800a08a:	f1b4 0801 	subs.w	r8, r4, #1
 800a08e:	f100 8254 	bmi.w	800a53a <_dtoa_r+0x60a>
 800a092:	2300      	movs	r3, #0
 800a094:	9308      	str	r3, [sp, #32]
 800a096:	9b06      	ldr	r3, [sp, #24]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f2c0 8245 	blt.w	800a528 <_dtoa_r+0x5f8>
 800a09e:	4498      	add	r8, r3
 800a0a0:	930c      	str	r3, [sp, #48]	; 0x30
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0a6:	9b02      	ldr	r3, [sp, #8]
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d85b      	bhi.n	800a164 <_dtoa_r+0x234>
 800a0ac:	2b05      	cmp	r3, #5
 800a0ae:	f340 83c0 	ble.w	800a832 <_dtoa_r+0x902>
 800a0b2:	3b04      	subs	r3, #4
 800a0b4:	9302      	str	r3, [sp, #8]
 800a0b6:	2500      	movs	r5, #0
 800a0b8:	9b02      	ldr	r3, [sp, #8]
 800a0ba:	3b02      	subs	r3, #2
 800a0bc:	2b03      	cmp	r3, #3
 800a0be:	f200 8498 	bhi.w	800a9f2 <_dtoa_r+0xac2>
 800a0c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a0c6:	03df      	.short	0x03df
 800a0c8:	03e803bf 	.word	0x03e803bf
 800a0cc:	04f5      	.short	0x04f5
 800a0ce:	9a05      	ldr	r2, [sp, #20]
 800a0d0:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0d4:	6013      	str	r3, [r2, #0]
 800a0d6:	9b00      	ldr	r3, [sp, #0]
 800a0d8:	b983      	cbnz	r3, 800a0fc <_dtoa_r+0x1cc>
 800a0da:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a0de:	b96b      	cbnz	r3, 800a0fc <_dtoa_r+0x1cc>
 800a0e0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a0e2:	f8df b074 	ldr.w	fp, [pc, #116]	; 800a158 <_dtoa_r+0x228>
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	f43f af61 	beq.w	8009fae <_dtoa_r+0x7e>
 800a0ec:	f10b 0308 	add.w	r3, fp, #8
 800a0f0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 800a0f2:	4658      	mov	r0, fp
 800a0f4:	6013      	str	r3, [r2, #0]
 800a0f6:	b01b      	add	sp, #108	; 0x6c
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a0fe:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800a15c <_dtoa_r+0x22c>
 800a102:	2b00      	cmp	r3, #0
 800a104:	f43f af53 	beq.w	8009fae <_dtoa_r+0x7e>
 800a108:	f10b 0303 	add.w	r3, fp, #3
 800a10c:	e7f0      	b.n	800a0f0 <_dtoa_r+0x1c0>
 800a10e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a112:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a116:	950f      	str	r5, [sp, #60]	; 0x3c
 800a118:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a11c:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a120:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800a122:	e76f      	b.n	800a004 <_dtoa_r+0xd4>
 800a124:	f8df b038 	ldr.w	fp, [pc, #56]	; 800a160 <_dtoa_r+0x230>
 800a128:	4658      	mov	r0, fp
 800a12a:	b01b      	add	sp, #108	; 0x6c
 800a12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a130:	636f4361 	.word	0x636f4361
 800a134:	3fd287a7 	.word	0x3fd287a7
 800a138:	8b60c8b3 	.word	0x8b60c8b3
 800a13c:	3fc68a28 	.word	0x3fc68a28
 800a140:	509f79fb 	.word	0x509f79fb
 800a144:	3fd34413 	.word	0x3fd34413
 800a148:	7ff00000 	.word	0x7ff00000
 800a14c:	0800c011 	.word	0x0800c011
 800a150:	3ff80000 	.word	0x3ff80000
 800a154:	0800c070 	.word	0x0800c070
 800a158:	0800c034 	.word	0x0800c034
 800a15c:	0800c040 	.word	0x0800c040
 800a160:	0800c010 	.word	0x0800c010
 800a164:	f04f 34ff 	mov.w	r4, #4294967295
 800a168:	2501      	movs	r5, #1
 800a16a:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 800a16e:	2300      	movs	r3, #0
 800a170:	9302      	str	r3, [sp, #8]
 800a172:	9307      	str	r3, [sp, #28]
 800a174:	2100      	movs	r1, #0
 800a176:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800a17a:	940e      	str	r4, [sp, #56]	; 0x38
 800a17c:	4648      	mov	r0, r9
 800a17e:	f000 fdf5 	bl	800ad6c <_Balloc>
 800a182:	2c0e      	cmp	r4, #14
 800a184:	4683      	mov	fp, r0
 800a186:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800a18a:	f200 80fb 	bhi.w	800a384 <_dtoa_r+0x454>
 800a18e:	2d00      	cmp	r5, #0
 800a190:	f000 80f8 	beq.w	800a384 <_dtoa_r+0x454>
 800a194:	ed9d 7b00 	vldr	d7, [sp]
 800a198:	9906      	ldr	r1, [sp, #24]
 800a19a:	2900      	cmp	r1, #0
 800a19c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a1a0:	f340 83e5 	ble.w	800a96e <_dtoa_r+0xa3e>
 800a1a4:	4b9d      	ldr	r3, [pc, #628]	; (800a41c <_dtoa_r+0x4ec>)
 800a1a6:	f001 020f 	and.w	r2, r1, #15
 800a1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1ae:	ed93 7b00 	vldr	d7, [r3]
 800a1b2:	110c      	asrs	r4, r1, #4
 800a1b4:	06e2      	lsls	r2, r4, #27
 800a1b6:	ed8d 7b00 	vstr	d7, [sp]
 800a1ba:	f140 849e 	bpl.w	800aafa <_dtoa_r+0xbca>
 800a1be:	4b98      	ldr	r3, [pc, #608]	; (800a420 <_dtoa_r+0x4f0>)
 800a1c0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1c8:	f7f6 fc60 	bl	8000a8c <__aeabi_ddiv>
 800a1cc:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 800a1d0:	f004 040f 	and.w	r4, r4, #15
 800a1d4:	2603      	movs	r6, #3
 800a1d6:	b17c      	cbz	r4, 800a1f8 <_dtoa_r+0x2c8>
 800a1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a1dc:	4d90      	ldr	r5, [pc, #576]	; (800a420 <_dtoa_r+0x4f0>)
 800a1de:	07e3      	lsls	r3, r4, #31
 800a1e0:	d504      	bpl.n	800a1ec <_dtoa_r+0x2bc>
 800a1e2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a1e6:	f7f6 fb27 	bl	8000838 <__aeabi_dmul>
 800a1ea:	3601      	adds	r6, #1
 800a1ec:	1064      	asrs	r4, r4, #1
 800a1ee:	f105 0508 	add.w	r5, r5, #8
 800a1f2:	d1f4      	bne.n	800a1de <_dtoa_r+0x2ae>
 800a1f4:	e9cd 0100 	strd	r0, r1, [sp]
 800a1f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1fc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a200:	f7f6 fc44 	bl	8000a8c <__aeabi_ddiv>
 800a204:	e9cd 0100 	strd	r0, r1, [sp]
 800a208:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a20a:	b143      	cbz	r3, 800a21e <_dtoa_r+0x2ee>
 800a20c:	2200      	movs	r2, #0
 800a20e:	4b85      	ldr	r3, [pc, #532]	; (800a424 <_dtoa_r+0x4f4>)
 800a210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a214:	f7f6 fd82 	bl	8000d1c <__aeabi_dcmplt>
 800a218:	2800      	cmp	r0, #0
 800a21a:	f040 84ff 	bne.w	800ac1c <_dtoa_r+0xcec>
 800a21e:	4630      	mov	r0, r6
 800a220:	f7f6 faa0 	bl	8000764 <__aeabi_i2d>
 800a224:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a228:	f7f6 fb06 	bl	8000838 <__aeabi_dmul>
 800a22c:	4b7e      	ldr	r3, [pc, #504]	; (800a428 <_dtoa_r+0x4f8>)
 800a22e:	2200      	movs	r2, #0
 800a230:	f7f6 f94c 	bl	80004cc <__adddf3>
 800a234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a236:	4606      	mov	r6, r0
 800a238:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	f000 841c 	beq.w	800aa7a <_dtoa_r+0xb4a>
 800a242:	9b06      	ldr	r3, [sp, #24]
 800a244:	9316      	str	r3, [sp, #88]	; 0x58
 800a246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a248:	9312      	str	r3, [sp, #72]	; 0x48
 800a24a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a24e:	f7f6 fda3 	bl	8000d98 <__aeabi_d2iz>
 800a252:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a254:	4b71      	ldr	r3, [pc, #452]	; (800a41c <_dtoa_r+0x4ec>)
 800a256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a25a:	ed13 7b02 	vldr	d7, [r3, #-8]
 800a25e:	f100 0530 	add.w	r5, r0, #48	; 0x30
 800a262:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800a266:	f7f6 fa7d 	bl	8000764 <__aeabi_i2d>
 800a26a:	460b      	mov	r3, r1
 800a26c:	4602      	mov	r2, r0
 800a26e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a272:	e9cd 6700 	strd	r6, r7, [sp]
 800a276:	f7f6 f927 	bl	80004c8 <__aeabi_dsub>
 800a27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a27c:	b2ed      	uxtb	r5, r5
 800a27e:	4606      	mov	r6, r0
 800a280:	460f      	mov	r7, r1
 800a282:	f10b 0401 	add.w	r4, fp, #1
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 8458 	beq.w	800ab3c <_dtoa_r+0xc0c>
 800a28c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a290:	2000      	movs	r0, #0
 800a292:	4966      	ldr	r1, [pc, #408]	; (800a42c <_dtoa_r+0x4fc>)
 800a294:	f7f6 fbfa 	bl	8000a8c <__aeabi_ddiv>
 800a298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a29c:	f7f6 f914 	bl	80004c8 <__aeabi_dsub>
 800a2a0:	f88b 5000 	strb.w	r5, [fp]
 800a2a4:	4632      	mov	r2, r6
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a2ac:	f7f6 fd54 	bl	8000d58 <__aeabi_dcmpgt>
 800a2b0:	2800      	cmp	r0, #0
 800a2b2:	f040 8502 	bne.w	800acba <_dtoa_r+0xd8a>
 800a2b6:	4632      	mov	r2, r6
 800a2b8:	463b      	mov	r3, r7
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	4959      	ldr	r1, [pc, #356]	; (800a424 <_dtoa_r+0x4f4>)
 800a2be:	f7f6 f903 	bl	80004c8 <__aeabi_dsub>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a2ca:	f7f6 fd45 	bl	8000d58 <__aeabi_dcmpgt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	f040 84fb 	bne.w	800acca <_dtoa_r+0xd9a>
 800a2d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2d6:	2a01      	cmp	r2, #1
 800a2d8:	d050      	beq.n	800a37c <_dtoa_r+0x44c>
 800a2da:	445a      	add	r2, fp
 800a2dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a2e0:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 800a2e4:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 800a2e8:	4692      	mov	sl, r2
 800a2ea:	46cb      	mov	fp, r9
 800a2ec:	e9dd 8900 	ldrd	r8, r9, [sp]
 800a2f0:	e00c      	b.n	800a30c <_dtoa_r+0x3dc>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	494b      	ldr	r1, [pc, #300]	; (800a424 <_dtoa_r+0x4f4>)
 800a2f6:	f7f6 f8e7 	bl	80004c8 <__aeabi_dsub>
 800a2fa:	4642      	mov	r2, r8
 800a2fc:	464b      	mov	r3, r9
 800a2fe:	f7f6 fd0d 	bl	8000d1c <__aeabi_dcmplt>
 800a302:	2800      	cmp	r0, #0
 800a304:	f040 84dc 	bne.w	800acc0 <_dtoa_r+0xd90>
 800a308:	4554      	cmp	r4, sl
 800a30a:	d030      	beq.n	800a36e <_dtoa_r+0x43e>
 800a30c:	4640      	mov	r0, r8
 800a30e:	4649      	mov	r1, r9
 800a310:	2200      	movs	r2, #0
 800a312:	4b47      	ldr	r3, [pc, #284]	; (800a430 <_dtoa_r+0x500>)
 800a314:	f7f6 fa90 	bl	8000838 <__aeabi_dmul>
 800a318:	2200      	movs	r2, #0
 800a31a:	4b45      	ldr	r3, [pc, #276]	; (800a430 <_dtoa_r+0x500>)
 800a31c:	4680      	mov	r8, r0
 800a31e:	4689      	mov	r9, r1
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f6 fa88 	bl	8000838 <__aeabi_dmul>
 800a328:	460f      	mov	r7, r1
 800a32a:	4606      	mov	r6, r0
 800a32c:	f7f6 fd34 	bl	8000d98 <__aeabi_d2iz>
 800a330:	4605      	mov	r5, r0
 800a332:	f7f6 fa17 	bl	8000764 <__aeabi_i2d>
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4630      	mov	r0, r6
 800a33c:	4639      	mov	r1, r7
 800a33e:	f7f6 f8c3 	bl	80004c8 <__aeabi_dsub>
 800a342:	3530      	adds	r5, #48	; 0x30
 800a344:	b2ed      	uxtb	r5, r5
 800a346:	4642      	mov	r2, r8
 800a348:	464b      	mov	r3, r9
 800a34a:	f804 5b01 	strb.w	r5, [r4], #1
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	f7f6 fce3 	bl	8000d1c <__aeabi_dcmplt>
 800a356:	4632      	mov	r2, r6
 800a358:	463b      	mov	r3, r7
 800a35a:	2800      	cmp	r0, #0
 800a35c:	d0c9      	beq.n	800a2f2 <_dtoa_r+0x3c2>
 800a35e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a360:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800a364:	9306      	str	r3, [sp, #24]
 800a366:	46d9      	mov	r9, fp
 800a368:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800a36c:	e236      	b.n	800a7dc <_dtoa_r+0x8ac>
 800a36e:	46d9      	mov	r9, fp
 800a370:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a374:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800a378:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800a37c:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 800a380:	e9cd 3400 	strd	r3, r4, [sp]
 800a384:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a386:	2b00      	cmp	r3, #0
 800a388:	f2c0 80ae 	blt.w	800a4e8 <_dtoa_r+0x5b8>
 800a38c:	9a06      	ldr	r2, [sp, #24]
 800a38e:	2a0e      	cmp	r2, #14
 800a390:	f300 80aa 	bgt.w	800a4e8 <_dtoa_r+0x5b8>
 800a394:	4b21      	ldr	r3, [pc, #132]	; (800a41c <_dtoa_r+0x4ec>)
 800a396:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a39a:	ed93 7b00 	vldr	d7, [r3]
 800a39e:	9b07      	ldr	r3, [sp, #28]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a3a6:	f2c0 82be 	blt.w	800a926 <_dtoa_r+0x9f6>
 800a3aa:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a3ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	4639      	mov	r1, r7
 800a3b6:	f7f6 fb69 	bl	8000a8c <__aeabi_ddiv>
 800a3ba:	f7f6 fced 	bl	8000d98 <__aeabi_d2iz>
 800a3be:	4605      	mov	r5, r0
 800a3c0:	f7f6 f9d0 	bl	8000764 <__aeabi_i2d>
 800a3c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a3c8:	f7f6 fa36 	bl	8000838 <__aeabi_dmul>
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	4630      	mov	r0, r6
 800a3d4:	f7f6 f878 	bl	80004c8 <__aeabi_dsub>
 800a3d8:	f105 0330 	add.w	r3, r5, #48	; 0x30
 800a3dc:	f88b 3000 	strb.w	r3, [fp]
 800a3e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	4606      	mov	r6, r0
 800a3e6:	460f      	mov	r7, r1
 800a3e8:	f10b 0401 	add.w	r4, fp, #1
 800a3ec:	d053      	beq.n	800a496 <_dtoa_r+0x566>
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <_dtoa_r+0x500>)
 800a3f2:	f7f6 fa21 	bl	8000838 <__aeabi_dmul>
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	f7f6 fc83 	bl	8000d08 <__aeabi_dcmpeq>
 800a402:	2800      	cmp	r0, #0
 800a404:	f040 81ea 	bne.w	800a7dc <_dtoa_r+0x8ac>
 800a408:	f8cd a000 	str.w	sl, [sp]
 800a40c:	f8cd 901c 	str.w	r9, [sp, #28]
 800a410:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a414:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 800a418:	e017      	b.n	800a44a <_dtoa_r+0x51a>
 800a41a:	bf00      	nop
 800a41c:	0800c070 	.word	0x0800c070
 800a420:	0800c048 	.word	0x0800c048
 800a424:	3ff00000 	.word	0x3ff00000
 800a428:	401c0000 	.word	0x401c0000
 800a42c:	3fe00000 	.word	0x3fe00000
 800a430:	40240000 	.word	0x40240000
 800a434:	f7f6 fa00 	bl	8000838 <__aeabi_dmul>
 800a438:	2200      	movs	r2, #0
 800a43a:	2300      	movs	r3, #0
 800a43c:	4606      	mov	r6, r0
 800a43e:	460f      	mov	r7, r1
 800a440:	f7f6 fc62 	bl	8000d08 <__aeabi_dcmpeq>
 800a444:	2800      	cmp	r0, #0
 800a446:	f040 833d 	bne.w	800aac4 <_dtoa_r+0xb94>
 800a44a:	464a      	mov	r2, r9
 800a44c:	4653      	mov	r3, sl
 800a44e:	4630      	mov	r0, r6
 800a450:	4639      	mov	r1, r7
 800a452:	f7f6 fb1b 	bl	8000a8c <__aeabi_ddiv>
 800a456:	f7f6 fc9f 	bl	8000d98 <__aeabi_d2iz>
 800a45a:	4605      	mov	r5, r0
 800a45c:	f7f6 f982 	bl	8000764 <__aeabi_i2d>
 800a460:	464a      	mov	r2, r9
 800a462:	4653      	mov	r3, sl
 800a464:	f7f6 f9e8 	bl	8000838 <__aeabi_dmul>
 800a468:	4602      	mov	r2, r0
 800a46a:	460b      	mov	r3, r1
 800a46c:	4630      	mov	r0, r6
 800a46e:	4639      	mov	r1, r7
 800a470:	f7f6 f82a 	bl	80004c8 <__aeabi_dsub>
 800a474:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 800a478:	f804 cb01 	strb.w	ip, [r4], #1
 800a47c:	eba4 0c0b 	sub.w	ip, r4, fp
 800a480:	45e0      	cmp	r8, ip
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	f04f 0200 	mov.w	r2, #0
 800a48a:	4bc1      	ldr	r3, [pc, #772]	; (800a790 <_dtoa_r+0x860>)
 800a48c:	d1d2      	bne.n	800a434 <_dtoa_r+0x504>
 800a48e:	f8dd a000 	ldr.w	sl, [sp]
 800a492:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800a496:	4632      	mov	r2, r6
 800a498:	463b      	mov	r3, r7
 800a49a:	4630      	mov	r0, r6
 800a49c:	4639      	mov	r1, r7
 800a49e:	f7f6 f815 	bl	80004cc <__adddf3>
 800a4a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	f7f6 fc55 	bl	8000d58 <__aeabi_dcmpgt>
 800a4ae:	b958      	cbnz	r0, 800a4c8 <_dtoa_r+0x598>
 800a4b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	f7f6 fc26 	bl	8000d08 <__aeabi_dcmpeq>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	f000 818d 	beq.w	800a7dc <_dtoa_r+0x8ac>
 800a4c2:	07e9      	lsls	r1, r5, #31
 800a4c4:	f140 818a 	bpl.w	800a7dc <_dtoa_r+0x8ac>
 800a4c8:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800a4cc:	e005      	b.n	800a4da <_dtoa_r+0x5aa>
 800a4ce:	459b      	cmp	fp, r3
 800a4d0:	f000 8373 	beq.w	800abba <_dtoa_r+0xc8a>
 800a4d4:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 800a4d8:	461c      	mov	r4, r3
 800a4da:	2d39      	cmp	r5, #57	; 0x39
 800a4dc:	f104 33ff 	add.w	r3, r4, #4294967295
 800a4e0:	d0f5      	beq.n	800a4ce <_dtoa_r+0x59e>
 800a4e2:	3501      	adds	r5, #1
 800a4e4:	701d      	strb	r5, [r3, #0]
 800a4e6:	e179      	b.n	800a7dc <_dtoa_r+0x8ac>
 800a4e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a4ea:	2a00      	cmp	r2, #0
 800a4ec:	d03b      	beq.n	800a566 <_dtoa_r+0x636>
 800a4ee:	9a02      	ldr	r2, [sp, #8]
 800a4f0:	2a01      	cmp	r2, #1
 800a4f2:	f340 820b 	ble.w	800a90c <_dtoa_r+0x9dc>
 800a4f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4f8:	1e5f      	subs	r7, r3, #1
 800a4fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4fc:	42bb      	cmp	r3, r7
 800a4fe:	f2c0 82e6 	blt.w	800aace <_dtoa_r+0xb9e>
 800a502:	1bdf      	subs	r7, r3, r7
 800a504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a506:	2b00      	cmp	r3, #0
 800a508:	f2c0 830b 	blt.w	800ab22 <_dtoa_r+0xbf2>
 800a50c:	9a08      	ldr	r2, [sp, #32]
 800a50e:	4614      	mov	r4, r2
 800a510:	441a      	add	r2, r3
 800a512:	4498      	add	r8, r3
 800a514:	9208      	str	r2, [sp, #32]
 800a516:	2101      	movs	r1, #1
 800a518:	4648      	mov	r0, r9
 800a51a:	f000 fce7 	bl	800aeec <__i2b>
 800a51e:	4605      	mov	r5, r0
 800a520:	e024      	b.n	800a56c <_dtoa_r+0x63c>
 800a522:	2301      	movs	r3, #1
 800a524:	930d      	str	r3, [sp, #52]	; 0x34
 800a526:	e5af      	b.n	800a088 <_dtoa_r+0x158>
 800a528:	9a08      	ldr	r2, [sp, #32]
 800a52a:	9b06      	ldr	r3, [sp, #24]
 800a52c:	1ad2      	subs	r2, r2, r3
 800a52e:	425b      	negs	r3, r3
 800a530:	930b      	str	r3, [sp, #44]	; 0x2c
 800a532:	2300      	movs	r3, #0
 800a534:	9208      	str	r2, [sp, #32]
 800a536:	930c      	str	r3, [sp, #48]	; 0x30
 800a538:	e5b5      	b.n	800a0a6 <_dtoa_r+0x176>
 800a53a:	f1c4 0301 	rsb	r3, r4, #1
 800a53e:	9308      	str	r3, [sp, #32]
 800a540:	f04f 0800 	mov.w	r8, #0
 800a544:	e5a7      	b.n	800a096 <_dtoa_r+0x166>
 800a546:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800a54a:	4640      	mov	r0, r8
 800a54c:	f7f6 f90a 	bl	8000764 <__aeabi_i2d>
 800a550:	4632      	mov	r2, r6
 800a552:	463b      	mov	r3, r7
 800a554:	f7f6 fbd8 	bl	8000d08 <__aeabi_dcmpeq>
 800a558:	2800      	cmp	r0, #0
 800a55a:	f47f ad81 	bne.w	800a060 <_dtoa_r+0x130>
 800a55e:	f108 33ff 	add.w	r3, r8, #4294967295
 800a562:	9306      	str	r3, [sp, #24]
 800a564:	e57c      	b.n	800a060 <_dtoa_r+0x130>
 800a566:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a568:	9c08      	ldr	r4, [sp, #32]
 800a56a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800a56c:	2c00      	cmp	r4, #0
 800a56e:	dd0c      	ble.n	800a58a <_dtoa_r+0x65a>
 800a570:	f1b8 0f00 	cmp.w	r8, #0
 800a574:	dd09      	ble.n	800a58a <_dtoa_r+0x65a>
 800a576:	4544      	cmp	r4, r8
 800a578:	9a08      	ldr	r2, [sp, #32]
 800a57a:	4623      	mov	r3, r4
 800a57c:	bfa8      	it	ge
 800a57e:	4643      	movge	r3, r8
 800a580:	1ad2      	subs	r2, r2, r3
 800a582:	9208      	str	r2, [sp, #32]
 800a584:	1ae4      	subs	r4, r4, r3
 800a586:	eba8 0803 	sub.w	r8, r8, r3
 800a58a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a58c:	b16b      	cbz	r3, 800a5aa <_dtoa_r+0x67a>
 800a58e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a590:	2a00      	cmp	r2, #0
 800a592:	f000 8290 	beq.w	800aab6 <_dtoa_r+0xb86>
 800a596:	1bde      	subs	r6, r3, r7
 800a598:	2f00      	cmp	r7, #0
 800a59a:	f040 819b 	bne.w	800a8d4 <_dtoa_r+0x9a4>
 800a59e:	4651      	mov	r1, sl
 800a5a0:	4632      	mov	r2, r6
 800a5a2:	4648      	mov	r0, r9
 800a5a4:	f000 fd52 	bl	800b04c <__pow5mult>
 800a5a8:	4682      	mov	sl, r0
 800a5aa:	2101      	movs	r1, #1
 800a5ac:	4648      	mov	r0, r9
 800a5ae:	f000 fc9d 	bl	800aeec <__i2b>
 800a5b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5b4:	4606      	mov	r6, r0
 800a5b6:	2a00      	cmp	r2, #0
 800a5b8:	f040 8125 	bne.w	800a806 <_dtoa_r+0x8d6>
 800a5bc:	9b02      	ldr	r3, [sp, #8]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	f340 816c 	ble.w	800a89c <_dtoa_r+0x96c>
 800a5c4:	2001      	movs	r0, #1
 800a5c6:	4440      	add	r0, r8
 800a5c8:	f010 001f 	ands.w	r0, r0, #31
 800a5cc:	f000 8119 	beq.w	800a802 <_dtoa_r+0x8d2>
 800a5d0:	f1c0 0320 	rsb	r3, r0, #32
 800a5d4:	2b04      	cmp	r3, #4
 800a5d6:	f340 83ac 	ble.w	800ad32 <_dtoa_r+0xe02>
 800a5da:	f1c0 001c 	rsb	r0, r0, #28
 800a5de:	9b08      	ldr	r3, [sp, #32]
 800a5e0:	4403      	add	r3, r0
 800a5e2:	9308      	str	r3, [sp, #32]
 800a5e4:	4404      	add	r4, r0
 800a5e6:	4480      	add	r8, r0
 800a5e8:	9b08      	ldr	r3, [sp, #32]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dd05      	ble.n	800a5fa <_dtoa_r+0x6ca>
 800a5ee:	4651      	mov	r1, sl
 800a5f0:	461a      	mov	r2, r3
 800a5f2:	4648      	mov	r0, r9
 800a5f4:	f000 fd7a 	bl	800b0ec <__lshift>
 800a5f8:	4682      	mov	sl, r0
 800a5fa:	f1b8 0f00 	cmp.w	r8, #0
 800a5fe:	dd05      	ble.n	800a60c <_dtoa_r+0x6dc>
 800a600:	4631      	mov	r1, r6
 800a602:	4642      	mov	r2, r8
 800a604:	4648      	mov	r0, r9
 800a606:	f000 fd71 	bl	800b0ec <__lshift>
 800a60a:	4606      	mov	r6, r0
 800a60c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d177      	bne.n	800a702 <_dtoa_r+0x7d2>
 800a612:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a614:	2b00      	cmp	r3, #0
 800a616:	f340 8209 	ble.w	800aa2c <_dtoa_r+0xafc>
 800a61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	f000 8089 	beq.w	800a734 <_dtoa_r+0x804>
 800a622:	2c00      	cmp	r4, #0
 800a624:	f300 816b 	bgt.w	800a8fe <_dtoa_r+0x9ce>
 800a628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	f040 81cd 	bne.w	800a9ca <_dtoa_r+0xa9a>
 800a630:	46a8      	mov	r8, r5
 800a632:	9a00      	ldr	r2, [sp, #0]
 800a634:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a638:	f002 0201 	and.w	r2, r2, #1
 800a63c:	920a      	str	r2, [sp, #40]	; 0x28
 800a63e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a640:	f10b 33ff 	add.w	r3, fp, #4294967295
 800a644:	441a      	add	r2, r3
 800a646:	465f      	mov	r7, fp
 800a648:	9209      	str	r2, [sp, #36]	; 0x24
 800a64a:	46b3      	mov	fp, r6
 800a64c:	4659      	mov	r1, fp
 800a64e:	4650      	mov	r0, sl
 800a650:	f7ff fbdc 	bl	8009e0c <quorem>
 800a654:	4629      	mov	r1, r5
 800a656:	4604      	mov	r4, r0
 800a658:	4650      	mov	r0, sl
 800a65a:	f000 fd9d 	bl	800b198 <__mcmp>
 800a65e:	4659      	mov	r1, fp
 800a660:	4606      	mov	r6, r0
 800a662:	4642      	mov	r2, r8
 800a664:	4648      	mov	r0, r9
 800a666:	f000 fdb3 	bl	800b1d0 <__mdiff>
 800a66a:	f104 0330 	add.w	r3, r4, #48	; 0x30
 800a66e:	9300      	str	r3, [sp, #0]
 800a670:	68c3      	ldr	r3, [r0, #12]
 800a672:	4601      	mov	r1, r0
 800a674:	2b00      	cmp	r3, #0
 800a676:	f040 81d4 	bne.w	800aa22 <_dtoa_r+0xaf2>
 800a67a:	9008      	str	r0, [sp, #32]
 800a67c:	4650      	mov	r0, sl
 800a67e:	f000 fd8b 	bl	800b198 <__mcmp>
 800a682:	9a08      	ldr	r2, [sp, #32]
 800a684:	9007      	str	r0, [sp, #28]
 800a686:	4611      	mov	r1, r2
 800a688:	4648      	mov	r0, r9
 800a68a:	f000 fb95 	bl	800adb8 <_Bfree>
 800a68e:	9b07      	ldr	r3, [sp, #28]
 800a690:	b933      	cbnz	r3, 800a6a0 <_dtoa_r+0x770>
 800a692:	9a02      	ldr	r2, [sp, #8]
 800a694:	b922      	cbnz	r2, 800a6a0 <_dtoa_r+0x770>
 800a696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 8319 	beq.w	800acd0 <_dtoa_r+0xda0>
 800a69e:	9b02      	ldr	r3, [sp, #8]
 800a6a0:	2e00      	cmp	r6, #0
 800a6a2:	f2c0 821c 	blt.w	800aade <_dtoa_r+0xbae>
 800a6a6:	d105      	bne.n	800a6b4 <_dtoa_r+0x784>
 800a6a8:	9a02      	ldr	r2, [sp, #8]
 800a6aa:	b91a      	cbnz	r2, 800a6b4 <_dtoa_r+0x784>
 800a6ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6ae:	2a00      	cmp	r2, #0
 800a6b0:	f000 8215 	beq.w	800aade <_dtoa_r+0xbae>
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f107 0401 	add.w	r4, r7, #1
 800a6ba:	f300 8225 	bgt.w	800ab08 <_dtoa_r+0xbd8>
 800a6be:	9b00      	ldr	r3, [sp, #0]
 800a6c0:	703b      	strb	r3, [r7, #0]
 800a6c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6c4:	42bb      	cmp	r3, r7
 800a6c6:	f000 8230 	beq.w	800ab2a <_dtoa_r+0xbfa>
 800a6ca:	4651      	mov	r1, sl
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	220a      	movs	r2, #10
 800a6d0:	4648      	mov	r0, r9
 800a6d2:	f000 fb7b 	bl	800adcc <__multadd>
 800a6d6:	4545      	cmp	r5, r8
 800a6d8:	4682      	mov	sl, r0
 800a6da:	4629      	mov	r1, r5
 800a6dc:	f04f 0300 	mov.w	r3, #0
 800a6e0:	f04f 020a 	mov.w	r2, #10
 800a6e4:	4648      	mov	r0, r9
 800a6e6:	f000 8196 	beq.w	800aa16 <_dtoa_r+0xae6>
 800a6ea:	f000 fb6f 	bl	800adcc <__multadd>
 800a6ee:	4641      	mov	r1, r8
 800a6f0:	4605      	mov	r5, r0
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	220a      	movs	r2, #10
 800a6f6:	4648      	mov	r0, r9
 800a6f8:	f000 fb68 	bl	800adcc <__multadd>
 800a6fc:	4627      	mov	r7, r4
 800a6fe:	4680      	mov	r8, r0
 800a700:	e7a4      	b.n	800a64c <_dtoa_r+0x71c>
 800a702:	4631      	mov	r1, r6
 800a704:	4650      	mov	r0, sl
 800a706:	f000 fd47 	bl	800b198 <__mcmp>
 800a70a:	2800      	cmp	r0, #0
 800a70c:	da81      	bge.n	800a612 <_dtoa_r+0x6e2>
 800a70e:	9f06      	ldr	r7, [sp, #24]
 800a710:	4651      	mov	r1, sl
 800a712:	2300      	movs	r3, #0
 800a714:	220a      	movs	r2, #10
 800a716:	4648      	mov	r0, r9
 800a718:	3f01      	subs	r7, #1
 800a71a:	9706      	str	r7, [sp, #24]
 800a71c:	f000 fb56 	bl	800adcc <__multadd>
 800a720:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a722:	4682      	mov	sl, r0
 800a724:	2b00      	cmp	r3, #0
 800a726:	f040 82eb 	bne.w	800ad00 <_dtoa_r+0xdd0>
 800a72a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f340 82f3 	ble.w	800ad18 <_dtoa_r+0xde8>
 800a732:	9309      	str	r3, [sp, #36]	; 0x24
 800a734:	465c      	mov	r4, fp
 800a736:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 800a73a:	e002      	b.n	800a742 <_dtoa_r+0x812>
 800a73c:	f000 fb46 	bl	800adcc <__multadd>
 800a740:	4682      	mov	sl, r0
 800a742:	4631      	mov	r1, r6
 800a744:	4650      	mov	r0, sl
 800a746:	f7ff fb61 	bl	8009e0c <quorem>
 800a74a:	f100 0730 	add.w	r7, r0, #48	; 0x30
 800a74e:	f804 7b01 	strb.w	r7, [r4], #1
 800a752:	eba4 030b 	sub.w	r3, r4, fp
 800a756:	4598      	cmp	r8, r3
 800a758:	f04f 020a 	mov.w	r2, #10
 800a75c:	f04f 0300 	mov.w	r3, #0
 800a760:	4651      	mov	r1, sl
 800a762:	4648      	mov	r0, r9
 800a764:	dcea      	bgt.n	800a73c <_dtoa_r+0x80c>
 800a766:	2300      	movs	r3, #0
 800a768:	9700      	str	r7, [sp, #0]
 800a76a:	9302      	str	r3, [sp, #8]
 800a76c:	4651      	mov	r1, sl
 800a76e:	2201      	movs	r2, #1
 800a770:	4648      	mov	r0, r9
 800a772:	f000 fcbb 	bl	800b0ec <__lshift>
 800a776:	4631      	mov	r1, r6
 800a778:	4682      	mov	sl, r0
 800a77a:	f000 fd0d 	bl	800b198 <__mcmp>
 800a77e:	2800      	cmp	r0, #0
 800a780:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800a784:	dc14      	bgt.n	800a7b0 <_dtoa_r+0x880>
 800a786:	d108      	bne.n	800a79a <_dtoa_r+0x86a>
 800a788:	9b00      	ldr	r3, [sp, #0]
 800a78a:	07db      	lsls	r3, r3, #31
 800a78c:	d410      	bmi.n	800a7b0 <_dtoa_r+0x880>
 800a78e:	e004      	b.n	800a79a <_dtoa_r+0x86a>
 800a790:	40240000 	.word	0x40240000
 800a794:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 800a798:	461c      	mov	r4, r3
 800a79a:	2a30      	cmp	r2, #48	; 0x30
 800a79c:	f104 33ff 	add.w	r3, r4, #4294967295
 800a7a0:	d0f8      	beq.n	800a794 <_dtoa_r+0x864>
 800a7a2:	e00b      	b.n	800a7bc <_dtoa_r+0x88c>
 800a7a4:	459b      	cmp	fp, r3
 800a7a6:	f000 814e 	beq.w	800aa46 <_dtoa_r+0xb16>
 800a7aa:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800a7ae:	461c      	mov	r4, r3
 800a7b0:	2a39      	cmp	r2, #57	; 0x39
 800a7b2:	f104 33ff 	add.w	r3, r4, #4294967295
 800a7b6:	d0f5      	beq.n	800a7a4 <_dtoa_r+0x874>
 800a7b8:	3201      	adds	r2, #1
 800a7ba:	701a      	strb	r2, [r3, #0]
 800a7bc:	4631      	mov	r1, r6
 800a7be:	4648      	mov	r0, r9
 800a7c0:	f000 fafa 	bl	800adb8 <_Bfree>
 800a7c4:	b155      	cbz	r5, 800a7dc <_dtoa_r+0x8ac>
 800a7c6:	9902      	ldr	r1, [sp, #8]
 800a7c8:	b121      	cbz	r1, 800a7d4 <_dtoa_r+0x8a4>
 800a7ca:	42a9      	cmp	r1, r5
 800a7cc:	d002      	beq.n	800a7d4 <_dtoa_r+0x8a4>
 800a7ce:	4648      	mov	r0, r9
 800a7d0:	f000 faf2 	bl	800adb8 <_Bfree>
 800a7d4:	4629      	mov	r1, r5
 800a7d6:	4648      	mov	r0, r9
 800a7d8:	f000 faee 	bl	800adb8 <_Bfree>
 800a7dc:	4651      	mov	r1, sl
 800a7de:	4648      	mov	r0, r9
 800a7e0:	f000 faea 	bl	800adb8 <_Bfree>
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	7022      	strb	r2, [r4, #0]
 800a7ea:	9a05      	ldr	r2, [sp, #20]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	6013      	str	r3, [r2, #0]
 800a7f0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	f43f abdb 	beq.w	8009fae <_dtoa_r+0x7e>
 800a7f8:	4658      	mov	r0, fp
 800a7fa:	601c      	str	r4, [r3, #0]
 800a7fc:	b01b      	add	sp, #108	; 0x6c
 800a7fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a802:	201c      	movs	r0, #28
 800a804:	e6eb      	b.n	800a5de <_dtoa_r+0x6ae>
 800a806:	4601      	mov	r1, r0
 800a808:	4648      	mov	r0, r9
 800a80a:	f000 fc1f 	bl	800b04c <__pow5mult>
 800a80e:	9b02      	ldr	r3, [sp, #8]
 800a810:	2b01      	cmp	r3, #1
 800a812:	4606      	mov	r6, r0
 800a814:	f340 80d4 	ble.w	800a9c0 <_dtoa_r+0xa90>
 800a818:	2300      	movs	r3, #0
 800a81a:	930c      	str	r3, [sp, #48]	; 0x30
 800a81c:	6933      	ldr	r3, [r6, #16]
 800a81e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a822:	6918      	ldr	r0, [r3, #16]
 800a824:	f000 fb12 	bl	800ae4c <__hi0bits>
 800a828:	f1c0 0020 	rsb	r0, r0, #32
 800a82c:	e6cb      	b.n	800a5c6 <_dtoa_r+0x696>
 800a82e:	900d      	str	r0, [sp, #52]	; 0x34
 800a830:	e42a      	b.n	800a088 <_dtoa_r+0x158>
 800a832:	2501      	movs	r5, #1
 800a834:	e440      	b.n	800a0b8 <_dtoa_r+0x188>
 800a836:	f1c3 0820 	rsb	r8, r3, #32
 800a83a:	9b00      	ldr	r3, [sp, #0]
 800a83c:	fa03 f008 	lsl.w	r0, r3, r8
 800a840:	f7ff bbd8 	b.w	8009ff4 <_dtoa_r+0xc4>
 800a844:	2300      	movs	r3, #0
 800a846:	930a      	str	r3, [sp, #40]	; 0x28
 800a848:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a84c:	4413      	add	r3, r2
 800a84e:	930e      	str	r3, [sp, #56]	; 0x38
 800a850:	3301      	adds	r3, #1
 800a852:	2b01      	cmp	r3, #1
 800a854:	461e      	mov	r6, r3
 800a856:	9309      	str	r3, [sp, #36]	; 0x24
 800a858:	bfb8      	it	lt
 800a85a:	2601      	movlt	r6, #1
 800a85c:	2100      	movs	r1, #0
 800a85e:	2e17      	cmp	r6, #23
 800a860:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800a864:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800a866:	f77f ac89 	ble.w	800a17c <_dtoa_r+0x24c>
 800a86a:	2201      	movs	r2, #1
 800a86c:	2304      	movs	r3, #4
 800a86e:	005b      	lsls	r3, r3, #1
 800a870:	f103 0014 	add.w	r0, r3, #20
 800a874:	42b0      	cmp	r0, r6
 800a876:	4611      	mov	r1, r2
 800a878:	f102 0201 	add.w	r2, r2, #1
 800a87c:	d9f7      	bls.n	800a86e <_dtoa_r+0x93e>
 800a87e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800a882:	e47b      	b.n	800a17c <_dtoa_r+0x24c>
 800a884:	2300      	movs	r3, #0
 800a886:	930a      	str	r3, [sp, #40]	; 0x28
 800a888:	9e07      	ldr	r6, [sp, #28]
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	f340 80e2 	ble.w	800aa54 <_dtoa_r+0xb24>
 800a890:	960e      	str	r6, [sp, #56]	; 0x38
 800a892:	9609      	str	r6, [sp, #36]	; 0x24
 800a894:	e7e2      	b.n	800a85c <_dtoa_r+0x92c>
 800a896:	2301      	movs	r3, #1
 800a898:	930a      	str	r3, [sp, #40]	; 0x28
 800a89a:	e7f5      	b.n	800a888 <_dtoa_r+0x958>
 800a89c:	9b00      	ldr	r3, [sp, #0]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f47f ae90 	bne.w	800a5c4 <_dtoa_r+0x694>
 800a8a4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a8a8:	f3c2 0313 	ubfx	r3, r2, #0, #20
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f040 8192 	bne.w	800abd6 <_dtoa_r+0xca6>
 800a8b2:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a8b6:	0d1b      	lsrs	r3, r3, #20
 800a8b8:	051b      	lsls	r3, r3, #20
 800a8ba:	b12b      	cbz	r3, 800a8c8 <_dtoa_r+0x998>
 800a8bc:	9b08      	ldr	r3, [sp, #32]
 800a8be:	3301      	adds	r3, #1
 800a8c0:	9308      	str	r3, [sp, #32]
 800a8c2:	f108 0801 	add.w	r8, r8, #1
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a8cc:	2a00      	cmp	r2, #0
 800a8ce:	f43f ae79 	beq.w	800a5c4 <_dtoa_r+0x694>
 800a8d2:	e7a3      	b.n	800a81c <_dtoa_r+0x8ec>
 800a8d4:	463a      	mov	r2, r7
 800a8d6:	4629      	mov	r1, r5
 800a8d8:	4648      	mov	r0, r9
 800a8da:	f000 fbb7 	bl	800b04c <__pow5mult>
 800a8de:	4652      	mov	r2, sl
 800a8e0:	4601      	mov	r1, r0
 800a8e2:	4605      	mov	r5, r0
 800a8e4:	4648      	mov	r0, r9
 800a8e6:	f000 fb0b 	bl	800af00 <__multiply>
 800a8ea:	4651      	mov	r1, sl
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	4648      	mov	r0, r9
 800a8f0:	f000 fa62 	bl	800adb8 <_Bfree>
 800a8f4:	46ba      	mov	sl, r7
 800a8f6:	2e00      	cmp	r6, #0
 800a8f8:	f43f ae57 	beq.w	800a5aa <_dtoa_r+0x67a>
 800a8fc:	e64f      	b.n	800a59e <_dtoa_r+0x66e>
 800a8fe:	4629      	mov	r1, r5
 800a900:	4622      	mov	r2, r4
 800a902:	4648      	mov	r0, r9
 800a904:	f000 fbf2 	bl	800b0ec <__lshift>
 800a908:	4605      	mov	r5, r0
 800a90a:	e68d      	b.n	800a628 <_dtoa_r+0x6f8>
 800a90c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a90e:	2a00      	cmp	r2, #0
 800a910:	f000 815d 	beq.w	800abce <_dtoa_r+0xc9e>
 800a914:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a918:	9a08      	ldr	r2, [sp, #32]
 800a91a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800a91c:	4614      	mov	r4, r2
 800a91e:	441a      	add	r2, r3
 800a920:	4498      	add	r8, r3
 800a922:	9208      	str	r2, [sp, #32]
 800a924:	e5f7      	b.n	800a516 <_dtoa_r+0x5e6>
 800a926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f73f ad3e 	bgt.w	800a3aa <_dtoa_r+0x47a>
 800a92e:	f040 80bc 	bne.w	800aaaa <_dtoa_r+0xb7a>
 800a932:	ec51 0b17 	vmov	r0, r1, d7
 800a936:	2200      	movs	r2, #0
 800a938:	4bb2      	ldr	r3, [pc, #712]	; (800ac04 <_dtoa_r+0xcd4>)
 800a93a:	f7f5 ff7d 	bl	8000838 <__aeabi_dmul>
 800a93e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a942:	f7f6 f9ff 	bl	8000d44 <__aeabi_dcmpge>
 800a946:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a948:	4635      	mov	r5, r6
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d176      	bne.n	800aa3c <_dtoa_r+0xb0c>
 800a94e:	9a06      	ldr	r2, [sp, #24]
 800a950:	2331      	movs	r3, #49	; 0x31
 800a952:	3201      	adds	r2, #1
 800a954:	9206      	str	r2, [sp, #24]
 800a956:	f88b 3000 	strb.w	r3, [fp]
 800a95a:	f10b 0401 	add.w	r4, fp, #1
 800a95e:	4631      	mov	r1, r6
 800a960:	4648      	mov	r0, r9
 800a962:	f000 fa29 	bl	800adb8 <_Bfree>
 800a966:	2d00      	cmp	r5, #0
 800a968:	f47f af34 	bne.w	800a7d4 <_dtoa_r+0x8a4>
 800a96c:	e736      	b.n	800a7dc <_dtoa_r+0x8ac>
 800a96e:	f000 8142 	beq.w	800abf6 <_dtoa_r+0xcc6>
 800a972:	9b06      	ldr	r3, [sp, #24]
 800a974:	425c      	negs	r4, r3
 800a976:	4ba4      	ldr	r3, [pc, #656]	; (800ac08 <_dtoa_r+0xcd8>)
 800a978:	f004 020f 	and.w	r2, r4, #15
 800a97c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a984:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a988:	f7f5 ff56 	bl	8000838 <__aeabi_dmul>
 800a98c:	1124      	asrs	r4, r4, #4
 800a98e:	e9cd 0100 	strd	r0, r1, [sp]
 800a992:	f000 81c6 	beq.w	800ad22 <_dtoa_r+0xdf2>
 800a996:	4d9d      	ldr	r5, [pc, #628]	; (800ac0c <_dtoa_r+0xcdc>)
 800a998:	2300      	movs	r3, #0
 800a99a:	2602      	movs	r6, #2
 800a99c:	07e7      	lsls	r7, r4, #31
 800a99e:	d505      	bpl.n	800a9ac <_dtoa_r+0xa7c>
 800a9a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9a4:	f7f5 ff48 	bl	8000838 <__aeabi_dmul>
 800a9a8:	3601      	adds	r6, #1
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	1064      	asrs	r4, r4, #1
 800a9ae:	f105 0508 	add.w	r5, r5, #8
 800a9b2:	d1f3      	bne.n	800a99c <_dtoa_r+0xa6c>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	f43f ac27 	beq.w	800a208 <_dtoa_r+0x2d8>
 800a9ba:	e9cd 0100 	strd	r0, r1, [sp]
 800a9be:	e423      	b.n	800a208 <_dtoa_r+0x2d8>
 800a9c0:	9b00      	ldr	r3, [sp, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	f43f af6e 	beq.w	800a8a4 <_dtoa_r+0x974>
 800a9c8:	e726      	b.n	800a818 <_dtoa_r+0x8e8>
 800a9ca:	6869      	ldr	r1, [r5, #4]
 800a9cc:	4648      	mov	r0, r9
 800a9ce:	f000 f9cd 	bl	800ad6c <_Balloc>
 800a9d2:	692b      	ldr	r3, [r5, #16]
 800a9d4:	3302      	adds	r3, #2
 800a9d6:	009a      	lsls	r2, r3, #2
 800a9d8:	4604      	mov	r4, r0
 800a9da:	f105 010c 	add.w	r1, r5, #12
 800a9de:	300c      	adds	r0, #12
 800a9e0:	f7f5 fc0e 	bl	8000200 <memcpy>
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	4648      	mov	r0, r9
 800a9ea:	f000 fb7f 	bl	800b0ec <__lshift>
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	e61f      	b.n	800a632 <_dtoa_r+0x702>
 800a9f2:	2400      	movs	r4, #0
 800a9f4:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800a9f8:	4621      	mov	r1, r4
 800a9fa:	4648      	mov	r0, r9
 800a9fc:	f000 f9b6 	bl	800ad6c <_Balloc>
 800aa00:	f04f 33ff 	mov.w	r3, #4294967295
 800aa04:	930e      	str	r3, [sp, #56]	; 0x38
 800aa06:	9309      	str	r3, [sp, #36]	; 0x24
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4683      	mov	fp, r0
 800aa0c:	9407      	str	r4, [sp, #28]
 800aa0e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 800aa12:	930a      	str	r3, [sp, #40]	; 0x28
 800aa14:	e4b6      	b.n	800a384 <_dtoa_r+0x454>
 800aa16:	f000 f9d9 	bl	800adcc <__multadd>
 800aa1a:	4627      	mov	r7, r4
 800aa1c:	4605      	mov	r5, r0
 800aa1e:	4680      	mov	r8, r0
 800aa20:	e614      	b.n	800a64c <_dtoa_r+0x71c>
 800aa22:	4648      	mov	r0, r9
 800aa24:	f000 f9c8 	bl	800adb8 <_Bfree>
 800aa28:	2301      	movs	r3, #1
 800aa2a:	e639      	b.n	800a6a0 <_dtoa_r+0x770>
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	f77f adf3 	ble.w	800a61a <_dtoa_r+0x6ea>
 800aa34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f000 80cf 	beq.w	800abda <_dtoa_r+0xcaa>
 800aa3c:	9b07      	ldr	r3, [sp, #28]
 800aa3e:	43db      	mvns	r3, r3
 800aa40:	9306      	str	r3, [sp, #24]
 800aa42:	465c      	mov	r4, fp
 800aa44:	e78b      	b.n	800a95e <_dtoa_r+0xa2e>
 800aa46:	9a06      	ldr	r2, [sp, #24]
 800aa48:	2331      	movs	r3, #49	; 0x31
 800aa4a:	3201      	adds	r2, #1
 800aa4c:	9206      	str	r2, [sp, #24]
 800aa4e:	f88b 3000 	strb.w	r3, [fp]
 800aa52:	e6b3      	b.n	800a7bc <_dtoa_r+0x88c>
 800aa54:	2401      	movs	r4, #1
 800aa56:	9409      	str	r4, [sp, #36]	; 0x24
 800aa58:	9407      	str	r4, [sp, #28]
 800aa5a:	f7ff bb8b 	b.w	800a174 <_dtoa_r+0x244>
 800aa5e:	4630      	mov	r0, r6
 800aa60:	f7f5 fe80 	bl	8000764 <__aeabi_i2d>
 800aa64:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa68:	f7f5 fee6 	bl	8000838 <__aeabi_dmul>
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	4b68      	ldr	r3, [pc, #416]	; (800ac10 <_dtoa_r+0xce0>)
 800aa70:	f7f5 fd2c 	bl	80004cc <__adddf3>
 800aa74:	4606      	mov	r6, r0
 800aa76:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	4b61      	ldr	r3, [pc, #388]	; (800ac04 <_dtoa_r+0xcd4>)
 800aa7e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aa82:	f7f5 fd21 	bl	80004c8 <__aeabi_dsub>
 800aa86:	4632      	mov	r2, r6
 800aa88:	463b      	mov	r3, r7
 800aa8a:	4604      	mov	r4, r0
 800aa8c:	460d      	mov	r5, r1
 800aa8e:	f7f6 f963 	bl	8000d58 <__aeabi_dcmpgt>
 800aa92:	2800      	cmp	r0, #0
 800aa94:	d14f      	bne.n	800ab36 <_dtoa_r+0xc06>
 800aa96:	4632      	mov	r2, r6
 800aa98:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	4629      	mov	r1, r5
 800aaa0:	f7f6 f93c 	bl	8000d1c <__aeabi_dcmplt>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	f43f ac69 	beq.w	800a37c <_dtoa_r+0x44c>
 800aaaa:	2600      	movs	r6, #0
 800aaac:	4635      	mov	r5, r6
 800aaae:	e7c5      	b.n	800aa3c <_dtoa_r+0xb0c>
 800aab0:	2301      	movs	r3, #1
 800aab2:	930a      	str	r3, [sp, #40]	; 0x28
 800aab4:	e6c8      	b.n	800a848 <_dtoa_r+0x918>
 800aab6:	4651      	mov	r1, sl
 800aab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aaba:	4648      	mov	r0, r9
 800aabc:	f000 fac6 	bl	800b04c <__pow5mult>
 800aac0:	4682      	mov	sl, r0
 800aac2:	e572      	b.n	800a5aa <_dtoa_r+0x67a>
 800aac4:	f8dd a000 	ldr.w	sl, [sp]
 800aac8:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800aacc:	e686      	b.n	800a7dc <_dtoa_r+0x8ac>
 800aace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aad2:	1afb      	subs	r3, r7, r3
 800aad4:	441a      	add	r2, r3
 800aad6:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
 800aada:	2700      	movs	r7, #0
 800aadc:	e512      	b.n	800a504 <_dtoa_r+0x5d4>
 800aade:	2b00      	cmp	r3, #0
 800aae0:	9402      	str	r4, [sp, #8]
 800aae2:	465e      	mov	r6, fp
 800aae4:	f107 0401 	add.w	r4, r7, #1
 800aae8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800aaec:	f300 80ba 	bgt.w	800ac64 <_dtoa_r+0xd34>
 800aaf0:	9b00      	ldr	r3, [sp, #0]
 800aaf2:	9502      	str	r5, [sp, #8]
 800aaf4:	703b      	strb	r3, [r7, #0]
 800aaf6:	4645      	mov	r5, r8
 800aaf8:	e660      	b.n	800a7bc <_dtoa_r+0x88c>
 800aafa:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800aafe:	2602      	movs	r6, #2
 800ab00:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800ab04:	f7ff bb67 	b.w	800a1d6 <_dtoa_r+0x2a6>
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	2b39      	cmp	r3, #57	; 0x39
 800ab0c:	465e      	mov	r6, fp
 800ab0e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ab12:	f000 80b9 	beq.w	800ac88 <_dtoa_r+0xd58>
 800ab16:	9b00      	ldr	r3, [sp, #0]
 800ab18:	9502      	str	r5, [sp, #8]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	703b      	strb	r3, [r7, #0]
 800ab1e:	4645      	mov	r5, r8
 800ab20:	e64c      	b.n	800a7bc <_dtoa_r+0x88c>
 800ab22:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 800ab26:	1a9c      	subs	r4, r3, r2
 800ab28:	e4f5      	b.n	800a516 <_dtoa_r+0x5e6>
 800ab2a:	465e      	mov	r6, fp
 800ab2c:	9502      	str	r5, [sp, #8]
 800ab2e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ab32:	4645      	mov	r5, r8
 800ab34:	e61a      	b.n	800a76c <_dtoa_r+0x83c>
 800ab36:	2600      	movs	r6, #0
 800ab38:	4635      	mov	r5, r6
 800ab3a:	e708      	b.n	800a94e <_dtoa_r+0xa1e>
 800ab3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ab40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab44:	f7f5 fe78 	bl	8000838 <__aeabi_dmul>
 800ab48:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab4a:	f88b 5000 	strb.w	r5, [fp]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	e9cd 0100 	strd	r0, r1, [sp]
 800ab54:	d020      	beq.n	800ab98 <_dtoa_r+0xc68>
 800ab56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ab58:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800ab5c:	445b      	add	r3, fp
 800ab5e:	4698      	mov	r8, r3
 800ab60:	2200      	movs	r2, #0
 800ab62:	4b2c      	ldr	r3, [pc, #176]	; (800ac14 <_dtoa_r+0xce4>)
 800ab64:	4630      	mov	r0, r6
 800ab66:	4639      	mov	r1, r7
 800ab68:	f7f5 fe66 	bl	8000838 <__aeabi_dmul>
 800ab6c:	460f      	mov	r7, r1
 800ab6e:	4606      	mov	r6, r0
 800ab70:	f7f6 f912 	bl	8000d98 <__aeabi_d2iz>
 800ab74:	4605      	mov	r5, r0
 800ab76:	f7f5 fdf5 	bl	8000764 <__aeabi_i2d>
 800ab7a:	3530      	adds	r5, #48	; 0x30
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	460b      	mov	r3, r1
 800ab80:	4630      	mov	r0, r6
 800ab82:	4639      	mov	r1, r7
 800ab84:	f7f5 fca0 	bl	80004c8 <__aeabi_dsub>
 800ab88:	f804 5b01 	strb.w	r5, [r4], #1
 800ab8c:	4544      	cmp	r4, r8
 800ab8e:	4606      	mov	r6, r0
 800ab90:	460f      	mov	r7, r1
 800ab92:	d1e5      	bne.n	800ab60 <_dtoa_r+0xc30>
 800ab94:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 800ab98:	4b1f      	ldr	r3, [pc, #124]	; (800ac18 <_dtoa_r+0xce8>)
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aba0:	f7f5 fc94 	bl	80004cc <__adddf3>
 800aba4:	4632      	mov	r2, r6
 800aba6:	463b      	mov	r3, r7
 800aba8:	f7f6 f8b8 	bl	8000d1c <__aeabi_dcmplt>
 800abac:	2800      	cmp	r0, #0
 800abae:	d070      	beq.n	800ac92 <_dtoa_r+0xd62>
 800abb0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800abb2:	9306      	str	r3, [sp, #24]
 800abb4:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800abb8:	e48f      	b.n	800a4da <_dtoa_r+0x5aa>
 800abba:	2330      	movs	r3, #48	; 0x30
 800abbc:	f88b 3000 	strb.w	r3, [fp]
 800abc0:	9b06      	ldr	r3, [sp, #24]
 800abc2:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800abc6:	3301      	adds	r3, #1
 800abc8:	9306      	str	r3, [sp, #24]
 800abca:	465b      	mov	r3, fp
 800abcc:	e489      	b.n	800a4e2 <_dtoa_r+0x5b2>
 800abce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800abd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abd4:	e6a0      	b.n	800a918 <_dtoa_r+0x9e8>
 800abd6:	2300      	movs	r3, #0
 800abd8:	e676      	b.n	800a8c8 <_dtoa_r+0x998>
 800abda:	4631      	mov	r1, r6
 800abdc:	2205      	movs	r2, #5
 800abde:	4648      	mov	r0, r9
 800abe0:	f000 f8f4 	bl	800adcc <__multadd>
 800abe4:	4601      	mov	r1, r0
 800abe6:	4606      	mov	r6, r0
 800abe8:	4650      	mov	r0, sl
 800abea:	f000 fad5 	bl	800b198 <__mcmp>
 800abee:	2800      	cmp	r0, #0
 800abf0:	f73f aead 	bgt.w	800a94e <_dtoa_r+0xa1e>
 800abf4:	e722      	b.n	800aa3c <_dtoa_r+0xb0c>
 800abf6:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800abfa:	2602      	movs	r6, #2
 800abfc:	ed8d 7b00 	vstr	d7, [sp]
 800ac00:	f7ff bb02 	b.w	800a208 <_dtoa_r+0x2d8>
 800ac04:	40140000 	.word	0x40140000
 800ac08:	0800c070 	.word	0x0800c070
 800ac0c:	0800c048 	.word	0x0800c048
 800ac10:	401c0000 	.word	0x401c0000
 800ac14:	40240000 	.word	0x40240000
 800ac18:	3fe00000 	.word	0x3fe00000
 800ac1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	f43f af1d 	beq.w	800aa5e <_dtoa_r+0xb2e>
 800ac24:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800ac26:	2c00      	cmp	r4, #0
 800ac28:	f77f aba8 	ble.w	800a37c <_dtoa_r+0x44c>
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	4b45      	ldr	r3, [pc, #276]	; (800ad44 <_dtoa_r+0xe14>)
 800ac30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac34:	f7f5 fe00 	bl	8000838 <__aeabi_dmul>
 800ac38:	e9cd 0100 	strd	r0, r1, [sp]
 800ac3c:	1c70      	adds	r0, r6, #1
 800ac3e:	f7f5 fd91 	bl	8000764 <__aeabi_i2d>
 800ac42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac46:	f7f5 fdf7 	bl	8000838 <__aeabi_dmul>
 800ac4a:	4b3f      	ldr	r3, [pc, #252]	; (800ad48 <_dtoa_r+0xe18>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	f7f5 fc3d 	bl	80004cc <__adddf3>
 800ac52:	9b06      	ldr	r3, [sp, #24]
 800ac54:	9412      	str	r4, [sp, #72]	; 0x48
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4606      	mov	r6, r0
 800ac5a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800ac5e:	9316      	str	r3, [sp, #88]	; 0x58
 800ac60:	f7ff baf3 	b.w	800a24a <_dtoa_r+0x31a>
 800ac64:	4651      	mov	r1, sl
 800ac66:	2201      	movs	r2, #1
 800ac68:	4648      	mov	r0, r9
 800ac6a:	f000 fa3f 	bl	800b0ec <__lshift>
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4682      	mov	sl, r0
 800ac72:	f000 fa91 	bl	800b198 <__mcmp>
 800ac76:	2800      	cmp	r0, #0
 800ac78:	dd3b      	ble.n	800acf2 <_dtoa_r+0xdc2>
 800ac7a:	9b00      	ldr	r3, [sp, #0]
 800ac7c:	2b39      	cmp	r3, #57	; 0x39
 800ac7e:	d003      	beq.n	800ac88 <_dtoa_r+0xd58>
 800ac80:	9b02      	ldr	r3, [sp, #8]
 800ac82:	3331      	adds	r3, #49	; 0x31
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	e733      	b.n	800aaf0 <_dtoa_r+0xbc0>
 800ac88:	2239      	movs	r2, #57	; 0x39
 800ac8a:	9502      	str	r5, [sp, #8]
 800ac8c:	703a      	strb	r2, [r7, #0]
 800ac8e:	4645      	mov	r5, r8
 800ac90:	e58e      	b.n	800a7b0 <_dtoa_r+0x880>
 800ac92:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac96:	2000      	movs	r0, #0
 800ac98:	492c      	ldr	r1, [pc, #176]	; (800ad4c <_dtoa_r+0xe1c>)
 800ac9a:	f7f5 fc15 	bl	80004c8 <__aeabi_dsub>
 800ac9e:	4632      	mov	r2, r6
 800aca0:	463b      	mov	r3, r7
 800aca2:	f7f6 f859 	bl	8000d58 <__aeabi_dcmpgt>
 800aca6:	b910      	cbnz	r0, 800acae <_dtoa_r+0xd7e>
 800aca8:	f7ff bb68 	b.w	800a37c <_dtoa_r+0x44c>
 800acac:	4614      	mov	r4, r2
 800acae:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800acb2:	2b30      	cmp	r3, #48	; 0x30
 800acb4:	f104 32ff 	add.w	r2, r4, #4294967295
 800acb8:	d0f8      	beq.n	800acac <_dtoa_r+0xd7c>
 800acba:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800acbc:	9306      	str	r3, [sp, #24]
 800acbe:	e58d      	b.n	800a7dc <_dtoa_r+0x8ac>
 800acc0:	46d9      	mov	r9, fp
 800acc2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800acc6:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 800acca:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800accc:	9306      	str	r3, [sp, #24]
 800acce:	e404      	b.n	800a4da <_dtoa_r+0x5aa>
 800acd0:	9b00      	ldr	r3, [sp, #0]
 800acd2:	2b39      	cmp	r3, #57	; 0x39
 800acd4:	4621      	mov	r1, r4
 800acd6:	4632      	mov	r2, r6
 800acd8:	f107 0401 	add.w	r4, r7, #1
 800acdc:	465e      	mov	r6, fp
 800acde:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800ace2:	d0d1      	beq.n	800ac88 <_dtoa_r+0xd58>
 800ace4:	2a00      	cmp	r2, #0
 800ace6:	f77f af03 	ble.w	800aaf0 <_dtoa_r+0xbc0>
 800acea:	460b      	mov	r3, r1
 800acec:	3331      	adds	r3, #49	; 0x31
 800acee:	9300      	str	r3, [sp, #0]
 800acf0:	e6fe      	b.n	800aaf0 <_dtoa_r+0xbc0>
 800acf2:	f47f aefd 	bne.w	800aaf0 <_dtoa_r+0xbc0>
 800acf6:	9b00      	ldr	r3, [sp, #0]
 800acf8:	07da      	lsls	r2, r3, #31
 800acfa:	f57f aef9 	bpl.w	800aaf0 <_dtoa_r+0xbc0>
 800acfe:	e7bc      	b.n	800ac7a <_dtoa_r+0xd4a>
 800ad00:	4629      	mov	r1, r5
 800ad02:	2300      	movs	r3, #0
 800ad04:	220a      	movs	r2, #10
 800ad06:	4648      	mov	r0, r9
 800ad08:	f000 f860 	bl	800adcc <__multadd>
 800ad0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	4605      	mov	r5, r0
 800ad12:	dd09      	ble.n	800ad28 <_dtoa_r+0xdf8>
 800ad14:	9309      	str	r3, [sp, #36]	; 0x24
 800ad16:	e484      	b.n	800a622 <_dtoa_r+0x6f2>
 800ad18:	9b02      	ldr	r3, [sp, #8]
 800ad1a:	2b02      	cmp	r3, #2
 800ad1c:	dc0e      	bgt.n	800ad3c <_dtoa_r+0xe0c>
 800ad1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad20:	e507      	b.n	800a732 <_dtoa_r+0x802>
 800ad22:	2602      	movs	r6, #2
 800ad24:	f7ff ba70 	b.w	800a208 <_dtoa_r+0x2d8>
 800ad28:	9b02      	ldr	r3, [sp, #8]
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	dc06      	bgt.n	800ad3c <_dtoa_r+0xe0c>
 800ad2e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad30:	e7f0      	b.n	800ad14 <_dtoa_r+0xde4>
 800ad32:	f43f ac59 	beq.w	800a5e8 <_dtoa_r+0x6b8>
 800ad36:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 800ad3a:	e450      	b.n	800a5de <_dtoa_r+0x6ae>
 800ad3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ad3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ad40:	e678      	b.n	800aa34 <_dtoa_r+0xb04>
 800ad42:	bf00      	nop
 800ad44:	40240000 	.word	0x40240000
 800ad48:	401c0000 	.word	0x401c0000
 800ad4c:	3fe00000 	.word	0x3fe00000

0800ad50 <_localeconv_r>:
 800ad50:	4a04      	ldr	r2, [pc, #16]	; (800ad64 <_localeconv_r+0x14>)
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <_localeconv_r+0x18>)
 800ad54:	6812      	ldr	r2, [r2, #0]
 800ad56:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800ad58:	2800      	cmp	r0, #0
 800ad5a:	bf08      	it	eq
 800ad5c:	4618      	moveq	r0, r3
 800ad5e:	30f0      	adds	r0, #240	; 0xf0
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	2000006c 	.word	0x2000006c
 800ad68:	200008ac 	.word	0x200008ac

0800ad6c <_Balloc>:
 800ad6c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800ad6e:	b570      	push	{r4, r5, r6, lr}
 800ad70:	4605      	mov	r5, r0
 800ad72:	460c      	mov	r4, r1
 800ad74:	b14b      	cbz	r3, 800ad8a <_Balloc+0x1e>
 800ad76:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ad7a:	b180      	cbz	r0, 800ad9e <_Balloc+0x32>
 800ad7c:	6802      	ldr	r2, [r0, #0]
 800ad7e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800ad82:	2300      	movs	r3, #0
 800ad84:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ad88:	bd70      	pop	{r4, r5, r6, pc}
 800ad8a:	2221      	movs	r2, #33	; 0x21
 800ad8c:	2104      	movs	r1, #4
 800ad8e:	f000 fbd7 	bl	800b540 <_calloc_r>
 800ad92:	4603      	mov	r3, r0
 800ad94:	64e8      	str	r0, [r5, #76]	; 0x4c
 800ad96:	2800      	cmp	r0, #0
 800ad98:	d1ed      	bne.n	800ad76 <_Balloc+0xa>
 800ad9a:	2000      	movs	r0, #0
 800ad9c:	bd70      	pop	{r4, r5, r6, pc}
 800ad9e:	2101      	movs	r1, #1
 800ada0:	fa01 f604 	lsl.w	r6, r1, r4
 800ada4:	1d72      	adds	r2, r6, #5
 800ada6:	4628      	mov	r0, r5
 800ada8:	0092      	lsls	r2, r2, #2
 800adaa:	f000 fbc9 	bl	800b540 <_calloc_r>
 800adae:	2800      	cmp	r0, #0
 800adb0:	d0f3      	beq.n	800ad9a <_Balloc+0x2e>
 800adb2:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800adb6:	e7e4      	b.n	800ad82 <_Balloc+0x16>

0800adb8 <_Bfree>:
 800adb8:	b131      	cbz	r1, 800adc8 <_Bfree+0x10>
 800adba:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800adbc:	684a      	ldr	r2, [r1, #4]
 800adbe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800adc2:	6008      	str	r0, [r1, #0]
 800adc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800adc8:	4770      	bx	lr
 800adca:	bf00      	nop

0800adcc <__multadd>:
 800adcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adce:	690c      	ldr	r4, [r1, #16]
 800add0:	b083      	sub	sp, #12
 800add2:	460d      	mov	r5, r1
 800add4:	4606      	mov	r6, r0
 800add6:	f101 0c14 	add.w	ip, r1, #20
 800adda:	2700      	movs	r7, #0
 800addc:	f8dc 0000 	ldr.w	r0, [ip]
 800ade0:	b281      	uxth	r1, r0
 800ade2:	fb02 3301 	mla	r3, r2, r1, r3
 800ade6:	0c01      	lsrs	r1, r0, #16
 800ade8:	0c18      	lsrs	r0, r3, #16
 800adea:	fb02 0101 	mla	r1, r2, r1, r0
 800adee:	b29b      	uxth	r3, r3
 800adf0:	3701      	adds	r7, #1
 800adf2:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800adf6:	42bc      	cmp	r4, r7
 800adf8:	f84c 3b04 	str.w	r3, [ip], #4
 800adfc:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800ae00:	dcec      	bgt.n	800addc <__multadd+0x10>
 800ae02:	b13b      	cbz	r3, 800ae14 <__multadd+0x48>
 800ae04:	68aa      	ldr	r2, [r5, #8]
 800ae06:	42a2      	cmp	r2, r4
 800ae08:	dd07      	ble.n	800ae1a <__multadd+0x4e>
 800ae0a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 800ae0e:	3401      	adds	r4, #1
 800ae10:	6153      	str	r3, [r2, #20]
 800ae12:	612c      	str	r4, [r5, #16]
 800ae14:	4628      	mov	r0, r5
 800ae16:	b003      	add	sp, #12
 800ae18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae1a:	6869      	ldr	r1, [r5, #4]
 800ae1c:	9301      	str	r3, [sp, #4]
 800ae1e:	3101      	adds	r1, #1
 800ae20:	4630      	mov	r0, r6
 800ae22:	f7ff ffa3 	bl	800ad6c <_Balloc>
 800ae26:	692a      	ldr	r2, [r5, #16]
 800ae28:	3202      	adds	r2, #2
 800ae2a:	f105 010c 	add.w	r1, r5, #12
 800ae2e:	4607      	mov	r7, r0
 800ae30:	0092      	lsls	r2, r2, #2
 800ae32:	300c      	adds	r0, #12
 800ae34:	f7f5 f9e4 	bl	8000200 <memcpy>
 800ae38:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 800ae3a:	6869      	ldr	r1, [r5, #4]
 800ae3c:	9b01      	ldr	r3, [sp, #4]
 800ae3e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800ae42:	6028      	str	r0, [r5, #0]
 800ae44:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 800ae48:	463d      	mov	r5, r7
 800ae4a:	e7de      	b.n	800ae0a <__multadd+0x3e>

0800ae4c <__hi0bits>:
 800ae4c:	0c02      	lsrs	r2, r0, #16
 800ae4e:	0412      	lsls	r2, r2, #16
 800ae50:	4603      	mov	r3, r0
 800ae52:	b9c2      	cbnz	r2, 800ae86 <__hi0bits+0x3a>
 800ae54:	0403      	lsls	r3, r0, #16
 800ae56:	2010      	movs	r0, #16
 800ae58:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ae5c:	bf04      	itt	eq
 800ae5e:	021b      	lsleq	r3, r3, #8
 800ae60:	3008      	addeq	r0, #8
 800ae62:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ae66:	bf04      	itt	eq
 800ae68:	011b      	lsleq	r3, r3, #4
 800ae6a:	3004      	addeq	r0, #4
 800ae6c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ae70:	bf04      	itt	eq
 800ae72:	009b      	lsleq	r3, r3, #2
 800ae74:	3002      	addeq	r0, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	db04      	blt.n	800ae84 <__hi0bits+0x38>
 800ae7a:	005b      	lsls	r3, r3, #1
 800ae7c:	d501      	bpl.n	800ae82 <__hi0bits+0x36>
 800ae7e:	3001      	adds	r0, #1
 800ae80:	4770      	bx	lr
 800ae82:	2020      	movs	r0, #32
 800ae84:	4770      	bx	lr
 800ae86:	2000      	movs	r0, #0
 800ae88:	e7e6      	b.n	800ae58 <__hi0bits+0xc>
 800ae8a:	bf00      	nop

0800ae8c <__lo0bits>:
 800ae8c:	6803      	ldr	r3, [r0, #0]
 800ae8e:	f013 0207 	ands.w	r2, r3, #7
 800ae92:	4601      	mov	r1, r0
 800ae94:	d007      	beq.n	800aea6 <__lo0bits+0x1a>
 800ae96:	07da      	lsls	r2, r3, #31
 800ae98:	d41f      	bmi.n	800aeda <__lo0bits+0x4e>
 800ae9a:	0798      	lsls	r0, r3, #30
 800ae9c:	d51f      	bpl.n	800aede <__lo0bits+0x52>
 800ae9e:	085b      	lsrs	r3, r3, #1
 800aea0:	600b      	str	r3, [r1, #0]
 800aea2:	2001      	movs	r0, #1
 800aea4:	4770      	bx	lr
 800aea6:	b298      	uxth	r0, r3
 800aea8:	b1a0      	cbz	r0, 800aed4 <__lo0bits+0x48>
 800aeaa:	4610      	mov	r0, r2
 800aeac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aeb0:	bf04      	itt	eq
 800aeb2:	0a1b      	lsreq	r3, r3, #8
 800aeb4:	3008      	addeq	r0, #8
 800aeb6:	071a      	lsls	r2, r3, #28
 800aeb8:	bf04      	itt	eq
 800aeba:	091b      	lsreq	r3, r3, #4
 800aebc:	3004      	addeq	r0, #4
 800aebe:	079a      	lsls	r2, r3, #30
 800aec0:	bf04      	itt	eq
 800aec2:	089b      	lsreq	r3, r3, #2
 800aec4:	3002      	addeq	r0, #2
 800aec6:	07da      	lsls	r2, r3, #31
 800aec8:	d402      	bmi.n	800aed0 <__lo0bits+0x44>
 800aeca:	085b      	lsrs	r3, r3, #1
 800aecc:	d00b      	beq.n	800aee6 <__lo0bits+0x5a>
 800aece:	3001      	adds	r0, #1
 800aed0:	600b      	str	r3, [r1, #0]
 800aed2:	4770      	bx	lr
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	2010      	movs	r0, #16
 800aed8:	e7e8      	b.n	800aeac <__lo0bits+0x20>
 800aeda:	2000      	movs	r0, #0
 800aedc:	4770      	bx	lr
 800aede:	089b      	lsrs	r3, r3, #2
 800aee0:	600b      	str	r3, [r1, #0]
 800aee2:	2002      	movs	r0, #2
 800aee4:	4770      	bx	lr
 800aee6:	2020      	movs	r0, #32
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop

0800aeec <__i2b>:
 800aeec:	b510      	push	{r4, lr}
 800aeee:	460c      	mov	r4, r1
 800aef0:	2101      	movs	r1, #1
 800aef2:	f7ff ff3b 	bl	800ad6c <_Balloc>
 800aef6:	2201      	movs	r2, #1
 800aef8:	e9c0 2404 	strd	r2, r4, [r0, #16]
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	bf00      	nop

0800af00 <__multiply>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	690e      	ldr	r6, [r1, #16]
 800af06:	6914      	ldr	r4, [r2, #16]
 800af08:	42a6      	cmp	r6, r4
 800af0a:	b083      	sub	sp, #12
 800af0c:	460f      	mov	r7, r1
 800af0e:	4615      	mov	r5, r2
 800af10:	da04      	bge.n	800af1c <__multiply+0x1c>
 800af12:	4632      	mov	r2, r6
 800af14:	462f      	mov	r7, r5
 800af16:	4626      	mov	r6, r4
 800af18:	460d      	mov	r5, r1
 800af1a:	4614      	mov	r4, r2
 800af1c:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 800af20:	eb06 0804 	add.w	r8, r6, r4
 800af24:	4543      	cmp	r3, r8
 800af26:	bfb8      	it	lt
 800af28:	3101      	addlt	r1, #1
 800af2a:	f7ff ff1f 	bl	800ad6c <_Balloc>
 800af2e:	f100 0914 	add.w	r9, r0, #20
 800af32:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 800af36:	45f1      	cmp	r9, lr
 800af38:	9000      	str	r0, [sp, #0]
 800af3a:	d205      	bcs.n	800af48 <__multiply+0x48>
 800af3c:	464b      	mov	r3, r9
 800af3e:	2200      	movs	r2, #0
 800af40:	f843 2b04 	str.w	r2, [r3], #4
 800af44:	459e      	cmp	lr, r3
 800af46:	d8fb      	bhi.n	800af40 <__multiply+0x40>
 800af48:	f105 0a14 	add.w	sl, r5, #20
 800af4c:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 800af50:	f107 0314 	add.w	r3, r7, #20
 800af54:	45a2      	cmp	sl, r4
 800af56:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 800af5a:	d261      	bcs.n	800b020 <__multiply+0x120>
 800af5c:	1b64      	subs	r4, r4, r5
 800af5e:	3c15      	subs	r4, #21
 800af60:	f024 0403 	bic.w	r4, r4, #3
 800af64:	f8cd e004 	str.w	lr, [sp, #4]
 800af68:	44a2      	add	sl, r4
 800af6a:	f105 0210 	add.w	r2, r5, #16
 800af6e:	469e      	mov	lr, r3
 800af70:	e005      	b.n	800af7e <__multiply+0x7e>
 800af72:	0c2d      	lsrs	r5, r5, #16
 800af74:	d12b      	bne.n	800afce <__multiply+0xce>
 800af76:	4592      	cmp	sl, r2
 800af78:	f109 0904 	add.w	r9, r9, #4
 800af7c:	d04e      	beq.n	800b01c <__multiply+0x11c>
 800af7e:	f852 5f04 	ldr.w	r5, [r2, #4]!
 800af82:	fa1f fb85 	uxth.w	fp, r5
 800af86:	f1bb 0f00 	cmp.w	fp, #0
 800af8a:	d0f2      	beq.n	800af72 <__multiply+0x72>
 800af8c:	4677      	mov	r7, lr
 800af8e:	464e      	mov	r6, r9
 800af90:	2000      	movs	r0, #0
 800af92:	e000      	b.n	800af96 <__multiply+0x96>
 800af94:	4626      	mov	r6, r4
 800af96:	f857 1b04 	ldr.w	r1, [r7], #4
 800af9a:	6834      	ldr	r4, [r6, #0]
 800af9c:	b28b      	uxth	r3, r1
 800af9e:	b2a5      	uxth	r5, r4
 800afa0:	0c09      	lsrs	r1, r1, #16
 800afa2:	0c24      	lsrs	r4, r4, #16
 800afa4:	fb0b 5303 	mla	r3, fp, r3, r5
 800afa8:	4403      	add	r3, r0
 800afaa:	fb0b 4001 	mla	r0, fp, r1, r4
 800afae:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 800afb2:	4634      	mov	r4, r6
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800afba:	45bc      	cmp	ip, r7
 800afbc:	ea4f 4010 	mov.w	r0, r0, lsr #16
 800afc0:	f844 3b04 	str.w	r3, [r4], #4
 800afc4:	d8e6      	bhi.n	800af94 <__multiply+0x94>
 800afc6:	6070      	str	r0, [r6, #4]
 800afc8:	6815      	ldr	r5, [r2, #0]
 800afca:	0c2d      	lsrs	r5, r5, #16
 800afcc:	d0d3      	beq.n	800af76 <__multiply+0x76>
 800afce:	f8d9 3000 	ldr.w	r3, [r9]
 800afd2:	4676      	mov	r6, lr
 800afd4:	4618      	mov	r0, r3
 800afd6:	46cb      	mov	fp, r9
 800afd8:	2100      	movs	r1, #0
 800afda:	e000      	b.n	800afde <__multiply+0xde>
 800afdc:	46a3      	mov	fp, r4
 800afde:	8834      	ldrh	r4, [r6, #0]
 800afe0:	0c00      	lsrs	r0, r0, #16
 800afe2:	fb05 0004 	mla	r0, r5, r4, r0
 800afe6:	4401      	add	r1, r0
 800afe8:	b29b      	uxth	r3, r3
 800afea:	465c      	mov	r4, fp
 800afec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800aff0:	f844 3b04 	str.w	r3, [r4], #4
 800aff4:	f856 3b04 	ldr.w	r3, [r6], #4
 800aff8:	f8db 0004 	ldr.w	r0, [fp, #4]
 800affc:	0c1b      	lsrs	r3, r3, #16
 800affe:	b287      	uxth	r7, r0
 800b000:	fb05 7303 	mla	r3, r5, r3, r7
 800b004:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800b008:	45b4      	cmp	ip, r6
 800b00a:	ea4f 4113 	mov.w	r1, r3, lsr #16
 800b00e:	d8e5      	bhi.n	800afdc <__multiply+0xdc>
 800b010:	4592      	cmp	sl, r2
 800b012:	f8cb 3004 	str.w	r3, [fp, #4]
 800b016:	f109 0904 	add.w	r9, r9, #4
 800b01a:	d1b0      	bne.n	800af7e <__multiply+0x7e>
 800b01c:	f8dd e004 	ldr.w	lr, [sp, #4]
 800b020:	f1b8 0f00 	cmp.w	r8, #0
 800b024:	dd0b      	ble.n	800b03e <__multiply+0x13e>
 800b026:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800b02a:	f1ae 0e04 	sub.w	lr, lr, #4
 800b02e:	b11b      	cbz	r3, 800b038 <__multiply+0x138>
 800b030:	e005      	b.n	800b03e <__multiply+0x13e>
 800b032:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b036:	b913      	cbnz	r3, 800b03e <__multiply+0x13e>
 800b038:	f1b8 0801 	subs.w	r8, r8, #1
 800b03c:	d1f9      	bne.n	800b032 <__multiply+0x132>
 800b03e:	9800      	ldr	r0, [sp, #0]
 800b040:	f8c0 8010 	str.w	r8, [r0, #16]
 800b044:	b003      	add	sp, #12
 800b046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04a:	bf00      	nop

0800b04c <__pow5mult>:
 800b04c:	f012 0303 	ands.w	r3, r2, #3
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	4614      	mov	r4, r2
 800b056:	4607      	mov	r7, r0
 800b058:	d12e      	bne.n	800b0b8 <__pow5mult+0x6c>
 800b05a:	460d      	mov	r5, r1
 800b05c:	10a4      	asrs	r4, r4, #2
 800b05e:	d01c      	beq.n	800b09a <__pow5mult+0x4e>
 800b060:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 800b062:	b396      	cbz	r6, 800b0ca <__pow5mult+0x7e>
 800b064:	07e3      	lsls	r3, r4, #31
 800b066:	f04f 0800 	mov.w	r8, #0
 800b06a:	d406      	bmi.n	800b07a <__pow5mult+0x2e>
 800b06c:	1064      	asrs	r4, r4, #1
 800b06e:	d014      	beq.n	800b09a <__pow5mult+0x4e>
 800b070:	6830      	ldr	r0, [r6, #0]
 800b072:	b1a8      	cbz	r0, 800b0a0 <__pow5mult+0x54>
 800b074:	4606      	mov	r6, r0
 800b076:	07e3      	lsls	r3, r4, #31
 800b078:	d5f8      	bpl.n	800b06c <__pow5mult+0x20>
 800b07a:	4632      	mov	r2, r6
 800b07c:	4629      	mov	r1, r5
 800b07e:	4638      	mov	r0, r7
 800b080:	f7ff ff3e 	bl	800af00 <__multiply>
 800b084:	b1b5      	cbz	r5, 800b0b4 <__pow5mult+0x68>
 800b086:	686a      	ldr	r2, [r5, #4]
 800b088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b08a:	1064      	asrs	r4, r4, #1
 800b08c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b090:	6029      	str	r1, [r5, #0]
 800b092:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b096:	4605      	mov	r5, r0
 800b098:	d1ea      	bne.n	800b070 <__pow5mult+0x24>
 800b09a:	4628      	mov	r0, r5
 800b09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a0:	4632      	mov	r2, r6
 800b0a2:	4631      	mov	r1, r6
 800b0a4:	4638      	mov	r0, r7
 800b0a6:	f7ff ff2b 	bl	800af00 <__multiply>
 800b0aa:	6030      	str	r0, [r6, #0]
 800b0ac:	f8c0 8000 	str.w	r8, [r0]
 800b0b0:	4606      	mov	r6, r0
 800b0b2:	e7e0      	b.n	800b076 <__pow5mult+0x2a>
 800b0b4:	4605      	mov	r5, r0
 800b0b6:	e7d9      	b.n	800b06c <__pow5mult+0x20>
 800b0b8:	3b01      	subs	r3, #1
 800b0ba:	4a0b      	ldr	r2, [pc, #44]	; (800b0e8 <__pow5mult+0x9c>)
 800b0bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	f7ff fe83 	bl	800adcc <__multadd>
 800b0c6:	4605      	mov	r5, r0
 800b0c8:	e7c8      	b.n	800b05c <__pow5mult+0x10>
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	4638      	mov	r0, r7
 800b0ce:	f7ff fe4d 	bl	800ad6c <_Balloc>
 800b0d2:	f240 2371 	movw	r3, #625	; 0x271
 800b0d6:	6143      	str	r3, [r0, #20]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	2300      	movs	r3, #0
 800b0dc:	6102      	str	r2, [r0, #16]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	64b8      	str	r0, [r7, #72]	; 0x48
 800b0e2:	6003      	str	r3, [r0, #0]
 800b0e4:	e7be      	b.n	800b064 <__pow5mult+0x18>
 800b0e6:	bf00      	nop
 800b0e8:	0800c138 	.word	0x0800c138

0800b0ec <__lshift>:
 800b0ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0f0:	4691      	mov	r9, r2
 800b0f2:	690a      	ldr	r2, [r1, #16]
 800b0f4:	460e      	mov	r6, r1
 800b0f6:	ea4f 1469 	mov.w	r4, r9, asr #5
 800b0fa:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 800b0fe:	eb04 0802 	add.w	r8, r4, r2
 800b102:	f108 0501 	add.w	r5, r8, #1
 800b106:	429d      	cmp	r5, r3
 800b108:	4607      	mov	r7, r0
 800b10a:	dd04      	ble.n	800b116 <__lshift+0x2a>
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	429d      	cmp	r5, r3
 800b110:	f101 0101 	add.w	r1, r1, #1
 800b114:	dcfa      	bgt.n	800b10c <__lshift+0x20>
 800b116:	4638      	mov	r0, r7
 800b118:	f7ff fe28 	bl	800ad6c <_Balloc>
 800b11c:	2c00      	cmp	r4, #0
 800b11e:	f100 0314 	add.w	r3, r0, #20
 800b122:	dd37      	ble.n	800b194 <__lshift+0xa8>
 800b124:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800b128:	2200      	movs	r2, #0
 800b12a:	f843 2b04 	str.w	r2, [r3], #4
 800b12e:	428b      	cmp	r3, r1
 800b130:	d1fb      	bne.n	800b12a <__lshift+0x3e>
 800b132:	6934      	ldr	r4, [r6, #16]
 800b134:	f106 0314 	add.w	r3, r6, #20
 800b138:	f019 091f 	ands.w	r9, r9, #31
 800b13c:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 800b140:	d020      	beq.n	800b184 <__lshift+0x98>
 800b142:	f1c9 0e20 	rsb	lr, r9, #32
 800b146:	2200      	movs	r2, #0
 800b148:	e000      	b.n	800b14c <__lshift+0x60>
 800b14a:	4651      	mov	r1, sl
 800b14c:	681c      	ldr	r4, [r3, #0]
 800b14e:	468a      	mov	sl, r1
 800b150:	fa04 f409 	lsl.w	r4, r4, r9
 800b154:	4314      	orrs	r4, r2
 800b156:	f84a 4b04 	str.w	r4, [sl], #4
 800b15a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b15e:	4563      	cmp	r3, ip
 800b160:	fa22 f20e 	lsr.w	r2, r2, lr
 800b164:	d3f1      	bcc.n	800b14a <__lshift+0x5e>
 800b166:	604a      	str	r2, [r1, #4]
 800b168:	b10a      	cbz	r2, 800b16e <__lshift+0x82>
 800b16a:	f108 0502 	add.w	r5, r8, #2
 800b16e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b170:	6872      	ldr	r2, [r6, #4]
 800b172:	3d01      	subs	r5, #1
 800b174:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b178:	6105      	str	r5, [r0, #16]
 800b17a:	6031      	str	r1, [r6, #0]
 800b17c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 800b180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b184:	3904      	subs	r1, #4
 800b186:	f853 2b04 	ldr.w	r2, [r3], #4
 800b18a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b18e:	459c      	cmp	ip, r3
 800b190:	d8f9      	bhi.n	800b186 <__lshift+0x9a>
 800b192:	e7ec      	b.n	800b16e <__lshift+0x82>
 800b194:	4619      	mov	r1, r3
 800b196:	e7cc      	b.n	800b132 <__lshift+0x46>

0800b198 <__mcmp>:
 800b198:	b430      	push	{r4, r5}
 800b19a:	690b      	ldr	r3, [r1, #16]
 800b19c:	4605      	mov	r5, r0
 800b19e:	6900      	ldr	r0, [r0, #16]
 800b1a0:	1ac0      	subs	r0, r0, r3
 800b1a2:	d10f      	bne.n	800b1c4 <__mcmp+0x2c>
 800b1a4:	009b      	lsls	r3, r3, #2
 800b1a6:	3514      	adds	r5, #20
 800b1a8:	3114      	adds	r1, #20
 800b1aa:	4419      	add	r1, r3
 800b1ac:	442b      	add	r3, r5
 800b1ae:	e001      	b.n	800b1b4 <__mcmp+0x1c>
 800b1b0:	429d      	cmp	r5, r3
 800b1b2:	d207      	bcs.n	800b1c4 <__mcmp+0x2c>
 800b1b4:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800b1b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b1bc:	4294      	cmp	r4, r2
 800b1be:	d0f7      	beq.n	800b1b0 <__mcmp+0x18>
 800b1c0:	d302      	bcc.n	800b1c8 <__mcmp+0x30>
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	bc30      	pop	{r4, r5}
 800b1c6:	4770      	bx	lr
 800b1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1cc:	e7fa      	b.n	800b1c4 <__mcmp+0x2c>
 800b1ce:	bf00      	nop

0800b1d0 <__mdiff>:
 800b1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d4:	6913      	ldr	r3, [r2, #16]
 800b1d6:	690d      	ldr	r5, [r1, #16]
 800b1d8:	1aed      	subs	r5, r5, r3
 800b1da:	2d00      	cmp	r5, #0
 800b1dc:	460e      	mov	r6, r1
 800b1de:	4690      	mov	r8, r2
 800b1e0:	f101 0414 	add.w	r4, r1, #20
 800b1e4:	f102 0714 	add.w	r7, r2, #20
 800b1e8:	d114      	bne.n	800b214 <__mdiff+0x44>
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	18e2      	adds	r2, r4, r3
 800b1ee:	443b      	add	r3, r7
 800b1f0:	e001      	b.n	800b1f6 <__mdiff+0x26>
 800b1f2:	42a2      	cmp	r2, r4
 800b1f4:	d959      	bls.n	800b2aa <__mdiff+0xda>
 800b1f6:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 800b1fa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b1fe:	458c      	cmp	ip, r1
 800b200:	d0f7      	beq.n	800b1f2 <__mdiff+0x22>
 800b202:	d209      	bcs.n	800b218 <__mdiff+0x48>
 800b204:	4622      	mov	r2, r4
 800b206:	4633      	mov	r3, r6
 800b208:	463c      	mov	r4, r7
 800b20a:	4646      	mov	r6, r8
 800b20c:	4617      	mov	r7, r2
 800b20e:	4698      	mov	r8, r3
 800b210:	2501      	movs	r5, #1
 800b212:	e001      	b.n	800b218 <__mdiff+0x48>
 800b214:	dbf6      	blt.n	800b204 <__mdiff+0x34>
 800b216:	2500      	movs	r5, #0
 800b218:	6871      	ldr	r1, [r6, #4]
 800b21a:	f7ff fda7 	bl	800ad6c <_Balloc>
 800b21e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b222:	6936      	ldr	r6, [r6, #16]
 800b224:	60c5      	str	r5, [r0, #12]
 800b226:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800b22a:	46bc      	mov	ip, r7
 800b22c:	f100 0514 	add.w	r5, r0, #20
 800b230:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 800b234:	2300      	movs	r3, #0
 800b236:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b23a:	f854 8b04 	ldr.w	r8, [r4], #4
 800b23e:	b28a      	uxth	r2, r1
 800b240:	fa13 f388 	uxtah	r3, r3, r8
 800b244:	0c09      	lsrs	r1, r1, #16
 800b246:	1a9a      	subs	r2, r3, r2
 800b248:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 800b24c:	eb03 4322 	add.w	r3, r3, r2, asr #16
 800b250:	b292      	uxth	r2, r2
 800b252:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b256:	45e6      	cmp	lr, ip
 800b258:	f845 2b04 	str.w	r2, [r5], #4
 800b25c:	ea4f 4323 	mov.w	r3, r3, asr #16
 800b260:	d8e9      	bhi.n	800b236 <__mdiff+0x66>
 800b262:	42a7      	cmp	r7, r4
 800b264:	d917      	bls.n	800b296 <__mdiff+0xc6>
 800b266:	46ae      	mov	lr, r5
 800b268:	46a4      	mov	ip, r4
 800b26a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b26e:	fa13 f382 	uxtah	r3, r3, r2
 800b272:	1419      	asrs	r1, r3, #16
 800b274:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b278:	b29b      	uxth	r3, r3
 800b27a:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 800b27e:	4567      	cmp	r7, ip
 800b280:	f84e 2b04 	str.w	r2, [lr], #4
 800b284:	ea4f 4321 	mov.w	r3, r1, asr #16
 800b288:	d8ef      	bhi.n	800b26a <__mdiff+0x9a>
 800b28a:	43e4      	mvns	r4, r4
 800b28c:	4427      	add	r7, r4
 800b28e:	f027 0703 	bic.w	r7, r7, #3
 800b292:	3704      	adds	r7, #4
 800b294:	443d      	add	r5, r7
 800b296:	3d04      	subs	r5, #4
 800b298:	b922      	cbnz	r2, 800b2a4 <__mdiff+0xd4>
 800b29a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b29e:	3e01      	subs	r6, #1
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d0fa      	beq.n	800b29a <__mdiff+0xca>
 800b2a4:	6106      	str	r6, [r0, #16]
 800b2a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2aa:	2100      	movs	r1, #0
 800b2ac:	f7ff fd5e 	bl	800ad6c <_Balloc>
 800b2b0:	2201      	movs	r2, #1
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b2b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b2bc <__d2b>:
 800b2bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2c0:	460f      	mov	r7, r1
 800b2c2:	b083      	sub	sp, #12
 800b2c4:	2101      	movs	r1, #1
 800b2c6:	ec55 4b10 	vmov	r4, r5, d0
 800b2ca:	4616      	mov	r6, r2
 800b2cc:	f7ff fd4e 	bl	800ad6c <_Balloc>
 800b2d0:	f3c5 580a 	ubfx	r8, r5, #20, #11
 800b2d4:	4681      	mov	r9, r0
 800b2d6:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800b2da:	f1b8 0f00 	cmp.w	r8, #0
 800b2de:	d001      	beq.n	800b2e4 <__d2b+0x28>
 800b2e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2e4:	2c00      	cmp	r4, #0
 800b2e6:	9301      	str	r3, [sp, #4]
 800b2e8:	d024      	beq.n	800b334 <__d2b+0x78>
 800b2ea:	a802      	add	r0, sp, #8
 800b2ec:	f840 4d08 	str.w	r4, [r0, #-8]!
 800b2f0:	f7ff fdcc 	bl	800ae8c <__lo0bits>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	d136      	bne.n	800b366 <__d2b+0xaa>
 800b2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2fc:	f8c9 2014 	str.w	r2, [r9, #20]
 800b300:	2b00      	cmp	r3, #0
 800b302:	bf0c      	ite	eq
 800b304:	2101      	moveq	r1, #1
 800b306:	2102      	movne	r1, #2
 800b308:	f8c9 3018 	str.w	r3, [r9, #24]
 800b30c:	f8c9 1010 	str.w	r1, [r9, #16]
 800b310:	f1b8 0f00 	cmp.w	r8, #0
 800b314:	d11b      	bne.n	800b34e <__d2b+0x92>
 800b316:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800b31a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b31e:	6038      	str	r0, [r7, #0]
 800b320:	6918      	ldr	r0, [r3, #16]
 800b322:	f7ff fd93 	bl	800ae4c <__hi0bits>
 800b326:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b32a:	6030      	str	r0, [r6, #0]
 800b32c:	4648      	mov	r0, r9
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b334:	a801      	add	r0, sp, #4
 800b336:	f7ff fda9 	bl	800ae8c <__lo0bits>
 800b33a:	9b01      	ldr	r3, [sp, #4]
 800b33c:	f8c9 3014 	str.w	r3, [r9, #20]
 800b340:	2101      	movs	r1, #1
 800b342:	3020      	adds	r0, #32
 800b344:	f8c9 1010 	str.w	r1, [r9, #16]
 800b348:	f1b8 0f00 	cmp.w	r8, #0
 800b34c:	d0e3      	beq.n	800b316 <__d2b+0x5a>
 800b34e:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
 800b352:	eb08 0300 	add.w	r3, r8, r0
 800b356:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	6030      	str	r0, [r6, #0]
 800b35e:	4648      	mov	r0, r9
 800b360:	b003      	add	sp, #12
 800b362:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b366:	e9dd 1300 	ldrd	r1, r3, [sp]
 800b36a:	f1c0 0220 	rsb	r2, r0, #32
 800b36e:	fa03 f202 	lsl.w	r2, r3, r2
 800b372:	430a      	orrs	r2, r1
 800b374:	40c3      	lsrs	r3, r0
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	f8c9 2014 	str.w	r2, [r9, #20]
 800b37c:	e7c0      	b.n	800b300 <__d2b+0x44>
 800b37e:	bf00      	nop

0800b380 <frexp>:
 800b380:	ec53 2b10 	vmov	r2, r3, d0
 800b384:	b570      	push	{r4, r5, r6, lr}
 800b386:	4e16      	ldr	r6, [pc, #88]	; (800b3e0 <frexp+0x60>)
 800b388:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b38c:	2500      	movs	r5, #0
 800b38e:	42b1      	cmp	r1, r6
 800b390:	4604      	mov	r4, r0
 800b392:	6005      	str	r5, [r0, #0]
 800b394:	dc21      	bgt.n	800b3da <frexp+0x5a>
 800b396:	ee10 6a10 	vmov	r6, s0
 800b39a:	430e      	orrs	r6, r1
 800b39c:	d01d      	beq.n	800b3da <frexp+0x5a>
 800b39e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	da0c      	bge.n	800b3c0 <frexp+0x40>
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	ee10 0a10 	vmov	r0, s0
 800b3ae:	4b0d      	ldr	r3, [pc, #52]	; (800b3e4 <frexp+0x64>)
 800b3b0:	f7f5 fa42 	bl	8000838 <__aeabi_dmul>
 800b3b4:	f06f 0535 	mvn.w	r5, #53	; 0x35
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	4608      	mov	r0, r1
 800b3bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b3c0:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800b3c4:	1509      	asrs	r1, r1, #20
 800b3c6:	f420 00e0 	bic.w	r0, r0, #7340032	; 0x700000
 800b3ca:	f2a1 31fe 	subw	r1, r1, #1022	; 0x3fe
 800b3ce:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 800b3d2:	4429      	add	r1, r5
 800b3d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3d8:	6021      	str	r1, [r4, #0]
 800b3da:	ec43 2b10 	vmov	d0, r2, r3
 800b3de:	bd70      	pop	{r4, r5, r6, pc}
 800b3e0:	7fefffff 	.word	0x7fefffff
 800b3e4:	43500000 	.word	0x43500000

0800b3e8 <strncpy>:
 800b3e8:	ea40 0301 	orr.w	r3, r0, r1
 800b3ec:	079b      	lsls	r3, r3, #30
 800b3ee:	b470      	push	{r4, r5, r6}
 800b3f0:	d12a      	bne.n	800b448 <strncpy+0x60>
 800b3f2:	2a03      	cmp	r2, #3
 800b3f4:	d928      	bls.n	800b448 <strncpy+0x60>
 800b3f6:	460c      	mov	r4, r1
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	4621      	mov	r1, r4
 800b3fc:	f854 6b04 	ldr.w	r6, [r4], #4
 800b400:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
 800b404:	ea25 0506 	bic.w	r5, r5, r6
 800b408:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
 800b40c:	d106      	bne.n	800b41c <strncpy+0x34>
 800b40e:	3a04      	subs	r2, #4
 800b410:	2a03      	cmp	r2, #3
 800b412:	f843 6b04 	str.w	r6, [r3], #4
 800b416:	4621      	mov	r1, r4
 800b418:	d8ef      	bhi.n	800b3fa <strncpy+0x12>
 800b41a:	b19a      	cbz	r2, 800b444 <strncpy+0x5c>
 800b41c:	780c      	ldrb	r4, [r1, #0]
 800b41e:	701c      	strb	r4, [r3, #0]
 800b420:	3a01      	subs	r2, #1
 800b422:	3301      	adds	r3, #1
 800b424:	b13c      	cbz	r4, 800b436 <strncpy+0x4e>
 800b426:	b16a      	cbz	r2, 800b444 <strncpy+0x5c>
 800b428:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b42c:	f803 4b01 	strb.w	r4, [r3], #1
 800b430:	3a01      	subs	r2, #1
 800b432:	2c00      	cmp	r4, #0
 800b434:	d1f7      	bne.n	800b426 <strncpy+0x3e>
 800b436:	b12a      	cbz	r2, 800b444 <strncpy+0x5c>
 800b438:	441a      	add	r2, r3
 800b43a:	2100      	movs	r1, #0
 800b43c:	f803 1b01 	strb.w	r1, [r3], #1
 800b440:	4293      	cmp	r3, r2
 800b442:	d1fb      	bne.n	800b43c <strncpy+0x54>
 800b444:	bc70      	pop	{r4, r5, r6}
 800b446:	4770      	bx	lr
 800b448:	4603      	mov	r3, r0
 800b44a:	e7e6      	b.n	800b41a <strncpy+0x32>

0800b44c <__ssprint_r>:
 800b44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b450:	6893      	ldr	r3, [r2, #8]
 800b452:	b083      	sub	sp, #12
 800b454:	4690      	mov	r8, r2
 800b456:	2b00      	cmp	r3, #0
 800b458:	d06c      	beq.n	800b534 <__ssprint_r+0xe8>
 800b45a:	6817      	ldr	r7, [r2, #0]
 800b45c:	688d      	ldr	r5, [r1, #8]
 800b45e:	4682      	mov	sl, r0
 800b460:	460c      	mov	r4, r1
 800b462:	6808      	ldr	r0, [r1, #0]
 800b464:	3708      	adds	r7, #8
 800b466:	e042      	b.n	800b4ee <__ssprint_r+0xa2>
 800b468:	89a3      	ldrh	r3, [r4, #12]
 800b46a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800b46e:	d02d      	beq.n	800b4cc <__ssprint_r+0x80>
 800b470:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800b474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b478:	eba0 0b01 	sub.w	fp, r0, r1
 800b47c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b480:	1c70      	adds	r0, r6, #1
 800b482:	106d      	asrs	r5, r5, #1
 800b484:	4458      	add	r0, fp
 800b486:	42a8      	cmp	r0, r5
 800b488:	462a      	mov	r2, r5
 800b48a:	bf84      	itt	hi
 800b48c:	4605      	movhi	r5, r0
 800b48e:	462a      	movhi	r2, r5
 800b490:	055b      	lsls	r3, r3, #21
 800b492:	d536      	bpl.n	800b502 <__ssprint_r+0xb6>
 800b494:	4611      	mov	r1, r2
 800b496:	4650      	mov	r0, sl
 800b498:	f7fc fad4 	bl	8007a44 <_malloc_r>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	d03a      	beq.n	800b516 <__ssprint_r+0xca>
 800b4a0:	465a      	mov	r2, fp
 800b4a2:	6921      	ldr	r1, [r4, #16]
 800b4a4:	9001      	str	r0, [sp, #4]
 800b4a6:	f7f4 feab 	bl	8000200 <memcpy>
 800b4aa:	89a2      	ldrh	r2, [r4, #12]
 800b4ac:	9b01      	ldr	r3, [sp, #4]
 800b4ae:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b4b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b4b6:	81a2      	strh	r2, [r4, #12]
 800b4b8:	eba5 020b 	sub.w	r2, r5, fp
 800b4bc:	eb03 000b 	add.w	r0, r3, fp
 800b4c0:	6165      	str	r5, [r4, #20]
 800b4c2:	6123      	str	r3, [r4, #16]
 800b4c4:	6020      	str	r0, [r4, #0]
 800b4c6:	60a2      	str	r2, [r4, #8]
 800b4c8:	4635      	mov	r5, r6
 800b4ca:	46b3      	mov	fp, r6
 800b4cc:	465a      	mov	r2, fp
 800b4ce:	4649      	mov	r1, r9
 800b4d0:	f000 f880 	bl	800b5d4 <memmove>
 800b4d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4d8:	68a2      	ldr	r2, [r4, #8]
 800b4da:	6820      	ldr	r0, [r4, #0]
 800b4dc:	1b55      	subs	r5, r2, r5
 800b4de:	4458      	add	r0, fp
 800b4e0:	1b9e      	subs	r6, r3, r6
 800b4e2:	60a5      	str	r5, [r4, #8]
 800b4e4:	6020      	str	r0, [r4, #0]
 800b4e6:	f8c8 6008 	str.w	r6, [r8, #8]
 800b4ea:	b31e      	cbz	r6, 800b534 <__ssprint_r+0xe8>
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 800b4f2:	46ab      	mov	fp, r5
 800b4f4:	2e00      	cmp	r6, #0
 800b4f6:	d0f9      	beq.n	800b4ec <__ssprint_r+0xa0>
 800b4f8:	42ae      	cmp	r6, r5
 800b4fa:	d2b5      	bcs.n	800b468 <__ssprint_r+0x1c>
 800b4fc:	4635      	mov	r5, r6
 800b4fe:	46b3      	mov	fp, r6
 800b500:	e7e4      	b.n	800b4cc <__ssprint_r+0x80>
 800b502:	4650      	mov	r0, sl
 800b504:	f000 f8ca 	bl	800b69c <_realloc_r>
 800b508:	4603      	mov	r3, r0
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d1d4      	bne.n	800b4b8 <__ssprint_r+0x6c>
 800b50e:	6921      	ldr	r1, [r4, #16]
 800b510:	4650      	mov	r0, sl
 800b512:	f7fc fe3d 	bl	8008190 <_free_r>
 800b516:	230c      	movs	r3, #12
 800b518:	f8ca 3000 	str.w	r3, [sl]
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b524:	f04f 30ff 	mov.w	r0, #4294967295
 800b528:	81a3      	strh	r3, [r4, #12]
 800b52a:	e9c8 2201 	strd	r2, r2, [r8, #4]
 800b52e:	b003      	add	sp, #12
 800b530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b534:	2000      	movs	r0, #0
 800b536:	f8c8 0004 	str.w	r0, [r8, #4]
 800b53a:	b003      	add	sp, #12
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b540 <_calloc_r>:
 800b540:	b510      	push	{r4, lr}
 800b542:	fb02 f101 	mul.w	r1, r2, r1
 800b546:	f7fc fa7d 	bl	8007a44 <_malloc_r>
 800b54a:	4604      	mov	r4, r0
 800b54c:	b1d8      	cbz	r0, 800b586 <_calloc_r+0x46>
 800b54e:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b552:	f022 0203 	bic.w	r2, r2, #3
 800b556:	3a04      	subs	r2, #4
 800b558:	2a24      	cmp	r2, #36	; 0x24
 800b55a:	d81d      	bhi.n	800b598 <_calloc_r+0x58>
 800b55c:	2a13      	cmp	r2, #19
 800b55e:	d914      	bls.n	800b58a <_calloc_r+0x4a>
 800b560:	2300      	movs	r3, #0
 800b562:	2a1b      	cmp	r2, #27
 800b564:	e9c0 3300 	strd	r3, r3, [r0]
 800b568:	d91b      	bls.n	800b5a2 <_calloc_r+0x62>
 800b56a:	2a24      	cmp	r2, #36	; 0x24
 800b56c:	e9c0 3302 	strd	r3, r3, [r0, #8]
 800b570:	bf0a      	itet	eq
 800b572:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 800b576:	f100 0210 	addne.w	r2, r0, #16
 800b57a:	f100 0218 	addeq.w	r2, r0, #24
 800b57e:	2300      	movs	r3, #0
 800b580:	e9c2 3300 	strd	r3, r3, [r2]
 800b584:	6093      	str	r3, [r2, #8]
 800b586:	4620      	mov	r0, r4
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	4602      	mov	r2, r0
 800b58c:	2300      	movs	r3, #0
 800b58e:	e9c2 3300 	strd	r3, r3, [r2]
 800b592:	6093      	str	r3, [r2, #8]
 800b594:	4620      	mov	r0, r4
 800b596:	bd10      	pop	{r4, pc}
 800b598:	2100      	movs	r1, #0
 800b59a:	f7fc fcf7 	bl	8007f8c <memset>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	bd10      	pop	{r4, pc}
 800b5a2:	f100 0208 	add.w	r2, r0, #8
 800b5a6:	e7f1      	b.n	800b58c <_calloc_r+0x4c>

0800b5a8 <__ascii_mbtowc>:
 800b5a8:	b082      	sub	sp, #8
 800b5aa:	b149      	cbz	r1, 800b5c0 <__ascii_mbtowc+0x18>
 800b5ac:	b15a      	cbz	r2, 800b5c6 <__ascii_mbtowc+0x1e>
 800b5ae:	b16b      	cbz	r3, 800b5cc <__ascii_mbtowc+0x24>
 800b5b0:	7813      	ldrb	r3, [r2, #0]
 800b5b2:	600b      	str	r3, [r1, #0]
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	1c10      	adds	r0, r2, #0
 800b5b8:	bf18      	it	ne
 800b5ba:	2001      	movne	r0, #1
 800b5bc:	b002      	add	sp, #8
 800b5be:	4770      	bx	lr
 800b5c0:	a901      	add	r1, sp, #4
 800b5c2:	2a00      	cmp	r2, #0
 800b5c4:	d1f3      	bne.n	800b5ae <__ascii_mbtowc+0x6>
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	b002      	add	sp, #8
 800b5ca:	4770      	bx	lr
 800b5cc:	f06f 0001 	mvn.w	r0, #1
 800b5d0:	e7f4      	b.n	800b5bc <__ascii_mbtowc+0x14>
 800b5d2:	bf00      	nop

0800b5d4 <memmove>:
 800b5d4:	4288      	cmp	r0, r1
 800b5d6:	b4f0      	push	{r4, r5, r6, r7}
 800b5d8:	d90d      	bls.n	800b5f6 <memmove+0x22>
 800b5da:	188b      	adds	r3, r1, r2
 800b5dc:	4283      	cmp	r3, r0
 800b5de:	d90a      	bls.n	800b5f6 <memmove+0x22>
 800b5e0:	1884      	adds	r4, r0, r2
 800b5e2:	b132      	cbz	r2, 800b5f2 <memmove+0x1e>
 800b5e4:	4622      	mov	r2, r4
 800b5e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b5ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b5ee:	4299      	cmp	r1, r3
 800b5f0:	d1f9      	bne.n	800b5e6 <memmove+0x12>
 800b5f2:	bcf0      	pop	{r4, r5, r6, r7}
 800b5f4:	4770      	bx	lr
 800b5f6:	2a0f      	cmp	r2, #15
 800b5f8:	d949      	bls.n	800b68e <memmove+0xba>
 800b5fa:	ea40 0301 	orr.w	r3, r0, r1
 800b5fe:	079b      	lsls	r3, r3, #30
 800b600:	d147      	bne.n	800b692 <memmove+0xbe>
 800b602:	f1a2 0310 	sub.w	r3, r2, #16
 800b606:	091b      	lsrs	r3, r3, #4
 800b608:	f101 0720 	add.w	r7, r1, #32
 800b60c:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 800b610:	f101 0410 	add.w	r4, r1, #16
 800b614:	f100 0510 	add.w	r5, r0, #16
 800b618:	f854 6c10 	ldr.w	r6, [r4, #-16]
 800b61c:	f845 6c10 	str.w	r6, [r5, #-16]
 800b620:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 800b624:	f845 6c0c 	str.w	r6, [r5, #-12]
 800b628:	f854 6c08 	ldr.w	r6, [r4, #-8]
 800b62c:	f845 6c08 	str.w	r6, [r5, #-8]
 800b630:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800b634:	f845 6c04 	str.w	r6, [r5, #-4]
 800b638:	3410      	adds	r4, #16
 800b63a:	42bc      	cmp	r4, r7
 800b63c:	f105 0510 	add.w	r5, r5, #16
 800b640:	d1ea      	bne.n	800b618 <memmove+0x44>
 800b642:	3301      	adds	r3, #1
 800b644:	f002 050f 	and.w	r5, r2, #15
 800b648:	011b      	lsls	r3, r3, #4
 800b64a:	2d03      	cmp	r5, #3
 800b64c:	4419      	add	r1, r3
 800b64e:	4403      	add	r3, r0
 800b650:	d921      	bls.n	800b696 <memmove+0xc2>
 800b652:	1f1f      	subs	r7, r3, #4
 800b654:	460e      	mov	r6, r1
 800b656:	462c      	mov	r4, r5
 800b658:	3c04      	subs	r4, #4
 800b65a:	f856 cb04 	ldr.w	ip, [r6], #4
 800b65e:	f847 cf04 	str.w	ip, [r7, #4]!
 800b662:	2c03      	cmp	r4, #3
 800b664:	d8f8      	bhi.n	800b658 <memmove+0x84>
 800b666:	1f2c      	subs	r4, r5, #4
 800b668:	f024 0403 	bic.w	r4, r4, #3
 800b66c:	3404      	adds	r4, #4
 800b66e:	4423      	add	r3, r4
 800b670:	4421      	add	r1, r4
 800b672:	f002 0203 	and.w	r2, r2, #3
 800b676:	2a00      	cmp	r2, #0
 800b678:	d0bb      	beq.n	800b5f2 <memmove+0x1e>
 800b67a:	3b01      	subs	r3, #1
 800b67c:	440a      	add	r2, r1
 800b67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b686:	4291      	cmp	r1, r2
 800b688:	d1f9      	bne.n	800b67e <memmove+0xaa>
 800b68a:	bcf0      	pop	{r4, r5, r6, r7}
 800b68c:	4770      	bx	lr
 800b68e:	4603      	mov	r3, r0
 800b690:	e7f1      	b.n	800b676 <memmove+0xa2>
 800b692:	4603      	mov	r3, r0
 800b694:	e7f1      	b.n	800b67a <memmove+0xa6>
 800b696:	462a      	mov	r2, r5
 800b698:	e7ed      	b.n	800b676 <memmove+0xa2>
 800b69a:	bf00      	nop

0800b69c <_realloc_r>:
 800b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	4692      	mov	sl, r2
 800b6a2:	b083      	sub	sp, #12
 800b6a4:	2900      	cmp	r1, #0
 800b6a6:	f000 80a1 	beq.w	800b7ec <_realloc_r+0x150>
 800b6aa:	460d      	mov	r5, r1
 800b6ac:	4680      	mov	r8, r0
 800b6ae:	f10a 040b 	add.w	r4, sl, #11
 800b6b2:	f7fc fcb5 	bl	8008020 <__malloc_lock>
 800b6b6:	f855 2c04 	ldr.w	r2, [r5, #-4]
 800b6ba:	2c16      	cmp	r4, #22
 800b6bc:	f022 0603 	bic.w	r6, r2, #3
 800b6c0:	f1a5 0708 	sub.w	r7, r5, #8
 800b6c4:	d83e      	bhi.n	800b744 <_realloc_r+0xa8>
 800b6c6:	2410      	movs	r4, #16
 800b6c8:	4621      	mov	r1, r4
 800b6ca:	45a2      	cmp	sl, r4
 800b6cc:	d83f      	bhi.n	800b74e <_realloc_r+0xb2>
 800b6ce:	428e      	cmp	r6, r1
 800b6d0:	eb07 0906 	add.w	r9, r7, r6
 800b6d4:	da74      	bge.n	800b7c0 <_realloc_r+0x124>
 800b6d6:	4bc7      	ldr	r3, [pc, #796]	; (800b9f4 <_realloc_r+0x358>)
 800b6d8:	6898      	ldr	r0, [r3, #8]
 800b6da:	4548      	cmp	r0, r9
 800b6dc:	f000 80aa 	beq.w	800b834 <_realloc_r+0x198>
 800b6e0:	f8d9 0004 	ldr.w	r0, [r9, #4]
 800b6e4:	f020 0301 	bic.w	r3, r0, #1
 800b6e8:	444b      	add	r3, r9
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	07db      	lsls	r3, r3, #31
 800b6ee:	f140 8083 	bpl.w	800b7f8 <_realloc_r+0x15c>
 800b6f2:	07d2      	lsls	r2, r2, #31
 800b6f4:	d534      	bpl.n	800b760 <_realloc_r+0xc4>
 800b6f6:	4651      	mov	r1, sl
 800b6f8:	4640      	mov	r0, r8
 800b6fa:	f7fc f9a3 	bl	8007a44 <_malloc_r>
 800b6fe:	4682      	mov	sl, r0
 800b700:	b1e0      	cbz	r0, 800b73c <_realloc_r+0xa0>
 800b702:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b706:	f023 0301 	bic.w	r3, r3, #1
 800b70a:	443b      	add	r3, r7
 800b70c:	f1a0 0208 	sub.w	r2, r0, #8
 800b710:	4293      	cmp	r3, r2
 800b712:	f000 80f9 	beq.w	800b908 <_realloc_r+0x26c>
 800b716:	1f32      	subs	r2, r6, #4
 800b718:	2a24      	cmp	r2, #36	; 0x24
 800b71a:	f200 8107 	bhi.w	800b92c <_realloc_r+0x290>
 800b71e:	2a13      	cmp	r2, #19
 800b720:	6829      	ldr	r1, [r5, #0]
 800b722:	f200 80e6 	bhi.w	800b8f2 <_realloc_r+0x256>
 800b726:	4603      	mov	r3, r0
 800b728:	462a      	mov	r2, r5
 800b72a:	6019      	str	r1, [r3, #0]
 800b72c:	6851      	ldr	r1, [r2, #4]
 800b72e:	6059      	str	r1, [r3, #4]
 800b730:	6892      	ldr	r2, [r2, #8]
 800b732:	609a      	str	r2, [r3, #8]
 800b734:	4629      	mov	r1, r5
 800b736:	4640      	mov	r0, r8
 800b738:	f7fc fd2a 	bl	8008190 <_free_r>
 800b73c:	4640      	mov	r0, r8
 800b73e:	f7fc fc75 	bl	800802c <__malloc_unlock>
 800b742:	e04f      	b.n	800b7e4 <_realloc_r+0x148>
 800b744:	f024 0407 	bic.w	r4, r4, #7
 800b748:	2c00      	cmp	r4, #0
 800b74a:	4621      	mov	r1, r4
 800b74c:	dabd      	bge.n	800b6ca <_realloc_r+0x2e>
 800b74e:	f04f 0a00 	mov.w	sl, #0
 800b752:	230c      	movs	r3, #12
 800b754:	4650      	mov	r0, sl
 800b756:	f8c8 3000 	str.w	r3, [r8]
 800b75a:	b003      	add	sp, #12
 800b75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b760:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b764:	eba7 0b03 	sub.w	fp, r7, r3
 800b768:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b76c:	f022 0203 	bic.w	r2, r2, #3
 800b770:	18b3      	adds	r3, r6, r2
 800b772:	428b      	cmp	r3, r1
 800b774:	dbbf      	blt.n	800b6f6 <_realloc_r+0x5a>
 800b776:	46da      	mov	sl, fp
 800b778:	f8db 100c 	ldr.w	r1, [fp, #12]
 800b77c:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800b780:	1f32      	subs	r2, r6, #4
 800b782:	2a24      	cmp	r2, #36	; 0x24
 800b784:	60c1      	str	r1, [r0, #12]
 800b786:	eb0b 0903 	add.w	r9, fp, r3
 800b78a:	6088      	str	r0, [r1, #8]
 800b78c:	f200 80c6 	bhi.w	800b91c <_realloc_r+0x280>
 800b790:	2a13      	cmp	r2, #19
 800b792:	6829      	ldr	r1, [r5, #0]
 800b794:	f240 80c0 	bls.w	800b918 <_realloc_r+0x27c>
 800b798:	f8cb 1008 	str.w	r1, [fp, #8]
 800b79c:	6869      	ldr	r1, [r5, #4]
 800b79e:	f8cb 100c 	str.w	r1, [fp, #12]
 800b7a2:	2a1b      	cmp	r2, #27
 800b7a4:	68a9      	ldr	r1, [r5, #8]
 800b7a6:	f200 80d8 	bhi.w	800b95a <_realloc_r+0x2be>
 800b7aa:	f10b 0210 	add.w	r2, fp, #16
 800b7ae:	3508      	adds	r5, #8
 800b7b0:	6011      	str	r1, [r2, #0]
 800b7b2:	6869      	ldr	r1, [r5, #4]
 800b7b4:	6051      	str	r1, [r2, #4]
 800b7b6:	68a9      	ldr	r1, [r5, #8]
 800b7b8:	6091      	str	r1, [r2, #8]
 800b7ba:	461e      	mov	r6, r3
 800b7bc:	465f      	mov	r7, fp
 800b7be:	4655      	mov	r5, sl
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	1b32      	subs	r2, r6, r4
 800b7c4:	2a0f      	cmp	r2, #15
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	d822      	bhi.n	800b812 <_realloc_r+0x176>
 800b7cc:	4333      	orrs	r3, r6
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b7d4:	f043 0301 	orr.w	r3, r3, #1
 800b7d8:	f8c9 3004 	str.w	r3, [r9, #4]
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f7fc fc25 	bl	800802c <__malloc_unlock>
 800b7e2:	46aa      	mov	sl, r5
 800b7e4:	4650      	mov	r0, sl
 800b7e6:	b003      	add	sp, #12
 800b7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7ec:	4611      	mov	r1, r2
 800b7ee:	b003      	add	sp, #12
 800b7f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7f4:	f7fc b926 	b.w	8007a44 <_malloc_r>
 800b7f8:	f020 0003 	bic.w	r0, r0, #3
 800b7fc:	1833      	adds	r3, r6, r0
 800b7fe:	428b      	cmp	r3, r1
 800b800:	db61      	blt.n	800b8c6 <_realloc_r+0x22a>
 800b802:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800b806:	461e      	mov	r6, r3
 800b808:	60ca      	str	r2, [r1, #12]
 800b80a:	eb07 0903 	add.w	r9, r7, r3
 800b80e:	6091      	str	r1, [r2, #8]
 800b810:	e7d6      	b.n	800b7c0 <_realloc_r+0x124>
 800b812:	1939      	adds	r1, r7, r4
 800b814:	4323      	orrs	r3, r4
 800b816:	f042 0201 	orr.w	r2, r2, #1
 800b81a:	607b      	str	r3, [r7, #4]
 800b81c:	604a      	str	r2, [r1, #4]
 800b81e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800b822:	f043 0301 	orr.w	r3, r3, #1
 800b826:	3108      	adds	r1, #8
 800b828:	f8c9 3004 	str.w	r3, [r9, #4]
 800b82c:	4640      	mov	r0, r8
 800b82e:	f7fc fcaf 	bl	8008190 <_free_r>
 800b832:	e7d3      	b.n	800b7dc <_realloc_r+0x140>
 800b834:	6840      	ldr	r0, [r0, #4]
 800b836:	f020 0903 	bic.w	r9, r0, #3
 800b83a:	44b1      	add	r9, r6
 800b83c:	f104 0010 	add.w	r0, r4, #16
 800b840:	4581      	cmp	r9, r0
 800b842:	da77      	bge.n	800b934 <_realloc_r+0x298>
 800b844:	07d2      	lsls	r2, r2, #31
 800b846:	f53f af56 	bmi.w	800b6f6 <_realloc_r+0x5a>
 800b84a:	f855 2c08 	ldr.w	r2, [r5, #-8]
 800b84e:	eba7 0b02 	sub.w	fp, r7, r2
 800b852:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b856:	f022 0203 	bic.w	r2, r2, #3
 800b85a:	4491      	add	r9, r2
 800b85c:	4548      	cmp	r0, r9
 800b85e:	dc87      	bgt.n	800b770 <_realloc_r+0xd4>
 800b860:	46da      	mov	sl, fp
 800b862:	f8db 100c 	ldr.w	r1, [fp, #12]
 800b866:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 800b86a:	1f32      	subs	r2, r6, #4
 800b86c:	2a24      	cmp	r2, #36	; 0x24
 800b86e:	60c1      	str	r1, [r0, #12]
 800b870:	6088      	str	r0, [r1, #8]
 800b872:	f200 80a1 	bhi.w	800b9b8 <_realloc_r+0x31c>
 800b876:	2a13      	cmp	r2, #19
 800b878:	6829      	ldr	r1, [r5, #0]
 800b87a:	f240 809b 	bls.w	800b9b4 <_realloc_r+0x318>
 800b87e:	f8cb 1008 	str.w	r1, [fp, #8]
 800b882:	6869      	ldr	r1, [r5, #4]
 800b884:	f8cb 100c 	str.w	r1, [fp, #12]
 800b888:	2a1b      	cmp	r2, #27
 800b88a:	68a9      	ldr	r1, [r5, #8]
 800b88c:	f200 809b 	bhi.w	800b9c6 <_realloc_r+0x32a>
 800b890:	f10b 0210 	add.w	r2, fp, #16
 800b894:	3508      	adds	r5, #8
 800b896:	6011      	str	r1, [r2, #0]
 800b898:	6869      	ldr	r1, [r5, #4]
 800b89a:	6051      	str	r1, [r2, #4]
 800b89c:	68a9      	ldr	r1, [r5, #8]
 800b89e:	6091      	str	r1, [r2, #8]
 800b8a0:	eb0b 0104 	add.w	r1, fp, r4
 800b8a4:	eba9 0204 	sub.w	r2, r9, r4
 800b8a8:	f042 0201 	orr.w	r2, r2, #1
 800b8ac:	6099      	str	r1, [r3, #8]
 800b8ae:	604a      	str	r2, [r1, #4]
 800b8b0:	f8db 3004 	ldr.w	r3, [fp, #4]
 800b8b4:	f003 0301 	and.w	r3, r3, #1
 800b8b8:	431c      	orrs	r4, r3
 800b8ba:	4640      	mov	r0, r8
 800b8bc:	f8cb 4004 	str.w	r4, [fp, #4]
 800b8c0:	f7fc fbb4 	bl	800802c <__malloc_unlock>
 800b8c4:	e78e      	b.n	800b7e4 <_realloc_r+0x148>
 800b8c6:	07d3      	lsls	r3, r2, #31
 800b8c8:	f53f af15 	bmi.w	800b6f6 <_realloc_r+0x5a>
 800b8cc:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800b8d0:	eba7 0b03 	sub.w	fp, r7, r3
 800b8d4:	f8db 2004 	ldr.w	r2, [fp, #4]
 800b8d8:	f022 0203 	bic.w	r2, r2, #3
 800b8dc:	4410      	add	r0, r2
 800b8de:	1983      	adds	r3, r0, r6
 800b8e0:	428b      	cmp	r3, r1
 800b8e2:	f6ff af45 	blt.w	800b770 <_realloc_r+0xd4>
 800b8e6:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 800b8ea:	46da      	mov	sl, fp
 800b8ec:	60ca      	str	r2, [r1, #12]
 800b8ee:	6091      	str	r1, [r2, #8]
 800b8f0:	e742      	b.n	800b778 <_realloc_r+0xdc>
 800b8f2:	6001      	str	r1, [r0, #0]
 800b8f4:	686b      	ldr	r3, [r5, #4]
 800b8f6:	6043      	str	r3, [r0, #4]
 800b8f8:	2a1b      	cmp	r2, #27
 800b8fa:	d83a      	bhi.n	800b972 <_realloc_r+0x2d6>
 800b8fc:	f105 0208 	add.w	r2, r5, #8
 800b900:	f100 0308 	add.w	r3, r0, #8
 800b904:	68a9      	ldr	r1, [r5, #8]
 800b906:	e710      	b.n	800b72a <_realloc_r+0x8e>
 800b908:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	441e      	add	r6, r3
 800b912:	eb07 0906 	add.w	r9, r7, r6
 800b916:	e753      	b.n	800b7c0 <_realloc_r+0x124>
 800b918:	4652      	mov	r2, sl
 800b91a:	e749      	b.n	800b7b0 <_realloc_r+0x114>
 800b91c:	4629      	mov	r1, r5
 800b91e:	4650      	mov	r0, sl
 800b920:	461e      	mov	r6, r3
 800b922:	465f      	mov	r7, fp
 800b924:	f7ff fe56 	bl	800b5d4 <memmove>
 800b928:	4655      	mov	r5, sl
 800b92a:	e749      	b.n	800b7c0 <_realloc_r+0x124>
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7ff fe51 	bl	800b5d4 <memmove>
 800b932:	e6ff      	b.n	800b734 <_realloc_r+0x98>
 800b934:	4427      	add	r7, r4
 800b936:	eba9 0904 	sub.w	r9, r9, r4
 800b93a:	f049 0201 	orr.w	r2, r9, #1
 800b93e:	609f      	str	r7, [r3, #8]
 800b940:	607a      	str	r2, [r7, #4]
 800b942:	f855 3c04 	ldr.w	r3, [r5, #-4]
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	431c      	orrs	r4, r3
 800b94c:	4640      	mov	r0, r8
 800b94e:	f845 4c04 	str.w	r4, [r5, #-4]
 800b952:	f7fc fb6b 	bl	800802c <__malloc_unlock>
 800b956:	46aa      	mov	sl, r5
 800b958:	e744      	b.n	800b7e4 <_realloc_r+0x148>
 800b95a:	f8cb 1010 	str.w	r1, [fp, #16]
 800b95e:	68e9      	ldr	r1, [r5, #12]
 800b960:	f8cb 1014 	str.w	r1, [fp, #20]
 800b964:	2a24      	cmp	r2, #36	; 0x24
 800b966:	d010      	beq.n	800b98a <_realloc_r+0x2ee>
 800b968:	6929      	ldr	r1, [r5, #16]
 800b96a:	f10b 0218 	add.w	r2, fp, #24
 800b96e:	3510      	adds	r5, #16
 800b970:	e71e      	b.n	800b7b0 <_realloc_r+0x114>
 800b972:	68ab      	ldr	r3, [r5, #8]
 800b974:	6083      	str	r3, [r0, #8]
 800b976:	68eb      	ldr	r3, [r5, #12]
 800b978:	60c3      	str	r3, [r0, #12]
 800b97a:	2a24      	cmp	r2, #36	; 0x24
 800b97c:	d010      	beq.n	800b9a0 <_realloc_r+0x304>
 800b97e:	f105 0210 	add.w	r2, r5, #16
 800b982:	f100 0310 	add.w	r3, r0, #16
 800b986:	6929      	ldr	r1, [r5, #16]
 800b988:	e6cf      	b.n	800b72a <_realloc_r+0x8e>
 800b98a:	692a      	ldr	r2, [r5, #16]
 800b98c:	f8cb 2018 	str.w	r2, [fp, #24]
 800b990:	696a      	ldr	r2, [r5, #20]
 800b992:	f8cb 201c 	str.w	r2, [fp, #28]
 800b996:	69a9      	ldr	r1, [r5, #24]
 800b998:	f10b 0220 	add.w	r2, fp, #32
 800b99c:	3518      	adds	r5, #24
 800b99e:	e707      	b.n	800b7b0 <_realloc_r+0x114>
 800b9a0:	692b      	ldr	r3, [r5, #16]
 800b9a2:	6103      	str	r3, [r0, #16]
 800b9a4:	696b      	ldr	r3, [r5, #20]
 800b9a6:	6143      	str	r3, [r0, #20]
 800b9a8:	69a9      	ldr	r1, [r5, #24]
 800b9aa:	f105 0218 	add.w	r2, r5, #24
 800b9ae:	f100 0318 	add.w	r3, r0, #24
 800b9b2:	e6ba      	b.n	800b72a <_realloc_r+0x8e>
 800b9b4:	4652      	mov	r2, sl
 800b9b6:	e76e      	b.n	800b896 <_realloc_r+0x1fa>
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	4650      	mov	r0, sl
 800b9bc:	9301      	str	r3, [sp, #4]
 800b9be:	f7ff fe09 	bl	800b5d4 <memmove>
 800b9c2:	9b01      	ldr	r3, [sp, #4]
 800b9c4:	e76c      	b.n	800b8a0 <_realloc_r+0x204>
 800b9c6:	f8cb 1010 	str.w	r1, [fp, #16]
 800b9ca:	68e9      	ldr	r1, [r5, #12]
 800b9cc:	f8cb 1014 	str.w	r1, [fp, #20]
 800b9d0:	2a24      	cmp	r2, #36	; 0x24
 800b9d2:	d004      	beq.n	800b9de <_realloc_r+0x342>
 800b9d4:	6929      	ldr	r1, [r5, #16]
 800b9d6:	f10b 0218 	add.w	r2, fp, #24
 800b9da:	3510      	adds	r5, #16
 800b9dc:	e75b      	b.n	800b896 <_realloc_r+0x1fa>
 800b9de:	692a      	ldr	r2, [r5, #16]
 800b9e0:	f8cb 2018 	str.w	r2, [fp, #24]
 800b9e4:	696a      	ldr	r2, [r5, #20]
 800b9e6:	f8cb 201c 	str.w	r2, [fp, #28]
 800b9ea:	69a9      	ldr	r1, [r5, #24]
 800b9ec:	f10b 0220 	add.w	r2, fp, #32
 800b9f0:	3518      	adds	r5, #24
 800b9f2:	e750      	b.n	800b896 <_realloc_r+0x1fa>
 800b9f4:	20000498 	.word	0x20000498

0800b9f8 <__ascii_wctomb>:
 800b9f8:	b121      	cbz	r1, 800ba04 <__ascii_wctomb+0xc>
 800b9fa:	2aff      	cmp	r2, #255	; 0xff
 800b9fc:	d804      	bhi.n	800ba08 <__ascii_wctomb+0x10>
 800b9fe:	700a      	strb	r2, [r1, #0]
 800ba00:	2001      	movs	r0, #1
 800ba02:	4770      	bx	lr
 800ba04:	4608      	mov	r0, r1
 800ba06:	4770      	bx	lr
 800ba08:	238a      	movs	r3, #138	; 0x8a
 800ba0a:	6003      	str	r3, [r0, #0]
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	4770      	bx	lr
 800ba12:	bf00      	nop

0800ba14 <atan2>:
 800ba14:	f000 b800 	b.w	800ba18 <__ieee754_atan2>

0800ba18 <__ieee754_atan2>:
 800ba18:	ec51 0b11 	vmov	r0, r1, d1
 800ba1c:	4243      	negs	r3, r0
 800ba1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba22:	4303      	orrs	r3, r0
 800ba24:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800ba28:	4f6b      	ldr	r7, [pc, #428]	; (800bbd8 <__ieee754_atan2+0x1c0>)
 800ba2a:	ea4e 73d3 	orr.w	r3, lr, r3, lsr #31
 800ba2e:	42bb      	cmp	r3, r7
 800ba30:	ec55 4b10 	vmov	r4, r5, d0
 800ba34:	d81e      	bhi.n	800ba74 <__ieee754_atan2+0x5c>
 800ba36:	4263      	negs	r3, r4
 800ba38:	4323      	orrs	r3, r4
 800ba3a:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 800ba3e:	ea4a 73d3 	orr.w	r3, sl, r3, lsr #31
 800ba42:	42bb      	cmp	r3, r7
 800ba44:	46a9      	mov	r9, r5
 800ba46:	d815      	bhi.n	800ba74 <__ieee754_atan2+0x5c>
 800ba48:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 800ba4c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba50:	4303      	orrs	r3, r0
 800ba52:	d03d      	beq.n	800bad0 <__ieee754_atan2+0xb8>
 800ba54:	178e      	asrs	r6, r1, #30
 800ba56:	f006 0602 	and.w	r6, r6, #2
 800ba5a:	ea5a 0304 	orrs.w	r3, sl, r4
 800ba5e:	ea46 76d5 	orr.w	r6, r6, r5, lsr #31
 800ba62:	d10f      	bne.n	800ba84 <__ieee754_atan2+0x6c>
 800ba64:	2e02      	cmp	r6, #2
 800ba66:	d052      	beq.n	800bb0e <__ieee754_atan2+0xf6>
 800ba68:	2e03      	cmp	r6, #3
 800ba6a:	d13c      	bne.n	800bae6 <__ieee754_atan2+0xce>
 800ba6c:	a148      	add	r1, pc, #288	; (adr r1, 800bb90 <__ieee754_atan2+0x178>)
 800ba6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba72:	e003      	b.n	800ba7c <__ieee754_atan2+0x64>
 800ba74:	4622      	mov	r2, r4
 800ba76:	462b      	mov	r3, r5
 800ba78:	f7f4 fd28 	bl	80004cc <__adddf3>
 800ba7c:	ec41 0b10 	vmov	d0, r0, r1
 800ba80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba84:	ea5e 0300 	orrs.w	r3, lr, r0
 800ba88:	d026      	beq.n	800bad8 <__ieee754_atan2+0xc0>
 800ba8a:	45be      	cmp	lr, r7
 800ba8c:	d02f      	beq.n	800baee <__ieee754_atan2+0xd6>
 800ba8e:	45ba      	cmp	sl, r7
 800ba90:	d022      	beq.n	800bad8 <__ieee754_atan2+0xc0>
 800ba92:	ebaa 0e0e 	sub.w	lr, sl, lr
 800ba96:	ea4f 5e2e 	mov.w	lr, lr, asr #20
 800ba9a:	f1be 0f3c 	cmp.w	lr, #60	; 0x3c
 800ba9e:	dc3a      	bgt.n	800bb16 <__ieee754_atan2+0xfe>
 800baa0:	2900      	cmp	r1, #0
 800baa2:	da3c      	bge.n	800bb1e <__ieee754_atan2+0x106>
 800baa4:	f11e 0f3c 	cmn.w	lr, #60	; 0x3c
 800baa8:	da39      	bge.n	800bb1e <__ieee754_atan2+0x106>
 800baaa:	2000      	movs	r0, #0
 800baac:	2100      	movs	r1, #0
 800baae:	2e01      	cmp	r6, #1
 800bab0:	d051      	beq.n	800bb56 <__ieee754_atan2+0x13e>
 800bab2:	2e02      	cmp	r6, #2
 800bab4:	d042      	beq.n	800bb3c <__ieee754_atan2+0x124>
 800bab6:	2e00      	cmp	r6, #0
 800bab8:	d0e0      	beq.n	800ba7c <__ieee754_atan2+0x64>
 800baba:	a337      	add	r3, pc, #220	; (adr r3, 800bb98 <__ieee754_atan2+0x180>)
 800babc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac0:	f7f4 fd02 	bl	80004c8 <__aeabi_dsub>
 800bac4:	a336      	add	r3, pc, #216	; (adr r3, 800bba0 <__ieee754_atan2+0x188>)
 800bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baca:	f7f4 fcfd 	bl	80004c8 <__aeabi_dsub>
 800bace:	e7d5      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bad0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	f000 b884 	b.w	800bbe0 <atan>
 800bad8:	f1b9 0f00 	cmp.w	r9, #0
 800badc:	db13      	blt.n	800bb06 <__ieee754_atan2+0xee>
 800bade:	a132      	add	r1, pc, #200	; (adr r1, 800bba8 <__ieee754_atan2+0x190>)
 800bae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae4:	e7ca      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bae6:	ee10 0a10 	vmov	r0, s0
 800baea:	4629      	mov	r1, r5
 800baec:	e7c6      	b.n	800ba7c <__ieee754_atan2+0x64>
 800baee:	45f2      	cmp	sl, lr
 800baf0:	d035      	beq.n	800bb5e <__ieee754_atan2+0x146>
 800baf2:	2e02      	cmp	r6, #2
 800baf4:	d00b      	beq.n	800bb0e <__ieee754_atan2+0xf6>
 800baf6:	2e03      	cmp	r6, #3
 800baf8:	d0b8      	beq.n	800ba6c <__ieee754_atan2+0x54>
 800bafa:	2e01      	cmp	r6, #1
 800bafc:	f04f 0000 	mov.w	r0, #0
 800bb00:	d037      	beq.n	800bb72 <__ieee754_atan2+0x15a>
 800bb02:	2100      	movs	r1, #0
 800bb04:	e7ba      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb06:	a12a      	add	r1, pc, #168	; (adr r1, 800bbb0 <__ieee754_atan2+0x198>)
 800bb08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb0c:	e7b6      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb0e:	a124      	add	r1, pc, #144	; (adr r1, 800bba0 <__ieee754_atan2+0x188>)
 800bb10:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb14:	e7b2      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb16:	a124      	add	r1, pc, #144	; (adr r1, 800bba8 <__ieee754_atan2+0x190>)
 800bb18:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb1c:	e7c7      	b.n	800baae <__ieee754_atan2+0x96>
 800bb1e:	4602      	mov	r2, r0
 800bb20:	460b      	mov	r3, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 ffb1 	bl	8000a8c <__aeabi_ddiv>
 800bb2a:	ec41 0b10 	vmov	d0, r0, r1
 800bb2e:	f000 fa03 	bl	800bf38 <fabs>
 800bb32:	f000 f855 	bl	800bbe0 <atan>
 800bb36:	ec51 0b10 	vmov	r0, r1, d0
 800bb3a:	e7b8      	b.n	800baae <__ieee754_atan2+0x96>
 800bb3c:	a316      	add	r3, pc, #88	; (adr r3, 800bb98 <__ieee754_atan2+0x180>)
 800bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb42:	f7f4 fcc1 	bl	80004c8 <__aeabi_dsub>
 800bb46:	4602      	mov	r2, r0
 800bb48:	460b      	mov	r3, r1
 800bb4a:	a115      	add	r1, pc, #84	; (adr r1, 800bba0 <__ieee754_atan2+0x188>)
 800bb4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb50:	f7f4 fcba 	bl	80004c8 <__aeabi_dsub>
 800bb54:	e792      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb56:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bb5a:	4619      	mov	r1, r3
 800bb5c:	e78e      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb5e:	2e02      	cmp	r6, #2
 800bb60:	d012      	beq.n	800bb88 <__ieee754_atan2+0x170>
 800bb62:	2e03      	cmp	r6, #3
 800bb64:	d00c      	beq.n	800bb80 <__ieee754_atan2+0x168>
 800bb66:	2e01      	cmp	r6, #1
 800bb68:	d006      	beq.n	800bb78 <__ieee754_atan2+0x160>
 800bb6a:	a113      	add	r1, pc, #76	; (adr r1, 800bbb8 <__ieee754_atan2+0x1a0>)
 800bb6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb70:	e784      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb72:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800bb76:	e781      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb78:	a111      	add	r1, pc, #68	; (adr r1, 800bbc0 <__ieee754_atan2+0x1a8>)
 800bb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7e:	e77d      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb80:	a111      	add	r1, pc, #68	; (adr r1, 800bbc8 <__ieee754_atan2+0x1b0>)
 800bb82:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb86:	e779      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb88:	a111      	add	r1, pc, #68	; (adr r1, 800bbd0 <__ieee754_atan2+0x1b8>)
 800bb8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb8e:	e775      	b.n	800ba7c <__ieee754_atan2+0x64>
 800bb90:	54442d18 	.word	0x54442d18
 800bb94:	c00921fb 	.word	0xc00921fb
 800bb98:	33145c07 	.word	0x33145c07
 800bb9c:	3ca1a626 	.word	0x3ca1a626
 800bba0:	54442d18 	.word	0x54442d18
 800bba4:	400921fb 	.word	0x400921fb
 800bba8:	54442d18 	.word	0x54442d18
 800bbac:	3ff921fb 	.word	0x3ff921fb
 800bbb0:	54442d18 	.word	0x54442d18
 800bbb4:	bff921fb 	.word	0xbff921fb
 800bbb8:	54442d18 	.word	0x54442d18
 800bbbc:	3fe921fb 	.word	0x3fe921fb
 800bbc0:	54442d18 	.word	0x54442d18
 800bbc4:	bfe921fb 	.word	0xbfe921fb
 800bbc8:	7f3321d2 	.word	0x7f3321d2
 800bbcc:	c002d97c 	.word	0xc002d97c
 800bbd0:	7f3321d2 	.word	0x7f3321d2
 800bbd4:	4002d97c 	.word	0x4002d97c
 800bbd8:	7ff00000 	.word	0x7ff00000
 800bbdc:	00000000 	.word	0x00000000

0800bbe0 <atan>:
 800bbe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbe4:	ec55 4b10 	vmov	r4, r5, d0
 800bbe8:	4bc9      	ldr	r3, [pc, #804]	; (800bf10 <atan+0x330>)
 800bbea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bbee:	429e      	cmp	r6, r3
 800bbf0:	46aa      	mov	sl, r5
 800bbf2:	dd10      	ble.n	800bc16 <atan+0x36>
 800bbf4:	4bc7      	ldr	r3, [pc, #796]	; (800bf14 <atan+0x334>)
 800bbf6:	429e      	cmp	r6, r3
 800bbf8:	f300 80b5 	bgt.w	800bd66 <atan+0x186>
 800bbfc:	f000 80b0 	beq.w	800bd60 <atan+0x180>
 800bc00:	f1ba 0f00 	cmp.w	sl, #0
 800bc04:	f340 80f9 	ble.w	800bdfa <atan+0x21a>
 800bc08:	a1a5      	add	r1, pc, #660	; (adr r1, 800bea0 <atan+0x2c0>)
 800bc0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc0e:	ec41 0b10 	vmov	d0, r0, r1
 800bc12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	4bc0      	ldr	r3, [pc, #768]	; (800bf18 <atan+0x338>)
 800bc18:	429e      	cmp	r6, r3
 800bc1a:	f300 80c3 	bgt.w	800bda4 <atan+0x1c4>
 800bc1e:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc22:	429e      	cmp	r6, r3
 800bc24:	f340 80a9 	ble.w	800bd7a <atan+0x19a>
 800bc28:	f04f 3bff 	mov.w	fp, #4294967295
 800bc2c:	4622      	mov	r2, r4
 800bc2e:	462b      	mov	r3, r5
 800bc30:	4620      	mov	r0, r4
 800bc32:	4629      	mov	r1, r5
 800bc34:	f7f4 fe00 	bl	8000838 <__aeabi_dmul>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4680      	mov	r8, r0
 800bc3e:	4689      	mov	r9, r1
 800bc40:	f7f4 fdfa 	bl	8000838 <__aeabi_dmul>
 800bc44:	a398      	add	r3, pc, #608	; (adr r3, 800bea8 <atan+0x2c8>)
 800bc46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc4a:	4606      	mov	r6, r0
 800bc4c:	460f      	mov	r7, r1
 800bc4e:	f7f4 fdf3 	bl	8000838 <__aeabi_dmul>
 800bc52:	a397      	add	r3, pc, #604	; (adr r3, 800beb0 <atan+0x2d0>)
 800bc54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc58:	f7f4 fc38 	bl	80004cc <__adddf3>
 800bc5c:	4632      	mov	r2, r6
 800bc5e:	463b      	mov	r3, r7
 800bc60:	f7f4 fdea 	bl	8000838 <__aeabi_dmul>
 800bc64:	a394      	add	r3, pc, #592	; (adr r3, 800beb8 <atan+0x2d8>)
 800bc66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc6a:	f7f4 fc2f 	bl	80004cc <__adddf3>
 800bc6e:	4632      	mov	r2, r6
 800bc70:	463b      	mov	r3, r7
 800bc72:	f7f4 fde1 	bl	8000838 <__aeabi_dmul>
 800bc76:	a392      	add	r3, pc, #584	; (adr r3, 800bec0 <atan+0x2e0>)
 800bc78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7c:	f7f4 fc26 	bl	80004cc <__adddf3>
 800bc80:	4632      	mov	r2, r6
 800bc82:	463b      	mov	r3, r7
 800bc84:	f7f4 fdd8 	bl	8000838 <__aeabi_dmul>
 800bc88:	a38f      	add	r3, pc, #572	; (adr r3, 800bec8 <atan+0x2e8>)
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f7f4 fc1d 	bl	80004cc <__adddf3>
 800bc92:	4632      	mov	r2, r6
 800bc94:	463b      	mov	r3, r7
 800bc96:	f7f4 fdcf 	bl	8000838 <__aeabi_dmul>
 800bc9a:	a38d      	add	r3, pc, #564	; (adr r3, 800bed0 <atan+0x2f0>)
 800bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca0:	f7f4 fc14 	bl	80004cc <__adddf3>
 800bca4:	4642      	mov	r2, r8
 800bca6:	464b      	mov	r3, r9
 800bca8:	f7f4 fdc6 	bl	8000838 <__aeabi_dmul>
 800bcac:	a38a      	add	r3, pc, #552	; (adr r3, 800bed8 <atan+0x2f8>)
 800bcae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcb2:	4680      	mov	r8, r0
 800bcb4:	4689      	mov	r9, r1
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	4639      	mov	r1, r7
 800bcba:	f7f4 fdbd 	bl	8000838 <__aeabi_dmul>
 800bcbe:	a388      	add	r3, pc, #544	; (adr r3, 800bee0 <atan+0x300>)
 800bcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc4:	f7f4 fc00 	bl	80004c8 <__aeabi_dsub>
 800bcc8:	4632      	mov	r2, r6
 800bcca:	463b      	mov	r3, r7
 800bccc:	f7f4 fdb4 	bl	8000838 <__aeabi_dmul>
 800bcd0:	a385      	add	r3, pc, #532	; (adr r3, 800bee8 <atan+0x308>)
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	f7f4 fbf7 	bl	80004c8 <__aeabi_dsub>
 800bcda:	4632      	mov	r2, r6
 800bcdc:	463b      	mov	r3, r7
 800bcde:	f7f4 fdab 	bl	8000838 <__aeabi_dmul>
 800bce2:	a383      	add	r3, pc, #524	; (adr r3, 800bef0 <atan+0x310>)
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f7f4 fbee 	bl	80004c8 <__aeabi_dsub>
 800bcec:	4632      	mov	r2, r6
 800bcee:	463b      	mov	r3, r7
 800bcf0:	f7f4 fda2 	bl	8000838 <__aeabi_dmul>
 800bcf4:	a380      	add	r3, pc, #512	; (adr r3, 800bef8 <atan+0x318>)
 800bcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcfa:	f7f4 fbe5 	bl	80004c8 <__aeabi_dsub>
 800bcfe:	4632      	mov	r2, r6
 800bd00:	463b      	mov	r3, r7
 800bd02:	f7f4 fd99 	bl	8000838 <__aeabi_dmul>
 800bd06:	4602      	mov	r2, r0
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4640      	mov	r0, r8
 800bd0c:	4649      	mov	r1, r9
 800bd0e:	f7f4 fbdd 	bl	80004cc <__adddf3>
 800bd12:	4622      	mov	r2, r4
 800bd14:	462b      	mov	r3, r5
 800bd16:	f7f4 fd8f 	bl	8000838 <__aeabi_dmul>
 800bd1a:	f1bb 3fff 	cmp.w	fp, #4294967295
 800bd1e:	4602      	mov	r2, r0
 800bd20:	460b      	mov	r3, r1
 800bd22:	d06e      	beq.n	800be02 <atan+0x222>
 800bd24:	4b7d      	ldr	r3, [pc, #500]	; (800bf1c <atan+0x33c>)
 800bd26:	4e7e      	ldr	r6, [pc, #504]	; (800bf20 <atan+0x340>)
 800bd28:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800bd2c:	445b      	add	r3, fp
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	f7f4 fbc9 	bl	80004c8 <__aeabi_dsub>
 800bd36:	4622      	mov	r2, r4
 800bd38:	462b      	mov	r3, r5
 800bd3a:	f7f4 fbc5 	bl	80004c8 <__aeabi_dsub>
 800bd3e:	44b3      	add	fp, r6
 800bd40:	4602      	mov	r2, r0
 800bd42:	460b      	mov	r3, r1
 800bd44:	e9db 0100 	ldrd	r0, r1, [fp]
 800bd48:	f7f4 fbbe 	bl	80004c8 <__aeabi_dsub>
 800bd4c:	f1ba 0f00 	cmp.w	sl, #0
 800bd50:	da0f      	bge.n	800bd72 <atan+0x192>
 800bd52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bd56:	4619      	mov	r1, r3
 800bd58:	ec41 0b10 	vmov	d0, r0, r1
 800bd5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd60:	2c00      	cmp	r4, #0
 800bd62:	f43f af4d 	beq.w	800bc00 <atan+0x20>
 800bd66:	4622      	mov	r2, r4
 800bd68:	462b      	mov	r3, r5
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	4629      	mov	r1, r5
 800bd6e:	f7f4 fbad 	bl	80004cc <__adddf3>
 800bd72:	ec41 0b10 	vmov	d0, r0, r1
 800bd76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd7a:	a361      	add	r3, pc, #388	; (adr r3, 800bf00 <atan+0x320>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	ee10 0a10 	vmov	r0, s0
 800bd84:	4629      	mov	r1, r5
 800bd86:	f7f4 fba1 	bl	80004cc <__adddf3>
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	4b65      	ldr	r3, [pc, #404]	; (800bf24 <atan+0x344>)
 800bd8e:	f7f4 ffe3 	bl	8000d58 <__aeabi_dcmpgt>
 800bd92:	2800      	cmp	r0, #0
 800bd94:	f43f af48 	beq.w	800bc28 <atan+0x48>
 800bd98:	4620      	mov	r0, r4
 800bd9a:	4629      	mov	r1, r5
 800bd9c:	ec41 0b10 	vmov	d0, r0, r1
 800bda0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bda4:	f000 f8c8 	bl	800bf38 <fabs>
 800bda8:	4b5f      	ldr	r3, [pc, #380]	; (800bf28 <atan+0x348>)
 800bdaa:	429e      	cmp	r6, r3
 800bdac:	ec55 4b10 	vmov	r4, r5, d0
 800bdb0:	dc2f      	bgt.n	800be12 <atan+0x232>
 800bdb2:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bdb6:	429e      	cmp	r6, r3
 800bdb8:	dc58      	bgt.n	800be6c <atan+0x28c>
 800bdba:	ee10 2a10 	vmov	r2, s0
 800bdbe:	ee10 0a10 	vmov	r0, s0
 800bdc2:	462b      	mov	r3, r5
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 fb81 	bl	80004cc <__adddf3>
 800bdca:	2200      	movs	r2, #0
 800bdcc:	4b55      	ldr	r3, [pc, #340]	; (800bf24 <atan+0x344>)
 800bdce:	f7f4 fb7b 	bl	80004c8 <__aeabi_dsub>
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bddc:	4620      	mov	r0, r4
 800bdde:	4629      	mov	r1, r5
 800bde0:	f7f4 fb74 	bl	80004cc <__adddf3>
 800bde4:	4602      	mov	r2, r0
 800bde6:	460b      	mov	r3, r1
 800bde8:	4630      	mov	r0, r6
 800bdea:	4639      	mov	r1, r7
 800bdec:	f7f4 fe4e 	bl	8000a8c <__aeabi_ddiv>
 800bdf0:	f04f 0b00 	mov.w	fp, #0
 800bdf4:	4604      	mov	r4, r0
 800bdf6:	460d      	mov	r5, r1
 800bdf8:	e718      	b.n	800bc2c <atan+0x4c>
 800bdfa:	a143      	add	r1, pc, #268	; (adr r1, 800bf08 <atan+0x328>)
 800bdfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be00:	e7b7      	b.n	800bd72 <atan+0x192>
 800be02:	4620      	mov	r0, r4
 800be04:	4629      	mov	r1, r5
 800be06:	f7f4 fb5f 	bl	80004c8 <__aeabi_dsub>
 800be0a:	ec41 0b10 	vmov	d0, r0, r1
 800be0e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be12:	4b46      	ldr	r3, [pc, #280]	; (800bf2c <atan+0x34c>)
 800be14:	429e      	cmp	r6, r3
 800be16:	dc1d      	bgt.n	800be54 <atan+0x274>
 800be18:	ee10 0a10 	vmov	r0, s0
 800be1c:	2200      	movs	r2, #0
 800be1e:	4b44      	ldr	r3, [pc, #272]	; (800bf30 <atan+0x350>)
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fb51 	bl	80004c8 <__aeabi_dsub>
 800be26:	2200      	movs	r2, #0
 800be28:	4606      	mov	r6, r0
 800be2a:	460f      	mov	r7, r1
 800be2c:	4b40      	ldr	r3, [pc, #256]	; (800bf30 <atan+0x350>)
 800be2e:	4620      	mov	r0, r4
 800be30:	4629      	mov	r1, r5
 800be32:	f7f4 fd01 	bl	8000838 <__aeabi_dmul>
 800be36:	2200      	movs	r2, #0
 800be38:	4b3a      	ldr	r3, [pc, #232]	; (800bf24 <atan+0x344>)
 800be3a:	f7f4 fb47 	bl	80004cc <__adddf3>
 800be3e:	4602      	mov	r2, r0
 800be40:	460b      	mov	r3, r1
 800be42:	4630      	mov	r0, r6
 800be44:	4639      	mov	r1, r7
 800be46:	f7f4 fe21 	bl	8000a8c <__aeabi_ddiv>
 800be4a:	f04f 0b02 	mov.w	fp, #2
 800be4e:	4604      	mov	r4, r0
 800be50:	460d      	mov	r5, r1
 800be52:	e6eb      	b.n	800bc2c <atan+0x4c>
 800be54:	462b      	mov	r3, r5
 800be56:	ee10 2a10 	vmov	r2, s0
 800be5a:	2000      	movs	r0, #0
 800be5c:	4935      	ldr	r1, [pc, #212]	; (800bf34 <atan+0x354>)
 800be5e:	f7f4 fe15 	bl	8000a8c <__aeabi_ddiv>
 800be62:	f04f 0b03 	mov.w	fp, #3
 800be66:	4604      	mov	r4, r0
 800be68:	460d      	mov	r5, r1
 800be6a:	e6df      	b.n	800bc2c <atan+0x4c>
 800be6c:	ee10 0a10 	vmov	r0, s0
 800be70:	2200      	movs	r2, #0
 800be72:	4b2c      	ldr	r3, [pc, #176]	; (800bf24 <atan+0x344>)
 800be74:	4629      	mov	r1, r5
 800be76:	f7f4 fb27 	bl	80004c8 <__aeabi_dsub>
 800be7a:	2200      	movs	r2, #0
 800be7c:	4606      	mov	r6, r0
 800be7e:	460f      	mov	r7, r1
 800be80:	4b28      	ldr	r3, [pc, #160]	; (800bf24 <atan+0x344>)
 800be82:	4620      	mov	r0, r4
 800be84:	4629      	mov	r1, r5
 800be86:	f7f4 fb21 	bl	80004cc <__adddf3>
 800be8a:	4602      	mov	r2, r0
 800be8c:	460b      	mov	r3, r1
 800be8e:	4630      	mov	r0, r6
 800be90:	4639      	mov	r1, r7
 800be92:	f7f4 fdfb 	bl	8000a8c <__aeabi_ddiv>
 800be96:	f04f 0b01 	mov.w	fp, #1
 800be9a:	4604      	mov	r4, r0
 800be9c:	460d      	mov	r5, r1
 800be9e:	e6c5      	b.n	800bc2c <atan+0x4c>
 800bea0:	54442d18 	.word	0x54442d18
 800bea4:	3ff921fb 	.word	0x3ff921fb
 800bea8:	e322da11 	.word	0xe322da11
 800beac:	3f90ad3a 	.word	0x3f90ad3a
 800beb0:	24760deb 	.word	0x24760deb
 800beb4:	3fa97b4b 	.word	0x3fa97b4b
 800beb8:	a0d03d51 	.word	0xa0d03d51
 800bebc:	3fb10d66 	.word	0x3fb10d66
 800bec0:	c54c206e 	.word	0xc54c206e
 800bec4:	3fb745cd 	.word	0x3fb745cd
 800bec8:	920083ff 	.word	0x920083ff
 800becc:	3fc24924 	.word	0x3fc24924
 800bed0:	5555550d 	.word	0x5555550d
 800bed4:	3fd55555 	.word	0x3fd55555
 800bed8:	2c6a6c2f 	.word	0x2c6a6c2f
 800bedc:	bfa2b444 	.word	0xbfa2b444
 800bee0:	52defd9a 	.word	0x52defd9a
 800bee4:	3fadde2d 	.word	0x3fadde2d
 800bee8:	af749a6d 	.word	0xaf749a6d
 800beec:	3fb3b0f2 	.word	0x3fb3b0f2
 800bef0:	fe231671 	.word	0xfe231671
 800bef4:	3fbc71c6 	.word	0x3fbc71c6
 800bef8:	9998ebc4 	.word	0x9998ebc4
 800befc:	3fc99999 	.word	0x3fc99999
 800bf00:	8800759c 	.word	0x8800759c
 800bf04:	7e37e43c 	.word	0x7e37e43c
 800bf08:	54442d18 	.word	0x54442d18
 800bf0c:	bff921fb 	.word	0xbff921fb
 800bf10:	440fffff 	.word	0x440fffff
 800bf14:	7ff00000 	.word	0x7ff00000
 800bf18:	3fdbffff 	.word	0x3fdbffff
 800bf1c:	0800c278 	.word	0x0800c278
 800bf20:	0800c258 	.word	0x0800c258
 800bf24:	3ff00000 	.word	0x3ff00000
 800bf28:	3ff2ffff 	.word	0x3ff2ffff
 800bf2c:	40037fff 	.word	0x40037fff
 800bf30:	3ff80000 	.word	0x3ff80000
 800bf34:	bff00000 	.word	0xbff00000

0800bf38 <fabs>:
 800bf38:	ec51 0b10 	vmov	r0, r1, d0
 800bf3c:	ee10 2a10 	vmov	r2, s0
 800bf40:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bf44:	ec43 2b10 	vmov	d0, r2, r3
 800bf48:	4770      	bx	lr
 800bf4a:	bf00      	nop

0800bf4c <_init>:
 800bf4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4e:	bf00      	nop
 800bf50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf52:	bc08      	pop	{r3}
 800bf54:	469e      	mov	lr, r3
 800bf56:	4770      	bx	lr

0800bf58 <_fini>:
 800bf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf5a:	bf00      	nop
 800bf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf5e:	bc08      	pop	{r3}
 800bf60:	469e      	mov	lr, r3
 800bf62:	4770      	bx	lr

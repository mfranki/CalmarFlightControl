
CalmarFlightController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cf2c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  0800d0d0  0800d0d0  0001d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d52c  0800d52c  00020a18  2**0
                  CONTENTS
  4 .ARM          00000008  0800d52c  0800d52c  0001d52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d534  0800d534  00020a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d534  0800d534  0001d534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d53c  0800d53c  0001d53c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a18  20000000  0800d540  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004318  20000a18  0800df58  00020a18  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d30  0800df58  00024d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a18  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f506  00000000  00000000  00020a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004cb6  00000000  00000000  0003ff4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00044c08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00046318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cb33  00000000  00000000  00047840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bc47  00000000  00000000  00064373  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a749f  00000000  00000000  0007ffba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127459  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007194  00000000  00000000  001274ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a18 	.word	0x20000a18
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d0b4 	.word	0x0800d0b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a1c 	.word	0x20000a1c
 80001dc:	0800d0b4 	.word	0x0800d0b4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96e 	b.w	8000f4c <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468c      	mov	ip, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8083 	bne.w	8000d9e <__udivmoddi4+0x116>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d947      	bls.n	8000d2e <__udivmoddi4+0xa6>
 8000c9e:	fab2 f282 	clz	r2, r2
 8000ca2:	b142      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	f1c2 0020 	rsb	r0, r2, #32
 8000ca8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cac:	4091      	lsls	r1, r2
 8000cae:	4097      	lsls	r7, r2
 8000cb0:	ea40 0c01 	orr.w	ip, r0, r1
 8000cb4:	4094      	lsls	r4, r2
 8000cb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cba:	0c23      	lsrs	r3, r4, #16
 8000cbc:	fbbc f6f8 	udiv	r6, ip, r8
 8000cc0:	fa1f fe87 	uxth.w	lr, r7
 8000cc4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cc8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ccc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cd0:	4299      	cmp	r1, r3
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0x60>
 8000cd4:	18fb      	adds	r3, r7, r3
 8000cd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cda:	f080 8119 	bcs.w	8000f10 <__udivmoddi4+0x288>
 8000cde:	4299      	cmp	r1, r3
 8000ce0:	f240 8116 	bls.w	8000f10 <__udivmoddi4+0x288>
 8000ce4:	3e02      	subs	r6, #2
 8000ce6:	443b      	add	r3, r7
 8000ce8:	1a5b      	subs	r3, r3, r1
 8000cea:	b2a4      	uxth	r4, r4
 8000cec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cfc:	45a6      	cmp	lr, r4
 8000cfe:	d909      	bls.n	8000d14 <__udivmoddi4+0x8c>
 8000d00:	193c      	adds	r4, r7, r4
 8000d02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d06:	f080 8105 	bcs.w	8000f14 <__udivmoddi4+0x28c>
 8000d0a:	45a6      	cmp	lr, r4
 8000d0c:	f240 8102 	bls.w	8000f14 <__udivmoddi4+0x28c>
 8000d10:	3802      	subs	r0, #2
 8000d12:	443c      	add	r4, r7
 8000d14:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d18:	eba4 040e 	sub.w	r4, r4, lr
 8000d1c:	2600      	movs	r6, #0
 8000d1e:	b11d      	cbz	r5, 8000d28 <__udivmoddi4+0xa0>
 8000d20:	40d4      	lsrs	r4, r2
 8000d22:	2300      	movs	r3, #0
 8000d24:	e9c5 4300 	strd	r4, r3, [r5]
 8000d28:	4631      	mov	r1, r6
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	b902      	cbnz	r2, 8000d32 <__udivmoddi4+0xaa>
 8000d30:	deff      	udf	#255	; 0xff
 8000d32:	fab2 f282 	clz	r2, r2
 8000d36:	2a00      	cmp	r2, #0
 8000d38:	d150      	bne.n	8000ddc <__udivmoddi4+0x154>
 8000d3a:	1bcb      	subs	r3, r1, r7
 8000d3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	2601      	movs	r6, #1
 8000d46:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d4a:	0c21      	lsrs	r1, r4, #16
 8000d4c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb08 f30c 	mul.w	r3, r8, ip
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0xe4>
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0xe2>
 8000d64:	428b      	cmp	r3, r1
 8000d66:	f200 80e9 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000d6a:	4684      	mov	ip, r0
 8000d6c:	1ac9      	subs	r1, r1, r3
 8000d6e:	b2a3      	uxth	r3, r4
 8000d70:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d74:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d78:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d7c:	fb08 f800 	mul.w	r8, r8, r0
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x10c>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x10a>
 8000d8c:	45a0      	cmp	r8, r4
 8000d8e:	f200 80d9 	bhi.w	8000f44 <__udivmoddi4+0x2bc>
 8000d92:	4618      	mov	r0, r3
 8000d94:	eba4 0408 	sub.w	r4, r4, r8
 8000d98:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d9c:	e7bf      	b.n	8000d1e <__udivmoddi4+0x96>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x12e>
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	f000 80b1 	beq.w	8000f0a <__udivmoddi4+0x282>
 8000da8:	2600      	movs	r6, #0
 8000daa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dae:	4630      	mov	r0, r6
 8000db0:	4631      	mov	r1, r6
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f683 	clz	r6, r3
 8000dba:	2e00      	cmp	r6, #0
 8000dbc:	d14a      	bne.n	8000e54 <__udivmoddi4+0x1cc>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0x140>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80b8 	bhi.w	8000f38 <__udivmoddi4+0x2b0>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0103 	sbc.w	r1, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	468c      	mov	ip, r1
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	d0a8      	beq.n	8000d28 <__udivmoddi4+0xa0>
 8000dd6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dda:	e7a5      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f603 	lsr.w	r6, r0, r3
 8000de4:	4097      	lsls	r7, r2
 8000de6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dea:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dee:	40d9      	lsrs	r1, r3
 8000df0:	4330      	orrs	r0, r6
 8000df2:	0c03      	lsrs	r3, r0, #16
 8000df4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000df8:	fa1f f887 	uxth.w	r8, r7
 8000dfc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb06 f108 	mul.w	r1, r6, r8
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0e:	d909      	bls.n	8000e24 <__udivmoddi4+0x19c>
 8000e10:	18fb      	adds	r3, r7, r3
 8000e12:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e16:	f080 808d 	bcs.w	8000f34 <__udivmoddi4+0x2ac>
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	f240 808a 	bls.w	8000f34 <__udivmoddi4+0x2ac>
 8000e20:	3e02      	subs	r6, #2
 8000e22:	443b      	add	r3, r7
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b281      	uxth	r1, r0
 8000e28:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e34:	fb00 f308 	mul.w	r3, r0, r8
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x1c4>
 8000e3c:	1879      	adds	r1, r7, r1
 8000e3e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e42:	d273      	bcs.n	8000f2c <__udivmoddi4+0x2a4>
 8000e44:	428b      	cmp	r3, r1
 8000e46:	d971      	bls.n	8000f2c <__udivmoddi4+0x2a4>
 8000e48:	3802      	subs	r0, #2
 8000e4a:	4439      	add	r1, r7
 8000e4c:	1acb      	subs	r3, r1, r3
 8000e4e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e52:	e778      	b.n	8000d46 <__udivmoddi4+0xbe>
 8000e54:	f1c6 0c20 	rsb	ip, r6, #32
 8000e58:	fa03 f406 	lsl.w	r4, r3, r6
 8000e5c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e60:	431c      	orrs	r4, r3
 8000e62:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e66:	fa01 f306 	lsl.w	r3, r1, r6
 8000e6a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e6e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e72:	431f      	orrs	r7, r3
 8000e74:	0c3b      	lsrs	r3, r7, #16
 8000e76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e7a:	fa1f f884 	uxth.w	r8, r4
 8000e7e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e82:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e86:	fb09 fa08 	mul.w	sl, r9, r8
 8000e8a:	458a      	cmp	sl, r1
 8000e8c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e90:	fa00 f306 	lsl.w	r3, r0, r6
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x220>
 8000e96:	1861      	adds	r1, r4, r1
 8000e98:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e9c:	d248      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000e9e:	458a      	cmp	sl, r1
 8000ea0:	d946      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4421      	add	r1, r4
 8000ea8:	eba1 010a 	sub.w	r1, r1, sl
 8000eac:	b2bf      	uxth	r7, r7
 8000eae:	fbb1 f0fe 	udiv	r0, r1, lr
 8000eb2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eb6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eba:	fb00 f808 	mul.w	r8, r0, r8
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x24a>
 8000ec2:	19e7      	adds	r7, r4, r7
 8000ec4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec8:	d22e      	bcs.n	8000f28 <__udivmoddi4+0x2a0>
 8000eca:	45b8      	cmp	r8, r7
 8000ecc:	d92c      	bls.n	8000f28 <__udivmoddi4+0x2a0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4427      	add	r7, r4
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	eba7 0708 	sub.w	r7, r7, r8
 8000eda:	fba0 8902 	umull	r8, r9, r0, r2
 8000ede:	454f      	cmp	r7, r9
 8000ee0:	46c6      	mov	lr, r8
 8000ee2:	4649      	mov	r1, r9
 8000ee4:	d31a      	bcc.n	8000f1c <__udivmoddi4+0x294>
 8000ee6:	d017      	beq.n	8000f18 <__udivmoddi4+0x290>
 8000ee8:	b15d      	cbz	r5, 8000f02 <__udivmoddi4+0x27a>
 8000eea:	ebb3 020e 	subs.w	r2, r3, lr
 8000eee:	eb67 0701 	sbc.w	r7, r7, r1
 8000ef2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ef6:	40f2      	lsrs	r2, r6
 8000ef8:	ea4c 0202 	orr.w	r2, ip, r2
 8000efc:	40f7      	lsrs	r7, r6
 8000efe:	e9c5 2700 	strd	r2, r7, [r5]
 8000f02:	2600      	movs	r6, #0
 8000f04:	4631      	mov	r1, r6
 8000f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e70b      	b.n	8000d28 <__udivmoddi4+0xa0>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e9      	b.n	8000ce8 <__udivmoddi4+0x60>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6fd      	b.n	8000d14 <__udivmoddi4+0x8c>
 8000f18:	4543      	cmp	r3, r8
 8000f1a:	d2e5      	bcs.n	8000ee8 <__udivmoddi4+0x260>
 8000f1c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f20:	eb69 0104 	sbc.w	r1, r9, r4
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7df      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e7d2      	b.n	8000ed2 <__udivmoddi4+0x24a>
 8000f2c:	4660      	mov	r0, ip
 8000f2e:	e78d      	b.n	8000e4c <__udivmoddi4+0x1c4>
 8000f30:	4681      	mov	r9, r0
 8000f32:	e7b9      	b.n	8000ea8 <__udivmoddi4+0x220>
 8000f34:	4666      	mov	r6, ip
 8000f36:	e775      	b.n	8000e24 <__udivmoddi4+0x19c>
 8000f38:	4630      	mov	r0, r6
 8000f3a:	e74a      	b.n	8000dd2 <__udivmoddi4+0x14a>
 8000f3c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f40:	4439      	add	r1, r7
 8000f42:	e713      	b.n	8000d6c <__udivmoddi4+0xe4>
 8000f44:	3802      	subs	r0, #2
 8000f46:	443c      	add	r4, r7
 8000f48:	e724      	b.n	8000d94 <__udivmoddi4+0x10c>
 8000f4a:	bf00      	nop

08000f4c <__aeabi_idiv0>:
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop

08000f50 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8000f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	4a06      	ldr	r2, [pc, #24]	; (8000f80 <vApplicationGetIdleTaskMemory+0x30>)
 8000f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000a34 	.word	0x20000a34
 8000f80:	20000a88 	.word	0x20000a88

08000f84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f84:	b5b0      	push	{r4, r5, r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8a:	f002 fa13 	bl	80033b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8e:	f000 f86f 	bl	8001070 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f92:	f000 fb1f 	bl	80015d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f96:	f000 fafd 	bl	8001594 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f9a:	f000 f8d3 	bl	8001144 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000f9e:	f000 f923 	bl	80011e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000fa2:	f000 f957 	bl	8001254 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000fa6:	f000 f98b 	bl	80012c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000faa:	f000 fa4f 	bl	800144c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000fae:	f000 fac7 	bl	8001540 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */


  UtilsInit();
 8000fb2:	f001 fe31 	bl	8002c18 <UtilsInit>
  if(!Bmx055Init(&hspi1) ||
 8000fb6:	4828      	ldr	r0, [pc, #160]	; (8001058 <main+0xd4>)
 8000fb8:	f001 f822 	bl	8002000 <Bmx055Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f083 0301 	eor.w	r3, r3, #1
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d121      	bne.n	800100c <main+0x88>
     !UartInit(&huart1) ||
 8000fc8:	4824      	ldr	r0, [pc, #144]	; (800105c <main+0xd8>)
 8000fca:	f001 fdcf 	bl	8002b6c <UartInit>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
  if(!Bmx055Init(&hspi1) ||
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d118      	bne.n	800100c <main+0x88>
     !AdcInit(&hadc1) ||
 8000fda:	4821      	ldr	r0, [pc, #132]	; (8001060 <main+0xdc>)
 8000fdc:	f001 fd64 	bl	8002aa8 <AdcInit>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	f083 0301 	eor.w	r3, r3, #1
 8000fe6:	b2db      	uxtb	r3, r3
     !UartInit(&huart1) ||
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d10f      	bne.n	800100c <main+0x88>
   //  !BatteryStatusInit() ||
     !PosCalcInit() ||
 8000fec:	f002 f8dc 	bl	80031a8 <PosCalcInit>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	f083 0301 	eor.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
     !AdcInit(&hadc1) ||
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d107      	bne.n	800100c <main+0x88>
     !MahonyFilterInit())
 8000ffc:	f001 ff88 	bl	8002f10 <MahonyFilterInit>
 8001000:	4603      	mov	r3, r0
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
     !PosCalcInit() ||
 8001008:	2b00      	cmp	r3, #0
 800100a:	d000      	beq.n	800100e <main+0x8a>
  {
      while(1){}
 800100c:	e7fe      	b.n	800100c <main+0x88>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <main+0xe0>)
 8001010:	f107 041c 	add.w	r4, r7, #28
 8001014:	461d      	mov	r5, r3
 8001016:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001018:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800101e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f006 f84c 	bl	80070c6 <osThreadCreate>
 800102e:	4603      	mov	r3, r0
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <main+0xe4>)
 8001032:	6013      	str	r3, [r2, #0]
  osThreadCreate(osThread(radioTask), NULL);

  osThreadDef(batteryStatusTask, BatteryStatusTask, osPriorityNormal, 0, 100);
  osThreadCreate(osThread(batteryStatusTask), NULL);*/

  osThreadDef(mahonyFilterTask, MahonyFilterTask, osPriorityAboveNormal, 0, 300);
 8001034:	4b0d      	ldr	r3, [pc, #52]	; (800106c <main+0xe8>)
 8001036:	463c      	mov	r4, r7
 8001038:	461d      	mov	r5, r3
 800103a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001042:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate(osThread(mahonyFilterTask), NULL);
 8001046:	463b      	mov	r3, r7
 8001048:	2100      	movs	r1, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f006 f83b 	bl	80070c6 <osThreadCreate>

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001050:	f006 f832 	bl	80070b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001054:	e7fe      	b.n	8001054 <main+0xd0>
 8001056:	bf00      	nop
 8001058:	20004bfc 	.word	0x20004bfc
 800105c:	20004b10 	.word	0x20004b10
 8001060:	20004ac8 	.word	0x20004ac8
 8001064:	0800d0f0 	.word	0x0800d0f0
 8001068:	20004a6c 	.word	0x20004a6c
 800106c:	0800d10c 	.word	0x0800d10c

08001070 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b094      	sub	sp, #80	; 0x50
 8001074:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001076:	f107 0320 	add.w	r3, r7, #32
 800107a:	2230      	movs	r2, #48	; 0x30
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f007 fd66 	bl	8008b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001084:	f107 030c 	add.w	r3, r7, #12
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001094:	2300      	movs	r3, #0
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	4b28      	ldr	r3, [pc, #160]	; (800113c <SystemClock_Config+0xcc>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	4a27      	ldr	r2, [pc, #156]	; (800113c <SystemClock_Config+0xcc>)
 800109e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a2:	6413      	str	r3, [r2, #64]	; 0x40
 80010a4:	4b25      	ldr	r3, [pc, #148]	; (800113c <SystemClock_Config+0xcc>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b0:	2300      	movs	r3, #0
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd0>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010bc:	4a20      	ldr	r2, [pc, #128]	; (8001140 <SystemClock_Config+0xd0>)
 80010be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1e      	ldr	r3, [pc, #120]	; (8001140 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010e4:	2308      	movs	r3, #8
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80010e8:	2340      	movs	r3, #64	; 0x40
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f0:	2304      	movs	r3, #4
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fa79 	bl	80045f0 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001104:	f000 fb40 	bl	8001788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2102      	movs	r1, #2
 8001124:	4618      	mov	r0, r3
 8001126:	f003 fcdb 	bl	8004ae0 <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001130:	f000 fb2a 	bl	8001788 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	; 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001162:	4b1e      	ldr	r3, [pc, #120]	; (80011dc <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC1_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800116e:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <MX_ADC1_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC1_Init+0x98>)
 8001176:	2200      	movs	r2, #0
 8001178:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117c:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_ADC1_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001182:	4b16      	ldr	r3, [pc, #88]	; (80011dc <MX_ADC1_Init+0x98>)
 8001184:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xa0>)
 8001186:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC1_Init+0x98>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <MX_ADC1_Init+0x98>)
 8001190:	2201      	movs	r2, #1
 8001192:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC1_Init+0x98>)
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a2:	480e      	ldr	r0, [pc, #56]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a4:	f002 f948 	bl	8003438 <HAL_ADC_Init>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011ae:	f000 faeb 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80011b2:	230b      	movs	r3, #11
 80011b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b6:	2301      	movs	r3, #1
 80011b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011be:	463b      	mov	r3, r7
 80011c0:	4619      	mov	r1, r3
 80011c2:	4806      	ldr	r0, [pc, #24]	; (80011dc <MX_ADC1_Init+0x98>)
 80011c4:	f002 fa30 	bl	8003628 <HAL_ADC_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011ce:	f000 fadb 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20004ac8 	.word	0x20004ac8
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011ec:	4b17      	ldr	r3, [pc, #92]	; (800124c <MX_SPI1_Init+0x64>)
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_SPI1_Init+0x68>)
 80011f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f2:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_SPI1_Init+0x64>)
 80011f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <MX_SPI1_Init+0x64>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001200:	4b12      	ldr	r3, [pc, #72]	; (800124c <MX_SPI1_Init+0x64>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <MX_SPI1_Init+0x64>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800120c:	4b0f      	ldr	r3, [pc, #60]	; (800124c <MX_SPI1_Init+0x64>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001212:	4b0e      	ldr	r3, [pc, #56]	; (800124c <MX_SPI1_Init+0x64>)
 8001214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001218:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_SPI1_Init+0x64>)
 800121c:	2210      	movs	r2, #16
 800121e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <MX_SPI1_Init+0x64>)
 8001222:	2200      	movs	r2, #0
 8001224:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_SPI1_Init+0x64>)
 8001228:	2200      	movs	r2, #0
 800122a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <MX_SPI1_Init+0x64>)
 800122e:	2200      	movs	r2, #0
 8001230:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <MX_SPI1_Init+0x64>)
 8001234:	220a      	movs	r2, #10
 8001236:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001238:	4804      	ldr	r0, [pc, #16]	; (800124c <MX_SPI1_Init+0x64>)
 800123a:	f003 fe7d 	bl	8004f38 <HAL_SPI_Init>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001244:	f000 faa0 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20004bfc 	.word	0x20004bfc
 8001250:	40013000 	.word	0x40013000

08001254 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI2_Init+0x64>)
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <MX_SPI2_Init+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001264:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI2_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI2_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI2_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI2_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI2_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI2_Init+0x64>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI2_Init+0x64>)
 80012a6:	f003 fe47 	bl	8004f38 <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012b0:	f000 fa6a 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20004a70 	.word	0x20004a70
 80012bc:	40003800 	.word	0x40003800

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	; 0x58
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f007 fc29 	bl	8008b50 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012fe:	4b51      	ldr	r3, [pc, #324]	; (8001444 <MX_TIM1_Init+0x184>)
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <MX_TIM1_Init+0x188>)
 8001302:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <MX_TIM1_Init+0x184>)
 8001306:	2240      	movs	r2, #64	; 0x40
 8001308:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b4e      	ldr	r3, [pc, #312]	; (8001444 <MX_TIM1_Init+0x184>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001310:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <MX_TIM1_Init+0x184>)
 8001312:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001316:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b4a      	ldr	r3, [pc, #296]	; (8001444 <MX_TIM1_Init+0x184>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800131e:	4b49      	ldr	r3, [pc, #292]	; (8001444 <MX_TIM1_Init+0x184>)
 8001320:	2200      	movs	r2, #0
 8001322:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b47      	ldr	r3, [pc, #284]	; (8001444 <MX_TIM1_Init+0x184>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132a:	4846      	ldr	r0, [pc, #280]	; (8001444 <MX_TIM1_Init+0x184>)
 800132c:	f004 fbac 	bl	8005a88 <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001336:	f000 fa27 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001344:	4619      	mov	r1, r3
 8001346:	483f      	ldr	r0, [pc, #252]	; (8001444 <MX_TIM1_Init+0x184>)
 8001348:	f004 ff20 	bl	800618c <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001352:	f000 fa19 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001356:	483b      	ldr	r0, [pc, #236]	; (8001444 <MX_TIM1_Init+0x184>)
 8001358:	f004 fc48 	bl	8005bec <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001362:	f000 fa11 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001366:	2300      	movs	r3, #0
 8001368:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001372:	4619      	mov	r1, r3
 8001374:	4833      	ldr	r0, [pc, #204]	; (8001444 <MX_TIM1_Init+0x184>)
 8001376:	f005 fac1 	bl	80068fc <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001380:	f000 fa02 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1000;
 8001388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4826      	ldr	r0, [pc, #152]	; (8001444 <MX_TIM1_Init+0x184>)
 80013ac:	f004 fe30 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013b6:	f000 f9e7 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	2204      	movs	r2, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4820      	ldr	r0, [pc, #128]	; (8001444 <MX_TIM1_Init+0x184>)
 80013c4:	f004 fe24 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80013ce:	f000 f9db 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013d6:	2208      	movs	r2, #8
 80013d8:	4619      	mov	r1, r3
 80013da:	481a      	ldr	r0, [pc, #104]	; (8001444 <MX_TIM1_Init+0x184>)
 80013dc:	f004 fe18 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 80013e6:	f000 f9cf 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ee:	220c      	movs	r2, #12
 80013f0:	4619      	mov	r1, r3
 80013f2:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_TIM1_Init+0x184>)
 80013f4:	f004 fe0c 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80013fe:	f000 f9c3 	bl	8001788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	4619      	mov	r1, r3
 8001424:	4807      	ldr	r0, [pc, #28]	; (8001444 <MX_TIM1_Init+0x184>)
 8001426:	f005 fad7 	bl	80069d8 <HAL_TIMEx_ConfigBreakDeadTime>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001430:	f000 f9aa 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001434:	4803      	ldr	r0, [pc, #12]	; (8001444 <MX_TIM1_Init+0x184>)
 8001436:	f000 fb27 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 800143a:	bf00      	nop
 800143c:	3758      	adds	r7, #88	; 0x58
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20004bb4 	.word	0x20004bb4
 8001448:	40010000 	.word	0x40010000

0800144c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800147c:	4b2f      	ldr	r3, [pc, #188]	; (800153c <MX_TIM2_Init+0xf0>)
 800147e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001482:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <MX_TIM2_Init+0xf0>)
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b2c      	ldr	r3, [pc, #176]	; (800153c <MX_TIM2_Init+0xf0>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <MX_TIM2_Init+0xf0>)
 8001492:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001496:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001498:	4b28      	ldr	r3, [pc, #160]	; (800153c <MX_TIM2_Init+0xf0>)
 800149a:	2200      	movs	r2, #0
 800149c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <MX_TIM2_Init+0xf0>)
 80014a0:	2280      	movs	r2, #128	; 0x80
 80014a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014a4:	4825      	ldr	r0, [pc, #148]	; (800153c <MX_TIM2_Init+0xf0>)
 80014a6:	f004 faef 	bl	8005a88 <HAL_TIM_Base_Init>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014b0:	f000 f96a 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014be:	4619      	mov	r1, r3
 80014c0:	481e      	ldr	r0, [pc, #120]	; (800153c <MX_TIM2_Init+0xf0>)
 80014c2:	f004 fe63 	bl	800618c <HAL_TIM_ConfigClockSource>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014cc:	f000 f95c 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014d0:	481a      	ldr	r0, [pc, #104]	; (800153c <MX_TIM2_Init+0xf0>)
 80014d2:	f004 fb8b 	bl	8005bec <HAL_TIM_PWM_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014dc:	f000 f954 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e0:	2300      	movs	r3, #0
 80014e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014e8:	f107 0320 	add.w	r3, r7, #32
 80014ec:	4619      	mov	r1, r3
 80014ee:	4813      	ldr	r0, [pc, #76]	; (800153c <MX_TIM2_Init+0xf0>)
 80014f0:	f005 fa04 	bl	80068fc <HAL_TIMEx_MasterConfigSynchronization>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80014fa:	f000 f945 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fe:	2360      	movs	r3, #96	; 0x60
 8001500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8001502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	2200      	movs	r2, #0
 8001514:	4619      	mov	r1, r3
 8001516:	4809      	ldr	r0, [pc, #36]	; (800153c <MX_TIM2_Init+0xf0>)
 8001518:	f004 fd7a 	bl	8006010 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001522:	f000 f931 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001526:	2100      	movs	r1, #0
 8001528:	4804      	ldr	r0, [pc, #16]	; (800153c <MX_TIM2_Init+0xf0>)
 800152a:	f004 fbb9 	bl	8005ca0 <HAL_TIM_PWM_Start>
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800152e:	4803      	ldr	r0, [pc, #12]	; (800153c <MX_TIM2_Init+0xf0>)
 8001530:	f000 faaa 	bl	8001a88 <HAL_TIM_MspPostInit>

}
 8001534:	bf00      	nop
 8001536:	3738      	adds	r7, #56	; 0x38
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	20004c54 	.word	0x20004c54

08001540 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001544:	4b10      	ldr	r3, [pc, #64]	; (8001588 <MX_USART1_UART_Init+0x48>)
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <MX_USART1_UART_Init+0x4c>)
 8001548:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 800154a:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <MX_USART1_UART_Init+0x48>)
 800154c:	4a10      	ldr	r2, [pc, #64]	; (8001590 <MX_USART1_UART_Init+0x50>)
 800154e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001550:	4b0d      	ldr	r3, [pc, #52]	; (8001588 <MX_USART1_UART_Init+0x48>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <MX_USART1_UART_Init+0x48>)
 8001558:	2200      	movs	r2, #0
 800155a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <MX_USART1_UART_Init+0x48>)
 800155e:	2200      	movs	r2, #0
 8001560:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <MX_USART1_UART_Init+0x48>)
 8001564:	220c      	movs	r2, #12
 8001566:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001568:	4b07      	ldr	r3, [pc, #28]	; (8001588 <MX_USART1_UART_Init+0x48>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800156e:	4b06      	ldr	r3, [pc, #24]	; (8001588 <MX_USART1_UART_Init+0x48>)
 8001570:	2200      	movs	r2, #0
 8001572:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_USART1_UART_Init+0x48>)
 8001576:	f005 fa95 	bl	8006aa4 <HAL_UART_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 8001580:	f000 f902 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20004b10 	.word	0x20004b10
 800158c:	40011000 	.word	0x40011000
 8001590:	000f4240 	.word	0x000f4240

08001594 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	607b      	str	r3, [r7, #4]
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_DMA_Init+0x3c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <MX_DMA_Init+0x3c>)
 80015a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_DMA_Init+0x3c>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2105      	movs	r1, #5
 80015ba:	2038      	movs	r0, #56	; 0x38
 80015bc:	f002 fb0a 	bl	8003bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015c0:	2038      	movs	r0, #56	; 0x38
 80015c2:	f002 fb23 	bl	8003c0c <HAL_NVIC_EnableIRQ>

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b54      	ldr	r3, [pc, #336]	; (8001740 <MX_GPIO_Init+0x16c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a53      	ldr	r2, [pc, #332]	; (8001740 <MX_GPIO_Init+0x16c>)
 80015f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <MX_GPIO_Init+0x16c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b4d      	ldr	r3, [pc, #308]	; (8001740 <MX_GPIO_Init+0x16c>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a4c      	ldr	r2, [pc, #304]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001610:	f043 0304 	orr.w	r3, r3, #4
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b4a      	ldr	r3, [pc, #296]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b46      	ldr	r3, [pc, #280]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a45      	ldr	r2, [pc, #276]	; (8001740 <MX_GPIO_Init+0x16c>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b43      	ldr	r3, [pc, #268]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b3f      	ldr	r3, [pc, #252]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a3e      	ldr	r2, [pc, #248]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b3c      	ldr	r3, [pc, #240]	; (8001740 <MX_GPIO_Init+0x16c>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DEBUG_OUT_3_Pin|DEBUG_OUT_2_Pin|DEBUG_OUT_1_Pin|LPS_CS_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	211e      	movs	r1, #30
 800165e:	4839      	ldr	r0, [pc, #228]	; (8001744 <MX_GPIO_Init+0x170>)
 8001660:	f002 ff88 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_ACC_Pin|CS_GYRO_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2130      	movs	r1, #48	; 0x30
 8001668:	4837      	ldr	r0, [pc, #220]	; (8001748 <MX_GPIO_Init+0x174>)
 800166a:	f002 ff83 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_MAG_GPIO_Port, CS_MAG_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	2101      	movs	r1, #1
 8001672:	4836      	ldr	r0, [pc, #216]	; (800174c <MX_GPIO_Init+0x178>)
 8001674:	f002 ff7e 	bl	8004574 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_OUT_3_Pin DEBUG_OUT_2_Pin DEBUG_OUT_1_Pin LPS_CS_Pin */
  GPIO_InitStruct.Pin = DEBUG_OUT_3_Pin|DEBUG_OUT_2_Pin|DEBUG_OUT_1_Pin|LPS_CS_Pin;
 8001678:	231e      	movs	r3, #30
 800167a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001684:	2300      	movs	r3, #0
 8001686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4619      	mov	r1, r3
 800168e:	482d      	ldr	r0, [pc, #180]	; (8001744 <MX_GPIO_Init+0x170>)
 8001690:	f002 fdd4 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_ACC_Pin CS_GYRO_Pin */
  GPIO_InitStruct.Pin = CS_ACC_Pin|CS_GYRO_Pin;
 8001694:	2330      	movs	r3, #48	; 0x30
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	4827      	ldr	r0, [pc, #156]	; (8001748 <MX_GPIO_Init+0x174>)
 80016ac:	f002 fdc6 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_MAG_Pin */
  GPIO_InitStruct.Pin = CS_MAG_Pin;
 80016b0:	2301      	movs	r3, #1
 80016b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b4:	2301      	movs	r3, #1
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016bc:	2300      	movs	r3, #0
 80016be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_MAG_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4821      	ldr	r0, [pc, #132]	; (800174c <MX_GPIO_Init+0x178>)
 80016c8:	f002 fdb8 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pin : DRDY_MAG_Pin */
  GPIO_InitStruct.Pin = DRDY_MAG_Pin;
 80016cc:	2302      	movs	r3, #2
 80016ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRDY_MAG_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	481b      	ldr	r0, [pc, #108]	; (800174c <MX_GPIO_Init+0x178>)
 80016e0:	f002 fdac 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_IN_1_Pin PWM_IN_2_Pin PWM_IN_3_Pin PWM_IN_4_Pin */
  GPIO_InitStruct.Pin = PWM_IN_1_Pin|PWM_IN_2_Pin|PWM_IN_3_Pin|PWM_IN_4_Pin;
 80016e4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <MX_GPIO_Init+0x17c>)
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	4814      	ldr	r0, [pc, #80]	; (800174c <MX_GPIO_Init+0x178>)
 80016fa:	f002 fd9f 	bl	800423c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWM_IN_5_Pin PWM_IN_6_Pin */
  GPIO_InitStruct.Pin = PWM_IN_5_Pin|PWM_IN_6_Pin;
 80016fe:	23c0      	movs	r3, #192	; 0xc0
 8001700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <MX_GPIO_Init+0x17c>)
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480d      	ldr	r0, [pc, #52]	; (8001748 <MX_GPIO_Init+0x174>)
 8001712:	f002 fd93 	bl	800423c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	2017      	movs	r0, #23
 800171c:	f002 fa5a 	bl	8003bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001720:	2017      	movs	r0, #23
 8001722:	f002 fa73 	bl	8003c0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	2028      	movs	r0, #40	; 0x28
 800172c:	f002 fa52 	bl	8003bd4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001730:	2028      	movs	r0, #40	; 0x28
 8001732:	f002 fa6b 	bl	8003c0c <HAL_NVIC_EnableIRQ>

}
 8001736:	bf00      	nop
 8001738:	3728      	adds	r7, #40	; 0x28
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020800 	.word	0x40020800
 800174c:	40020400 	.word	0x40020400
 8001750:	10310000 	.word	0x10310000

08001754 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
      osDelay(20);
 800175c:	2014      	movs	r0, #20
 800175e:	f005 fcfe 	bl	800715e <osDelay>
 8001762:	e7fb      	b.n	800175c <StartDefaultTask+0x8>

08001764 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d101      	bne.n	800177a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001776:	f001 fe3f 	bl	80033f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40000400 	.word	0x40000400

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_MspInit+0x54>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a11      	ldr	r2, [pc, #68]	; (80017ec <HAL_MspInit+0x54>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_MspInit+0x54>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_MspInit+0x54>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <HAL_MspInit+0x54>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_MspInit+0x54>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	210f      	movs	r1, #15
 80017da:	f06f 0001 	mvn.w	r0, #1
 80017de:	f002 f9f9 	bl	8003bd4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	; 0x28
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0314 	add.w	r3, r7, #20
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a2f      	ldr	r2, [pc, #188]	; (80018cc <HAL_ADC_MspInit+0xdc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d157      	bne.n	80018c2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001812:	2300      	movs	r3, #0
 8001814:	613b      	str	r3, [r7, #16]
 8001816:	4b2e      	ldr	r3, [pc, #184]	; (80018d0 <HAL_ADC_MspInit+0xe0>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <HAL_ADC_MspInit+0xe0>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6453      	str	r3, [r2, #68]	; 0x44
 8001822:	4b2b      	ldr	r3, [pc, #172]	; (80018d0 <HAL_ADC_MspInit+0xe0>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001826:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182a:	613b      	str	r3, [r7, #16]
 800182c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <HAL_ADC_MspInit+0xe0>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a26      	ldr	r2, [pc, #152]	; (80018d0 <HAL_ADC_MspInit+0xe0>)
 8001838:	f043 0304 	orr.w	r3, r3, #4
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <HAL_ADC_MspInit+0xe0>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = VCC_ADC_Pin;
 800184a:	2302      	movs	r3, #2
 800184c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800184e:	2303      	movs	r3, #3
 8001850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VCC_ADC_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0314 	add.w	r3, r7, #20
 800185a:	4619      	mov	r1, r3
 800185c:	481d      	ldr	r0, [pc, #116]	; (80018d4 <HAL_ADC_MspInit+0xe4>)
 800185e:	f002 fced 	bl	800423c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001862:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 8001864:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_ADC_MspInit+0xec>)
 8001866:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001868:	4b1b      	ldr	r3, [pc, #108]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800186e:	4b1a      	ldr	r3, [pc, #104]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 8001876:	2200      	movs	r2, #0
 8001878:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 800187c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001880:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001882:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 8001884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001888:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800188a:	4b13      	ldr	r3, [pc, #76]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 800188c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001890:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 8001894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001898:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80018a6:	480c      	ldr	r0, [pc, #48]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 80018a8:	f002 f9be 	bl	8003c28 <HAL_DMA_Init>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80018b2:	f7ff ff69 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 80018ba:	639a      	str	r2, [r3, #56]	; 0x38
 80018bc:	4a06      	ldr	r2, [pc, #24]	; (80018d8 <HAL_ADC_MspInit+0xe8>)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3728      	adds	r7, #40	; 0x28
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40012000 	.word	0x40012000
 80018d0:	40023800 	.word	0x40023800
 80018d4:	40020800 	.word	0x40020800
 80018d8:	20004b54 	.word	0x20004b54
 80018dc:	40026410 	.word	0x40026410

080018e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b08c      	sub	sp, #48	; 0x30
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e8:	f107 031c 	add.w	r3, r7, #28
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a41      	ldr	r2, [pc, #260]	; (8001a04 <HAL_SPI_MspInit+0x124>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d12c      	bne.n	800195c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	4b40      	ldr	r3, [pc, #256]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190a:	4a3f      	ldr	r2, [pc, #252]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 800190c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001910:	6453      	str	r3, [r2, #68]	; 0x44
 8001912:	4b3d      	ldr	r3, [pc, #244]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI_BMX_SCK_Pin|SPI_BMX_MISO_Pin|SPI_BMX_MOSI_Pin;
 800193a:	23e0      	movs	r3, #224	; 0xe0
 800193c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001946:	2303      	movs	r3, #3
 8001948:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800194a:	2305      	movs	r3, #5
 800194c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	482d      	ldr	r0, [pc, #180]	; (8001a0c <HAL_SPI_MspInit+0x12c>)
 8001956:	f002 fc71 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800195a:	e04f      	b.n	80019fc <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a2b      	ldr	r2, [pc, #172]	; (8001a10 <HAL_SPI_MspInit+0x130>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d14a      	bne.n	80019fc <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196e:	4a26      	ldr	r2, [pc, #152]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001974:	6413      	str	r3, [r2, #64]	; 0x40
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a1f      	ldr	r2, [pc, #124]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_SPI_MspInit+0x128>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SPI_LPS_MISO_Pin|SPI_LPS_MOSI_Pin;
 80019ba:	230c      	movs	r3, #12
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ca:	2305      	movs	r3, #5
 80019cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	480f      	ldr	r0, [pc, #60]	; (8001a14 <HAL_SPI_MspInit+0x134>)
 80019d6:	f002 fc31 	bl	800423c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SPI_LPS_SCK_Pin;
 80019da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e0:	2302      	movs	r3, #2
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e8:	2303      	movs	r3, #3
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ec:	2305      	movs	r3, #5
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI_LPS_SCK_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4808      	ldr	r0, [pc, #32]	; (8001a18 <HAL_SPI_MspInit+0x138>)
 80019f8:	f002 fc20 	bl	800423c <HAL_GPIO_Init>
}
 80019fc:	bf00      	nop
 80019fe:	3730      	adds	r7, #48	; 0x30
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013000 	.word	0x40013000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	40003800 	.word	0x40003800
 8001a14:	40020800 	.word	0x40020800
 8001a18:	40020400 	.word	0x40020400

08001a1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a15      	ldr	r2, [pc, #84]	; (8001a80 <HAL_TIM_Base_MspInit+0x64>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d10e      	bne.n	8001a4c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_TIM_Base_MspInit+0x68>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a36:	4a13      	ldr	r2, [pc, #76]	; (8001a84 <HAL_TIM_Base_MspInit+0x68>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_TIM_Base_MspInit+0x68>)
 8001a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a4a:	e012      	b.n	8001a72 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a54:	d10d      	bne.n	8001a72 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <HAL_TIM_Base_MspInit+0x68>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	4a09      	ldr	r2, [pc, #36]	; (8001a84 <HAL_TIM_Base_MspInit+0x68>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6413      	str	r3, [r2, #64]	; 0x40
 8001a66:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_TIM_Base_MspInit+0x68>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
 8001a70:	68bb      	ldr	r3, [r7, #8]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40010000 	.word	0x40010000
 8001a84:	40023800 	.word	0x40023800

08001a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b08a      	sub	sp, #40	; 0x28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <HAL_TIM_MspPostInit+0xb0>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d11f      	bne.n	8001aea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aaa:	2300      	movs	r3, #0
 8001aac:	613b      	str	r3, [r7, #16]
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_TIM_MspPostInit+0xb4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab2:	4a22      	ldr	r2, [pc, #136]	; (8001b3c <HAL_TIM_MspPostInit+0xb4>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aba:	4b20      	ldr	r3, [pc, #128]	; (8001b3c <HAL_TIM_MspPostInit+0xb4>)
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_ESC_1_Pin|PWM_ESC_2_Pin|PWM_ESC_3_Pin|PWM_ESC_4_Pin;
 8001ac6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001acc:	2302      	movs	r3, #2
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4817      	ldr	r0, [pc, #92]	; (8001b40 <HAL_TIM_MspPostInit+0xb8>)
 8001ae4:	f002 fbaa 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ae8:	e022      	b.n	8001b30 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af2:	d11d      	bne.n	8001b30 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_TIM_MspPostInit+0xb4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4a0f      	ldr	r2, [pc, #60]	; (8001b3c <HAL_TIM_MspPostInit+0xb4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6313      	str	r3, [r2, #48]	; 0x30
 8001b04:	4b0d      	ldr	r3, [pc, #52]	; (8001b3c <HAL_TIM_MspPostInit+0xb4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BEEPER_Pin;
 8001b10:	2301      	movs	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b20:	2301      	movs	r3, #1
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BEEPER_GPIO_Port, &GPIO_InitStruct);
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_TIM_MspPostInit+0xb8>)
 8001b2c:	f002 fb86 	bl	800423c <HAL_GPIO_Init>
}
 8001b30:	bf00      	nop
 8001b32:	3728      	adds	r7, #40	; 0x28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a19      	ldr	r2, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0x84>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d12b      	bne.n	8001bbe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	4a17      	ldr	r2, [pc, #92]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b70:	f043 0310 	orr.w	r3, r3, #16
 8001b74:	6453      	str	r3, [r2, #68]	; 0x44
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	613b      	str	r3, [r7, #16]
 8001b80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	60fb      	str	r3, [r7, #12]
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b8c:	f043 0302 	orr.w	r3, r3, #2
 8001b90:	6313      	str	r3, [r2, #48]	; 0x30
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_UART_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	60fb      	str	r3, [r7, #12]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b9e:	23c0      	movs	r3, #192	; 0xc0
 8001ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bae:	2307      	movs	r3, #7
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb2:	f107 0314 	add.w	r3, r7, #20
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_UART_MspInit+0x8c>)
 8001bba:	f002 fb3f 	bl	800423c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3728      	adds	r7, #40	; 0x28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40020400 	.word	0x40020400

08001bd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	; 0x30
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	201d      	movs	r0, #29
 8001bea:	f001 fff3 	bl	8003bd4 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001bee:	201d      	movs	r0, #29
 8001bf0:	f002 f80c 	bl	8003c0c <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	; (8001c78 <HAL_InitTick+0xa4>)
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	4a1e      	ldr	r2, [pc, #120]	; (8001c78 <HAL_InitTick+0xa4>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	6413      	str	r3, [r2, #64]	; 0x40
 8001c04:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_InitTick+0xa4>)
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c10:	f107 0210 	add.w	r2, r7, #16
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	4611      	mov	r1, r2
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f003 f95a 	bl	8004ed4 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c20:	f003 f930 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8001c24:	4603      	mov	r3, r0
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <HAL_InitTick+0xa8>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0c9b      	lsrs	r3, r3, #18
 8001c34:	3b01      	subs	r3, #1
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001c38:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <HAL_InitTick+0xac>)
 8001c3a:	4a12      	ldr	r2, [pc, #72]	; (8001c84 <HAL_InitTick+0xb0>)
 8001c3c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8001c3e:	4b10      	ldr	r3, [pc, #64]	; (8001c80 <HAL_InitTick+0xac>)
 8001c40:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c44:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001c46:	4a0e      	ldr	r2, [pc, #56]	; (8001c80 <HAL_InitTick+0xac>)
 8001c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c4a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <HAL_InitTick+0xac>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b0b      	ldr	r3, [pc, #44]	; (8001c80 <HAL_InitTick+0xac>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <HAL_InitTick+0xac>)
 8001c5a:	f003 ff15 	bl	8005a88 <HAL_TIM_Base_Init>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001c64:	4806      	ldr	r0, [pc, #24]	; (8001c80 <HAL_InitTick+0xac>)
 8001c66:	f003 ff5f 	bl	8005b28 <HAL_TIM_Base_Start_IT>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	e000      	b.n	8001c70 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3730      	adds	r7, #48	; 0x30
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	431bde83 	.word	0x431bde83
 8001c80:	20004c9c 	.word	0x20004c9c
 8001c84:	40000400 	.word	0x40000400

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c96:	b480      	push	{r7}
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9a:	e7fe      	b.n	8001c9a <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	e7fe      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca6:	e7fe      	b.n	8001ca6 <BusFault_Handler+0x4>

08001ca8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <UsageFault_Handler+0x4>

08001cae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb2:	bf00      	nop
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
    EXTI_HandleTypeDef hexti;

    hexti.Line = EXTI_LINE_6;
 8001cc2:	4b13      	ldr	r3, [pc, #76]	; (8001d10 <EXTI9_5_IRQHandler+0x54>)
 8001cc4:	603b      	str	r3, [r7, #0]
    if(HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING))
 8001cc6:	463b      	mov	r3, r7
 8001cc8:	2103      	movs	r1, #3
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 fa96 	bl	80041fc <HAL_EXTI_GetPending>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d007      	beq.n	8001ce6 <EXTI9_5_IRQHandler+0x2a>
    {
        RadioIrq(RADIO_CHANNEL_5, PWM_IN_5_GPIO_Port, PWM_IN_5_Pin);
 8001cd6:	2240      	movs	r2, #64	; 0x40
 8001cd8:	490e      	ldr	r1, [pc, #56]	; (8001d14 <EXTI9_5_IRQHandler+0x58>)
 8001cda:	2004      	movs	r0, #4
 8001cdc:	f000 ff08 	bl	8002af0 <RadioIrq>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ce0:	2040      	movs	r0, #64	; 0x40
 8001ce2:	f002 fc61 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
    }

    hexti.Line = EXTI_LINE_7;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <EXTI9_5_IRQHandler+0x5c>)
 8001ce8:	603b      	str	r3, [r7, #0]
    if(HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING))
 8001cea:	463b      	mov	r3, r7
 8001cec:	2103      	movs	r1, #3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f002 fa84 	bl	80041fc <HAL_EXTI_GetPending>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <EXTI9_5_IRQHandler+0x4e>
    {
        RadioIrq(RADIO_CHANNEL_6, PWM_IN_6_GPIO_Port, PWM_IN_6_Pin);
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	4905      	ldr	r1, [pc, #20]	; (8001d14 <EXTI9_5_IRQHandler+0x58>)
 8001cfe:	2005      	movs	r0, #5
 8001d00:	f000 fef6 	bl	8002af0 <RadioIrq>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d04:	2080      	movs	r0, #128	; 0x80
 8001d06:	f002 fc4f 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d0a:	3708      	adds	r7, #8
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	06000006 	.word	0x06000006
 8001d14:	40020800 	.word	0x40020800
 8001d18:	06000007 	.word	0x06000007

08001d1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <TIM3_IRQHandler+0x10>)
 8001d22:	f004 f86d 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20004c9c 	.word	0x20004c9c

08001d30 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

    EXTI_HandleTypeDef hexti;

    hexti.Line = EXTI_LINE_12;
 8001d36:	4b29      	ldr	r3, [pc, #164]	; (8001ddc <EXTI15_10_IRQHandler+0xac>)
 8001d38:	603b      	str	r3, [r7, #0]
    if(HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING))
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2103      	movs	r1, #3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f002 fa5c 	bl	80041fc <HAL_EXTI_GetPending>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d009      	beq.n	8001d5e <EXTI15_10_IRQHandler+0x2e>
    {
        RadioIrq(RADIO_CHANNEL_1, PWM_IN_1_GPIO_Port, PWM_IN_1_Pin);
 8001d4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d4e:	4924      	ldr	r1, [pc, #144]	; (8001de0 <EXTI15_10_IRQHandler+0xb0>)
 8001d50:	2000      	movs	r0, #0
 8001d52:	f000 fecd 	bl	8002af0 <RadioIrq>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001d56:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d5a:	f002 fc25 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
    }

    hexti.Line = EXTI_LINE_13;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <EXTI15_10_IRQHandler+0xb4>)
 8001d60:	603b      	str	r3, [r7, #0]
    if(HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING))
 8001d62:	463b      	mov	r3, r7
 8001d64:	2103      	movs	r1, #3
 8001d66:	4618      	mov	r0, r3
 8001d68:	f002 fa48 	bl	80041fc <HAL_EXTI_GetPending>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d009      	beq.n	8001d86 <EXTI15_10_IRQHandler+0x56>
    {
        RadioIrq(RADIO_CHANNEL_2, PWM_IN_2_GPIO_Port, PWM_IN_2_Pin);
 8001d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d76:	491a      	ldr	r1, [pc, #104]	; (8001de0 <EXTI15_10_IRQHandler+0xb0>)
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 feb9 	bl	8002af0 <RadioIrq>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d82:	f002 fc11 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
    }
    hexti.Line = EXTI_LINE_14;
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <EXTI15_10_IRQHandler+0xb8>)
 8001d88:	603b      	str	r3, [r7, #0]
    if(HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING))
 8001d8a:	463b      	mov	r3, r7
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f002 fa34 	bl	80041fc <HAL_EXTI_GetPending>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <EXTI15_10_IRQHandler+0x7e>
    {
        RadioIrq(RADIO_CHANNEL_3, PWM_IN_3_GPIO_Port, PWM_IN_3_Pin);
 8001d9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d9e:	4910      	ldr	r1, [pc, #64]	; (8001de0 <EXTI15_10_IRQHandler+0xb0>)
 8001da0:	2002      	movs	r0, #2
 8001da2:	f000 fea5 	bl	8002af0 <RadioIrq>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001da6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001daa:	f002 fbfd 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
    }
    hexti.Line = EXTI_LINE_15;
 8001dae:	4b0f      	ldr	r3, [pc, #60]	; (8001dec <EXTI15_10_IRQHandler+0xbc>)
 8001db0:	603b      	str	r3, [r7, #0]
    if(HAL_EXTI_GetPending(&hexti, EXTI_TRIGGER_RISING_FALLING))
 8001db2:	463b      	mov	r3, r7
 8001db4:	2103      	movs	r1, #3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f002 fa20 	bl	80041fc <HAL_EXTI_GetPending>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <EXTI15_10_IRQHandler+0xa6>
    {
        RadioIrq(RADIO_CHANNEL_4, PWM_IN_4_GPIO_Port, PWM_IN_4_Pin);
 8001dc2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001dc6:	4906      	ldr	r1, [pc, #24]	; (8001de0 <EXTI15_10_IRQHandler+0xb0>)
 8001dc8:	2003      	movs	r0, #3
 8001dca:	f000 fe91 	bl	8002af0 <RadioIrq>
        HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001dce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001dd2:	f002 fbe9 	bl	80045a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0600000c 	.word	0x0600000c
 8001de0:	40020400 	.word	0x40020400
 8001de4:	0600000d 	.word	0x0600000d
 8001de8:	0600000e 	.word	0x0600000e
 8001dec:	0600000f 	.word	0x0600000f

08001df0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  AdcDmaIsr();
 8001df4:	f000 fe70 	bl	8002ad8 <AdcDmaIsr>
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <DMA2_Stream0_IRQHandler+0x14>)
 8001dfa:	f001 ffc3 	bl	8003d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20004b54 	.word	0x20004b54

08001e08 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
	return 1;
 8001e0c:	2301      	movs	r3, #1
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <_kill>:

int _kill(int pid, int sig)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e22:	f006 fc0b 	bl	800863c <__errno>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2216      	movs	r2, #22
 8001e2a:	601a      	str	r2, [r3, #0]
	return -1;
 8001e2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <_exit>:

void _exit (int status)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e40:	f04f 31ff 	mov.w	r1, #4294967295
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ffe7 	bl	8001e18 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e4a:	e7fe      	b.n	8001e4a <_exit+0x12>

08001e4c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	e00a      	b.n	8001e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e5e:	f3af 8000 	nop.w
 8001e62:	4601      	mov	r1, r0
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	b2ca      	uxtb	r2, r1
 8001e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	617b      	str	r3, [r7, #20]
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	dbf0      	blt.n	8001e5e <_read+0x12>
	}

return len;
 8001e7c:	687b      	ldr	r3, [r7, #4]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e009      	b.n	8001eac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	617b      	str	r3, [r7, #20]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	dbf1      	blt.n	8001e98 <_write+0x12>
	}
	return len;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}

08001ebe <_close>:

int _close(int file)
{
 8001ebe:	b480      	push	{r7}
 8001ec0:	b083      	sub	sp, #12
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	return -1;
 8001ec6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <_isatty>:

int _isatty(int file)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
	return 1;
 8001efe:	2301      	movs	r3, #1
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
	return 0;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f30:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <_sbrk+0x50>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x16>
		heap_end = &end;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <_sbrk+0x50>)
 8001f3a:	4a10      	ldr	r2, [pc, #64]	; (8001f7c <_sbrk+0x54>)
 8001f3c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <_sbrk+0x50>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <_sbrk+0x50>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	466a      	mov	r2, sp
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d907      	bls.n	8001f62 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001f52:	f006 fb73 	bl	800863c <__errno>
 8001f56:	4603      	mov	r3, r0
 8001f58:	220c      	movs	r2, #12
 8001f5a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f60:	e006      	b.n	8001f70 <_sbrk+0x48>
	}

	heap_end += incr;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <_sbrk+0x50>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a03      	ldr	r2, [pc, #12]	; (8001f78 <_sbrk+0x50>)
 8001f6c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000c88 	.word	0x20000c88
 8001f7c:	20004d30 	.word	0x20004d30

08001f80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f84:	4b08      	ldr	r3, [pc, #32]	; (8001fa8 <SystemInit+0x28>)
 8001f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <SystemInit+0x28>)
 8001f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SystemInit+0x28>)
 8001f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
;  movs  r1, #0
 8001fb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fb2:	e003      	b.n	8001fbc <LoopCopyDataInit>

08001fb4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fba:	3104      	adds	r1, #4

08001fbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fbc:	480b      	ldr	r0, [pc, #44]	; (8001fec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fc4:	d3f6      	bcc.n	8001fb4 <CopyDataInit>
  ldr  r2, =_sbss
 8001fc6:	4a0b      	ldr	r2, [pc, #44]	; (8001ff4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fc8:	e002      	b.n	8001fd0 <LoopFillZerobss>

08001fca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fcc:	f842 3b04 	str.w	r3, [r2], #4

08001fd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fd4:	d3f9      	bcc.n	8001fca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fd6:	f7ff ffd3 	bl	8001f80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f006 fb35 	bl	8008648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fde:	f7fe ffd1 	bl	8000f84 <main>
  bx  lr    
 8001fe2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fe4:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8001fe8:	0800d540 	.word	0x0800d540
  ldr  r0, =_sdata
 8001fec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ff0:	20000a18 	.word	0x20000a18
  ldr  r2, =_sbss
 8001ff4:	20000a18 	.word	0x20000a18
  ldr  r3, = _ebss
 8001ff8:	20004d30 	.word	0x20004d30

08001ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>
	...

08002000 <Bmx055Init>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool Bmx055Init(SPI_HandleTypeDef *HSPI)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b088      	sub	sp, #32
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    hspi = HSPI;
 8002008:	4a4e      	ldr	r2, [pc, #312]	; (8002144 <Bmx055Init+0x144>)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6013      	str	r3, [r2, #0]
    HAL_GPIO_WritePin(CS_ACC_GPIO_Port,CS_ACC_Pin,1);
 800200e:	2201      	movs	r2, #1
 8002010:	2110      	movs	r1, #16
 8002012:	484d      	ldr	r0, [pc, #308]	; (8002148 <Bmx055Init+0x148>)
 8002014:	f002 faae 	bl	8004574 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_GYRO_GPIO_Port,CS_GYRO_Pin,1);
 8002018:	2201      	movs	r2, #1
 800201a:	2120      	movs	r1, #32
 800201c:	484a      	ldr	r0, [pc, #296]	; (8002148 <Bmx055Init+0x148>)
 800201e:	f002 faa9 	bl	8004574 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CS_MAG_GPIO_Port,CS_MAG_Pin,1);
 8002022:	2201      	movs	r2, #1
 8002024:	2101      	movs	r1, #1
 8002026:	4849      	ldr	r0, [pc, #292]	; (800214c <Bmx055Init+0x14c>)
 8002028:	f002 faa4 	bl	8004574 <HAL_GPIO_WritePin>

    if(!CheckConnection())
 800202c:	f000 fce8 	bl	8002a00 <CheckConnection>
 8002030:	4603      	mov	r3, r0
 8002032:	f083 0301 	eor.w	r3, r3, #1
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <Bmx055Init+0x40>
    {
        return false;
 800203c:	2300      	movs	r3, #0
 800203e:	e07d      	b.n	800213c <Bmx055Init+0x13c>
    }

    /**SETUP ACC **/
    if(!WriteAddress(ACC, ACC_ACCD_HBW, ACC_ACCD_HBW_FILTER_DISABLE_BIT))
 8002040:	2280      	movs	r2, #128	; 0x80
 8002042:	2113      	movs	r1, #19
 8002044:	2000      	movs	r0, #0
 8002046:	f000 fb45 	bl	80026d4 <WriteAddress>
 800204a:	4603      	mov	r3, r0
 800204c:	f083 0301 	eor.w	r3, r3, #1
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <Bmx055Init+0x5a>
    {
        return false;
 8002056:	2300      	movs	r3, #0
 8002058:	e070      	b.n	800213c <Bmx055Init+0x13c>
    }

    if(!WriteAddress(ACC, ACC_OFC_SETTING, ACC_OFC_SETTING_OFFSET_TARGET_Z_PLUS_1G |
 800205a:	2220      	movs	r2, #32
 800205c:	2137      	movs	r1, #55	; 0x37
 800205e:	2000      	movs	r0, #0
 8002060:	f000 fb38 	bl	80026d4 <WriteAddress>
 8002064:	4603      	mov	r3, r0
 8002066:	f083 0301 	eor.w	r3, r3, #1
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <Bmx055Init+0x74>
                                           ACC_OFC_SETTING_OFFSET_TARGET_Y_0G |
                                           ACC_OFC_SETTING_OFFSET_TARGET_X_0G))
    {
        return false;
 8002070:	2300      	movs	r3, #0
 8002072:	e063      	b.n	800213c <Bmx055Init+0x13c>
    }

    if(!SetAccRange(ACC_PMU_DEFAULT_RANGE))
 8002074:	2008      	movs	r0, #8
 8002076:	f000 fc37 	bl	80028e8 <SetAccRange>
 800207a:	4603      	mov	r3, r0
 800207c:	f083 0301 	eor.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <Bmx055Init+0x8a>
    {
        return false;
 8002086:	2300      	movs	r3, #0
 8002088:	e058      	b.n	800213c <Bmx055Init+0x13c>
    }

    /**SETUP GYRO**/
    if(!WriteAddress(GYRO, GYRO_HBW, GYRO_HBW_FILTER_DISABLE_BIT))
 800208a:	2280      	movs	r2, #128	; 0x80
 800208c:	2113      	movs	r1, #19
 800208e:	2001      	movs	r0, #1
 8002090:	f000 fb20 	bl	80026d4 <WriteAddress>
 8002094:	4603      	mov	r3, r0
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <Bmx055Init+0xa4>
    {
        return false;
 80020a0:	2300      	movs	r3, #0
 80020a2:	e04b      	b.n	800213c <Bmx055Init+0x13c>
    }

    /** SETUP MAG **/

    if(!WriteAddress(MAG, MAG_OPMODE, MAG_OPMODE_DATARATE_30HZ |
 80020a4:	2238      	movs	r2, #56	; 0x38
 80020a6:	214c      	movs	r1, #76	; 0x4c
 80020a8:	2002      	movs	r0, #2
 80020aa:	f000 fb13 	bl	80026d4 <WriteAddress>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f083 0301 	eor.w	r3, r3, #1
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <Bmx055Init+0xbe>
                                      MAG_OPMODE_NORMAL))
    {
        return false;
 80020ba:	2300      	movs	r3, #0
 80020bc:	e03e      	b.n	800213c <Bmx055Init+0x13c>
    }

    if(!WriteAddress(MAG, MAG_ITR_AX_EN, MAG_ITR_AX_EN_DRDY_PIN_EN |
 80020be:	2284      	movs	r2, #132	; 0x84
 80020c0:	214e      	movs	r1, #78	; 0x4e
 80020c2:	2002      	movs	r0, #2
 80020c4:	f000 fb06 	bl	80026d4 <WriteAddress>
 80020c8:	4603      	mov	r3, r0
 80020ca:	f083 0301 	eor.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <Bmx055Init+0xd8>
                                         MAG_ITR_AX_EN_DRDY_POLARITY))
    {
        return false;
 80020d4:	2300      	movs	r3, #0
 80020d6:	e031      	b.n	800213c <Bmx055Init+0x13c>
    }

    if(!WriteAddress(MAG, MAG_REP_XY, 0x10U))   ///< max repetitions 1+2*0xFF = 511
 80020d8:	2210      	movs	r2, #16
 80020da:	2151      	movs	r1, #81	; 0x51
 80020dc:	2002      	movs	r0, #2
 80020de:	f000 faf9 	bl	80026d4 <WriteAddress>
 80020e2:	4603      	mov	r3, r0
 80020e4:	f083 0301 	eor.w	r3, r3, #1
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <Bmx055Init+0xf2>
    {
        return false;
 80020ee:	2300      	movs	r3, #0
 80020f0:	e024      	b.n	800213c <Bmx055Init+0x13c>
    }

    if(!WriteAddress(MAG, MAG_REP_Z, 0x10U))    ///< max repetitions 1+0xFF = 256
 80020f2:	2210      	movs	r2, #16
 80020f4:	2152      	movs	r1, #82	; 0x52
 80020f6:	2002      	movs	r0, #2
 80020f8:	f000 faec 	bl	80026d4 <WriteAddress>
 80020fc:	4603      	mov	r3, r0
 80020fe:	f083 0301 	eor.w	r3, r3, #1
 8002102:	b2db      	uxtb	r3, r3
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <Bmx055Init+0x10c>
    {
        return false;
 8002108:	2300      	movs	r3, #0
 800210a:	e017      	b.n	800213c <Bmx055Init+0x13c>
    }


    uint8_t data[19];
    for(uint8_t address=0x40,i=0; address<0x53; address++,i++)
 800210c:	2340      	movs	r3, #64	; 0x40
 800210e:	77fb      	strb	r3, [r7, #31]
 8002110:	2300      	movs	r3, #0
 8002112:	77bb      	strb	r3, [r7, #30]
 8002114:	e00e      	b.n	8002134 <Bmx055Init+0x134>
    {
        ReadAddress(MAG, address, &data[i]);
 8002116:	7fbb      	ldrb	r3, [r7, #30]
 8002118:	f107 0208 	add.w	r2, r7, #8
 800211c:	441a      	add	r2, r3
 800211e:	7ffb      	ldrb	r3, [r7, #31]
 8002120:	4619      	mov	r1, r3
 8002122:	2002      	movs	r0, #2
 8002124:	f000 fa5a 	bl	80025dc <ReadAddress>
    for(uint8_t address=0x40,i=0; address<0x53; address++,i++)
 8002128:	7ffb      	ldrb	r3, [r7, #31]
 800212a:	3301      	adds	r3, #1
 800212c:	77fb      	strb	r3, [r7, #31]
 800212e:	7fbb      	ldrb	r3, [r7, #30]
 8002130:	3301      	adds	r3, #1
 8002132:	77bb      	strb	r3, [r7, #30]
 8002134:	7ffb      	ldrb	r3, [r7, #31]
 8002136:	2b52      	cmp	r3, #82	; 0x52
 8002138:	d9ed      	bls.n	8002116 <Bmx055Init+0x116>
    }

    return true;
 800213a:	2301      	movs	r3, #1
}
 800213c:	4618      	mov	r0, r3
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20004ce4 	.word	0x20004ce4
 8002148:	40020800 	.word	0x40020800
 800214c:	40020400 	.word	0x40020400

08002150 <Bmx055GetData>:

bool Bmx055GetData(bmx055Data_t* data)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    static uint8_t accRaw[6];  ///< x, y, z: lsb, msb = 3*2=6 bytes

    if(!ReadBurst(ACC, ACC_ACCD_X_LSB, accRaw, 6))
 8002158:	2306      	movs	r3, #6
 800215a:	4aac      	ldr	r2, [pc, #688]	; (800240c <Bmx055GetData+0x2bc>)
 800215c:	2102      	movs	r1, #2
 800215e:	2000      	movs	r0, #0
 8002160:	f000 fb36 	bl	80027d0 <ReadBurst>
 8002164:	4603      	mov	r3, r0
 8002166:	f083 0301 	eor.w	r3, r3, #1
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b00      	cmp	r3, #0
 800216e:	d001      	beq.n	8002174 <Bmx055GetData+0x24>
    {
        return false;
 8002170:	2300      	movs	r3, #0
 8002172:	e146      	b.n	8002402 <Bmx055GetData+0x2b2>
    }

    /**combine bits together**/
    int16_t axRaw = ((int16_t) accRaw[1])<<4 | ((int16_t) accRaw[0])>>4;
 8002174:	4ba5      	ldr	r3, [pc, #660]	; (800240c <Bmx055GetData+0x2bc>)
 8002176:	785b      	ldrb	r3, [r3, #1]
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	b21a      	sxth	r2, r3
 800217c:	4ba3      	ldr	r3, [pc, #652]	; (800240c <Bmx055GetData+0x2bc>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	091b      	lsrs	r3, r3, #4
 8002182:	b2db      	uxtb	r3, r3
 8002184:	b21b      	sxth	r3, r3
 8002186:	4313      	orrs	r3, r2
 8002188:	82fb      	strh	r3, [r7, #22]
    int16_t ayRaw = ((int16_t) accRaw[3])<<4 | ((int16_t) accRaw[2])>>4;
 800218a:	4ba0      	ldr	r3, [pc, #640]	; (800240c <Bmx055GetData+0x2bc>)
 800218c:	78db      	ldrb	r3, [r3, #3]
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	b21a      	sxth	r2, r3
 8002192:	4b9e      	ldr	r3, [pc, #632]	; (800240c <Bmx055GetData+0x2bc>)
 8002194:	789b      	ldrb	r3, [r3, #2]
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	b2db      	uxtb	r3, r3
 800219a:	b21b      	sxth	r3, r3
 800219c:	4313      	orrs	r3, r2
 800219e:	82bb      	strh	r3, [r7, #20]
    int16_t azRaw = ((int16_t) accRaw[5])<<4 | ((int16_t) accRaw[4])>>4;
 80021a0:	4b9a      	ldr	r3, [pc, #616]	; (800240c <Bmx055GetData+0x2bc>)
 80021a2:	795b      	ldrb	r3, [r3, #5]
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	4b98      	ldr	r3, [pc, #608]	; (800240c <Bmx055GetData+0x2bc>)
 80021aa:	791b      	ldrb	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	827b      	strh	r3, [r7, #18]
    data->ax = (float)((axRaw&0x7ff)-(axRaw&0x800))*accResolution;
 80021b6:	8afb      	ldrh	r3, [r7, #22]
 80021b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021bc:	8afb      	ldrh	r3, [r7, #22]
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021cc:	4b90      	ldr	r3, [pc, #576]	; (8002410 <Bmx055GetData+0x2c0>)
 80021ce:	edd3 7a00 	vldr	s15, [r3]
 80021d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	edc3 7a00 	vstr	s15, [r3]
    data->ay = (float)((ayRaw&0x7ff)-(ayRaw&0x800))*accResolution;
 80021dc:	8abb      	ldrh	r3, [r7, #20]
 80021de:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80021e2:	8abb      	ldrh	r3, [r7, #20]
 80021e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	ee07 3a90 	vmov	s15, r3
 80021ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f2:	4b87      	ldr	r3, [pc, #540]	; (8002410 <Bmx055GetData+0x2c0>)
 80021f4:	edd3 7a00 	vldr	s15, [r3]
 80021f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	edc3 7a01 	vstr	s15, [r3, #4]
    data->az = (float)((azRaw&0x7ff)-(azRaw&0x800))*accResolution;
 8002202:	8a7b      	ldrh	r3, [r7, #18]
 8002204:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002208:	8a7b      	ldrh	r3, [r7, #18]
 800220a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	ee07 3a90 	vmov	s15, r3
 8002214:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002218:	4b7d      	ldr	r3, [pc, #500]	; (8002410 <Bmx055GetData+0x2c0>)
 800221a:	edd3 7a00 	vldr	s15, [r3]
 800221e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edc3 7a02 	vstr	s15, [r3, #8]

    static uint8_t gyroRaw[6]; ///< x, y, z: lsb, msb = 3*2=6 bytes

    if(!ReadBurst(GYRO, GYRO_RATE_X_LSB, gyroRaw, 6))
 8002228:	2306      	movs	r3, #6
 800222a:	4a7a      	ldr	r2, [pc, #488]	; (8002414 <Bmx055GetData+0x2c4>)
 800222c:	2101      	movs	r1, #1
 800222e:	2001      	movs	r0, #1
 8002230:	f000 face 	bl	80027d0 <ReadBurst>
 8002234:	4603      	mov	r3, r0
 8002236:	f083 0301 	eor.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <Bmx055GetData+0xf4>
    {
        return false;
 8002240:	2300      	movs	r3, #0
 8002242:	e0de      	b.n	8002402 <Bmx055GetData+0x2b2>
    }
    /**combine bits together**/
    data->gx = (float)((int16_t)(((int16_t) gyroRaw[0])<<8 | ((int16_t) gyroRaw[1])))*gyroResolution;
 8002244:	4b73      	ldr	r3, [pc, #460]	; (8002414 <Bmx055GetData+0x2c4>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	b21a      	sxth	r2, r3
 800224c:	4b71      	ldr	r3, [pc, #452]	; (8002414 <Bmx055GetData+0x2c4>)
 800224e:	785b      	ldrb	r3, [r3, #1]
 8002250:	b21b      	sxth	r3, r3
 8002252:	4313      	orrs	r3, r2
 8002254:	b21b      	sxth	r3, r3
 8002256:	ee07 3a90 	vmov	s15, r3
 800225a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800225e:	4b6e      	ldr	r3, [pc, #440]	; (8002418 <Bmx055GetData+0x2c8>)
 8002260:	edd3 7a00 	vldr	s15, [r3]
 8002264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	edc3 7a03 	vstr	s15, [r3, #12]
    data->gy = (float)((int16_t)(((int16_t) gyroRaw[2])<<8 | ((int16_t) gyroRaw[3])))*gyroResolution;
 800226e:	4b69      	ldr	r3, [pc, #420]	; (8002414 <Bmx055GetData+0x2c4>)
 8002270:	789b      	ldrb	r3, [r3, #2]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	b21a      	sxth	r2, r3
 8002276:	4b67      	ldr	r3, [pc, #412]	; (8002414 <Bmx055GetData+0x2c4>)
 8002278:	78db      	ldrb	r3, [r3, #3]
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21b      	sxth	r3, r3
 8002280:	ee07 3a90 	vmov	s15, r3
 8002284:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002288:	4b63      	ldr	r3, [pc, #396]	; (8002418 <Bmx055GetData+0x2c8>)
 800228a:	edd3 7a00 	vldr	s15, [r3]
 800228e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	edc3 7a04 	vstr	s15, [r3, #16]
    data->gz = (float)((int16_t)(((int16_t) gyroRaw[4])<<8 | ((int16_t) gyroRaw[5])))*gyroResolution;
 8002298:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <Bmx055GetData+0x2c4>)
 800229a:	791b      	ldrb	r3, [r3, #4]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	4b5c      	ldr	r3, [pc, #368]	; (8002414 <Bmx055GetData+0x2c4>)
 80022a2:	795b      	ldrb	r3, [r3, #5]
 80022a4:	b21b      	sxth	r3, r3
 80022a6:	4313      	orrs	r3, r2
 80022a8:	b21b      	sxth	r3, r3
 80022aa:	ee07 3a90 	vmov	s15, r3
 80022ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b2:	4b59      	ldr	r3, [pc, #356]	; (8002418 <Bmx055GetData+0x2c8>)
 80022b4:	edd3 7a00 	vldr	s15, [r3]
 80022b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	edc3 7a05 	vstr	s15, [r3, #20]

    //UartWrite("%f\t%f\t%f\r\n",data->gx,data->gy,data->gz);

    static uint8_t magRaw[6]; ///< x, y, z: lsb, msb = 3*2=6 bytes

    if(HAL_GPIO_ReadPin(DRDY_MAG_GPIO_Port,DRDY_MAG_Pin))
 80022c2:	2102      	movs	r1, #2
 80022c4:	4855      	ldr	r0, [pc, #340]	; (800241c <Bmx055GetData+0x2cc>)
 80022c6:	f002 f93d 	bl	8004544 <HAL_GPIO_ReadPin>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00d      	beq.n	80022ec <Bmx055GetData+0x19c>
    {
        if(!ReadBurst(MAG, MAG_DATA_X_LSB, magRaw, 6))
 80022d0:	2306      	movs	r3, #6
 80022d2:	4a53      	ldr	r2, [pc, #332]	; (8002420 <Bmx055GetData+0x2d0>)
 80022d4:	2142      	movs	r1, #66	; 0x42
 80022d6:	2002      	movs	r0, #2
 80022d8:	f000 fa7a 	bl	80027d0 <ReadBurst>
 80022dc:	4603      	mov	r3, r0
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <Bmx055GetData+0x19c>
        {
            return false;
 80022e8:	2300      	movs	r3, #0
 80022ea:	e08a      	b.n	8002402 <Bmx055GetData+0x2b2>
        }
    }

    /**combine bits together**/
    int16_t mxRaw = (((int16_t) magRaw[1])<<(8-MAG_DATA_X_LSB_DATAX_LSB_POS) | ((int16_t) magRaw[0])>>MAG_DATA_X_LSB_DATAX_LSB_POS);
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <Bmx055GetData+0x2d0>)
 80022ee:	785b      	ldrb	r3, [r3, #1]
 80022f0:	015b      	lsls	r3, r3, #5
 80022f2:	b21a      	sxth	r2, r3
 80022f4:	4b4a      	ldr	r3, [pc, #296]	; (8002420 <Bmx055GetData+0x2d0>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	08db      	lsrs	r3, r3, #3
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	b21b      	sxth	r3, r3
 80022fe:	4313      	orrs	r3, r2
 8002300:	823b      	strh	r3, [r7, #16]
    int16_t myRaw = (((int16_t) magRaw[3])<<(8-MAG_DATA_Y_LSB_DATAY_LSB_POS) | ((int16_t) magRaw[2])>>MAG_DATA_Y_LSB_DATAY_LSB_POS);
 8002302:	4b47      	ldr	r3, [pc, #284]	; (8002420 <Bmx055GetData+0x2d0>)
 8002304:	78db      	ldrb	r3, [r3, #3]
 8002306:	015b      	lsls	r3, r3, #5
 8002308:	b21a      	sxth	r2, r3
 800230a:	4b45      	ldr	r3, [pc, #276]	; (8002420 <Bmx055GetData+0x2d0>)
 800230c:	789b      	ldrb	r3, [r3, #2]
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	b2db      	uxtb	r3, r3
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	81fb      	strh	r3, [r7, #14]
    int16_t mzRaw = (((int16_t) magRaw[5])<<(8-MAG_DATA_Z_LSB_DATAZ_LSB_POS) | ((int16_t) magRaw[4])>>MAG_DATA_Z_LSB_DATAZ_LSB_POS);
 8002318:	4b41      	ldr	r3, [pc, #260]	; (8002420 <Bmx055GetData+0x2d0>)
 800231a:	795b      	ldrb	r3, [r3, #5]
 800231c:	01db      	lsls	r3, r3, #7
 800231e:	b21a      	sxth	r2, r3
 8002320:	4b3f      	ldr	r3, [pc, #252]	; (8002420 <Bmx055GetData+0x2d0>)
 8002322:	791b      	ldrb	r3, [r3, #4]
 8002324:	085b      	lsrs	r3, r3, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	b21b      	sxth	r3, r3
 800232a:	4313      	orrs	r3, r2
 800232c:	81bb      	strh	r3, [r7, #12]
    data->mx = (float)((mxRaw&0xfff)-(mxRaw&0x1000));
 800232e:	8a3b      	ldrh	r3, [r7, #16]
 8002330:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002334:	8a3b      	ldrh	r3, [r7, #16]
 8002336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	ee07 3a90 	vmov	s15, r3
 8002340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	edc3 7a06 	vstr	s15, [r3, #24]
    data->my = (float)((myRaw&0xfff)-(myRaw&0x1000));
 800234a:	89fb      	ldrh	r3, [r7, #14]
 800234c:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8002350:	89fb      	ldrh	r3, [r7, #14]
 8002352:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	edc3 7a07 	vstr	s15, [r3, #28]
    data->mz = (float)((mzRaw&0x3fff)-(mzRaw&0x4000));
 8002366:	89bb      	ldrh	r3, [r7, #12]
 8002368:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800236c:	89bb      	ldrh	r3, [r7, #12]
 800236e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	ee07 3a90 	vmov	s15, r3
 8002378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	edc3 7a08 	vstr	s15, [r3, #32]
    /**compensate for offsets and sensitivity**/
    data->mx = (data->mx-magXOffset)*magResolution*magXScale;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	ed93 7a06 	vldr	s14, [r3, #24]
 8002388:	4b26      	ldr	r3, [pc, #152]	; (8002424 <Bmx055GetData+0x2d4>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002392:	4b25      	ldr	r3, [pc, #148]	; (8002428 <Bmx055GetData+0x2d8>)
 8002394:	edd3 7a00 	vldr	s15, [r3]
 8002398:	ee27 7a27 	vmul.f32	s14, s14, s15
 800239c:	4b23      	ldr	r3, [pc, #140]	; (800242c <Bmx055GetData+0x2dc>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	edc3 7a06 	vstr	s15, [r3, #24]
    data->my = (data->my-magYOffset)*magResolution*magYScale;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	ed93 7a07 	vldr	s14, [r3, #28]
 80023b2:	4b1f      	ldr	r3, [pc, #124]	; (8002430 <Bmx055GetData+0x2e0>)
 80023b4:	edd3 7a00 	vldr	s15, [r3]
 80023b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <Bmx055GetData+0x2d8>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023c6:	4b1b      	ldr	r3, [pc, #108]	; (8002434 <Bmx055GetData+0x2e4>)
 80023c8:	edd3 7a00 	vldr	s15, [r3]
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	edc3 7a07 	vstr	s15, [r3, #28]
    data->mz = (data->mz-magZOffset)*magResolution*magZScale;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <Bmx055GetData+0x2e8>)
 80023de:	edd3 7a00 	vldr	s15, [r3]
 80023e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <Bmx055GetData+0x2d8>)
 80023e8:	edd3 7a00 	vldr	s15, [r3]
 80023ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <Bmx055GetData+0x2ec>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	edc3 7a08 	vstr	s15, [r3, #32]
/*
    UartWrite("%f\t%f\t%f\r\n",atan2(data->my,data->mx)*180/3.141,
    atan2(data->ax,data->az)*180/3.141,
    atan2(data->ay,data->az)*180/3.141);*/

    return true;
 8002400:	2301      	movs	r3, #1
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000c8c 	.word	0x20000c8c
 8002410:	20000040 	.word	0x20000040
 8002414:	20000c94 	.word	0x20000c94
 8002418:	20000044 	.word	0x20000044
 800241c:	40020400 	.word	0x40020400
 8002420:	20000c9c 	.word	0x20000c9c
 8002424:	20000028 	.word	0x20000028
 8002428:	20000048 	.word	0x20000048
 800242c:	20000034 	.word	0x20000034
 8002430:	2000002c 	.word	0x2000002c
 8002434:	20000038 	.word	0x20000038
 8002438:	20000030 	.word	0x20000030
 800243c:	2000003c 	.word	0x2000003c

08002440 <BMX055CalibrateAccGyro>:

bool BMX055CalibrateAccGyro()
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
    ///*** ACC ***///
    if(!SetAccRange(ACC_PMU_RANGE_2G))
 8002446:	2003      	movs	r0, #3
 8002448:	f000 fa4e 	bl	80028e8 <SetAccRange>
 800244c:	4603      	mov	r3, r0
 800244e:	f083 0301 	eor.w	r3, r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <BMX055CalibrateAccGyro+0x1c>
    {
        return false;
 8002458:	2300      	movs	r3, #0
 800245a:	e0ba      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }

    if(!WriteAddress(ACC, ACC_OFC_CTRL, ACC_OFC_CTRL_OFFSET_RESET_BIT))
 800245c:	2236      	movs	r2, #54	; 0x36
 800245e:	2136      	movs	r1, #54	; 0x36
 8002460:	2000      	movs	r0, #0
 8002462:	f000 f937 	bl	80026d4 <WriteAddress>
 8002466:	4603      	mov	r3, r0
 8002468:	f083 0301 	eor.w	r3, r3, #1
 800246c:	b2db      	uxtb	r3, r3
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <BMX055CalibrateAccGyro+0x36>
    {
        return false;
 8002472:	2300      	movs	r3, #0
 8002474:	e0ad      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }
    /** wait for the operation to be complete **/
    uint8_t offsetCtrl = 0x00;
 8002476:	2300      	movs	r3, #0
 8002478:	71fb      	strb	r3, [r7, #7]
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 800247a:	e00d      	b.n	8002498 <BMX055CalibrateAccGyro+0x58>
    {
        if(!ReadAddress(ACC, ACC_OFC_CTRL, &offsetCtrl))
 800247c:	1dfb      	adds	r3, r7, #7
 800247e:	461a      	mov	r2, r3
 8002480:	2136      	movs	r1, #54	; 0x36
 8002482:	2000      	movs	r0, #0
 8002484:	f000 f8aa 	bl	80025dc <ReadAddress>
 8002488:	4603      	mov	r3, r0
 800248a:	f083 0301 	eor.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <BMX055CalibrateAccGyro+0x58>
        {
            return false;
 8002494:	2300      	movs	r3, #0
 8002496:	e09c      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d0ec      	beq.n	800247c <BMX055CalibrateAccGyro+0x3c>
        }
    }

    if(!WriteAddress(ACC, ACC_OFC_CTRL, ACC_OFC_CTRL_FAST_COMPENSATION_X))
 80024a2:	2220      	movs	r2, #32
 80024a4:	2136      	movs	r1, #54	; 0x36
 80024a6:	2000      	movs	r0, #0
 80024a8:	f000 f914 	bl	80026d4 <WriteAddress>
 80024ac:	4603      	mov	r3, r0
 80024ae:	f083 0301 	eor.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <BMX055CalibrateAccGyro+0x7c>
    {
        return false;
 80024b8:	2300      	movs	r3, #0
 80024ba:	e08a      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }
    /** wait for the operation to be complete **/
     offsetCtrl = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	71fb      	strb	r3, [r7, #7]
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 80024c0:	e00d      	b.n	80024de <BMX055CalibrateAccGyro+0x9e>
    {
        if(!ReadAddress(ACC, ACC_OFC_CTRL, &offsetCtrl))
 80024c2:	1dfb      	adds	r3, r7, #7
 80024c4:	461a      	mov	r2, r3
 80024c6:	2136      	movs	r1, #54	; 0x36
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 f887 	bl	80025dc <ReadAddress>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f083 0301 	eor.w	r3, r3, #1
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <BMX055CalibrateAccGyro+0x9e>
        {
            return false;
 80024da:	2300      	movs	r3, #0
 80024dc:	e079      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 80024de:	79fb      	ldrb	r3, [r7, #7]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d0ec      	beq.n	80024c2 <BMX055CalibrateAccGyro+0x82>
        }
    }

    if(!WriteAddress(ACC, ACC_OFC_CTRL, ACC_OFC_CTRL_FAST_COMPENSATION_Y))
 80024e8:	2240      	movs	r2, #64	; 0x40
 80024ea:	2136      	movs	r1, #54	; 0x36
 80024ec:	2000      	movs	r0, #0
 80024ee:	f000 f8f1 	bl	80026d4 <WriteAddress>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f083 0301 	eor.w	r3, r3, #1
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <BMX055CalibrateAccGyro+0xc2>
    {
        return false;
 80024fe:	2300      	movs	r3, #0
 8002500:	e067      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }
    /** wait for the operation to be complete **/
    offsetCtrl = 0x00;
 8002502:	2300      	movs	r3, #0
 8002504:	71fb      	strb	r3, [r7, #7]
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 8002506:	e00d      	b.n	8002524 <BMX055CalibrateAccGyro+0xe4>
    {
        if(!ReadAddress(ACC, ACC_OFC_CTRL, &offsetCtrl))
 8002508:	1dfb      	adds	r3, r7, #7
 800250a:	461a      	mov	r2, r3
 800250c:	2136      	movs	r1, #54	; 0x36
 800250e:	2000      	movs	r0, #0
 8002510:	f000 f864 	bl	80025dc <ReadAddress>
 8002514:	4603      	mov	r3, r0
 8002516:	f083 0301 	eor.w	r3, r3, #1
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <BMX055CalibrateAccGyro+0xe4>
        {
            return false;
 8002520:	2300      	movs	r3, #0
 8002522:	e056      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 8002524:	79fb      	ldrb	r3, [r7, #7]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ec      	beq.n	8002508 <BMX055CalibrateAccGyro+0xc8>
        }
    }

    if(!WriteAddress(ACC, ACC_OFC_CTRL, ACC_OFC_CTRL_FAST_COMPENSATION_Z))
 800252e:	2260      	movs	r2, #96	; 0x60
 8002530:	2136      	movs	r1, #54	; 0x36
 8002532:	2000      	movs	r0, #0
 8002534:	f000 f8ce 	bl	80026d4 <WriteAddress>
 8002538:	4603      	mov	r3, r0
 800253a:	f083 0301 	eor.w	r3, r3, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2b00      	cmp	r3, #0
 8002542:	d001      	beq.n	8002548 <BMX055CalibrateAccGyro+0x108>
    {
        return false;
 8002544:	2300      	movs	r3, #0
 8002546:	e044      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }
    /** wait for the operation to be complete **/
    offsetCtrl = 0x00;
 8002548:	2300      	movs	r3, #0
 800254a:	71fb      	strb	r3, [r7, #7]
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 800254c:	e00d      	b.n	800256a <BMX055CalibrateAccGyro+0x12a>
    {
        if(!ReadAddress(ACC, ACC_OFC_CTRL, &offsetCtrl))
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	461a      	mov	r2, r3
 8002552:	2136      	movs	r1, #54	; 0x36
 8002554:	2000      	movs	r0, #0
 8002556:	f000 f841 	bl	80025dc <ReadAddress>
 800255a:	4603      	mov	r3, r0
 800255c:	f083 0301 	eor.w	r3, r3, #1
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <BMX055CalibrateAccGyro+0x12a>
        {
            return false;
 8002566:	2300      	movs	r3, #0
 8002568:	e033      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    while((offsetCtrl & ACC_OFC_CTRL_CAL_READY_BIT) == 0x00)
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ec      	beq.n	800254e <BMX055CalibrateAccGyro+0x10e>
        }
    }

    if(!SetAccRange(ACC_PMU_DEFAULT_RANGE))
 8002574:	2008      	movs	r0, #8
 8002576:	f000 f9b7 	bl	80028e8 <SetAccRange>
 800257a:	4603      	mov	r3, r0
 800257c:	f083 0301 	eor.w	r3, r3, #1
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <BMX055CalibrateAccGyro+0x14a>
    {
        return false;
 8002586:	2300      	movs	r3, #0
 8002588:	e023      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }

    ///*** GYRO ***///

    if(!SetGyroRange(GYRO_RANGE_125_DEG))
 800258a:	2004      	movs	r0, #4
 800258c:	f000 f9f4 	bl	8002978 <SetGyroRange>
 8002590:	4603      	mov	r3, r0
 8002592:	f083 0301 	eor.w	r3, r3, #1
 8002596:	b2db      	uxtb	r3, r3
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <BMX055CalibrateAccGyro+0x160>
    {
        return false;
 800259c:	2300      	movs	r3, #0
 800259e:	e018      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }

    if(!WriteAddress(GYRO, GYRO_FOC, GYRO_FOC_FAST_OFFSET_EN_X_BIT |
 80025a0:	223f      	movs	r2, #63	; 0x3f
 80025a2:	2132      	movs	r1, #50	; 0x32
 80025a4:	2001      	movs	r0, #1
 80025a6:	f000 f895 	bl	80026d4 <WriteAddress>
 80025aa:	4603      	mov	r3, r0
 80025ac:	f083 0301 	eor.w	r3, r3, #1
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <BMX055CalibrateAccGyro+0x17a>
                                     GYRO_FOC_FAST_OFFSET_EN_Y_BIT |
                                     GYRO_FOC_FAST_OFFSET_EN_Z_BIT |
                                     GYRO_FOC_FAST_OFFSET_EN_BIT |
                                     GYRO_FOC_FAST_OFFSET_WORDLENGTH_256_SAMP))
    {
        return false;
 80025b6:	2300      	movs	r3, #0
 80025b8:	e00b      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }

    if(!SetGyroRange(GYRO_RANGE_DEFAULT))
 80025ba:	2000      	movs	r0, #0
 80025bc:	f000 f9dc 	bl	8002978 <SetGyroRange>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <BMX055CalibrateAccGyro+0x190>
    {
        return false;
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <BMX055CalibrateAccGyro+0x192>
    }

    return true;
 80025d0:	2301      	movs	r3, #1
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
	...

080025dc <ReadAddress>:
/******************************************************************************
                        PRIVATE FUNCTION IMPLEMENTATION
******************************************************************************/

static bool ReadAddress(imuModules_t module, uint8_t address, uint8_t* data)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	603a      	str	r2, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
 80025e8:	460b      	mov	r3, r1
 80025ea:	71bb      	strb	r3, [r7, #6]
    if(module>=MODULE_COUNT)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <ReadAddress+0x1a>
    {
        return false;
 80025f2:	2300      	movs	r3, #0
 80025f4:	e066      	b.n	80026c4 <ReadAddress+0xe8>
    }

    if(bmxParams[module].minAddress > address || bmxParams[module].maxAddress < address)
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	4934      	ldr	r1, [pc, #208]	; (80026cc <ReadAddress+0xf0>)
 80025fa:	4613      	mov	r3, r2
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3308      	adds	r3, #8
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	79ba      	ldrb	r2, [r7, #6]
 800260a:	429a      	cmp	r2, r3
 800260c:	d30b      	bcc.n	8002626 <ReadAddress+0x4a>
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	492e      	ldr	r1, [pc, #184]	; (80026cc <ReadAddress+0xf0>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	440b      	add	r3, r1
 800261c:	3309      	adds	r3, #9
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	79ba      	ldrb	r2, [r7, #6]
 8002622:	429a      	cmp	r2, r3
 8002624:	d901      	bls.n	800262a <ReadAddress+0x4e>
    {
        return false;
 8002626:	2300      	movs	r3, #0
 8002628:	e04c      	b.n	80026c4 <ReadAddress+0xe8>
    }

    uint8_t message = 0x80 | address; ///< bit 7: 1->read, 0->write
 800262a:	79bb      	ldrb	r3, [r7, #6]
 800262c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002630:	b2db      	uxtb	r3, r3
 8002632:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,0);
 8002634:	79fa      	ldrb	r2, [r7, #7]
 8002636:	4925      	ldr	r1, [pc, #148]	; (80026cc <ReadAddress+0xf0>)
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3304      	adds	r3, #4
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	79fa      	ldrb	r2, [r7, #7]
 8002648:	4920      	ldr	r1, [pc, #128]	; (80026cc <ReadAddress+0xf0>)
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	b29b      	uxth	r3, r3
 8002658:	2200      	movs	r2, #0
 800265a:	4619      	mov	r1, r3
 800265c:	f001 ff8a 	bl	8004574 <HAL_GPIO_WritePin>
    if(HAL_OK != HAL_SPI_Transmit(hspi, &message, sizeof(message), 1000))
 8002660:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <ReadAddress+0xf4>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	f107 010f 	add.w	r1, r7, #15
 8002668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266c:	2201      	movs	r2, #1
 800266e:	f002 fcec 	bl	800504a <HAL_SPI_Transmit>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <ReadAddress+0xa0>
    {
        return false;
 8002678:	2300      	movs	r3, #0
 800267a:	e023      	b.n	80026c4 <ReadAddress+0xe8>
    }
    if(HAL_OK != HAL_SPI_Receive(hspi,data, sizeof(uint8_t), 1000))
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <ReadAddress+0xf4>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002684:	2201      	movs	r2, #1
 8002686:	6839      	ldr	r1, [r7, #0]
 8002688:	f002 fe1b 	bl	80052c2 <HAL_SPI_Receive>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <ReadAddress+0xba>
    {
        return false;
 8002692:	2300      	movs	r3, #0
 8002694:	e016      	b.n	80026c4 <ReadAddress+0xe8>
    }
    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,1);
 8002696:	79fa      	ldrb	r2, [r7, #7]
 8002698:	490c      	ldr	r1, [pc, #48]	; (80026cc <ReadAddress+0xf0>)
 800269a:	4613      	mov	r3, r2
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3304      	adds	r3, #4
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	79fa      	ldrb	r2, [r7, #7]
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <ReadAddress+0xf0>)
 80026ac:	4613      	mov	r3, r2
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	2201      	movs	r2, #1
 80026bc:	4619      	mov	r1, r3
 80026be:	f001 ff59 	bl	8004574 <HAL_GPIO_WritePin>

    return true;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20000004 	.word	0x20000004
 80026d0:	20004ce4 	.word	0x20004ce4

080026d4 <WriteAddress>:

static bool WriteAddress(imuModules_t module, uint8_t address, uint8_t data)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	460b      	mov	r3, r1
 80026e0:	71bb      	strb	r3, [r7, #6]
 80026e2:	4613      	mov	r3, r2
 80026e4:	717b      	strb	r3, [r7, #5]
    if(module>=MODULE_COUNT)
 80026e6:	79fb      	ldrb	r3, [r7, #7]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d901      	bls.n	80026f0 <WriteAddress+0x1c>
    {
        return false;
 80026ec:	2300      	movs	r3, #0
 80026ee:	e066      	b.n	80027be <WriteAddress+0xea>
    }

    if(bmxParams[module].minAddress > address || bmxParams[module].maxAddress < address)
 80026f0:	79fa      	ldrb	r2, [r7, #7]
 80026f2:	4935      	ldr	r1, [pc, #212]	; (80027c8 <WriteAddress+0xf4>)
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3308      	adds	r3, #8
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	79ba      	ldrb	r2, [r7, #6]
 8002704:	429a      	cmp	r2, r3
 8002706:	d30b      	bcc.n	8002720 <WriteAddress+0x4c>
 8002708:	79fa      	ldrb	r2, [r7, #7]
 800270a:	492f      	ldr	r1, [pc, #188]	; (80027c8 <WriteAddress+0xf4>)
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	3309      	adds	r3, #9
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	79ba      	ldrb	r2, [r7, #6]
 800271c:	429a      	cmp	r2, r3
 800271e:	d901      	bls.n	8002724 <WriteAddress+0x50>
    {
        return false;
 8002720:	2300      	movs	r3, #0
 8002722:	e04c      	b.n	80027be <WriteAddress+0xea>
    }

    uint8_t message = 0x7F & address; ///< bit 7: 1->read, 0->write
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800272a:	b2db      	uxtb	r3, r3
 800272c:	73fb      	strb	r3, [r7, #15]

    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,0);
 800272e:	79fa      	ldrb	r2, [r7, #7]
 8002730:	4925      	ldr	r1, [pc, #148]	; (80027c8 <WriteAddress+0xf4>)
 8002732:	4613      	mov	r3, r2
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	4413      	add	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	440b      	add	r3, r1
 800273c:	3304      	adds	r3, #4
 800273e:	6818      	ldr	r0, [r3, #0]
 8002740:	79fa      	ldrb	r2, [r7, #7]
 8002742:	4921      	ldr	r1, [pc, #132]	; (80027c8 <WriteAddress+0xf4>)
 8002744:	4613      	mov	r3, r2
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	b29b      	uxth	r3, r3
 8002752:	2200      	movs	r2, #0
 8002754:	4619      	mov	r1, r3
 8002756:	f001 ff0d 	bl	8004574 <HAL_GPIO_WritePin>
    if(HAL_OK != HAL_SPI_Transmit(hspi, &message, sizeof(message), 1000))
 800275a:	4b1c      	ldr	r3, [pc, #112]	; (80027cc <WriteAddress+0xf8>)
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f107 010f 	add.w	r1, r7, #15
 8002762:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002766:	2201      	movs	r2, #1
 8002768:	f002 fc6f 	bl	800504a <HAL_SPI_Transmit>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <WriteAddress+0xa2>
    {
        return false;
 8002772:	2300      	movs	r3, #0
 8002774:	e023      	b.n	80027be <WriteAddress+0xea>
    }
    if(HAL_OK != HAL_SPI_Transmit(hspi, &data, sizeof(data), 1000))
 8002776:	4b15      	ldr	r3, [pc, #84]	; (80027cc <WriteAddress+0xf8>)
 8002778:	6818      	ldr	r0, [r3, #0]
 800277a:	1d79      	adds	r1, r7, #5
 800277c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002780:	2201      	movs	r2, #1
 8002782:	f002 fc62 	bl	800504a <HAL_SPI_Transmit>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <WriteAddress+0xbc>
    {
        return false;
 800278c:	2300      	movs	r3, #0
 800278e:	e016      	b.n	80027be <WriteAddress+0xea>
    }
    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,1);
 8002790:	79fa      	ldrb	r2, [r7, #7]
 8002792:	490d      	ldr	r1, [pc, #52]	; (80027c8 <WriteAddress+0xf4>)
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	3304      	adds	r3, #4
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	79fa      	ldrb	r2, [r7, #7]
 80027a4:	4908      	ldr	r1, [pc, #32]	; (80027c8 <WriteAddress+0xf4>)
 80027a6:	4613      	mov	r3, r2
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2201      	movs	r2, #1
 80027b6:	4619      	mov	r1, r3
 80027b8:	f001 fedc 	bl	8004574 <HAL_GPIO_WritePin>

    return true;
 80027bc:	2301      	movs	r3, #1
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000004 	.word	0x20000004
 80027cc:	20004ce4 	.word	0x20004ce4

080027d0 <ReadBurst>:

static bool ReadBurst(imuModules_t module, uint8_t address, uint8_t* data, uint8_t size)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	603a      	str	r2, [r7, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	71fb      	strb	r3, [r7, #7]
 80027de:	460b      	mov	r3, r1
 80027e0:	71bb      	strb	r3, [r7, #6]
 80027e2:	4613      	mov	r3, r2
 80027e4:	717b      	strb	r3, [r7, #5]
    if(module>=MODULE_COUNT)
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d901      	bls.n	80027f0 <ReadBurst+0x20>
    {
        return false;
 80027ec:	2300      	movs	r3, #0
 80027ee:	e072      	b.n	80028d6 <ReadBurst+0x106>
    }

    if(bmxParams[module].minAddress > address || bmxParams[module].maxAddress < address)
 80027f0:	79fa      	ldrb	r2, [r7, #7]
 80027f2:	493b      	ldr	r1, [pc, #236]	; (80028e0 <ReadBurst+0x110>)
 80027f4:	4613      	mov	r3, r2
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	3308      	adds	r3, #8
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	79ba      	ldrb	r2, [r7, #6]
 8002804:	429a      	cmp	r2, r3
 8002806:	d30b      	bcc.n	8002820 <ReadBurst+0x50>
 8002808:	79fa      	ldrb	r2, [r7, #7]
 800280a:	4935      	ldr	r1, [pc, #212]	; (80028e0 <ReadBurst+0x110>)
 800280c:	4613      	mov	r3, r2
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	3309      	adds	r3, #9
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	79ba      	ldrb	r2, [r7, #6]
 800281c:	429a      	cmp	r2, r3
 800281e:	d901      	bls.n	8002824 <ReadBurst+0x54>
    {
        return false;
 8002820:	2300      	movs	r3, #0
 8002822:	e058      	b.n	80028d6 <ReadBurst+0x106>
    }

    uint8_t message = 0x80 | address; ///< bit 7: 1->read, 0->write
 8002824:	79bb      	ldrb	r3, [r7, #6]
 8002826:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800282a:	b2db      	uxtb	r3, r3
 800282c:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,0);
 800282e:	79fa      	ldrb	r2, [r7, #7]
 8002830:	492b      	ldr	r1, [pc, #172]	; (80028e0 <ReadBurst+0x110>)
 8002832:	4613      	mov	r3, r2
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	4413      	add	r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3304      	adds	r3, #4
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	79fa      	ldrb	r2, [r7, #7]
 8002842:	4927      	ldr	r1, [pc, #156]	; (80028e0 <ReadBurst+0x110>)
 8002844:	4613      	mov	r3, r2
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	440b      	add	r3, r1
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	b29b      	uxth	r3, r3
 8002852:	2200      	movs	r2, #0
 8002854:	4619      	mov	r1, r3
 8002856:	f001 fe8d 	bl	8004574 <HAL_GPIO_WritePin>
    if(HAL_OK != HAL_SPI_Transmit(hspi, &message, sizeof(message), 1000))
 800285a:	4b22      	ldr	r3, [pc, #136]	; (80028e4 <ReadBurst+0x114>)
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	f107 010e 	add.w	r1, r7, #14
 8002862:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002866:	2201      	movs	r2, #1
 8002868:	f002 fbef 	bl	800504a <HAL_SPI_Transmit>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <ReadBurst+0xa6>
    {
        return false;
 8002872:	2300      	movs	r3, #0
 8002874:	e02f      	b.n	80028d6 <ReadBurst+0x106>
    }
    for(uint8_t i=0; i<size; i++)
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	e011      	b.n	80028a0 <ReadBurst+0xd0>
    {
        if(HAL_OK != HAL_SPI_Receive(hspi,data+i, sizeof(uint8_t), 1000))
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <ReadBurst+0x114>)
 800287e:	6818      	ldr	r0, [r3, #0]
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	18d1      	adds	r1, r2, r3
 8002886:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800288a:	2201      	movs	r2, #1
 800288c:	f002 fd19 	bl	80052c2 <HAL_SPI_Receive>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d001      	beq.n	800289a <ReadBurst+0xca>
        {
            return false;
 8002896:	2300      	movs	r3, #0
 8002898:	e01d      	b.n	80028d6 <ReadBurst+0x106>
    for(uint8_t i=0; i<size; i++)
 800289a:	7bfb      	ldrb	r3, [r7, #15]
 800289c:	3301      	adds	r3, #1
 800289e:	73fb      	strb	r3, [r7, #15]
 80028a0:	7bfa      	ldrb	r2, [r7, #15]
 80028a2:	797b      	ldrb	r3, [r7, #5]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d3e9      	bcc.n	800287c <ReadBurst+0xac>
        }
    }
    HAL_GPIO_WritePin(bmxParams[module].csPort,bmxParams[module].csPin,1);
 80028a8:	79fa      	ldrb	r2, [r7, #7]
 80028aa:	490d      	ldr	r1, [pc, #52]	; (80028e0 <ReadBurst+0x110>)
 80028ac:	4613      	mov	r3, r2
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	4413      	add	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3304      	adds	r3, #4
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	4908      	ldr	r1, [pc, #32]	; (80028e0 <ReadBurst+0x110>)
 80028be:	4613      	mov	r3, r2
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	440b      	add	r3, r1
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29b      	uxth	r3, r3
 80028cc:	2201      	movs	r2, #1
 80028ce:	4619      	mov	r1, r3
 80028d0:	f001 fe50 	bl	8004574 <HAL_GPIO_WritePin>

    return true;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000004 	.word	0x20000004
 80028e4:	20004ce4 	.word	0x20004ce4

080028e8 <SetAccRange>:

static bool SetAccRange(uint8_t range)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	4603      	mov	r3, r0
 80028f0:	71fb      	strb	r3, [r7, #7]
    switch(range)
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	3b03      	subs	r3, #3
 80028f6:	2b09      	cmp	r3, #9
 80028f8:	d826      	bhi.n	8002948 <SetAccRange+0x60>
 80028fa:	a201      	add	r2, pc, #4	; (adr r2, 8002900 <SetAccRange+0x18>)
 80028fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002900:	08002929 	.word	0x08002929
 8002904:	08002949 	.word	0x08002949
 8002908:	08002931 	.word	0x08002931
 800290c:	08002949 	.word	0x08002949
 8002910:	08002949 	.word	0x08002949
 8002914:	08002939 	.word	0x08002939
 8002918:	08002949 	.word	0x08002949
 800291c:	08002949 	.word	0x08002949
 8002920:	08002949 	.word	0x08002949
 8002924:	08002941 	.word	0x08002941
    {
    case ACC_PMU_RANGE_2G:
        accResolution = ACC_PMU_RESOLUTION_2G;
 8002928:	4b0e      	ldr	r3, [pc, #56]	; (8002964 <SetAccRange+0x7c>)
 800292a:	4a0f      	ldr	r2, [pc, #60]	; (8002968 <SetAccRange+0x80>)
 800292c:	601a      	str	r2, [r3, #0]
        break;
 800292e:	e00d      	b.n	800294c <SetAccRange+0x64>
    case ACC_PMU_RANGE_4G:
        accResolution = ACC_PMU_RESOLUTION_4G;
 8002930:	4b0c      	ldr	r3, [pc, #48]	; (8002964 <SetAccRange+0x7c>)
 8002932:	4a0e      	ldr	r2, [pc, #56]	; (800296c <SetAccRange+0x84>)
 8002934:	601a      	str	r2, [r3, #0]
        break;
 8002936:	e009      	b.n	800294c <SetAccRange+0x64>
    case ACC_PMU_RANGE_8G:
        accResolution = ACC_PMU_RESOLUTION_8G;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <SetAccRange+0x7c>)
 800293a:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <SetAccRange+0x88>)
 800293c:	601a      	str	r2, [r3, #0]
        break;
 800293e:	e005      	b.n	800294c <SetAccRange+0x64>
    case ACC_PMU_RANGE_16G:
        accResolution = ACC_PMU_RESOLUTION_16G;
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <SetAccRange+0x7c>)
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <SetAccRange+0x8c>)
 8002944:	601a      	str	r2, [r3, #0]
        break;
 8002946:	e001      	b.n	800294c <SetAccRange+0x64>
    default:
        return false;
 8002948:	2300      	movs	r3, #0
 800294a:	e006      	b.n	800295a <SetAccRange+0x72>
    }

    return WriteAddress(ACC, ACC_PMU_RANGE, range);
 800294c:	79fb      	ldrb	r3, [r7, #7]
 800294e:	461a      	mov	r2, r3
 8002950:	210f      	movs	r1, #15
 8002952:	2000      	movs	r0, #0
 8002954:	f7ff febe 	bl	80026d4 <WriteAddress>
 8002958:	4603      	mov	r3, r0

}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	20000040 	.word	0x20000040
 8002968:	3a807358 	.word	0x3a807358
 800296c:	3aff9724 	.word	0x3aff9724
 8002970:	3b801f75 	.word	0x3b801f75
 8002974:	3bffeb07 	.word	0x3bffeb07

08002978 <SetGyroRange>:

static bool SetGyroRange(uint8_t range)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
    switch(range)
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	2b04      	cmp	r3, #4
 8002986:	d821      	bhi.n	80029cc <SetGyroRange+0x54>
 8002988:	a201      	add	r2, pc, #4	; (adr r2, 8002990 <SetGyroRange+0x18>)
 800298a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800298e:	bf00      	nop
 8002990:	080029c5 	.word	0x080029c5
 8002994:	080029bd 	.word	0x080029bd
 8002998:	080029b5 	.word	0x080029b5
 800299c:	080029ad 	.word	0x080029ad
 80029a0:	080029a5 	.word	0x080029a5
    {
    case GYRO_RANGE_125_DEG:
        gyroResolution = GYRO_RESOLUTION_125_DEG;
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <SetGyroRange+0x70>)
 80029a6:	4a11      	ldr	r2, [pc, #68]	; (80029ec <SetGyroRange+0x74>)
 80029a8:	601a      	str	r2, [r3, #0]
        break;
 80029aa:	e011      	b.n	80029d0 <SetGyroRange+0x58>
    case GYRO_RANGE_250_DEG:
        gyroResolution = GYRO_RESOLUTION_250_DEG;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	; (80029e8 <SetGyroRange+0x70>)
 80029ae:	4a10      	ldr	r2, [pc, #64]	; (80029f0 <SetGyroRange+0x78>)
 80029b0:	601a      	str	r2, [r3, #0]
        break;
 80029b2:	e00d      	b.n	80029d0 <SetGyroRange+0x58>
    case GYRO_RANGE_500_DEG:
        gyroResolution = GYRO_RESOLUTION_500_DEG;
 80029b4:	4b0c      	ldr	r3, [pc, #48]	; (80029e8 <SetGyroRange+0x70>)
 80029b6:	4a0f      	ldr	r2, [pc, #60]	; (80029f4 <SetGyroRange+0x7c>)
 80029b8:	601a      	str	r2, [r3, #0]
        break;
 80029ba:	e009      	b.n	80029d0 <SetGyroRange+0x58>
    case GYRO_RANGE_1000_DEG:
        gyroResolution = GYRO_RESOLUTION_1000_DEG;
 80029bc:	4b0a      	ldr	r3, [pc, #40]	; (80029e8 <SetGyroRange+0x70>)
 80029be:	4a0e      	ldr	r2, [pc, #56]	; (80029f8 <SetGyroRange+0x80>)
 80029c0:	601a      	str	r2, [r3, #0]
        break;
 80029c2:	e005      	b.n	80029d0 <SetGyroRange+0x58>
    case GYRO_RANGE_2000_DEG:
        gyroResolution = GYRO_RESOLUTION_2000_DEG;
 80029c4:	4b08      	ldr	r3, [pc, #32]	; (80029e8 <SetGyroRange+0x70>)
 80029c6:	4a0d      	ldr	r2, [pc, #52]	; (80029fc <SetGyroRange+0x84>)
 80029c8:	601a      	str	r2, [r3, #0]
        break;
 80029ca:	e001      	b.n	80029d0 <SetGyroRange+0x58>
    default:
        return false;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e006      	b.n	80029de <SetGyroRange+0x66>
    }

    return WriteAddress(GYRO, GYRO_RANGE, range);
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	461a      	mov	r2, r3
 80029d4:	210f      	movs	r1, #15
 80029d6:	2001      	movs	r0, #1
 80029d8:	f7ff fe7c 	bl	80026d4 <WriteAddress>
 80029dc:	4603      	mov	r3, r0

}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	20000044 	.word	0x20000044
 80029ec:	3b79096c 	.word	0x3b79096c
 80029f0:	3bf9096c 	.word	0x3bf9096c
 80029f4:	3c7aacda 	.word	0x3c7aacda
 80029f8:	3cf9db23 	.word	0x3cf9db23
 80029fc:	3d79db23 	.word	0x3d79db23

08002a00 <CheckConnection>:

static bool CheckConnection()
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
    uint8_t chipID = 0x00;
 8002a06:	2300      	movs	r3, #0
 8002a08:	71fb      	strb	r3, [r7, #7]
    if(!ReadAddress(ACC, ACC_BGW_CHIPID, &chipID))
 8002a0a:	1dfb      	adds	r3, r7, #7
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7ff fde3 	bl	80025dc <ReadAddress>
 8002a16:	4603      	mov	r3, r0
 8002a18:	f083 0301 	eor.w	r3, r3, #1
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d001      	beq.n	8002a26 <CheckConnection+0x26>
    {
        return false;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e03c      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    if(chipID != ACC_ID_VALUE)
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	2bfa      	cmp	r3, #250	; 0xfa
 8002a2a:	d001      	beq.n	8002a30 <CheckConnection+0x30>
    {
        return false;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	e037      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    chipID = 0x00;
 8002a30:	2300      	movs	r3, #0
 8002a32:	71fb      	strb	r3, [r7, #7]
    if(!ReadAddress(GYRO, GYRO_CHIP_ID, &chipID))
 8002a34:	1dfb      	adds	r3, r7, #7
 8002a36:	461a      	mov	r2, r3
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7ff fdce 	bl	80025dc <ReadAddress>
 8002a40:	4603      	mov	r3, r0
 8002a42:	f083 0301 	eor.w	r3, r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <CheckConnection+0x50>
    {
        return false;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	e027      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    if(chipID != GYRO_ID)
 8002a50:	79fb      	ldrb	r3, [r7, #7]
 8002a52:	2b0f      	cmp	r3, #15
 8002a54:	d001      	beq.n	8002a5a <CheckConnection+0x5a>
    {
        return false;
 8002a56:	2300      	movs	r3, #0
 8002a58:	e022      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    if(!WriteAddress(MAG, MAG_POWER_CONTROL, MAG_POWER_CONTROL_POWER_CONTROL_BIT))
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	214b      	movs	r1, #75	; 0x4b
 8002a5e:	2002      	movs	r0, #2
 8002a60:	f7ff fe38 	bl	80026d4 <WriteAddress>
 8002a64:	4603      	mov	r3, r0
 8002a66:	f083 0301 	eor.w	r3, r3, #1
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <CheckConnection+0x74>
    {
        return false;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e015      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    chipID = 0x00;
 8002a74:	2300      	movs	r3, #0
 8002a76:	71fb      	strb	r3, [r7, #7]
    if(!ReadAddress(MAG, MAG_CHIP_ID, &chipID))
 8002a78:	1dfb      	adds	r3, r7, #7
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	2140      	movs	r1, #64	; 0x40
 8002a7e:	2002      	movs	r0, #2
 8002a80:	f7ff fdac 	bl	80025dc <ReadAddress>
 8002a84:	4603      	mov	r3, r0
 8002a86:	f083 0301 	eor.w	r3, r3, #1
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <CheckConnection+0x94>
    {
        return false;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e005      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    if(chipID != MAG_ID)
 8002a94:	79fb      	ldrb	r3, [r7, #7]
 8002a96:	2b32      	cmp	r3, #50	; 0x32
 8002a98:	d001      	beq.n	8002a9e <CheckConnection+0x9e>
    {
        return false;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	e000      	b.n	8002aa0 <CheckConnection+0xa0>
    }

    return true;
 8002a9e:	2301      	movs	r3, #1
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <AdcInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool AdcInit(ADC_HandleTypeDef* hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
    if(hadc == NULL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d101      	bne.n	8002aba <AdcInit+0x12>
    {
        return false;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e008      	b.n	8002acc <AdcInit+0x24>
    }
    adcHandle = hadc;
 8002aba:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <AdcInit+0x2c>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6013      	str	r3, [r2, #0]

    HAL_ADC_Start(adcHandle);
 8002ac0:	4b04      	ldr	r3, [pc, #16]	; (8002ad4 <AdcInit+0x2c>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fcfb 	bl	80034c0 <HAL_ADC_Start>

    return true;
 8002aca:	2301      	movs	r3, #1
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000ca4 	.word	0x20000ca4

08002ad8 <AdcDmaIsr>:

    return ((float)adcRaw)*ADC_VOLTAGE_DIVIDER_MAX_VOLTAGE/ADC_RESOLUTION;
}

void AdcDmaIsr()
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
    waitingForMeasurement = false;
 8002adc:	4b03      	ldr	r3, [pc, #12]	; (8002aec <AdcDmaIsr+0x14>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	701a      	strb	r2, [r3, #0]
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	20000ca8 	.word	0x20000ca8

08002af0 <RadioIrq>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void RadioIrq(radioChannel_t channel, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	6039      	str	r1, [r7, #0]
 8002afa:	71fb      	strb	r3, [r7, #7]
 8002afc:	4613      	mov	r3, r2
 8002afe:	80bb      	strh	r3, [r7, #4]
    if(channel >= RADIO_CHANNEL_COUNT)
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d825      	bhi.n	8002b52 <RadioIrq+0x62>
    {
        return;
    }

    float timeElapsed = GetTimeElapsed(&channelStateChangeTime[channel], true);
 8002b06:	79fb      	ldrb	r3, [r7, #7]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4a14      	ldr	r2, [pc, #80]	; (8002b5c <RadioIrq+0x6c>)
 8002b0c:	4413      	add	r3, r2
 8002b0e:	2101      	movs	r1, #1
 8002b10:	4618      	mov	r0, r3
 8002b12:	f000 f8a5 	bl	8002c60 <GetTimeElapsed>
 8002b16:	ed87 0a03 	vstr	s0, [r7, #12]

    if(0 == HAL_GPIO_ReadPin(GPIOx,GPIO_Pin))
 8002b1a:	88bb      	ldrh	r3, [r7, #4]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	6838      	ldr	r0, [r7, #0]
 8002b20:	f001 fd10 	bl	8004544 <HAL_GPIO_ReadPin>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10f      	bne.n	8002b4a <RadioIrq+0x5a>
    {
        channelData[channel] = (timeElapsed-PWM_MIN_UP_TIME_S)/(PWM_MAX_UP_TIME_S-PWM_MIN_UP_TIME_S);
 8002b2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b2e:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002b60 <RadioIrq+0x70>
 8002b32:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002b60 <RadioIrq+0x70>
 8002b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b40:	4a08      	ldr	r2, [pc, #32]	; (8002b64 <RadioIrq+0x74>)
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	edc3 7a00 	vstr	s15, [r3]
    }

    radioSignalAvailable = true;
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <RadioIrq+0x78>)
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e000      	b.n	8002b54 <RadioIrq+0x64>
        return;
 8002b52:	bf00      	nop
}
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000cac 	.word	0x20000cac
 8002b60:	3a83126f 	.word	0x3a83126f
 8002b64:	20000cc4 	.word	0x20000cc4
 8002b68:	20000cdc 	.word	0x20000cdc

08002b6c <UartInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool UartInit(UART_HandleTypeDef *uh)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
    uartHandle = uh;
 8002b74:	4a04      	ldr	r2, [pc, #16]	; (8002b88 <UartInit+0x1c>)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6013      	str	r3, [r2, #0]
    return true;
 8002b7a:	2301      	movs	r3, #1
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	20000ce0 	.word	0x20000ce0

08002b8c <UartWrite>:

bool UartWrite(char *format, ...)
{
 8002b8c:	b40f      	push	{r0, r1, r2, r3}
 8002b8e:	b590      	push	{r4, r7, lr}
 8002b90:	b09d      	sub	sp, #116	; 0x74
 8002b92:	af00      	add	r7, sp, #0
    if(strlen(format) > UART_MAX_MESSAGE_SIZE)
 8002b94:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002b98:	f7fd fb22 	bl	80001e0 <strlen>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b64      	cmp	r3, #100	; 0x64
 8002ba0:	d913      	bls.n	8002bca <UartWrite+0x3e>
    {
        if(HAL_UART_Transmit(uartHandle, (uint8_t*)messageTooLongErrMsg, strlen(messageTooLongErrMsg), 1000) != HAL_OK)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <UartWrite+0x84>)
 8002ba4:	681c      	ldr	r4, [r3, #0]
 8002ba6:	481b      	ldr	r0, [pc, #108]	; (8002c14 <UartWrite+0x88>)
 8002ba8:	f7fd fb1a 	bl	80001e0 <strlen>
 8002bac:	4603      	mov	r3, r0
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb4:	4917      	ldr	r1, [pc, #92]	; (8002c14 <UartWrite+0x88>)
 8002bb6:	4620      	mov	r0, r4
 8002bb8:	f003 ffc1 	bl	8006b3e <HAL_UART_Transmit>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <UartWrite+0x3a>
        {
            return false;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e01c      	b.n	8002c00 <UartWrite+0x74>
        }
        return false;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e01a      	b.n	8002c00 <UartWrite+0x74>
    }

    va_list aptr;
    va_start(aptr, format);
 8002bca:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bce:	66bb      	str	r3, [r7, #104]	; 0x68
    char buffer[UART_MAX_MESSAGE_SIZE];
    uint32_t msgSize = vsprintf(buffer, format, aptr);
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002bd4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f006 f801 	bl	8008be0 <vsprintf>
 8002bde:	4603      	mov	r3, r0
 8002be0:	66fb      	str	r3, [r7, #108]	; 0x6c
    va_end(aptr);

    if(HAL_UART_Transmit(uartHandle, (uint8_t*)buffer, msgSize, 1000) != HAL_OK)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <UartWrite+0x84>)
 8002be4:	6818      	ldr	r0, [r3, #0]
 8002be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	1d39      	adds	r1, r7, #4
 8002bec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf0:	f003 ffa5 	bl	8006b3e <HAL_UART_Transmit>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <UartWrite+0x72>
    {
        return false;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <UartWrite+0x74>
    }
    return true;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3774      	adds	r7, #116	; 0x74
 8002c04:	46bd      	mov	sp, r7
 8002c06:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002c0a:	b004      	add	sp, #16
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	20000ce0 	.word	0x20000ce0
 8002c14:	2000004c 	.word	0x2000004c

08002c18 <UtilsInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

void UtilsInit()
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <UtilsInit+0x40>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	4a0d      	ldr	r2, [pc, #52]	; (8002c58 <UtilsInit+0x40>)
 8002c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c26:	60d3      	str	r3, [r2, #12]
    ITM->TCR |= 0x01<<3;
 8002c28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002c2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002c30:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002c34:	f043 0308 	orr.w	r3, r3, #8
 8002c38:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
    DWT->CYCCNT = 0;
 8002c3c:	4b07      	ldr	r3, [pc, #28]	; (8002c5c <UtilsInit+0x44>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002c42:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <UtilsInit+0x44>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <UtilsInit+0x44>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6013      	str	r3, [r2, #0]
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000edf0 	.word	0xe000edf0
 8002c5c:	e0001000 	.word	0xe0001000

08002c60 <GetTimeElapsed>:

float GetTimeElapsed(uint32_t* lastTimeCalled, bool setCurrentTime)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	460b      	mov	r3, r1
 8002c6a:	70fb      	strb	r3, [r7, #3]
    uint32_t time = DWT->CYCCNT/(SystemCoreClock/Us_IN_S);
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <GetTimeElapsed+0x88>)
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	4b1e      	ldr	r3, [pc, #120]	; (8002cec <GetTimeElapsed+0x8c>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	491e      	ldr	r1, [pc, #120]	; (8002cf0 <GetTimeElapsed+0x90>)
 8002c76:	fba1 1303 	umull	r1, r3, r1, r3
 8002c7a:	0c9b      	lsrs	r3, r3, #18
 8002c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c80:	60bb      	str	r3, [r7, #8]
    uint32_t timeDiff;
    if(*lastTimeCalled>time)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d210      	bcs.n	8002cae <GetTimeElapsed+0x4e>
    {
        timeDiff = UINT_MAX/(SystemCoreClock/Us_IN_S)-*lastTimeCalled+time;
 8002c8c:	4b17      	ldr	r3, [pc, #92]	; (8002cec <GetTimeElapsed+0x8c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <GetTimeElapsed+0x90>)
 8002c92:	fba2 2303 	umull	r2, r3, r2, r3
 8002c96:	0c9b      	lsrs	r3, r3, #18
 8002c98:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	68ba      	ldr	r2, [r7, #8]
 8002ca8:	4413      	add	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e004      	b.n	8002cb8 <GetTimeElapsed+0x58>
    } else {
        timeDiff = time-*lastTimeCalled;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	60fb      	str	r3, [r7, #12]
    }
    if(setCurrentTime)
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <GetTimeElapsed+0x64>
    {
        *lastTimeCalled = time;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	601a      	str	r2, [r3, #0]
    }

    return ((float)timeDiff)/Us_IN_S;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	ee07 3a90 	vmov	s15, r3
 8002cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cce:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002cf4 <GetTimeElapsed+0x94>
 8002cd2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cd6:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cda:	eeb0 0a67 	vmov.f32	s0, s15
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	e0001000 	.word	0xe0001000
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	431bde83 	.word	0x431bde83
 8002cf4:	49742400 	.word	0x49742400

08002cf8 <DigitalFilterCreateFilter>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool DigitalFilterCreateFilter(float numerator[], float denominator[], uint32_t filterOrder, digitalFilterHandle_t* filterHandle)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b087      	sub	sp, #28
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
 8002d04:	603b      	str	r3, [r7, #0]
    if(numerator == NULL ||
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d008      	beq.n	8002d1e <DigitalFilterCreateFilter+0x26>
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <DigitalFilterCreateFilter+0x26>
       denominator == NULL ||
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d002      	beq.n	8002d1e <DigitalFilterCreateFilter+0x26>
       filterOrder == 0 ||
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <DigitalFilterCreateFilter+0x2a>
       filterHandle == NULL)
    {
        return false;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e079      	b.n	8002e16 <DigitalFilterCreateFilter+0x11e>
    }

    if(denominator[0] == 0)
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	edd3 7a00 	vldr	s15, [r3]
 8002d28:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d30:	d101      	bne.n	8002d36 <DigitalFilterCreateFilter+0x3e>
    {
        return false;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e06f      	b.n	8002e16 <DigitalFilterCreateFilter+0x11e>
    }

    *filterHandle = (digitalFilterHandle_t)malloc(sizeof(filter_t));
 8002d36:	2010      	movs	r0, #16
 8002d38:	f005 fcaa 	bl	8008690 <malloc>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	461a      	mov	r2, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	601a      	str	r2, [r3, #0]
    if(*filterHandle == 0)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <DigitalFilterCreateFilter+0x58>
    {
        return false;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e062      	b.n	8002e16 <DigitalFilterCreateFilter+0x11e>
    }

    ((filter_t*)*filterHandle)->numerator = malloc(sizeof(float)*(filterOrder+1));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3301      	adds	r3, #1
 8002d54:	009a      	lsls	r2, r3, #2
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	461c      	mov	r4, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f005 fc97 	bl	8008690 <malloc>
 8002d62:	4603      	mov	r3, r0
 8002d64:	6023      	str	r3, [r4, #0]

    if(((filter_t*)*filterHandle)->numerator == NULL)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <DigitalFilterCreateFilter+0x86>
    {
        free((filter_t*)*filterHandle);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f005 fc93 	bl	80086a0 <free>
        return false;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e04b      	b.n	8002e16 <DigitalFilterCreateFilter+0x11e>
    }

    ((filter_t*)*filterHandle)->denominator = malloc(sizeof(float)*(filterOrder+1));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	3301      	adds	r3, #1
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	461c      	mov	r4, r3
 8002d8a:	4610      	mov	r0, r2
 8002d8c:	f005 fc80 	bl	8008690 <malloc>
 8002d90:	4603      	mov	r3, r0
 8002d92:	6063      	str	r3, [r4, #4]
    if(((filter_t*)*filterHandle)->denominator == NULL)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d10c      	bne.n	8002db8 <DigitalFilterCreateFilter+0xc0>
    {
        free(((filter_t*)*filterHandle)->numerator);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f005 fc7b 	bl	80086a0 <free>
        free((filter_t*)*filterHandle);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f005 fc76 	bl	80086a0 <free>
        return false;
 8002db4:	2300      	movs	r3, #0
 8002db6:	e02e      	b.n	8002e16 <DigitalFilterCreateFilter+0x11e>
    }

    filterData_t initialFilterData = {0,0};
 8002db8:	f04f 0300 	mov.w	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
 8002dbe:	f04f 0300 	mov.w	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
    if(RB_OK != RollingBufferCreateBuffer(&(((filter_t*)*filterHandle)->bufferHandle),sizeof(filterData_t), filterOrder, &initialFilterData))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f103 000c 	add.w	r0, r3, #12
 8002dcc:	f107 0310 	add.w	r3, r7, #16
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	2108      	movs	r1, #8
 8002dd4:	f000 fa2e 	bl	8003234 <RollingBufferCreateBuffer>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d001      	beq.n	8002de2 <DigitalFilterCreateFilter+0xea>
    {
        return false;
 8002dde:	2300      	movs	r3, #0
 8002de0:	e019      	b.n	8002e16 <DigitalFilterCreateFilter+0x11e>
    }

    memcpy(((filter_t*)*filterHandle)->numerator, numerator, (filterOrder+1)*sizeof(float));
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3301      	adds	r3, #1
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	461a      	mov	r2, r3
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	f005 fe9f 	bl	8008b34 <memcpy>
    memcpy(((filter_t*)*filterHandle)->denominator, denominator, (filterOrder+1)*sizeof(float));
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	6858      	ldr	r0, [r3, #4]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	461a      	mov	r2, r3
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	f005 fe95 	bl	8008b34 <memcpy>

    ((filter_t*)*filterHandle)->order = filterOrder;
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6093      	str	r3, [r2, #8]

    return true;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd90      	pop	{r4, r7, pc}

08002e1e <DigitalFilterProcess>:

    return true;
}

bool DigitalFilterProcess(digitalFilterHandle_t filterHandle, float curentSignalValue, float* filterOutput)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b08a      	sub	sp, #40	; 0x28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	60f8      	str	r0, [r7, #12]
 8002e26:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e2a:	6079      	str	r1, [r7, #4]
    *filterOutput = 0;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	601a      	str	r2, [r3, #0]

    for(uint32_t i=0; i<((filter_t*)filterHandle)->order; i++)
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
 8002e38:	e031      	b.n	8002e9e <DigitalFilterProcess+0x80>
    {
        filterData_t fd;
        if(RB_OK != RollingBufferRead(((filter_t*)filterHandle)->bufferHandle, &fd, i))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f107 0114 	add.w	r1, r7, #20
 8002e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 fa75 	bl	8003334 <RollingBufferRead>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d001      	beq.n	8002e54 <DigitalFilterProcess+0x36>
        {
            return false;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e058      	b.n	8002f06 <DigitalFilterProcess+0xe8>
        }

        /**< U(k-i-1)*numerator[i+1] - Y(k-i-1)*denominator[i+1] **/
        *filterOutput += fd.input*(((filter_t*)filterHandle)->numerator[i+1]) - fd.output*(((filter_t*)filterHandle)->denominator[i+1]);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	ed93 7a00 	vldr	s14, [r3]
 8002e5a:	edd7 6a06 	vldr	s13, [r7, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e64:	3301      	adds	r3, #1
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	4413      	add	r3, r2
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002e72:	ed97 6a05 	vldr	s12, [r7, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	edd3 7a00 	vldr	s15, [r3]
 8002e86:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002e8a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	edc3 7a00 	vstr	s15, [r3]
    for(uint32_t i=0; i<((filter_t*)filterHandle)->order; i++)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d3c8      	bcc.n	8002e3a <DigitalFilterProcess+0x1c>
    }

    /**< U(0)*numerator[0]**/
    *filterOutput += curentSignalValue*(((filter_t*)filterHandle)->numerator[0]);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	edd3 6a00 	vldr	s13, [r3]
 8002eb6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002eba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	edc3 7a00 	vstr	s15, [r3]
    *filterOutput /= (((filter_t*)filterHandle)->denominator[0]);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	edd3 6a00 	vldr	s13, [r3]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	ed93 7a00 	vldr	s14, [r3]
 8002ed6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	edc3 7a00 	vstr	s15, [r3]

    filterData_t newestData = {
            .input = curentSignalValue,
            .output = *filterOutput
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
    filterData_t newestData = {
 8002ee4:	61fb      	str	r3, [r7, #28]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	623b      	str	r3, [r7, #32]
    };

    if(RB_OK != RollingBufferWrite(((filter_t*)filterHandle)->bufferHandle,&newestData))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f107 021c 	add.w	r2, r7, #28
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 f9ea 	bl	80032ce <RollingBufferWrite>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d001      	beq.n	8002f04 <DigitalFilterProcess+0xe6>
    {
        return false;
 8002f00:	2300      	movs	r3, #0
 8002f02:	e000      	b.n	8002f06 <DigitalFilterProcess+0xe8>
    }

    return true;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3728      	adds	r7, #40	; 0x28
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <MahonyFilterInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool MahonyFilterInit()
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08e      	sub	sp, #56	; 0x38
 8002f14:	af00      	add	r7, sp, #0
    bool success = true;
 8002f16:	2301      	movs	r3, #1
 8002f18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    /**25Hz low pass filter, sampling 1kHz **/
    float accNumerator[] = {0.00554271721028068,0.0110854344205614,0.00554271721028068};
 8002f1c:	4a45      	ldr	r2, [pc, #276]	; (8003034 <MahonyFilterInit+0x124>)
 8002f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f22:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f24:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float accDenominator[] = {1,-1.77863177782459,0.800802646665708};
 8002f28:	4a43      	ldr	r2, [pc, #268]	; (8003038 <MahonyFilterInit+0x128>)
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    success &= DigitalFilterCreateFilter(accNumerator, accDenominator, 2, &accFilterHandle[0]);    ///< x
 8002f34:	f107 011c 	add.w	r1, r7, #28
 8002f38:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <MahonyFilterInit+0x12c>)
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f7ff feda 	bl	8002cf8 <DigitalFilterCreateFilter>
 8002f44:	4603      	mov	r3, r0
 8002f46:	461a      	mov	r2, r3
 8002f48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    success &= DigitalFilterCreateFilter(accNumerator, accDenominator, 2, &accFilterHandle[1]);    ///< y
 8002f5a:	f107 011c 	add.w	r1, r7, #28
 8002f5e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f62:	4b37      	ldr	r3, [pc, #220]	; (8003040 <MahonyFilterInit+0x130>)
 8002f64:	2202      	movs	r2, #2
 8002f66:	f7ff fec7 	bl	8002cf8 <DigitalFilterCreateFilter>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f72:	4013      	ands	r3, r2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    success &= DigitalFilterCreateFilter(accNumerator, accDenominator, 2, &accFilterHandle[2]);    ///< z
 8002f80:	f107 011c 	add.w	r1, r7, #28
 8002f84:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8002f88:	4b2e      	ldr	r3, [pc, #184]	; (8003044 <MahonyFilterInit+0x134>)
 8002f8a:	2202      	movs	r2, #2
 8002f8c:	f7ff feb4 	bl	8002cf8 <DigitalFilterCreateFilter>
 8002f90:	4603      	mov	r3, r0
 8002f92:	461a      	mov	r2, r3
 8002f94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f98:	4013      	ands	r3, r2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	bf14      	ite	ne
 8002f9e:	2301      	movne	r3, #1
 8002fa0:	2300      	moveq	r3, #0
 8002fa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    /**20Hz low pass filter, reading samples 1kHz, sampling ~=30Hz **/
    float magNumerator[] = {0.00362168151492864,0.00724336302985729,0.00362168151492864};
 8002fa6:	4a28      	ldr	r2, [pc, #160]	; (8003048 <MahonyFilterInit+0x138>)
 8002fa8:	f107 0310 	add.w	r3, r7, #16
 8002fac:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    float magDenominator[] = {1,-1.82269492519631,0.837181651256023};
 8002fb2:	4a26      	ldr	r2, [pc, #152]	; (800304c <MahonyFilterInit+0x13c>)
 8002fb4:	1d3b      	adds	r3, r7, #4
 8002fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8002fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    success &= DigitalFilterCreateFilter(magNumerator, magDenominator, 2, &magFilterHandle[0]);    ///< x
 8002fbc:	1d39      	adds	r1, r7, #4
 8002fbe:	f107 0010 	add.w	r0, r7, #16
 8002fc2:	4b23      	ldr	r3, [pc, #140]	; (8003050 <MahonyFilterInit+0x140>)
 8002fc4:	2202      	movs	r2, #2
 8002fc6:	f7ff fe97 	bl	8002cf8 <DigitalFilterCreateFilter>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	bf14      	ite	ne
 8002fd8:	2301      	movne	r3, #1
 8002fda:	2300      	moveq	r3, #0
 8002fdc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    success &= DigitalFilterCreateFilter(magNumerator, magDenominator, 2, &magFilterHandle[1]);    ///< y
 8002fe0:	1d39      	adds	r1, r7, #4
 8002fe2:	f107 0010 	add.w	r0, r7, #16
 8002fe6:	4b1b      	ldr	r3, [pc, #108]	; (8003054 <MahonyFilterInit+0x144>)
 8002fe8:	2202      	movs	r2, #2
 8002fea:	f7ff fe85 	bl	8002cf8 <DigitalFilterCreateFilter>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    success &= DigitalFilterCreateFilter(magNumerator, magDenominator, 2, &magFilterHandle[2]);    ///< z
 8003004:	1d39      	adds	r1, r7, #4
 8003006:	f107 0010 	add.w	r0, r7, #16
 800300a:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MahonyFilterInit+0x148>)
 800300c:	2202      	movs	r2, #2
 800300e:	f7ff fe73 	bl	8002cf8 <DigitalFilterCreateFilter>
 8003012:	4603      	mov	r3, r0
 8003014:	461a      	mov	r2, r3
 8003016:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800301a:	4013      	ands	r3, r2
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

   return success;
 8003028:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800302c:	4618      	mov	r0, r3
 800302e:	3738      	adds	r7, #56	; 0x38
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	0800d128 	.word	0x0800d128
 8003038:	0800d134 	.word	0x0800d134
 800303c:	20004cf4 	.word	0x20004cf4
 8003040:	20004cf8 	.word	0x20004cf8
 8003044:	20004cfc 	.word	0x20004cfc
 8003048:	0800d140 	.word	0x0800d140
 800304c:	0800d14c 	.word	0x0800d14c
 8003050:	20004ce8 	.word	0x20004ce8
 8003054:	20004cec 	.word	0x20004cec
 8003058:	20004cf0 	.word	0x20004cf0
 800305c:	00000000 	.word	0x00000000

08003060 <MahonyFilterTask>:

void MahonyFilterTask()
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b096      	sub	sp, #88	; 0x58
 8003064:	af02      	add	r7, sp, #8
    bmx055Data_t data;

    TickType_t lastTickTime = xTaskGetTickCount();
 8003066:	f004 fc91 	bl	800798c <xTaskGetTickCount>
 800306a:	4603      	mov	r3, r0
 800306c:	627b      	str	r3, [r7, #36]	; 0x24
    float posY = 0;
 800306e:	f04f 0300 	mov.w	r3, #0
 8003072:	64fb      	str	r3, [r7, #76]	; 0x4c

    while(1)
    {
        HAL_GPIO_WritePin(DEBUG_OUT_1_GPIO_Port,DEBUG_OUT_1_Pin,1);
 8003074:	2201      	movs	r2, #1
 8003076:	2108      	movs	r1, #8
 8003078:	4847      	ldr	r0, [pc, #284]	; (8003198 <MahonyFilterTask+0x138>)
 800307a:	f001 fa7b 	bl	8004574 <HAL_GPIO_WritePin>
        Bmx055GetData(&data);
 800307e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003082:	4618      	mov	r0, r3
 8003084:	f7ff f864 	bl	8002150 <Bmx055GetData>


        posY += data.gy*0.001;
 8003088:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800308a:	f7fd fa65 	bl	8000558 <__aeabi_f2d>
 800308e:	4604      	mov	r4, r0
 8003090:	460d      	mov	r5, r1
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	4618      	mov	r0, r3
 8003096:	f7fd fa5f 	bl	8000558 <__aeabi_f2d>
 800309a:	a33d      	add	r3, pc, #244	; (adr r3, 8003190 <MahonyFilterTask+0x130>)
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f7fd fab2 	bl	8000608 <__aeabi_dmul>
 80030a4:	4602      	mov	r2, r0
 80030a6:	460b      	mov	r3, r1
 80030a8:	4620      	mov	r0, r4
 80030aa:	4629      	mov	r1, r5
 80030ac:	f7fd f8f6 	bl	800029c <__adddf3>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4610      	mov	r0, r2
 80030b6:	4619      	mov	r1, r3
 80030b8:	f7fd fd7e 	bl	8000bb8 <__aeabi_d2f>
 80030bc:	4603      	mov	r3, r0
 80030be:	64fb      	str	r3, [r7, #76]	; 0x4c
        UartWrite("%f\t%f\t%f\r\n",data.gy,posY);
 80030c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd fa48 	bl	8000558 <__aeabi_f2d>
 80030c8:	4604      	mov	r4, r0
 80030ca:	460d      	mov	r5, r1
 80030cc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80030ce:	f7fd fa43 	bl	8000558 <__aeabi_f2d>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	e9cd 2300 	strd	r2, r3, [sp]
 80030da:	4622      	mov	r2, r4
 80030dc:	462b      	mov	r3, r5
 80030de:	482f      	ldr	r0, [pc, #188]	; (800319c <MahonyFilterTask+0x13c>)
 80030e0:	f7ff fd54 	bl	8002b8c <UartWrite>
//        UartWrite("%f\t%f\t%f\r\n",data.gx,data.gy,data.gz);


        bmx055Data_t filteredData;
        DigitalFilterProcess(accFilterHandle[0], data.ax, &filteredData.ax);
 80030e4:	4b2e      	ldr	r3, [pc, #184]	; (80031a0 <MahonyFilterTask+0x140>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80030ec:	463a      	mov	r2, r7
 80030ee:	4611      	mov	r1, r2
 80030f0:	eeb0 0a67 	vmov.f32	s0, s15
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff fe92 	bl	8002e1e <DigitalFilterProcess>
        DigitalFilterProcess(accFilterHandle[1], data.ay, &filteredData.ay);
 80030fa:	4b29      	ldr	r3, [pc, #164]	; (80031a0 <MahonyFilterTask+0x140>)
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003102:	463b      	mov	r3, r7
 8003104:	3304      	adds	r3, #4
 8003106:	4619      	mov	r1, r3
 8003108:	eeb0 0a67 	vmov.f32	s0, s15
 800310c:	4610      	mov	r0, r2
 800310e:	f7ff fe86 	bl	8002e1e <DigitalFilterProcess>
        DigitalFilterProcess(accFilterHandle[2], data.az, &filteredData.az);
 8003112:	4b23      	ldr	r3, [pc, #140]	; (80031a0 <MahonyFilterTask+0x140>)
 8003114:	689a      	ldr	r2, [r3, #8]
 8003116:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800311a:	463b      	mov	r3, r7
 800311c:	3308      	adds	r3, #8
 800311e:	4619      	mov	r1, r3
 8003120:	eeb0 0a67 	vmov.f32	s0, s15
 8003124:	4610      	mov	r0, r2
 8003126:	f7ff fe7a 	bl	8002e1e <DigitalFilterProcess>

        DigitalFilterProcess(magFilterHandle[0], data.mx, &filteredData.mx);
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <MahonyFilterTask+0x144>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8003132:	463b      	mov	r3, r7
 8003134:	3318      	adds	r3, #24
 8003136:	4619      	mov	r1, r3
 8003138:	eeb0 0a67 	vmov.f32	s0, s15
 800313c:	4610      	mov	r0, r2
 800313e:	f7ff fe6e 	bl	8002e1e <DigitalFilterProcess>
        DigitalFilterProcess(magFilterHandle[1], data.my, &filteredData.my);
 8003142:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <MahonyFilterTask+0x144>)
 8003144:	685a      	ldr	r2, [r3, #4]
 8003146:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800314a:	463b      	mov	r3, r7
 800314c:	331c      	adds	r3, #28
 800314e:	4619      	mov	r1, r3
 8003150:	eeb0 0a67 	vmov.f32	s0, s15
 8003154:	4610      	mov	r0, r2
 8003156:	f7ff fe62 	bl	8002e1e <DigitalFilterProcess>
        DigitalFilterProcess(magFilterHandle[2], data.mz, &filteredData.mz);
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <MahonyFilterTask+0x144>)
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8003162:	463b      	mov	r3, r7
 8003164:	3320      	adds	r3, #32
 8003166:	4619      	mov	r1, r3
 8003168:	eeb0 0a67 	vmov.f32	s0, s15
 800316c:	4610      	mov	r0, r2
 800316e:	f7ff fe56 	bl	8002e1e <DigitalFilterProcess>



        HAL_GPIO_WritePin(DEBUG_OUT_1_GPIO_Port,DEBUG_OUT_1_Pin,0);
 8003172:	2200      	movs	r2, #0
 8003174:	2108      	movs	r1, #8
 8003176:	4808      	ldr	r0, [pc, #32]	; (8003198 <MahonyFilterTask+0x138>)
 8003178:	f001 f9fc 	bl	8004574 <HAL_GPIO_WritePin>
        vTaskDelayUntil(&lastTickTime,1);
 800317c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f004 fa46 	bl	8007614 <vTaskDelayUntil>
    {
 8003188:	e774      	b.n	8003074 <MahonyFilterTask+0x14>
 800318a:	bf00      	nop
 800318c:	f3af 8000 	nop.w
 8003190:	d2f1a9fc 	.word	0xd2f1a9fc
 8003194:	3f50624d 	.word	0x3f50624d
 8003198:	40020000 	.word	0x40020000
 800319c:	0800d158 	.word	0x0800d158
 80031a0:	20004cf4 	.word	0x20004cf4
 80031a4:	20004ce8 	.word	0x20004ce8

080031a8 <PosCalcInit>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

bool PosCalcInit()
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
    float zero = 0.0f;
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	607b      	str	r3, [r7, #4]
    RollingBufferCreateBuffer(&bufferHandleX, sizeof(float), ACC_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031b4:	1d3b      	adds	r3, r7, #4
 80031b6:	221e      	movs	r2, #30
 80031b8:	2104      	movs	r1, #4
 80031ba:	4817      	ldr	r0, [pc, #92]	; (8003218 <PosCalcInit+0x70>)
 80031bc:	f000 f83a 	bl	8003234 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleY, sizeof(float), ACC_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031c0:	1d3b      	adds	r3, r7, #4
 80031c2:	221e      	movs	r2, #30
 80031c4:	2104      	movs	r1, #4
 80031c6:	4815      	ldr	r0, [pc, #84]	; (800321c <PosCalcInit+0x74>)
 80031c8:	f000 f834 	bl	8003234 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleZ, sizeof(float), ACC_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031cc:	1d3b      	adds	r3, r7, #4
 80031ce:	221e      	movs	r2, #30
 80031d0:	2104      	movs	r1, #4
 80031d2:	4813      	ldr	r0, [pc, #76]	; (8003220 <PosCalcInit+0x78>)
 80031d4:	f000 f82e 	bl	8003234 <RollingBufferCreateBuffer>

    RollingBufferCreateBuffer(&bufferHandleXg, sizeof(float), GYRO_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031d8:	1d3b      	adds	r3, r7, #4
 80031da:	220a      	movs	r2, #10
 80031dc:	2104      	movs	r1, #4
 80031de:	4811      	ldr	r0, [pc, #68]	; (8003224 <PosCalcInit+0x7c>)
 80031e0:	f000 f828 	bl	8003234 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleYg, sizeof(float), GYRO_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031e4:	1d3b      	adds	r3, r7, #4
 80031e6:	220a      	movs	r2, #10
 80031e8:	2104      	movs	r1, #4
 80031ea:	480f      	ldr	r0, [pc, #60]	; (8003228 <PosCalcInit+0x80>)
 80031ec:	f000 f822 	bl	8003234 <RollingBufferCreateBuffer>

    RollingBufferCreateBuffer(&bufferHandleXm, sizeof(float), MAG_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031f0:	1d3b      	adds	r3, r7, #4
 80031f2:	2214      	movs	r2, #20
 80031f4:	2104      	movs	r1, #4
 80031f6:	480d      	ldr	r0, [pc, #52]	; (800322c <PosCalcInit+0x84>)
 80031f8:	f000 f81c 	bl	8003234 <RollingBufferCreateBuffer>
    RollingBufferCreateBuffer(&bufferHandleYm, sizeof(float), MAG_LOW_PASS_FILTER_BUFFER_SIZE, &zero);
 80031fc:	1d3b      	adds	r3, r7, #4
 80031fe:	2214      	movs	r2, #20
 8003200:	2104      	movs	r1, #4
 8003202:	480b      	ldr	r0, [pc, #44]	; (8003230 <PosCalcInit+0x88>)
 8003204:	f000 f816 	bl	8003234 <RollingBufferCreateBuffer>

    BMX055CalibrateAccGyro();
 8003208:	f7ff f91a 	bl	8002440 <BMX055CalibrateAccGyro>
    return true;
 800320c:	2301      	movs	r3, #1
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	20004d08 	.word	0x20004d08
 800321c:	20004d0c 	.word	0x20004d0c
 8003220:	20004d18 	.word	0x20004d18
 8003224:	20004d04 	.word	0x20004d04
 8003228:	20004d00 	.word	0x20004d00
 800322c:	20004d14 	.word	0x20004d14
 8003230:	20004d10 	.word	0x20004d10

08003234 <RollingBufferCreateBuffer>:
/*****************************************************************************
                           INTERFACE IMPLEMENTATION
*****************************************************************************/

rollingBufferState_t RollingBufferCreateBuffer(rollingBufferHandle_t* bufferHandle, uint32_t elementSize, uint32_t bufferSize, void* initElementValue)
{
 8003234:	b590      	push	{r4, r7, lr}
 8003236:	b087      	sub	sp, #28
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
 8003240:	603b      	str	r3, [r7, #0]
    if(bufferSize == 0 || elementSize == 0)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <RollingBufferCreateBuffer+0x1a>
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <RollingBufferCreateBuffer+0x1e>
    {
        return RB_INVALID_SIZE_ERROR;
 800324e:	2302      	movs	r3, #2
 8003250:	e039      	b.n	80032c6 <RollingBufferCreateBuffer+0x92>
    }

    *bufferHandle = (rollingBufferHandle_t)malloc(sizeof(rollingBufferData_t));
 8003252:	2010      	movs	r0, #16
 8003254:	f005 fa1c 	bl	8008690 <malloc>
 8003258:	4603      	mov	r3, r0
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	601a      	str	r2, [r3, #0]

    ((rollingBufferData_t*)*bufferHandle)->bufferSize = bufferSize;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	461a      	mov	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6053      	str	r3, [r2, #4]
    ((rollingBufferData_t*)*bufferHandle)->elementSize = elementSize;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6013      	str	r3, [r2, #0]
    ((rollingBufferData_t*)*bufferHandle)->rollingIndex = 0;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	461a      	mov	r2, r3
 800327a:	2300      	movs	r3, #0
 800327c:	6093      	str	r3, [r2, #8]
    ((rollingBufferData_t*)*bufferHandle)->data = malloc(bufferSize*elementSize);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	fb02 f203 	mul.w	r2, r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	461c      	mov	r4, r3
 800328c:	4610      	mov	r0, r2
 800328e:	f005 f9ff 	bl	8008690 <malloc>
 8003292:	4603      	mov	r3, r0
 8003294:	60e3      	str	r3, [r4, #12]



    for(uint32_t i=0; i<bufferSize;i++)
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
 800329a:	e00f      	b.n	80032bc <RollingBufferCreateBuffer+0x88>
    {
        memcpy((uint8_t*)(((rollingBufferData_t*)*bufferHandle)->data+i*elementSize),initElementValue,elementSize);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	fb01 f303 	mul.w	r3, r1, r3
 80032aa:	4413      	add	r3, r2
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	6839      	ldr	r1, [r7, #0]
 80032b0:	4618      	mov	r0, r3
 80032b2:	f005 fc3f 	bl	8008b34 <memcpy>
    for(uint32_t i=0; i<bufferSize;i++)
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	3301      	adds	r3, #1
 80032ba:	617b      	str	r3, [r7, #20]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d3eb      	bcc.n	800329c <RollingBufferCreateBuffer+0x68>
    }

    return RB_OK;
 80032c4:	2301      	movs	r3, #1
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	371c      	adds	r7, #28
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd90      	pop	{r4, r7, pc}

080032ce <RollingBufferWrite>:
    free(((rollingBufferData_t*)bufferHandle));
    return RB_OK;
}

rollingBufferState_t RollingBufferWrite(rollingBufferHandle_t bufferHandle, void* value)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b084      	sub	sp, #16
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
 80032d6:	6039      	str	r1, [r7, #0]
    if((rollingBufferData_t*)bufferHandle == NULL || value == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d002      	beq.n	80032e4 <RollingBufferWrite+0x16>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d101      	bne.n	80032e8 <RollingBufferWrite+0x1a>
    {
        return RB_NULL_PTR_ERROR;
 80032e4:	2304      	movs	r3, #4
 80032e6:	e021      	b.n	800332c <RollingBufferWrite+0x5e>
    }
    rollingBufferData_t* bufferData = (rollingBufferData_t*)bufferHandle;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	60fb      	str	r3, [r7, #12]

    bufferData->rollingIndex++;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	1c5a      	adds	r2, r3, #1
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	609a      	str	r2, [r3, #8]
    if(bufferData->rollingIndex >= bufferData->bufferSize)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d302      	bcc.n	8003308 <RollingBufferWrite+0x3a>
    {
        bufferData->rollingIndex = 0;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	609a      	str	r2, [r3, #8]
    }

    uint8_t* address = (uint8_t*)(bufferData->data+bufferData->rollingIndex*bufferData->elementSize);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	68da      	ldr	r2, [r3, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	68f9      	ldr	r1, [r7, #12]
 8003312:	6809      	ldr	r1, [r1, #0]
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	4413      	add	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
    memcpy(address,value,bufferData->elementSize);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	6839      	ldr	r1, [r7, #0]
 8003324:	68b8      	ldr	r0, [r7, #8]
 8003326:	f005 fc05 	bl	8008b34 <memcpy>
    return RB_OK;
 800332a:	2301      	movs	r3, #1
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <RollingBufferRead>:

rollingBufferState_t RollingBufferRead(rollingBufferHandle_t bufferHandle, void* value, uint32_t index)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b088      	sub	sp, #32
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
    if((rollingBufferData_t*)bufferHandle == NULL || value == NULL)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <RollingBufferRead+0x18>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <RollingBufferRead+0x1c>
    {
        return RB_NULL_PTR_ERROR;
 800334c:	2304      	movs	r3, #4
 800334e:	e02c      	b.n	80033aa <RollingBufferRead+0x76>
    }

    rollingBufferData_t* bufferData = (rollingBufferData_t*)bufferHandle;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	61bb      	str	r3, [r7, #24]

    if(index >= bufferData->bufferSize)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	429a      	cmp	r2, r3
 800335c:	d301      	bcc.n	8003362 <RollingBufferRead+0x2e>
    {
         return RB_INDEX_OUT_OF_BOUNDS_ERROR;
 800335e:	2305      	movs	r3, #5
 8003360:	e023      	b.n	80033aa <RollingBufferRead+0x76>
    }

    uint32_t ind;
    if(index > bufferData->rollingIndex)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d908      	bls.n	800337e <RollingBufferRead+0x4a>
    {
        ind = bufferData->bufferSize-(index-bufferData->rollingIndex);
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	685a      	ldr	r2, [r3, #4]
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	6899      	ldr	r1, [r3, #8]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1acb      	subs	r3, r1, r3
 8003378:	4413      	add	r3, r2
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	e004      	b.n	8003388 <RollingBufferRead+0x54>
    } else {
        ind = bufferData->rollingIndex-index;
 800337e:	69bb      	ldr	r3, [r7, #24]
 8003380:	689a      	ldr	r2, [r3, #8]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	61fb      	str	r3, [r7, #28]
    }
    uint8_t* address = (uint8_t*)(bufferData->data+ind*bufferData->elementSize);
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	69f9      	ldr	r1, [r7, #28]
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	4413      	add	r3, r2
 8003398:	617b      	str	r3, [r7, #20]
    memcpy(value,address,bufferData->elementSize);
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	6979      	ldr	r1, [r7, #20]
 80033a2:	68b8      	ldr	r0, [r7, #8]
 80033a4:	f005 fbc6 	bl	8008b34 <memcpy>
    return RB_OK;
 80033a8:	2301      	movs	r3, #1
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_Init+0x40>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0d      	ldr	r2, [pc, #52]	; (80033f4 <HAL_Init+0x40>)
 80033be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_Init+0x40>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a0a      	ldr	r2, [pc, #40]	; (80033f4 <HAL_Init+0x40>)
 80033ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033d0:	4b08      	ldr	r3, [pc, #32]	; (80033f4 <HAL_Init+0x40>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a07      	ldr	r2, [pc, #28]	; (80033f4 <HAL_Init+0x40>)
 80033d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033dc:	2003      	movs	r0, #3
 80033de:	f000 fbee 	bl	8003bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fe fbf6 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80033e8:	f7fe f9d6 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80033ec:	2300      	movs	r3, #0
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	40023c00 	.word	0x40023c00

080033f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033fc:	4b06      	ldr	r3, [pc, #24]	; (8003418 <HAL_IncTick+0x20>)
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_IncTick+0x24>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4413      	add	r3, r2
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_IncTick+0x24>)
 800340a:	6013      	str	r3, [r2, #0]
}
 800340c:	bf00      	nop
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000064 	.word	0x20000064
 800341c:	20004d1c 	.word	0x20004d1c

08003420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  return uwTick;
 8003424:	4b03      	ldr	r3, [pc, #12]	; (8003434 <HAL_GetTick+0x14>)
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20004d1c 	.word	0x20004d1c

08003438 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e033      	b.n	80034b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe f9ca 	bl	80017f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800347e:	f023 0302 	bic.w	r3, r3, #2
 8003482:	f043 0202 	orr.w	r2, r3, #2
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9ee 	bl	800386c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	f023 0303 	bic.w	r3, r3, #3
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
 80034a6:	e001      	b.n	80034ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d101      	bne.n	80034da <HAL_ADC_Start+0x1a>
 80034d6:	2302      	movs	r3, #2
 80034d8:	e097      	b.n	800360a <HAL_ADC_Start+0x14a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d018      	beq.n	8003522 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689a      	ldr	r2, [r3, #8]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003500:	4b45      	ldr	r3, [pc, #276]	; (8003618 <HAL_ADC_Start+0x158>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a45      	ldr	r2, [pc, #276]	; (800361c <HAL_ADC_Start+0x15c>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	0c9a      	lsrs	r2, r3, #18
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003514:	e002      	b.n	800351c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	3b01      	subs	r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1f9      	bne.n	8003516 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b01      	cmp	r3, #1
 800352e:	d15f      	bne.n	80035f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003538:	f023 0301 	bic.w	r3, r3, #1
 800353c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800355a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d106      	bne.n	800357e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003574:	f023 0206 	bic.w	r2, r3, #6
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	645a      	str	r2, [r3, #68]	; 0x44
 800357c:	e002      	b.n	8003584 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800358c:	4b24      	ldr	r3, [pc, #144]	; (8003620 <HAL_ADC_Start+0x160>)
 800358e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003598:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f003 031f 	and.w	r3, r3, #31
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10f      	bne.n	80035c6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d129      	bne.n	8003608 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035c2:	609a      	str	r2, [r3, #8]
 80035c4:	e020      	b.n	8003608 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_ADC_Start+0x164>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d11b      	bne.n	8003608 <HAL_ADC_Start+0x148>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d114      	bne.n	8003608 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	e00b      	b.n	8003608 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f043 0210 	orr.w	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003600:	f043 0201 	orr.w	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3714      	adds	r7, #20
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	20000000 	.word	0x20000000
 800361c:	431bde83 	.word	0x431bde83
 8003620:	40012300 	.word	0x40012300
 8003624:	40012000 	.word	0x40012000

08003628 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003628:	b480      	push	{r7}
 800362a:	b085      	sub	sp, #20
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1c>
 8003640:	2302      	movs	r3, #2
 8003642:	e105      	b.n	8003850 <HAL_ADC_ConfigChannel+0x228>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b09      	cmp	r3, #9
 8003652:	d925      	bls.n	80036a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68d9      	ldr	r1, [r3, #12]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	3b1e      	subs	r3, #30
 800366a:	2207      	movs	r2, #7
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	43da      	mvns	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	400a      	ands	r2, r1
 8003678:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	68d9      	ldr	r1, [r3, #12]
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	b29b      	uxth	r3, r3
 800368a:	4618      	mov	r0, r3
 800368c:	4603      	mov	r3, r0
 800368e:	005b      	lsls	r3, r3, #1
 8003690:	4403      	add	r3, r0
 8003692:	3b1e      	subs	r3, #30
 8003694:	409a      	lsls	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	60da      	str	r2, [r3, #12]
 800369e:	e022      	b.n	80036e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6919      	ldr	r1, [r3, #16]
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	461a      	mov	r2, r3
 80036ae:	4613      	mov	r3, r2
 80036b0:	005b      	lsls	r3, r3, #1
 80036b2:	4413      	add	r3, r2
 80036b4:	2207      	movs	r2, #7
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	43da      	mvns	r2, r3
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	400a      	ands	r2, r1
 80036c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6919      	ldr	r1, [r3, #16]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	4618      	mov	r0, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	4403      	add	r3, r0
 80036dc:	409a      	lsls	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	d824      	bhi.n	8003738 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	3b05      	subs	r3, #5
 8003700:	221f      	movs	r2, #31
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	43da      	mvns	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	400a      	ands	r2, r1
 800370e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	4413      	add	r3, r2
 8003728:	3b05      	subs	r3, #5
 800372a:	fa00 f203 	lsl.w	r2, r0, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	635a      	str	r2, [r3, #52]	; 0x34
 8003736:	e04c      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b0c      	cmp	r3, #12
 800373e:	d824      	bhi.n	800378a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3b23      	subs	r3, #35	; 0x23
 8003752:	221f      	movs	r2, #31
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43da      	mvns	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	400a      	ands	r2, r1
 8003760:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	4618      	mov	r0, r3
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685a      	ldr	r2, [r3, #4]
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	3b23      	subs	r3, #35	; 0x23
 800377c:	fa00 f203 	lsl.w	r2, r0, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
 8003788:	e023      	b.n	80037d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	3b41      	subs	r3, #65	; 0x41
 800379c:	221f      	movs	r2, #31
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	43da      	mvns	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	400a      	ands	r2, r1
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	4618      	mov	r0, r3
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	685a      	ldr	r2, [r3, #4]
 80037be:	4613      	mov	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	4413      	add	r3, r2
 80037c4:	3b41      	subs	r3, #65	; 0x41
 80037c6:	fa00 f203 	lsl.w	r2, r0, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_ADC_ConfigChannel+0x234>)
 80037d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a21      	ldr	r2, [pc, #132]	; (8003860 <HAL_ADC_ConfigChannel+0x238>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d109      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x1cc>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2b12      	cmp	r3, #18
 80037e6:	d105      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a19      	ldr	r2, [pc, #100]	; (8003860 <HAL_ADC_ConfigChannel+0x238>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d123      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x21e>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b10      	cmp	r3, #16
 8003804:	d003      	beq.n	800380e <HAL_ADC_ConfigChannel+0x1e6>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b11      	cmp	r3, #17
 800380c:	d11b      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d111      	bne.n	8003846 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <HAL_ADC_ConfigChannel+0x23c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a10      	ldr	r2, [pc, #64]	; (8003868 <HAL_ADC_ConfigChannel+0x240>)
 8003828:	fba2 2303 	umull	r2, r3, r2, r3
 800382c:	0c9a      	lsrs	r2, r3, #18
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003838:	e002      	b.n	8003840 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3b01      	subs	r3, #1
 800383e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d1f9      	bne.n	800383a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800384e:	2300      	movs	r3, #0
}
 8003850:	4618      	mov	r0, r3
 8003852:	3714      	adds	r7, #20
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40012300 	.word	0x40012300
 8003860:	40012000 	.word	0x40012000
 8003864:	20000000 	.word	0x20000000
 8003868:	431bde83 	.word	0x431bde83

0800386c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003874:	4b79      	ldr	r3, [pc, #484]	; (8003a5c <ADC_Init+0x1f0>)
 8003876:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	431a      	orrs	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	021a      	lsls	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80038c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	6899      	ldr	r1, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	68da      	ldr	r2, [r3, #12]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038fe:	4a58      	ldr	r2, [pc, #352]	; (8003a60 <ADC_Init+0x1f4>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d022      	beq.n	800394a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003912:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003934:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6899      	ldr	r1, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	e00f      	b.n	800396a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003958:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003968:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f022 0202 	bic.w	r2, r2, #2
 8003978:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	6899      	ldr	r1, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	7e1b      	ldrb	r3, [r3, #24]
 8003984:	005a      	lsls	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	430a      	orrs	r2, r1
 800398c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01b      	beq.n	80039d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	685a      	ldr	r2, [r3, #4]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685a      	ldr	r2, [r3, #4]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6859      	ldr	r1, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	3b01      	subs	r3, #1
 80039c4:	035a      	lsls	r2, r3, #13
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	605a      	str	r2, [r3, #4]
 80039ce:	e007      	b.n	80039e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80039ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	051a      	lsls	r2, r3, #20
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6899      	ldr	r1, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a22:	025a      	lsls	r2, r3, #9
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	6899      	ldr	r1, [r3, #8]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	029a      	lsls	r2, r3, #10
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]
}
 8003a50:	bf00      	nop
 8003a52:	3714      	adds	r7, #20
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr
 8003a5c:	40012300 	.word	0x40012300
 8003a60:	0f000001 	.word	0x0f000001

08003a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f003 0307 	and.w	r3, r3, #7
 8003a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a74:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a80:	4013      	ands	r3, r2
 8003a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	60d3      	str	r3, [r2, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	3714      	adds	r7, #20
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr
 8003aa8:	e000ed00 	.word	0xe000ed00

08003aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ab0:	4b04      	ldr	r3, [pc, #16]	; (8003ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	0a1b      	lsrs	r3, r3, #8
 8003ab6:	f003 0307 	and.w	r3, r3, #7
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	e000ed00 	.word	0xe000ed00

08003ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	db0b      	blt.n	8003af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ada:	79fb      	ldrb	r3, [r7, #7]
 8003adc:	f003 021f 	and.w	r2, r3, #31
 8003ae0:	4907      	ldr	r1, [pc, #28]	; (8003b00 <__NVIC_EnableIRQ+0x38>)
 8003ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ae6:	095b      	lsrs	r3, r3, #5
 8003ae8:	2001      	movs	r0, #1
 8003aea:	fa00 f202 	lsl.w	r2, r0, r2
 8003aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	e000e100 	.word	0xe000e100

08003b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	6039      	str	r1, [r7, #0]
 8003b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	db0a      	blt.n	8003b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	490c      	ldr	r1, [pc, #48]	; (8003b50 <__NVIC_SetPriority+0x4c>)
 8003b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	440b      	add	r3, r1
 8003b28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b2c:	e00a      	b.n	8003b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4908      	ldr	r1, [pc, #32]	; (8003b54 <__NVIC_SetPriority+0x50>)
 8003b34:	79fb      	ldrb	r3, [r7, #7]
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	3b04      	subs	r3, #4
 8003b3c:	0112      	lsls	r2, r2, #4
 8003b3e:	b2d2      	uxtb	r2, r2
 8003b40:	440b      	add	r3, r1
 8003b42:	761a      	strb	r2, [r3, #24]
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e100 	.word	0xe000e100
 8003b54:	e000ed00 	.word	0xe000ed00

08003b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f1c3 0307 	rsb	r3, r3, #7
 8003b72:	2b04      	cmp	r3, #4
 8003b74:	bf28      	it	cs
 8003b76:	2304      	movcs	r3, #4
 8003b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d902      	bls.n	8003b88 <NVIC_EncodePriority+0x30>
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3b03      	subs	r3, #3
 8003b86:	e000      	b.n	8003b8a <NVIC_EncodePriority+0x32>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	43da      	mvns	r2, r3
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	401a      	ands	r2, r3
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8003baa:	43d9      	mvns	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb0:	4313      	orrs	r3, r2
         );
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3724      	adds	r7, #36	; 0x24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff4c 	bl	8003a64 <__NVIC_SetPriorityGrouping>
}
 8003bcc:	bf00      	nop
 8003bce:	3708      	adds	r7, #8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003be6:	f7ff ff61 	bl	8003aac <__NVIC_GetPriorityGrouping>
 8003bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68b9      	ldr	r1, [r7, #8]
 8003bf0:	6978      	ldr	r0, [r7, #20]
 8003bf2:	f7ff ffb1 	bl	8003b58 <NVIC_EncodePriority>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff ff80 	bl	8003b04 <__NVIC_SetPriority>
}
 8003c04:	bf00      	nop
 8003c06:	3718      	adds	r7, #24
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7ff ff54 	bl	8003ac8 <__NVIC_EnableIRQ>
}
 8003c20:	bf00      	nop
 8003c22:	3708      	adds	r7, #8
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003c34:	f7ff fbf4 	bl	8003420 <HAL_GetTick>
 8003c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e099      	b.n	8003d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c64:	e00f      	b.n	8003c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c66:	f7ff fbdb 	bl	8003420 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b05      	cmp	r3, #5
 8003c72:	d908      	bls.n	8003c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e078      	b.n	8003d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d1e8      	bne.n	8003c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4b38      	ldr	r3, [pc, #224]	; (8003d80 <HAL_DMA_Init+0x158>)
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685a      	ldr	r2, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a1b      	ldr	r3, [r3, #32]
 8003cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	2b04      	cmp	r3, #4
 8003cde:	d107      	bne.n	8003cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	695b      	ldr	r3, [r3, #20]
 8003cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0307 	bic.w	r3, r3, #7
 8003d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d117      	bne.n	8003d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00e      	beq.n	8003d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f9e9 	bl	8004104 <DMA_CheckFifoParam>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d008      	beq.n	8003d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2240      	movs	r2, #64	; 0x40
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003d46:	2301      	movs	r3, #1
 8003d48:	e016      	b.n	8003d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f9a0 	bl	8004098 <DMA_CalcBaseAndBitshift>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d60:	223f      	movs	r2, #63	; 0x3f
 8003d62:	409a      	lsls	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	f010803f 	.word	0xf010803f

08003d84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b086      	sub	sp, #24
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d90:	4b92      	ldr	r3, [pc, #584]	; (8003fdc <HAL_DMA_IRQHandler+0x258>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a92      	ldr	r2, [pc, #584]	; (8003fe0 <HAL_DMA_IRQHandler+0x25c>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0a9b      	lsrs	r3, r3, #10
 8003d9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003da2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dae:	2208      	movs	r2, #8
 8003db0:	409a      	lsls	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d01a      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0204 	bic.w	r2, r2, #4
 8003dd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ddc:	2208      	movs	r2, #8
 8003dde:	409a      	lsls	r2, r3
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003df4:	2201      	movs	r2, #1
 8003df6:	409a      	lsls	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d012      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e12:	2201      	movs	r2, #1
 8003e14:	409a      	lsls	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e1e:	f043 0202 	orr.w	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e2a:	2204      	movs	r2, #4
 8003e2c:	409a      	lsls	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4013      	ands	r3, r2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d012      	beq.n	8003e5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00b      	beq.n	8003e5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e48:	2204      	movs	r2, #4
 8003e4a:	409a      	lsls	r2, r3
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e54:	f043 0204 	orr.w	r2, r3, #4
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e60:	2210      	movs	r2, #16
 8003e62:	409a      	lsls	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d043      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0308 	and.w	r3, r3, #8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d03c      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e7e:	2210      	movs	r2, #16
 8003e80:	409a      	lsls	r2, r3
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d018      	beq.n	8003ec6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d108      	bne.n	8003eb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d024      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4798      	blx	r3
 8003eb2:	e01f      	b.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d01b      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	4798      	blx	r3
 8003ec4:	e016      	b.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d107      	bne.n	8003ee4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 0208 	bic.w	r2, r2, #8
 8003ee2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d003      	beq.n	8003ef4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ef8:	2220      	movs	r2, #32
 8003efa:	409a      	lsls	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4013      	ands	r3, r2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 808e 	beq.w	8004022 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8086 	beq.w	8004022 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b05      	cmp	r3, #5
 8003f2c:	d136      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f022 0216 	bic.w	r2, r2, #22
 8003f3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d103      	bne.n	8003f5e <HAL_DMA_IRQHandler+0x1da>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d007      	beq.n	8003f6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0208 	bic.w	r2, r2, #8
 8003f6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	223f      	movs	r2, #63	; 0x3f
 8003f74:	409a      	lsls	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d07d      	beq.n	800408e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	4798      	blx	r3
        }
        return;
 8003f9a:	e078      	b.n	800408e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d01c      	beq.n	8003fe4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d108      	bne.n	8003fca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d030      	beq.n	8004022 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	4798      	blx	r3
 8003fc8:	e02b      	b.n	8004022 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d027      	beq.n	8004022 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	4798      	blx	r3
 8003fda:	e022      	b.n	8004022 <HAL_DMA_IRQHandler+0x29e>
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10f      	bne.n	8004012 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f022 0210 	bic.w	r2, r2, #16
 8004000:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004026:	2b00      	cmp	r3, #0
 8004028:	d032      	beq.n	8004090 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d022      	beq.n	800407c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2205      	movs	r2, #5
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f022 0201 	bic.w	r2, r2, #1
 800404c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3301      	adds	r3, #1
 8004052:	60bb      	str	r3, [r7, #8]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	429a      	cmp	r2, r3
 8004058:	d307      	bcc.n	800406a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1f2      	bne.n	800404e <HAL_DMA_IRQHandler+0x2ca>
 8004068:	e000      	b.n	800406c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800406a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	4798      	blx	r3
 800408c:	e000      	b.n	8004090 <HAL_DMA_IRQHandler+0x30c>
        return;
 800408e:	bf00      	nop
    }
  }
}
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop

08004098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	3b10      	subs	r3, #16
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <DMA_CalcBaseAndBitshift+0x64>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	091b      	lsrs	r3, r3, #4
 80040b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040b2:	4a13      	ldr	r2, [pc, #76]	; (8004100 <DMA_CalcBaseAndBitshift+0x68>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	4413      	add	r3, r2
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	461a      	mov	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2b03      	cmp	r3, #3
 80040c4:	d909      	bls.n	80040da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	1d1a      	adds	r2, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	659a      	str	r2, [r3, #88]	; 0x58
 80040d8:	e007      	b.n	80040ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80040e2:	f023 0303 	bic.w	r3, r3, #3
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3714      	adds	r7, #20
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	aaaaaaab 	.word	0xaaaaaaab
 8004100:	0800d184 	.word	0x0800d184

08004104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004104:	b480      	push	{r7}
 8004106:	b085      	sub	sp, #20
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	699b      	ldr	r3, [r3, #24]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d11f      	bne.n	800415e <DMA_CheckFifoParam+0x5a>
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b03      	cmp	r3, #3
 8004122:	d856      	bhi.n	80041d2 <DMA_CheckFifoParam+0xce>
 8004124:	a201      	add	r2, pc, #4	; (adr r2, 800412c <DMA_CheckFifoParam+0x28>)
 8004126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800412a:	bf00      	nop
 800412c:	0800413d 	.word	0x0800413d
 8004130:	0800414f 	.word	0x0800414f
 8004134:	0800413d 	.word	0x0800413d
 8004138:	080041d3 	.word	0x080041d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d046      	beq.n	80041d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800414c:	e043      	b.n	80041d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004156:	d140      	bne.n	80041da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800415c:	e03d      	b.n	80041da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004166:	d121      	bne.n	80041ac <DMA_CheckFifoParam+0xa8>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d837      	bhi.n	80041de <DMA_CheckFifoParam+0xda>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <DMA_CheckFifoParam+0x70>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	08004185 	.word	0x08004185
 8004178:	0800418b 	.word	0x0800418b
 800417c:	08004185 	.word	0x08004185
 8004180:	0800419d 	.word	0x0800419d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	73fb      	strb	r3, [r7, #15]
      break;
 8004188:	e030      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800418e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d025      	beq.n	80041e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800419a:	e022      	b.n	80041e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80041a4:	d11f      	bne.n	80041e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041aa:	e01c      	b.n	80041e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d903      	bls.n	80041ba <DMA_CheckFifoParam+0xb6>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d003      	beq.n	80041c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041b8:	e018      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      break;
 80041be:	e015      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00e      	beq.n	80041ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
      break;
 80041d0:	e00b      	b.n	80041ea <DMA_CheckFifoParam+0xe6>
      break;
 80041d2:	bf00      	nop
 80041d4:	e00a      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041d6:	bf00      	nop
 80041d8:	e008      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041da:	bf00      	nop
 80041dc:	e006      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041de:	bf00      	nop
 80041e0:	e004      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041e2:	bf00      	nop
 80041e4:	e002      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;   
 80041e6:	bf00      	nop
 80041e8:	e000      	b.n	80041ec <DMA_CheckFifoParam+0xe8>
      break;
 80041ea:	bf00      	nop
    }
  } 
  
  return status; 
 80041ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3714      	adds	r7, #20
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop

080041fc <HAL_EXTI_GetPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval 1 if interrupt is pending else 0.
  */
uint32_t HAL_EXTI_GetPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b087      	sub	sp, #28
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  linepos = (hexti->Line & EXTI_PIN_MASK);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	617b      	str	r3, [r7, #20]
  maskline = (1uL << linepos);
 8004210:	2201      	movs	r2, #1
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	613b      	str	r3, [r7, #16]

  /* return 1 if bit is set else 0 */
  regval = ((EXTI->PR & maskline) >> linepos);
 800421a:	4b07      	ldr	r3, [pc, #28]	; (8004238 <HAL_EXTI_GetPending+0x3c>)
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	401a      	ands	r2, r3
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	fa22 f303 	lsr.w	r3, r2, r3
 8004228:	60fb      	str	r3, [r7, #12]
  return regval;
 800422a:	68fb      	ldr	r3, [r7, #12]
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr
 8004238:	40013c00 	.word	0x40013c00

0800423c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800424a:	2300      	movs	r3, #0
 800424c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800424e:	2300      	movs	r3, #0
 8004250:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e159      	b.n	800450c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004258:	2201      	movs	r2, #1
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4013      	ands	r3, r2
 800426a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	429a      	cmp	r2, r3
 8004272:	f040 8148 	bne.w	8004506 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	2b01      	cmp	r3, #1
 8004280:	d005      	beq.n	800428e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800428a:	2b02      	cmp	r3, #2
 800428c:	d130      	bne.n	80042f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	2203      	movs	r2, #3
 800429a:	fa02 f303 	lsl.w	r3, r2, r3
 800429e:	43db      	mvns	r3, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	4013      	ands	r3, r2
 80042a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68da      	ldr	r2, [r3, #12]
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	fa02 f303 	lsl.w	r3, r2, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042c4:	2201      	movs	r2, #1
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	fa02 f303 	lsl.w	r3, r2, r3
 80042cc:	43db      	mvns	r3, r3
 80042ce:	69ba      	ldr	r2, [r7, #24]
 80042d0:	4013      	ands	r3, r2
 80042d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	f003 0201 	and.w	r2, r3, #1
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	fa02 f303 	lsl.w	r3, r2, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b03      	cmp	r3, #3
 80042fa:	d017      	beq.n	800432c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	2203      	movs	r2, #3
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	4013      	ands	r3, r2
 8004312:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4313      	orrs	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f003 0303 	and.w	r3, r3, #3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d123      	bne.n	8004380 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	08da      	lsrs	r2, r3, #3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	3208      	adds	r2, #8
 8004340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004344:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	220f      	movs	r2, #15
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	43db      	mvns	r3, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	fa02 f303 	lsl.w	r3, r2, r3
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4313      	orrs	r3, r2
 8004370:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	08da      	lsrs	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3208      	adds	r2, #8
 800437a:	69b9      	ldr	r1, [r7, #24]
 800437c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	005b      	lsls	r3, r3, #1
 800438a:	2203      	movs	r2, #3
 800438c:	fa02 f303 	lsl.w	r3, r2, r3
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f003 0203 	and.w	r2, r3, #3
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	69ba      	ldr	r2, [r7, #24]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 80a2 	beq.w	8004506 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c2:	2300      	movs	r3, #0
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	4b57      	ldr	r3, [pc, #348]	; (8004524 <HAL_GPIO_Init+0x2e8>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	4a56      	ldr	r2, [pc, #344]	; (8004524 <HAL_GPIO_Init+0x2e8>)
 80043cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043d0:	6453      	str	r3, [r2, #68]	; 0x44
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <HAL_GPIO_Init+0x2e8>)
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043de:	4a52      	ldr	r2, [pc, #328]	; (8004528 <HAL_GPIO_Init+0x2ec>)
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	089b      	lsrs	r3, r3, #2
 80043e4:	3302      	adds	r3, #2
 80043e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	220f      	movs	r2, #15
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43db      	mvns	r3, r3
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	4013      	ands	r3, r2
 8004400:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a49      	ldr	r2, [pc, #292]	; (800452c <HAL_GPIO_Init+0x2f0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d019      	beq.n	800443e <HAL_GPIO_Init+0x202>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a48      	ldr	r2, [pc, #288]	; (8004530 <HAL_GPIO_Init+0x2f4>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d013      	beq.n	800443a <HAL_GPIO_Init+0x1fe>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a47      	ldr	r2, [pc, #284]	; (8004534 <HAL_GPIO_Init+0x2f8>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d00d      	beq.n	8004436 <HAL_GPIO_Init+0x1fa>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a46      	ldr	r2, [pc, #280]	; (8004538 <HAL_GPIO_Init+0x2fc>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d007      	beq.n	8004432 <HAL_GPIO_Init+0x1f6>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a45      	ldr	r2, [pc, #276]	; (800453c <HAL_GPIO_Init+0x300>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d101      	bne.n	800442e <HAL_GPIO_Init+0x1f2>
 800442a:	2304      	movs	r3, #4
 800442c:	e008      	b.n	8004440 <HAL_GPIO_Init+0x204>
 800442e:	2307      	movs	r3, #7
 8004430:	e006      	b.n	8004440 <HAL_GPIO_Init+0x204>
 8004432:	2303      	movs	r3, #3
 8004434:	e004      	b.n	8004440 <HAL_GPIO_Init+0x204>
 8004436:	2302      	movs	r3, #2
 8004438:	e002      	b.n	8004440 <HAL_GPIO_Init+0x204>
 800443a:	2301      	movs	r3, #1
 800443c:	e000      	b.n	8004440 <HAL_GPIO_Init+0x204>
 800443e:	2300      	movs	r3, #0
 8004440:	69fa      	ldr	r2, [r7, #28]
 8004442:	f002 0203 	and.w	r2, r2, #3
 8004446:	0092      	lsls	r2, r2, #2
 8004448:	4093      	lsls	r3, r2
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004450:	4935      	ldr	r1, [pc, #212]	; (8004528 <HAL_GPIO_Init+0x2ec>)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	089b      	lsrs	r3, r3, #2
 8004456:	3302      	adds	r3, #2
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800445e:	4b38      	ldr	r3, [pc, #224]	; (8004540 <HAL_GPIO_Init+0x304>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	43db      	mvns	r3, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4013      	ands	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d003      	beq.n	8004482 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800447a:	69ba      	ldr	r2, [r7, #24]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004482:	4a2f      	ldr	r2, [pc, #188]	; (8004540 <HAL_GPIO_Init+0x304>)
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004488:	4b2d      	ldr	r3, [pc, #180]	; (8004540 <HAL_GPIO_Init+0x304>)
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044ac:	4a24      	ldr	r2, [pc, #144]	; (8004540 <HAL_GPIO_Init+0x304>)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80044b2:	4b23      	ldr	r3, [pc, #140]	; (8004540 <HAL_GPIO_Init+0x304>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	43db      	mvns	r3, r3
 80044bc:	69ba      	ldr	r2, [r7, #24]
 80044be:	4013      	ands	r3, r2
 80044c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80044d6:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <HAL_GPIO_Init+0x304>)
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80044dc:	4b18      	ldr	r3, [pc, #96]	; (8004540 <HAL_GPIO_Init+0x304>)
 80044de:	68db      	ldr	r3, [r3, #12]
 80044e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	43db      	mvns	r3, r3
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4013      	ands	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004500:	4a0f      	ldr	r2, [pc, #60]	; (8004540 <HAL_GPIO_Init+0x304>)
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	2b0f      	cmp	r3, #15
 8004510:	f67f aea2 	bls.w	8004258 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3724      	adds	r7, #36	; 0x24
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	40023800 	.word	0x40023800
 8004528:	40013800 	.word	0x40013800
 800452c:	40020000 	.word	0x40020000
 8004530:	40020400 	.word	0x40020400
 8004534:	40020800 	.word	0x40020800
 8004538:	40020c00 	.word	0x40020c00
 800453c:	40021000 	.word	0x40021000
 8004540:	40013c00 	.word	0x40013c00

08004544 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	460b      	mov	r3, r1
 800454e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691a      	ldr	r2, [r3, #16]
 8004554:	887b      	ldrh	r3, [r7, #2]
 8004556:	4013      	ands	r3, r2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800455c:	2301      	movs	r3, #1
 800455e:	73fb      	strb	r3, [r7, #15]
 8004560:	e001      	b.n	8004566 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004562:	2300      	movs	r3, #0
 8004564:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004566:	7bfb      	ldrb	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	460b      	mov	r3, r1
 800457e:	807b      	strh	r3, [r7, #2]
 8004580:	4613      	mov	r3, r2
 8004582:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004584:	787b      	ldrb	r3, [r7, #1]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800458a:	887a      	ldrh	r2, [r7, #2]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004590:	e003      	b.n	800459a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004592:	887b      	ldrh	r3, [r7, #2]
 8004594:	041a      	lsls	r2, r3, #16
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	619a      	str	r2, [r3, #24]
}
 800459a:	bf00      	nop
 800459c:	370c      	adds	r7, #12
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
	...

080045a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80045b2:	4b08      	ldr	r3, [pc, #32]	; (80045d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b4:	695a      	ldr	r2, [r3, #20]
 80045b6:	88fb      	ldrh	r3, [r7, #6]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d006      	beq.n	80045cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045be:	4a05      	ldr	r2, [pc, #20]	; (80045d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045c4:	88fb      	ldrh	r3, [r7, #6]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f000 f806 	bl	80045d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80045cc:	bf00      	nop
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40013c00 	.word	0x40013c00

080045d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
	...

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e264      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460e:	4ba3      	ldr	r3, [pc, #652]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4ba0      	ldr	r3, [pc, #640]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b9d      	ldr	r3, [pc, #628]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b99      	ldr	r3, [pc, #612]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e23f      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b91      	ldr	r3, [pc, #580]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a90      	ldr	r2, [pc, #576]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b8b      	ldr	r3, [pc, #556]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a8a      	ldr	r2, [pc, #552]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a87      	ldr	r2, [pc, #540]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a83      	ldr	r2, [pc, #524]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b81      	ldr	r3, [pc, #516]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a80      	ldr	r2, [pc, #512]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7fe feba 	bl	8003420 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7fe feb6 	bl	8003420 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e204      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7fe fea6 	bl	8003420 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7fe fea2 	bl	8003420 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1f0      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b6c      	ldr	r3, [pc, #432]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b62      	ldr	r3, [pc, #392]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11c      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b5f      	ldr	r3, [pc, #380]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d116      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1c4      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b56      	ldr	r3, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4952      	ldr	r1, [pc, #328]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	e03a      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCC_OscConfig+0x2b0>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fe fe5b 	bl	8003420 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476e:	f7fe fe57 	bl	8003420 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e1a5      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	4b46      	ldr	r3, [pc, #280]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4940      	ldr	r1, [pc, #256]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <HAL_RCC_OscConfig+0x2b0>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe fe3a 	bl	8003420 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fe fe36 	bl	8003420 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e184      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d030      	beq.n	800483c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_RCC_OscConfig+0x2b4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe fe1a 	bl	8003420 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fe fe16 	bl	8003420 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e164      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	4b26      	ldr	r3, [pc, #152]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
 800480e:	e015      	b.n	800483c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x2b4>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fe fe03 	bl	8003420 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481e:	f7fe fdff 	bl	8003420 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e14d      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80a0 	beq.w	800498a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d121      	bne.n	80048ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fe fdc5 	bl	8003420 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e011      	b.n	80048be <HAL_RCC_OscConfig+0x2ce>
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800
 80048a0:	42470000 	.word	0x42470000
 80048a4:	42470e80 	.word	0x42470e80
 80048a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ac:	f7fe fdb8 	bl	8003420 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e106      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <HAL_RCC_OscConfig+0x4e4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
 80048d2:	4b81      	ldr	r3, [pc, #516]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a80      	ldr	r2, [pc, #512]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x32a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x312>
 80048e8:	4b7b      	ldr	r3, [pc, #492]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a7a      	ldr	r2, [pc, #488]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	4b78      	ldr	r3, [pc, #480]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a77      	ldr	r2, [pc, #476]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x32a>
 8004902:	4b75      	ldr	r3, [pc, #468]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a74      	ldr	r2, [pc, #464]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6713      	str	r3, [r2, #112]	; 0x70
 800490e:	4b72      	ldr	r3, [pc, #456]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a71      	ldr	r2, [pc, #452]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fe fd7d 	bl	8003420 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe fd79 	bl	8003420 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0c5      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b65      	ldr	r3, [pc, #404]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x33a>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe fd67 	bl	8003420 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fe fd63 	bl	8003420 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0af      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	4b5a      	ldr	r3, [pc, #360]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b56      	ldr	r3, [pc, #344]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a55      	ldr	r2, [pc, #340]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 809b 	beq.w	8004aca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004994:	4b50      	ldr	r3, [pc, #320]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d05c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d141      	bne.n	8004a2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b4c      	ldr	r3, [pc, #304]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fe fd37 	bl	8003420 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe fd33 	bl	8003420 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e081      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c8:	4b43      	ldr	r3, [pc, #268]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	019b      	lsls	r3, r3, #6
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	4937      	ldr	r1, [pc, #220]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fe:	4b37      	ldr	r3, [pc, #220]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fe fd0c 	bl	8003420 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe fd08 	bl	8003420 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e056      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	4b2e      	ldr	r3, [pc, #184]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x41c>
 8004a2a:	e04e      	b.n	8004aca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2c:	4b2b      	ldr	r3, [pc, #172]	; (8004adc <HAL_RCC_OscConfig+0x4ec>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fe fcf5 	bl	8003420 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fe fcf1 	bl	8003420 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e03f      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4c:	4b22      	ldr	r3, [pc, #136]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x44a>
 8004a58:	e037      	b.n	8004aca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e032      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a66:	4b1c      	ldr	r3, [pc, #112]	; (8004ad8 <HAL_RCC_OscConfig+0x4e8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d028      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d121      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d11a      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a9c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d111      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e000      	b.n	8004acc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40007000 	.word	0x40007000
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	42470060 	.word	0x42470060

08004ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0cc      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b68      	ldr	r3, [pc, #416]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d90c      	bls.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b65      	ldr	r3, [pc, #404]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b0a:	4b63      	ldr	r3, [pc, #396]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0307 	and.w	r3, r3, #7
 8004b12:	683a      	ldr	r2, [r7, #0]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d001      	beq.n	8004b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b8      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d020      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	4a58      	ldr	r2, [pc, #352]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0308 	and.w	r3, r3, #8
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d005      	beq.n	8004b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b4c:	4b53      	ldr	r3, [pc, #332]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	4a52      	ldr	r2, [pc, #328]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b58:	4b50      	ldr	r3, [pc, #320]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	494d      	ldr	r1, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d044      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d119      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e07f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d003      	beq.n	8004b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b9a:	2b03      	cmp	r3, #3
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b3f      	ldr	r3, [pc, #252]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e06f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b3b      	ldr	r3, [pc, #236]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e067      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bbe:	4b37      	ldr	r3, [pc, #220]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4934      	ldr	r1, [pc, #208]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd0:	f7fe fc26 	bl	8003420 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fe fc22 	bl	8003420 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e04f      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	4b2b      	ldr	r3, [pc, #172]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf0:	689b      	ldr	r3, [r3, #8]
 8004bf2:	f003 020c 	and.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1eb      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d20c      	bcs.n	8004c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b22      	ldr	r3, [pc, #136]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <HAL_RCC_ClockConfig+0x1b8>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d001      	beq.n	8004c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e032      	b.n	8004c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d008      	beq.n	8004c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c34:	4b19      	ldr	r3, [pc, #100]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	4916      	ldr	r1, [pc, #88]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d009      	beq.n	8004c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	689b      	ldr	r3, [r3, #8]
 8004c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	00db      	lsls	r3, r3, #3
 8004c60:	490e      	ldr	r1, [pc, #56]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	4313      	orrs	r3, r2
 8004c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c66:	f000 f821 	bl	8004cac <HAL_RCC_GetSysClockFreq>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_RCC_ClockConfig+0x1bc>)
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	490a      	ldr	r1, [pc, #40]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c78:	5ccb      	ldrb	r3, [r1, r3]
 8004c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7e:	4a09      	ldr	r2, [pc, #36]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c82:	4b09      	ldr	r3, [pc, #36]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fc ffa4 	bl	8001bd4 <HAL_InitTick>

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3710      	adds	r7, #16
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	40023c00 	.word	0x40023c00
 8004c9c:	40023800 	.word	0x40023800
 8004ca0:	0800d16c 	.word	0x0800d16c
 8004ca4:	20000000 	.word	0x20000000
 8004ca8:	20000060 	.word	0x20000060

08004cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cb0:	b084      	sub	sp, #16
 8004cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cc4:	4b67      	ldr	r3, [pc, #412]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	f003 030c 	and.w	r3, r3, #12
 8004ccc:	2b08      	cmp	r3, #8
 8004cce:	d00d      	beq.n	8004cec <HAL_RCC_GetSysClockFreq+0x40>
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	f200 80bd 	bhi.w	8004e50 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d002      	beq.n	8004ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d003      	beq.n	8004ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004cde:	e0b7      	b.n	8004e50 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ce0:	4b61      	ldr	r3, [pc, #388]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ce2:	60bb      	str	r3, [r7, #8]
       break;
 8004ce4:	e0b7      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ce6:	4b60      	ldr	r3, [pc, #384]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004ce8:	60bb      	str	r3, [r7, #8]
      break;
 8004cea:	e0b4      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cec:	4b5d      	ldr	r3, [pc, #372]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cf6:	4b5b      	ldr	r3, [pc, #364]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d04d      	beq.n	8004d9e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d02:	4b58      	ldr	r3, [pc, #352]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	099b      	lsrs	r3, r3, #6
 8004d08:	461a      	mov	r2, r3
 8004d0a:	f04f 0300 	mov.w	r3, #0
 8004d0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d12:	f04f 0100 	mov.w	r1, #0
 8004d16:	ea02 0800 	and.w	r8, r2, r0
 8004d1a:	ea03 0901 	and.w	r9, r3, r1
 8004d1e:	4640      	mov	r0, r8
 8004d20:	4649      	mov	r1, r9
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	014b      	lsls	r3, r1, #5
 8004d2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d30:	0142      	lsls	r2, r0, #5
 8004d32:	4610      	mov	r0, r2
 8004d34:	4619      	mov	r1, r3
 8004d36:	ebb0 0008 	subs.w	r0, r0, r8
 8004d3a:	eb61 0109 	sbc.w	r1, r1, r9
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	018b      	lsls	r3, r1, #6
 8004d48:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d4c:	0182      	lsls	r2, r0, #6
 8004d4e:	1a12      	subs	r2, r2, r0
 8004d50:	eb63 0301 	sbc.w	r3, r3, r1
 8004d54:	f04f 0000 	mov.w	r0, #0
 8004d58:	f04f 0100 	mov.w	r1, #0
 8004d5c:	00d9      	lsls	r1, r3, #3
 8004d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d62:	00d0      	lsls	r0, r2, #3
 8004d64:	4602      	mov	r2, r0
 8004d66:	460b      	mov	r3, r1
 8004d68:	eb12 0208 	adds.w	r2, r2, r8
 8004d6c:	eb43 0309 	adc.w	r3, r3, r9
 8004d70:	f04f 0000 	mov.w	r0, #0
 8004d74:	f04f 0100 	mov.w	r1, #0
 8004d78:	0299      	lsls	r1, r3, #10
 8004d7a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004d7e:	0290      	lsls	r0, r2, #10
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	4610      	mov	r0, r2
 8004d86:	4619      	mov	r1, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	f7fb ff62 	bl	8000c58 <__aeabi_uldivmod>
 8004d94:	4602      	mov	r2, r0
 8004d96:	460b      	mov	r3, r1
 8004d98:	4613      	mov	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e04a      	b.n	8004e34 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9e:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	461a      	mov	r2, r3
 8004da6:	f04f 0300 	mov.w	r3, #0
 8004daa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004dae:	f04f 0100 	mov.w	r1, #0
 8004db2:	ea02 0400 	and.w	r4, r2, r0
 8004db6:	ea03 0501 	and.w	r5, r3, r1
 8004dba:	4620      	mov	r0, r4
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f04f 0200 	mov.w	r2, #0
 8004dc2:	f04f 0300 	mov.w	r3, #0
 8004dc6:	014b      	lsls	r3, r1, #5
 8004dc8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dcc:	0142      	lsls	r2, r0, #5
 8004dce:	4610      	mov	r0, r2
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	1b00      	subs	r0, r0, r4
 8004dd4:	eb61 0105 	sbc.w	r1, r1, r5
 8004dd8:	f04f 0200 	mov.w	r2, #0
 8004ddc:	f04f 0300 	mov.w	r3, #0
 8004de0:	018b      	lsls	r3, r1, #6
 8004de2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004de6:	0182      	lsls	r2, r0, #6
 8004de8:	1a12      	subs	r2, r2, r0
 8004dea:	eb63 0301 	sbc.w	r3, r3, r1
 8004dee:	f04f 0000 	mov.w	r0, #0
 8004df2:	f04f 0100 	mov.w	r1, #0
 8004df6:	00d9      	lsls	r1, r3, #3
 8004df8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dfc:	00d0      	lsls	r0, r2, #3
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	1912      	adds	r2, r2, r4
 8004e04:	eb45 0303 	adc.w	r3, r5, r3
 8004e08:	f04f 0000 	mov.w	r0, #0
 8004e0c:	f04f 0100 	mov.w	r1, #0
 8004e10:	0299      	lsls	r1, r3, #10
 8004e12:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004e16:	0290      	lsls	r0, r2, #10
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	4610      	mov	r0, r2
 8004e1e:	4619      	mov	r1, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	461a      	mov	r2, r3
 8004e24:	f04f 0300 	mov.w	r3, #0
 8004e28:	f7fb ff16 	bl	8000c58 <__aeabi_uldivmod>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	460b      	mov	r3, r1
 8004e30:	4613      	mov	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	60bb      	str	r3, [r7, #8]
      break;
 8004e4e:	e002      	b.n	8004e56 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004e52:	60bb      	str	r3, [r7, #8]
      break;
 8004e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e56:	68bb      	ldr	r3, [r7, #8]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004e62:	bf00      	nop
 8004e64:	40023800 	.word	0x40023800
 8004e68:	00f42400 	.word	0x00f42400

08004e6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e70:	4b03      	ldr	r3, [pc, #12]	; (8004e80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e72:	681b      	ldr	r3, [r3, #0]
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	20000000 	.word	0x20000000

08004e84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e88:	f7ff fff0 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	4b05      	ldr	r3, [pc, #20]	; (8004ea4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	0a9b      	lsrs	r3, r3, #10
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	4903      	ldr	r1, [pc, #12]	; (8004ea8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e9a:	5ccb      	ldrb	r3, [r1, r3]
 8004e9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	0800d17c 	.word	0x0800d17c

08004eac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004eb0:	f7ff ffdc 	bl	8004e6c <HAL_RCC_GetHCLKFreq>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	0b5b      	lsrs	r3, r3, #13
 8004ebc:	f003 0307 	and.w	r3, r3, #7
 8004ec0:	4903      	ldr	r1, [pc, #12]	; (8004ed0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ec2:	5ccb      	ldrb	r3, [r1, r3]
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	40023800 	.word	0x40023800
 8004ed0:	0800d17c 	.word	0x0800d17c

08004ed4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	220f      	movs	r2, #15
 8004ee2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004ee4:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0203 	and.w	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004f08:	4b09      	ldr	r3, [pc, #36]	; (8004f30 <HAL_RCC_GetClockConfig+0x5c>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	08db      	lsrs	r3, r3, #3
 8004f0e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004f16:	4b07      	ldr	r3, [pc, #28]	; (8004f34 <HAL_RCC_GetClockConfig+0x60>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0207 	and.w	r2, r3, #7
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40023800 	.word	0x40023800
 8004f34:	40023c00 	.word	0x40023c00

08004f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e07b      	b.n	8005042 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d108      	bne.n	8004f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f5a:	d009      	beq.n	8004f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	61da      	str	r2, [r3, #28]
 8004f62:	e005      	b.n	8004f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d106      	bne.n	8004f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f7fc fca8 	bl	80018e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2202      	movs	r2, #2
 8004f94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	f003 0302 	and.w	r3, r3, #2
 8004fcc:	431a      	orrs	r2, r3
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	431a      	orrs	r2, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	699b      	ldr	r3, [r3, #24]
 8004fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
 8004fe6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fea:	431a      	orrs	r2, r3
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ff4:	ea42 0103 	orr.w	r1, r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	430a      	orrs	r2, r1
 8005006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	0c1b      	lsrs	r3, r3, #16
 800500e:	f003 0104 	and.w	r1, r3, #4
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005016:	f003 0210 	and.w	r2, r3, #16
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005030:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3708      	adds	r7, #8
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b088      	sub	sp, #32
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	603b      	str	r3, [r7, #0]
 8005056:	4613      	mov	r3, r2
 8005058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005064:	2b01      	cmp	r3, #1
 8005066:	d101      	bne.n	800506c <HAL_SPI_Transmit+0x22>
 8005068:	2302      	movs	r3, #2
 800506a:	e126      	b.n	80052ba <HAL_SPI_Transmit+0x270>
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005074:	f7fe f9d4 	bl	8003420 <HAL_GetTick>
 8005078:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d002      	beq.n	8005090 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800508a:	2302      	movs	r3, #2
 800508c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800508e:	e10b      	b.n	80052a8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_SPI_Transmit+0x52>
 8005096:	88fb      	ldrh	r3, [r7, #6]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80050a0:	e102      	b.n	80052a8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2203      	movs	r2, #3
 80050a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	88fa      	ldrh	r2, [r7, #6]
 80050ba:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	88fa      	ldrh	r2, [r7, #6]
 80050c0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e8:	d10f      	bne.n	800510a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005108:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005114:	2b40      	cmp	r3, #64	; 0x40
 8005116:	d007      	beq.n	8005128 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005130:	d14b      	bne.n	80051ca <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d002      	beq.n	8005140 <HAL_SPI_Transmit+0xf6>
 800513a:	8afb      	ldrh	r3, [r7, #22]
 800513c:	2b01      	cmp	r3, #1
 800513e:	d13e      	bne.n	80051be <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	881a      	ldrh	r2, [r3, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	1c9a      	adds	r2, r3, #2
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515a:	b29b      	uxth	r3, r3
 800515c:	3b01      	subs	r3, #1
 800515e:	b29a      	uxth	r2, r3
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005164:	e02b      	b.n	80051be <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b02      	cmp	r3, #2
 8005172:	d112      	bne.n	800519a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	881a      	ldrh	r2, [r3, #0]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005184:	1c9a      	adds	r2, r3, #2
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	86da      	strh	r2, [r3, #54]	; 0x36
 8005198:	e011      	b.n	80051be <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800519a:	f7fe f941 	bl	8003420 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d803      	bhi.n	80051b2 <HAL_SPI_Transmit+0x168>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b0:	d102      	bne.n	80051b8 <HAL_SPI_Transmit+0x16e>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d102      	bne.n	80051be <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051bc:	e074      	b.n	80052a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1ce      	bne.n	8005166 <HAL_SPI_Transmit+0x11c>
 80051c8:	e04c      	b.n	8005264 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d002      	beq.n	80051d8 <HAL_SPI_Transmit+0x18e>
 80051d2:	8afb      	ldrh	r3, [r7, #22]
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d140      	bne.n	800525a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	330c      	adds	r3, #12
 80051e2:	7812      	ldrb	r2, [r2, #0]
 80051e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	3b01      	subs	r3, #1
 80051f8:	b29a      	uxth	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051fe:	e02c      	b.n	800525a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b02      	cmp	r3, #2
 800520c:	d113      	bne.n	8005236 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	7812      	ldrb	r2, [r2, #0]
 800521a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005220:	1c5a      	adds	r2, r3, #1
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800522a:	b29b      	uxth	r3, r3
 800522c:	3b01      	subs	r3, #1
 800522e:	b29a      	uxth	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	86da      	strh	r2, [r3, #54]	; 0x36
 8005234:	e011      	b.n	800525a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005236:	f7fe f8f3 	bl	8003420 <HAL_GetTick>
 800523a:	4602      	mov	r2, r0
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	1ad3      	subs	r3, r2, r3
 8005240:	683a      	ldr	r2, [r7, #0]
 8005242:	429a      	cmp	r2, r3
 8005244:	d803      	bhi.n	800524e <HAL_SPI_Transmit+0x204>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524c:	d102      	bne.n	8005254 <HAL_SPI_Transmit+0x20a>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d102      	bne.n	800525a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005258:	e026      	b.n	80052a8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800525e:	b29b      	uxth	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1cd      	bne.n	8005200 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fbcb 	bl	8005a04 <SPI_EndRxTxTransaction>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2220      	movs	r2, #32
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005282:	2300      	movs	r3, #0
 8005284:	613b      	str	r3, [r7, #16]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800529c:	2b00      	cmp	r3, #0
 800529e:	d002      	beq.n	80052a6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	77fb      	strb	r3, [r7, #31]
 80052a4:	e000      	b.n	80052a8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80052a6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3720      	adds	r7, #32
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}

080052c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b088      	sub	sp, #32
 80052c6:	af02      	add	r7, sp, #8
 80052c8:	60f8      	str	r0, [r7, #12]
 80052ca:	60b9      	str	r1, [r7, #8]
 80052cc:	603b      	str	r3, [r7, #0]
 80052ce:	4613      	mov	r3, r2
 80052d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052de:	d112      	bne.n	8005306 <HAL_SPI_Receive+0x44>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d10e      	bne.n	8005306 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2204      	movs	r2, #4
 80052ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052f0:	88fa      	ldrh	r2, [r7, #6]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	68b9      	ldr	r1, [r7, #8]
 80052fc:	68f8      	ldr	r0, [r7, #12]
 80052fe:	f000 f8f1 	bl	80054e4 <HAL_SPI_TransmitReceive>
 8005302:	4603      	mov	r3, r0
 8005304:	e0ea      	b.n	80054dc <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_SPI_Receive+0x52>
 8005310:	2302      	movs	r3, #2
 8005312:	e0e3      	b.n	80054dc <HAL_SPI_Receive+0x21a>
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800531c:	f7fe f880 	bl	8003420 <HAL_GetTick>
 8005320:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005328:	b2db      	uxtb	r3, r3
 800532a:	2b01      	cmp	r3, #1
 800532c:	d002      	beq.n	8005334 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800532e:	2302      	movs	r3, #2
 8005330:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005332:	e0ca      	b.n	80054ca <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_SPI_Receive+0x7e>
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d102      	bne.n	8005346 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005344:	e0c1      	b.n	80054ca <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2204      	movs	r2, #4
 800534a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	88fa      	ldrh	r2, [r7, #6]
 800535e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	2200      	movs	r2, #0
 8005370:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800538c:	d10f      	bne.n	80053ae <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800539c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80053ac:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053b8:	2b40      	cmp	r3, #64	; 0x40
 80053ba:	d007      	beq.n	80053cc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ca:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d162      	bne.n	800549a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053d4:	e02e      	b.n	8005434 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0301 	and.w	r3, r3, #1
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d115      	bne.n	8005410 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f103 020c 	add.w	r2, r3, #12
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f0:	7812      	ldrb	r2, [r2, #0]
 80053f2:	b2d2      	uxtb	r2, r2
 80053f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053fa:	1c5a      	adds	r2, r3, #1
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800540e:	e011      	b.n	8005434 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005410:	f7fe f806 	bl	8003420 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d803      	bhi.n	8005428 <HAL_SPI_Receive+0x166>
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005426:	d102      	bne.n	800542e <HAL_SPI_Receive+0x16c>
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d102      	bne.n	8005434 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005432:	e04a      	b.n	80054ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005438:	b29b      	uxth	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1cb      	bne.n	80053d6 <HAL_SPI_Receive+0x114>
 800543e:	e031      	b.n	80054a4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b01      	cmp	r3, #1
 800544c:	d113      	bne.n	8005476 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68da      	ldr	r2, [r3, #12]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005458:	b292      	uxth	r2, r2
 800545a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005460:	1c9a      	adds	r2, r3, #2
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800546a:	b29b      	uxth	r3, r3
 800546c:	3b01      	subs	r3, #1
 800546e:	b29a      	uxth	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005474:	e011      	b.n	800549a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005476:	f7fd ffd3 	bl	8003420 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	683a      	ldr	r2, [r7, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d803      	bhi.n	800548e <HAL_SPI_Receive+0x1cc>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548c:	d102      	bne.n	8005494 <HAL_SPI_Receive+0x1d2>
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d102      	bne.n	800549a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005494:	2303      	movs	r3, #3
 8005496:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005498:	e017      	b.n	80054ca <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1cd      	bne.n	8005440 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f000 fa45 	bl	8005938 <SPI_EndRxTransaction>
 80054ae:	4603      	mov	r3, r0
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d002      	beq.n	80054c8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	75fb      	strb	r3, [r7, #23]
 80054c6:	e000      	b.n	80054ca <HAL_SPI_Receive+0x208>
  }

error :
 80054c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054da:	7dfb      	ldrb	r3, [r7, #23]
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3718      	adds	r7, #24
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	; 0x30
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
 80054f0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054f2:	2301      	movs	r3, #1
 80054f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054f6:	2300      	movs	r3, #0
 80054f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005502:	2b01      	cmp	r3, #1
 8005504:	d101      	bne.n	800550a <HAL_SPI_TransmitReceive+0x26>
 8005506:	2302      	movs	r3, #2
 8005508:	e18a      	b.n	8005820 <HAL_SPI_TransmitReceive+0x33c>
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2201      	movs	r2, #1
 800550e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005512:	f7fd ff85 	bl	8003420 <HAL_GetTick>
 8005516:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005528:	887b      	ldrh	r3, [r7, #2]
 800552a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800552c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005530:	2b01      	cmp	r3, #1
 8005532:	d00f      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x70>
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800553a:	d107      	bne.n	800554c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <HAL_SPI_TransmitReceive+0x68>
 8005544:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005548:	2b04      	cmp	r3, #4
 800554a:	d003      	beq.n	8005554 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800554c:	2302      	movs	r3, #2
 800554e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005552:	e15b      	b.n	800580c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d005      	beq.n	8005566 <HAL_SPI_TransmitReceive+0x82>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d002      	beq.n	8005566 <HAL_SPI_TransmitReceive+0x82>
 8005560:	887b      	ldrh	r3, [r7, #2]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800556c:	e14e      	b.n	800580c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005574:	b2db      	uxtb	r3, r3
 8005576:	2b04      	cmp	r3, #4
 8005578:	d003      	beq.n	8005582 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2205      	movs	r2, #5
 800557e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2200      	movs	r2, #0
 8005586:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	887a      	ldrh	r2, [r7, #2]
 8005592:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	887a      	ldrh	r2, [r7, #2]
 80055a4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	887a      	ldrh	r2, [r7, #2]
 80055aa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d007      	beq.n	80055d6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055de:	d178      	bne.n	80056d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d002      	beq.n	80055ee <HAL_SPI_TransmitReceive+0x10a>
 80055e8:	8b7b      	ldrh	r3, [r7, #26]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d166      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055f2:	881a      	ldrh	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055fe:	1c9a      	adds	r2, r3, #2
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005608:	b29b      	uxth	r3, r3
 800560a:	3b01      	subs	r3, #1
 800560c:	b29a      	uxth	r2, r3
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005612:	e053      	b.n	80056bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f003 0302 	and.w	r3, r3, #2
 800561e:	2b02      	cmp	r3, #2
 8005620:	d11b      	bne.n	800565a <HAL_SPI_TransmitReceive+0x176>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005626:	b29b      	uxth	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d016      	beq.n	800565a <HAL_SPI_TransmitReceive+0x176>
 800562c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562e:	2b01      	cmp	r3, #1
 8005630:	d113      	bne.n	800565a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005636:	881a      	ldrh	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	1c9a      	adds	r2, r3, #2
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564c:	b29b      	uxth	r3, r3
 800564e:	3b01      	subs	r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f003 0301 	and.w	r3, r3, #1
 8005664:	2b01      	cmp	r3, #1
 8005666:	d119      	bne.n	800569c <HAL_SPI_TransmitReceive+0x1b8>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800566c:	b29b      	uxth	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d014      	beq.n	800569c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68da      	ldr	r2, [r3, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567c:	b292      	uxth	r2, r2
 800567e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	3b01      	subs	r3, #1
 8005692:	b29a      	uxth	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005698:	2301      	movs	r3, #1
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800569c:	f7fd fec0 	bl	8003420 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d807      	bhi.n	80056bc <HAL_SPI_TransmitReceive+0x1d8>
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b2:	d003      	beq.n	80056bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056ba:	e0a7      	b.n	800580c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1a6      	bne.n	8005614 <HAL_SPI_TransmitReceive+0x130>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1a1      	bne.n	8005614 <HAL_SPI_TransmitReceive+0x130>
 80056d0:	e07c      	b.n	80057cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d002      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x1fc>
 80056da:	8b7b      	ldrh	r3, [r7, #26]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d16b      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	330c      	adds	r3, #12
 80056ea:	7812      	ldrb	r2, [r2, #0]
 80056ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f2:	1c5a      	adds	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	3b01      	subs	r3, #1
 8005700:	b29a      	uxth	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005706:	e057      	b.n	80057b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b02      	cmp	r3, #2
 8005714:	d11c      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x26c>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571a:	b29b      	uxth	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d017      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x26c>
 8005720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d114      	bne.n	8005750 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	330c      	adds	r3, #12
 8005730:	7812      	ldrb	r2, [r2, #0]
 8005732:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	1c5a      	adds	r2, r3, #1
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005742:	b29b      	uxth	r3, r3
 8005744:	3b01      	subs	r3, #1
 8005746:	b29a      	uxth	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b01      	cmp	r3, #1
 800575c:	d119      	bne.n	8005792 <HAL_SPI_TransmitReceive+0x2ae>
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005762:	b29b      	uxth	r3, r3
 8005764:	2b00      	cmp	r3, #0
 8005766:	d014      	beq.n	8005792 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800578e:	2301      	movs	r3, #1
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005792:	f7fd fe45 	bl	8003420 <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800579e:	429a      	cmp	r2, r3
 80057a0:	d803      	bhi.n	80057aa <HAL_SPI_TransmitReceive+0x2c6>
 80057a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d102      	bne.n	80057b0 <HAL_SPI_TransmitReceive+0x2cc>
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d103      	bne.n	80057b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057b6:	e029      	b.n	800580c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1a2      	bne.n	8005708 <HAL_SPI_TransmitReceive+0x224>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d19d      	bne.n	8005708 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 f917 	bl	8005a04 <SPI_EndRxTxTransaction>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80057e8:	e010      	b.n	800580c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10b      	bne.n	800580a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057f2:	2300      	movs	r3, #0
 80057f4:	617b      	str	r3, [r7, #20]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68db      	ldr	r3, [r3, #12]
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	e000      	b.n	800580c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800580a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2200      	movs	r2, #0
 8005818:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800581c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005820:	4618      	mov	r0, r3
 8005822:	3730      	adds	r7, #48	; 0x30
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	603b      	str	r3, [r7, #0]
 8005834:	4613      	mov	r3, r2
 8005836:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005838:	f7fd fdf2 	bl	8003420 <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	4413      	add	r3, r2
 8005846:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005848:	f7fd fdea 	bl	8003420 <HAL_GetTick>
 800584c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800584e:	4b39      	ldr	r3, [pc, #228]	; (8005934 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	015b      	lsls	r3, r3, #5
 8005854:	0d1b      	lsrs	r3, r3, #20
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585e:	e054      	b.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005866:	d050      	beq.n	800590a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005868:	f7fd fdda 	bl	8003420 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	69fa      	ldr	r2, [r7, #28]
 8005874:	429a      	cmp	r2, r3
 8005876:	d902      	bls.n	800587e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d13d      	bne.n	80058fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800588c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005896:	d111      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a0:	d004      	beq.n	80058ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058aa:	d107      	bne.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058c4:	d10f      	bne.n	80058e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058d4:	601a      	str	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e017      	b.n	800592a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	3b01      	subs	r3, #1
 8005908:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4013      	ands	r3, r2
 8005914:	68ba      	ldr	r2, [r7, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	bf0c      	ite	eq
 800591a:	2301      	moveq	r3, #1
 800591c:	2300      	movne	r3, #0
 800591e:	b2db      	uxtb	r3, r3
 8005920:	461a      	mov	r2, r3
 8005922:	79fb      	ldrb	r3, [r7, #7]
 8005924:	429a      	cmp	r2, r3
 8005926:	d19b      	bne.n	8005860 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	20000000 	.word	0x20000000

08005938 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800594c:	d111      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005956:	d004      	beq.n	8005962 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005960:	d107      	bne.n	8005972 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005970:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800597a:	d12a      	bne.n	80059d2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005984:	d012      	beq.n	80059ac <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2200      	movs	r2, #0
 800598e:	2180      	movs	r1, #128	; 0x80
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f7ff ff49 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d02d      	beq.n	80059f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a0:	f043 0220 	orr.w	r2, r3, #32
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e026      	b.n	80059fa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2200      	movs	r2, #0
 80059b4:	2101      	movs	r1, #1
 80059b6:	68f8      	ldr	r0, [r7, #12]
 80059b8:	f7ff ff36 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d01a      	beq.n	80059f8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	f043 0220 	orr.w	r2, r3, #32
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e013      	b.n	80059fa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	2200      	movs	r2, #0
 80059da:	2101      	movs	r1, #1
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff23 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ec:	f043 0220 	orr.w	r2, r3, #32
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e000      	b.n	80059fa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
	...

08005a04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b088      	sub	sp, #32
 8005a08:	af02      	add	r7, sp, #8
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a10:	4b1b      	ldr	r3, [pc, #108]	; (8005a80 <SPI_EndRxTxTransaction+0x7c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a1b      	ldr	r2, [pc, #108]	; (8005a84 <SPI_EndRxTxTransaction+0x80>)
 8005a16:	fba2 2303 	umull	r2, r3, r2, r3
 8005a1a:	0d5b      	lsrs	r3, r3, #21
 8005a1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a2e:	d112      	bne.n	8005a56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	2180      	movs	r1, #128	; 0x80
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f7ff fef4 	bl	8005828 <SPI_WaitFlagStateUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d016      	beq.n	8005a74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a4a:	f043 0220 	orr.w	r2, r3, #32
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e00f      	b.n	8005a76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3b01      	subs	r3, #1
 8005a60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d0f2      	beq.n	8005a56 <SPI_EndRxTxTransaction+0x52>
 8005a70:	e000      	b.n	8005a74 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a72:	bf00      	nop
  }

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	20000000 	.word	0x20000000
 8005a84:	165e9f81 	.word	0x165e9f81

08005a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d101      	bne.n	8005a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a96:	2301      	movs	r3, #1
 8005a98:	e041      	b.n	8005b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d106      	bne.n	8005ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fb ffb4 	bl	8001a1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	4619      	mov	r1, r3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	f000 fc4c 	bl	8006364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3708      	adds	r7, #8
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
	...

08005b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d001      	beq.n	8005b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e044      	b.n	8005bca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2202      	movs	r2, #2
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f042 0201 	orr.w	r2, r2, #1
 8005b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1e      	ldr	r2, [pc, #120]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xb0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a1a      	ldr	r2, [pc, #104]	; (8005bdc <HAL_TIM_Base_Start_IT+0xb4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a19      	ldr	r2, [pc, #100]	; (8005be0 <HAL_TIM_Base_Start_IT+0xb8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a17      	ldr	r2, [pc, #92]	; (8005be4 <HAL_TIM_Base_Start_IT+0xbc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0x6c>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a16      	ldr	r2, [pc, #88]	; (8005be8 <HAL_TIM_Base_Start_IT+0xc0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d111      	bne.n	8005bb8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2b06      	cmp	r3, #6
 8005ba4:	d010      	beq.n	8005bc8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681a      	ldr	r2, [r3, #0]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f042 0201 	orr.w	r2, r2, #1
 8005bb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bb6:	e007      	b.n	8005bc8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681a      	ldr	r2, [r3, #0]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f042 0201 	orr.w	r2, r2, #1
 8005bc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bc8:	2300      	movs	r3, #0
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	40010000 	.word	0x40010000
 8005bdc:	40000400 	.word	0x40000400
 8005be0:	40000800 	.word	0x40000800
 8005be4:	40000c00 	.word	0x40000c00
 8005be8:	40014000 	.word	0x40014000

08005bec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b082      	sub	sp, #8
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d101      	bne.n	8005bfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e041      	b.n	8005c82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d106      	bne.n	8005c18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f000 f839 	bl	8005c8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681a      	ldr	r2, [r3, #0]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	3304      	adds	r3, #4
 8005c28:	4619      	mov	r1, r3
 8005c2a:	4610      	mov	r0, r2
 8005c2c:	f000 fb9a 	bl	8006364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3708      	adds	r7, #8
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}

08005c8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d109      	bne.n	8005cc4 <HAL_TIM_PWM_Start+0x24>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	e022      	b.n	8005d0a <HAL_TIM_PWM_Start+0x6a>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d109      	bne.n	8005cde <HAL_TIM_PWM_Start+0x3e>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	bf14      	ite	ne
 8005cd6:	2301      	movne	r3, #1
 8005cd8:	2300      	moveq	r3, #0
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	e015      	b.n	8005d0a <HAL_TIM_PWM_Start+0x6a>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d109      	bne.n	8005cf8 <HAL_TIM_PWM_Start+0x58>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	2b01      	cmp	r3, #1
 8005cee:	bf14      	ite	ne
 8005cf0:	2301      	movne	r3, #1
 8005cf2:	2300      	moveq	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	e008      	b.n	8005d0a <HAL_TIM_PWM_Start+0x6a>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e068      	b.n	8005de4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_PWM_Start+0x82>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d20:	e013      	b.n	8005d4a <HAL_TIM_PWM_Start+0xaa>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b04      	cmp	r3, #4
 8005d26:	d104      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x92>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d30:	e00b      	b.n	8005d4a <HAL_TIM_PWM_Start+0xaa>
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2b08      	cmp	r3, #8
 8005d36:	d104      	bne.n	8005d42 <HAL_TIM_PWM_Start+0xa2>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d40:	e003      	b.n	8005d4a <HAL_TIM_PWM_Start+0xaa>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2202      	movs	r2, #2
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fdac 	bl	80068b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a23      	ldr	r2, [pc, #140]	; (8005dec <HAL_TIM_PWM_Start+0x14c>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d107      	bne.n	8005d72 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a1d      	ldr	r2, [pc, #116]	; (8005dec <HAL_TIM_PWM_Start+0x14c>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d018      	beq.n	8005dae <HAL_TIM_PWM_Start+0x10e>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d84:	d013      	beq.n	8005dae <HAL_TIM_PWM_Start+0x10e>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a19      	ldr	r2, [pc, #100]	; (8005df0 <HAL_TIM_PWM_Start+0x150>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d00e      	beq.n	8005dae <HAL_TIM_PWM_Start+0x10e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a17      	ldr	r2, [pc, #92]	; (8005df4 <HAL_TIM_PWM_Start+0x154>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d009      	beq.n	8005dae <HAL_TIM_PWM_Start+0x10e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_TIM_PWM_Start+0x158>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d004      	beq.n	8005dae <HAL_TIM_PWM_Start+0x10e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <HAL_TIM_PWM_Start+0x15c>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d111      	bne.n	8005dd2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2b06      	cmp	r3, #6
 8005dbe:	d010      	beq.n	8005de2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd0:	e007      	b.n	8005de2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f042 0201 	orr.w	r2, r2, #1
 8005de0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40014000 	.word	0x40014000

08005e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0202 	mvn.w	r2, #2
 8005e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fa70 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fa62 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa73 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0204 	mvn.w	r2, #4
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fa46 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa38 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fa49 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0208 	mvn.w	r2, #8
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa1c 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa0e 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa1f 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f9f2 	bl	8006328 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 f9e4 	bl	8006314 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 f9f5 	bl	800633c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d10e      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0201 	mvn.w	r2, #1
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb fbf0 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d10e      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b80      	cmp	r3, #128	; 0x80
 8005f9e:	d107      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fd70 	bl	8006a90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fba:	2b40      	cmp	r3, #64	; 0x40
 8005fbc:	d10e      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fc8:	2b40      	cmp	r3, #64	; 0x40
 8005fca:	d107      	bne.n	8005fdc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f9ba 	bl	8006350 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	f003 0320 	and.w	r3, r3, #32
 8005fe6:	2b20      	cmp	r3, #32
 8005fe8:	d10e      	bne.n	8006008 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0320 	and.w	r3, r3, #32
 8005ff4:	2b20      	cmp	r3, #32
 8005ff6:	d107      	bne.n	8006008 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f06f 0220 	mvn.w	r2, #32
 8006000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fd3a 	bl	8006a7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006008:	bf00      	nop
 800600a:	3708      	adds	r7, #8
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d101      	bne.n	800602a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006026:	2302      	movs	r3, #2
 8006028:	e0ac      	b.n	8006184 <HAL_TIM_PWM_ConfigChannel+0x174>
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b0c      	cmp	r3, #12
 8006036:	f200 809f 	bhi.w	8006178 <HAL_TIM_PWM_ConfigChannel+0x168>
 800603a:	a201      	add	r2, pc, #4	; (adr r2, 8006040 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	08006075 	.word	0x08006075
 8006044:	08006179 	.word	0x08006179
 8006048:	08006179 	.word	0x08006179
 800604c:	08006179 	.word	0x08006179
 8006050:	080060b5 	.word	0x080060b5
 8006054:	08006179 	.word	0x08006179
 8006058:	08006179 	.word	0x08006179
 800605c:	08006179 	.word	0x08006179
 8006060:	080060f7 	.word	0x080060f7
 8006064:	08006179 	.word	0x08006179
 8006068:	08006179 	.word	0x08006179
 800606c:	08006179 	.word	0x08006179
 8006070:	08006137 	.word	0x08006137
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68b9      	ldr	r1, [r7, #8]
 800607a:	4618      	mov	r0, r3
 800607c:	f000 f9f2 	bl	8006464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0208 	orr.w	r2, r2, #8
 800608e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0204 	bic.w	r2, r2, #4
 800609e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6999      	ldr	r1, [r3, #24]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	691a      	ldr	r2, [r3, #16]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	430a      	orrs	r2, r1
 80060b0:	619a      	str	r2, [r3, #24]
      break;
 80060b2:	e062      	b.n	800617a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fa38 	bl	8006530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	021a      	lsls	r2, r3, #8
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	430a      	orrs	r2, r1
 80060f2:	619a      	str	r2, [r3, #24]
      break;
 80060f4:	e041      	b.n	800617a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	68b9      	ldr	r1, [r7, #8]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f000 fa83 	bl	8006608 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	69da      	ldr	r2, [r3, #28]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f042 0208 	orr.w	r2, r2, #8
 8006110:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f022 0204 	bic.w	r2, r2, #4
 8006120:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69d9      	ldr	r1, [r3, #28]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	691a      	ldr	r2, [r3, #16]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	61da      	str	r2, [r3, #28]
      break;
 8006134:	e021      	b.n	800617a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 facd 	bl	80066dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69d9      	ldr	r1, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691b      	ldr	r3, [r3, #16]
 800616c:	021a      	lsls	r2, r3, #8
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	61da      	str	r2, [r3, #28]
      break;
 8006176:	e000      	b.n	800617a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800619c:	2b01      	cmp	r3, #1
 800619e:	d101      	bne.n	80061a4 <HAL_TIM_ConfigClockSource+0x18>
 80061a0:	2302      	movs	r3, #2
 80061a2:	e0b3      	b.n	800630c <HAL_TIM_ConfigClockSource+0x180>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2202      	movs	r2, #2
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061dc:	d03e      	beq.n	800625c <HAL_TIM_ConfigClockSource+0xd0>
 80061de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061e2:	f200 8087 	bhi.w	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 80061e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ea:	f000 8085 	beq.w	80062f8 <HAL_TIM_ConfigClockSource+0x16c>
 80061ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061f2:	d87f      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 80061f4:	2b70      	cmp	r3, #112	; 0x70
 80061f6:	d01a      	beq.n	800622e <HAL_TIM_ConfigClockSource+0xa2>
 80061f8:	2b70      	cmp	r3, #112	; 0x70
 80061fa:	d87b      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 80061fc:	2b60      	cmp	r3, #96	; 0x60
 80061fe:	d050      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x116>
 8006200:	2b60      	cmp	r3, #96	; 0x60
 8006202:	d877      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 8006204:	2b50      	cmp	r3, #80	; 0x50
 8006206:	d03c      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0xf6>
 8006208:	2b50      	cmp	r3, #80	; 0x50
 800620a:	d873      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 800620c:	2b40      	cmp	r3, #64	; 0x40
 800620e:	d058      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x136>
 8006210:	2b40      	cmp	r3, #64	; 0x40
 8006212:	d86f      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 8006214:	2b30      	cmp	r3, #48	; 0x30
 8006216:	d064      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x156>
 8006218:	2b30      	cmp	r3, #48	; 0x30
 800621a:	d86b      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 800621c:	2b20      	cmp	r3, #32
 800621e:	d060      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x156>
 8006220:	2b20      	cmp	r3, #32
 8006222:	d867      	bhi.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d05c      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x156>
 8006228:	2b10      	cmp	r3, #16
 800622a:	d05a      	beq.n	80062e2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800622c:	e062      	b.n	80062f4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	6899      	ldr	r1, [r3, #8]
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	685a      	ldr	r2, [r3, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	f000 fb17 	bl	8006870 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006250:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	609a      	str	r2, [r3, #8]
      break;
 800625a:	e04e      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6818      	ldr	r0, [r3, #0]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	6899      	ldr	r1, [r3, #8]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f000 fb00 	bl	8006870 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800627e:	609a      	str	r2, [r3, #8]
      break;
 8006280:	e03b      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6859      	ldr	r1, [r3, #4]
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	461a      	mov	r2, r3
 8006290:	f000 fa74 	bl	800677c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2150      	movs	r1, #80	; 0x50
 800629a:	4618      	mov	r0, r3
 800629c:	f000 facd 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 80062a0:	e02b      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	461a      	mov	r2, r3
 80062b0:	f000 fa93 	bl	80067da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2160      	movs	r1, #96	; 0x60
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 fabd 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 80062c0:	e01b      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6818      	ldr	r0, [r3, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	6859      	ldr	r1, [r3, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f000 fa54 	bl	800677c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	2140      	movs	r1, #64	; 0x40
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 faad 	bl	800683a <TIM_ITRx_SetConfig>
      break;
 80062e0:	e00b      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f000 faa4 	bl	800683a <TIM_ITRx_SetConfig>
        break;
 80062f2:	e002      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062f4:	bf00      	nop
 80062f6:	e000      	b.n	80062fa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062f8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2201      	movs	r2, #1
 80062fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631c:	bf00      	nop
 800631e:	370c      	adds	r7, #12
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006328:	b480      	push	{r7}
 800632a:	b083      	sub	sp, #12
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800633c:	b480      	push	{r7}
 800633e:	b083      	sub	sp, #12
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006358:	bf00      	nop
 800635a:	370c      	adds	r7, #12
 800635c:	46bd      	mov	sp, r7
 800635e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006362:	4770      	bx	lr

08006364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a34      	ldr	r2, [pc, #208]	; (8006448 <TIM_Base_SetConfig+0xe4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d00f      	beq.n	800639c <TIM_Base_SetConfig+0x38>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006382:	d00b      	beq.n	800639c <TIM_Base_SetConfig+0x38>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a31      	ldr	r2, [pc, #196]	; (800644c <TIM_Base_SetConfig+0xe8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d007      	beq.n	800639c <TIM_Base_SetConfig+0x38>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a30      	ldr	r2, [pc, #192]	; (8006450 <TIM_Base_SetConfig+0xec>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d003      	beq.n	800639c <TIM_Base_SetConfig+0x38>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a2f      	ldr	r2, [pc, #188]	; (8006454 <TIM_Base_SetConfig+0xf0>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d108      	bne.n	80063ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a25      	ldr	r2, [pc, #148]	; (8006448 <TIM_Base_SetConfig+0xe4>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d01b      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063bc:	d017      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a22      	ldr	r2, [pc, #136]	; (800644c <TIM_Base_SetConfig+0xe8>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a21      	ldr	r2, [pc, #132]	; (8006450 <TIM_Base_SetConfig+0xec>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d00f      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a20      	ldr	r2, [pc, #128]	; (8006454 <TIM_Base_SetConfig+0xf0>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00b      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a1f      	ldr	r2, [pc, #124]	; (8006458 <TIM_Base_SetConfig+0xf4>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d007      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1e      	ldr	r2, [pc, #120]	; (800645c <TIM_Base_SetConfig+0xf8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d003      	beq.n	80063ee <TIM_Base_SetConfig+0x8a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a1d      	ldr	r2, [pc, #116]	; (8006460 <TIM_Base_SetConfig+0xfc>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d108      	bne.n	8006400 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	68fa      	ldr	r2, [r7, #12]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	4313      	orrs	r3, r2
 800640c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	689a      	ldr	r2, [r3, #8]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a08      	ldr	r2, [pc, #32]	; (8006448 <TIM_Base_SetConfig+0xe4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d103      	bne.n	8006434 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	691a      	ldr	r2, [r3, #16]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2201      	movs	r2, #1
 8006438:	615a      	str	r2, [r3, #20]
}
 800643a:	bf00      	nop
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	40014000 	.word	0x40014000
 800645c:	40014400 	.word	0x40014400
 8006460:	40014800 	.word	0x40014800

08006464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0201 	bic.w	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0302 	bic.w	r3, r3, #2
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a1c      	ldr	r2, [pc, #112]	; (800652c <TIM_OC1_SetConfig+0xc8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10c      	bne.n	80064da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 0308 	bic.w	r3, r3, #8
 80064c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	697a      	ldr	r2, [r7, #20]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	f023 0304 	bic.w	r3, r3, #4
 80064d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a13      	ldr	r2, [pc, #76]	; (800652c <TIM_OC1_SetConfig+0xc8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d111      	bne.n	8006506 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	699b      	ldr	r3, [r3, #24]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	685a      	ldr	r2, [r3, #4]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	621a      	str	r2, [r3, #32]
}
 8006520:	bf00      	nop
 8006522:	371c      	adds	r7, #28
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	40010000 	.word	0x40010000

08006530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006530:	b480      	push	{r7}
 8006532:	b087      	sub	sp, #28
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f023 0210 	bic.w	r2, r3, #16
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800655e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f023 0320 	bic.w	r3, r3, #32
 800657a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a1e      	ldr	r2, [pc, #120]	; (8006604 <TIM_OC2_SetConfig+0xd4>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d10d      	bne.n	80065ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	68db      	ldr	r3, [r3, #12]
 800659c:	011b      	lsls	r3, r3, #4
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a15      	ldr	r2, [pc, #84]	; (8006604 <TIM_OC2_SetConfig+0xd4>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d113      	bne.n	80065dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	40010000 	.word	0x40010000

08006608 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006608:	b480      	push	{r7}
 800660a:	b087      	sub	sp, #28
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6a1b      	ldr	r3, [r3, #32]
 8006616:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a1b      	ldr	r3, [r3, #32]
 8006622:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f023 0303 	bic.w	r3, r3, #3
 800663e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4313      	orrs	r3, r2
 8006648:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006650:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	4313      	orrs	r3, r2
 800665c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4a1d      	ldr	r2, [pc, #116]	; (80066d8 <TIM_OC3_SetConfig+0xd0>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d10d      	bne.n	8006682 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800666c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	021b      	lsls	r3, r3, #8
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <TIM_OC3_SetConfig+0xd0>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d113      	bne.n	80066b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	693a      	ldr	r2, [r7, #16]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40010000 	.word	0x40010000

080066dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066dc:	b480      	push	{r7}
 80066de:	b087      	sub	sp, #28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800670a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006712:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	021b      	lsls	r3, r3, #8
 800671a:	68fa      	ldr	r2, [r7, #12]
 800671c:	4313      	orrs	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006726:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	689b      	ldr	r3, [r3, #8]
 800672c:	031b      	lsls	r3, r3, #12
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	4a10      	ldr	r2, [pc, #64]	; (8006778 <TIM_OC4_SetConfig+0x9c>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d109      	bne.n	8006750 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	019b      	lsls	r3, r3, #6
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	4313      	orrs	r3, r2
 800674e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	697a      	ldr	r2, [r7, #20]
 8006754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	68fa      	ldr	r2, [r7, #12]
 800675a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	621a      	str	r2, [r3, #32]
}
 800676a:	bf00      	nop
 800676c:	371c      	adds	r7, #28
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000

0800677c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800677c:	b480      	push	{r7}
 800677e:	b087      	sub	sp, #28
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1b      	ldr	r3, [r3, #32]
 8006792:	f023 0201 	bic.w	r2, r3, #1
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	011b      	lsls	r3, r3, #4
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f023 030a 	bic.w	r3, r3, #10
 80067b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	621a      	str	r2, [r3, #32]
}
 80067ce:	bf00      	nop
 80067d0:	371c      	adds	r7, #28
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr

080067da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067da:	b480      	push	{r7}
 80067dc:	b087      	sub	sp, #28
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	6a1b      	ldr	r3, [r3, #32]
 80067ea:	f023 0210 	bic.w	r2, r3, #16
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	031b      	lsls	r3, r3, #12
 800680a:	697a      	ldr	r2, [r7, #20]
 800680c:	4313      	orrs	r3, r2
 800680e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	621a      	str	r2, [r3, #32]
}
 800682e:	bf00      	nop
 8006830:	371c      	adds	r7, #28
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr

0800683a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800683a:	b480      	push	{r7}
 800683c:	b085      	sub	sp, #20
 800683e:	af00      	add	r7, sp, #0
 8006840:	6078      	str	r0, [r7, #4]
 8006842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4313      	orrs	r3, r2
 8006858:	f043 0307 	orr.w	r3, r3, #7
 800685c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	609a      	str	r2, [r3, #8]
}
 8006864:	bf00      	nop
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800688a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	021a      	lsls	r2, r3, #8
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	431a      	orrs	r2, r3
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4313      	orrs	r3, r2
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	4313      	orrs	r3, r2
 800689c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	609a      	str	r2, [r3, #8]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	f003 031f 	and.w	r3, r3, #31
 80068c2:	2201      	movs	r2, #1
 80068c4:	fa02 f303 	lsl.w	r3, r2, r3
 80068c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a1a      	ldr	r2, [r3, #32]
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	43db      	mvns	r3, r3
 80068d2:	401a      	ands	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1a      	ldr	r2, [r3, #32]
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	f003 031f 	and.w	r3, r3, #31
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	fa01 f303 	lsl.w	r3, r1, r3
 80068e8:	431a      	orrs	r2, r3
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	621a      	str	r2, [r3, #32]
}
 80068ee:	bf00      	nop
 80068f0:	371c      	adds	r7, #28
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
	...

080068fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006910:	2302      	movs	r3, #2
 8006912:	e050      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a16      	ldr	r2, [pc, #88]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a13      	ldr	r2, [pc, #76]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40014000 	.word	0x40014000

080069d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d101      	bne.n	80069f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80069f0:	2302      	movs	r3, #2
 80069f2:	e03d      	b.n	8006a70 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	695b      	ldr	r3, [r3, #20]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	69db      	ldr	r3, [r3, #28]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a6e:	2300      	movs	r3, #0
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	3714      	adds	r7, #20
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d101      	bne.n	8006ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03f      	b.n	8006b36 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d106      	bne.n	8006ad0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7fb f83a 	bl	8001b44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2224      	movs	r2, #36	; 0x24
 8006ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68da      	ldr	r2, [r3, #12]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ae6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f905 	bl	8006cf8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691a      	ldr	r2, [r3, #16]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006afc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	695a      	ldr	r2, [r3, #20]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68da      	ldr	r2, [r3, #12]
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2220      	movs	r2, #32
 8006b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b08a      	sub	sp, #40	; 0x28
 8006b42:	af02      	add	r7, sp, #8
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	603b      	str	r3, [r7, #0]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d17c      	bne.n	8006c58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <HAL_UART_Transmit+0x2c>
 8006b64:	88fb      	ldrh	r3, [r7, #6]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e075      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <HAL_UART_Transmit+0x3e>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e06e      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2221      	movs	r2, #33	; 0x21
 8006b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b92:	f7fc fc45 	bl	8003420 <HAL_GetTick>
 8006b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	88fa      	ldrh	r2, [r7, #6]
 8006b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bac:	d108      	bne.n	8006bc0 <HAL_UART_Transmit+0x82>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	61bb      	str	r3, [r7, #24]
 8006bbe:	e003      	b.n	8006bc8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006bd0:	e02a      	b.n	8006c28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	9300      	str	r3, [sp, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f840 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006be2:	4603      	mov	r3, r0
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d001      	beq.n	8006bec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e036      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10b      	bne.n	8006c0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	3302      	adds	r3, #2
 8006c06:	61bb      	str	r3, [r7, #24]
 8006c08:	e007      	b.n	8006c1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c0a:	69fb      	ldr	r3, [r7, #28]
 8006c0c:	781a      	ldrb	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	3301      	adds	r3, #1
 8006c18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1cf      	bne.n	8006bd2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2140      	movs	r1, #64	; 0x40
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f000 f810 	bl	8006c62 <UART_WaitOnFlagUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e006      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	e000      	b.n	8006c5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006c58:	2302      	movs	r3, #2
  }
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3720      	adds	r7, #32
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	60f8      	str	r0, [r7, #12]
 8006c6a:	60b9      	str	r1, [r7, #8]
 8006c6c:	603b      	str	r3, [r7, #0]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c72:	e02c      	b.n	8006cce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7a:	d028      	beq.n	8006cce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c82:	f7fc fbcd 	bl	8003420 <HAL_GetTick>
 8006c86:	4602      	mov	r2, r0
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d21d      	bcs.n	8006cce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	68da      	ldr	r2, [r3, #12]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ca0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	695a      	ldr	r2, [r3, #20]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f022 0201 	bic.w	r2, r2, #1
 8006cb0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2220      	movs	r2, #32
 8006cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	e00f      	b.n	8006cee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4013      	ands	r3, r2
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	bf0c      	ite	eq
 8006cde:	2301      	moveq	r3, #1
 8006ce0:	2300      	movne	r3, #0
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	79fb      	ldrb	r3, [r7, #7]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d0c3      	beq.n	8006c74 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
	...

08006cf8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfc:	b09f      	sub	sp, #124	; 0x7c
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d0e:	68d9      	ldr	r1, [r3, #12]
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	681a      	ldr	r2, [r3, #0]
 8006d14:	ea40 0301 	orr.w	r3, r0, r1
 8006d18:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d1c:	689a      	ldr	r2, [r3, #8]
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	431a      	orrs	r2, r3
 8006d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d26:	695b      	ldr	r3, [r3, #20]
 8006d28:	431a      	orrs	r2, r3
 8006d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d3c:	f021 010c 	bic.w	r1, r1, #12
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d46:	430b      	orrs	r3, r1
 8006d48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	695b      	ldr	r3, [r3, #20]
 8006d50:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d56:	6999      	ldr	r1, [r3, #24]
 8006d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5a:	681a      	ldr	r2, [r3, #0]
 8006d5c:	ea40 0301 	orr.w	r3, r0, r1
 8006d60:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4bc5      	ldr	r3, [pc, #788]	; (800707c <UART_SetConfig+0x384>)
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d004      	beq.n	8006d76 <UART_SetConfig+0x7e>
 8006d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6e:	681a      	ldr	r2, [r3, #0]
 8006d70:	4bc3      	ldr	r3, [pc, #780]	; (8007080 <UART_SetConfig+0x388>)
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d103      	bne.n	8006d7e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d76:	f7fe f899 	bl	8004eac <HAL_RCC_GetPCLK2Freq>
 8006d7a:	6778      	str	r0, [r7, #116]	; 0x74
 8006d7c:	e002      	b.n	8006d84 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7e:	f7fe f881 	bl	8004e84 <HAL_RCC_GetPCLK1Freq>
 8006d82:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d8c:	f040 80b6 	bne.w	8006efc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d92:	461c      	mov	r4, r3
 8006d94:	f04f 0500 	mov.w	r5, #0
 8006d98:	4622      	mov	r2, r4
 8006d9a:	462b      	mov	r3, r5
 8006d9c:	1891      	adds	r1, r2, r2
 8006d9e:	6439      	str	r1, [r7, #64]	; 0x40
 8006da0:	415b      	adcs	r3, r3
 8006da2:	647b      	str	r3, [r7, #68]	; 0x44
 8006da4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006da8:	1912      	adds	r2, r2, r4
 8006daa:	eb45 0303 	adc.w	r3, r5, r3
 8006dae:	f04f 0000 	mov.w	r0, #0
 8006db2:	f04f 0100 	mov.w	r1, #0
 8006db6:	00d9      	lsls	r1, r3, #3
 8006db8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dbc:	00d0      	lsls	r0, r2, #3
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	1911      	adds	r1, r2, r4
 8006dc4:	6639      	str	r1, [r7, #96]	; 0x60
 8006dc6:	416b      	adcs	r3, r5
 8006dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8006dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 0300 	mov.w	r3, #0
 8006dd4:	1891      	adds	r1, r2, r2
 8006dd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd8:	415b      	adcs	r3, r3
 8006dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006de0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006de4:	f7f9 ff38 	bl	8000c58 <__aeabi_uldivmod>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4ba5      	ldr	r3, [pc, #660]	; (8007084 <UART_SetConfig+0x38c>)
 8006dee:	fba3 2302 	umull	r2, r3, r3, r2
 8006df2:	095b      	lsrs	r3, r3, #5
 8006df4:	011e      	lsls	r6, r3, #4
 8006df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006df8:	461c      	mov	r4, r3
 8006dfa:	f04f 0500 	mov.w	r5, #0
 8006dfe:	4622      	mov	r2, r4
 8006e00:	462b      	mov	r3, r5
 8006e02:	1891      	adds	r1, r2, r2
 8006e04:	6339      	str	r1, [r7, #48]	; 0x30
 8006e06:	415b      	adcs	r3, r3
 8006e08:	637b      	str	r3, [r7, #52]	; 0x34
 8006e0a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e0e:	1912      	adds	r2, r2, r4
 8006e10:	eb45 0303 	adc.w	r3, r5, r3
 8006e14:	f04f 0000 	mov.w	r0, #0
 8006e18:	f04f 0100 	mov.w	r1, #0
 8006e1c:	00d9      	lsls	r1, r3, #3
 8006e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e22:	00d0      	lsls	r0, r2, #3
 8006e24:	4602      	mov	r2, r0
 8006e26:	460b      	mov	r3, r1
 8006e28:	1911      	adds	r1, r2, r4
 8006e2a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e2c:	416b      	adcs	r3, r5
 8006e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	461a      	mov	r2, r3
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	1891      	adds	r1, r2, r2
 8006e3c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e3e:	415b      	adcs	r3, r3
 8006e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e46:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e4a:	f7f9 ff05 	bl	8000c58 <__aeabi_uldivmod>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	460b      	mov	r3, r1
 8006e52:	4b8c      	ldr	r3, [pc, #560]	; (8007084 <UART_SetConfig+0x38c>)
 8006e54:	fba3 1302 	umull	r1, r3, r3, r2
 8006e58:	095b      	lsrs	r3, r3, #5
 8006e5a:	2164      	movs	r1, #100	; 0x64
 8006e5c:	fb01 f303 	mul.w	r3, r1, r3
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	3332      	adds	r3, #50	; 0x32
 8006e66:	4a87      	ldr	r2, [pc, #540]	; (8007084 <UART_SetConfig+0x38c>)
 8006e68:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6c:	095b      	lsrs	r3, r3, #5
 8006e6e:	005b      	lsls	r3, r3, #1
 8006e70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e74:	441e      	add	r6, r3
 8006e76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f04f 0100 	mov.w	r1, #0
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	1894      	adds	r4, r2, r2
 8006e84:	623c      	str	r4, [r7, #32]
 8006e86:	415b      	adcs	r3, r3
 8006e88:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e8e:	1812      	adds	r2, r2, r0
 8006e90:	eb41 0303 	adc.w	r3, r1, r3
 8006e94:	f04f 0400 	mov.w	r4, #0
 8006e98:	f04f 0500 	mov.w	r5, #0
 8006e9c:	00dd      	lsls	r5, r3, #3
 8006e9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ea2:	00d4      	lsls	r4, r2, #3
 8006ea4:	4622      	mov	r2, r4
 8006ea6:	462b      	mov	r3, r5
 8006ea8:	1814      	adds	r4, r2, r0
 8006eaa:	653c      	str	r4, [r7, #80]	; 0x50
 8006eac:	414b      	adcs	r3, r1
 8006eae:	657b      	str	r3, [r7, #84]	; 0x54
 8006eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	f04f 0300 	mov.w	r3, #0
 8006eba:	1891      	adds	r1, r2, r2
 8006ebc:	61b9      	str	r1, [r7, #24]
 8006ebe:	415b      	adcs	r3, r3
 8006ec0:	61fb      	str	r3, [r7, #28]
 8006ec2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ec6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006eca:	f7f9 fec5 	bl	8000c58 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b6c      	ldr	r3, [pc, #432]	; (8007084 <UART_SetConfig+0x38c>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	; 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	00db      	lsls	r3, r3, #3
 8006ee4:	3332      	adds	r3, #50	; 0x32
 8006ee6:	4a67      	ldr	r2, [pc, #412]	; (8007084 <UART_SetConfig+0x38c>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 0207 	and.w	r2, r3, #7
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4432      	add	r2, r6
 8006ef8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006efa:	e0b9      	b.n	8007070 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006efc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006efe:	461c      	mov	r4, r3
 8006f00:	f04f 0500 	mov.w	r5, #0
 8006f04:	4622      	mov	r2, r4
 8006f06:	462b      	mov	r3, r5
 8006f08:	1891      	adds	r1, r2, r2
 8006f0a:	6139      	str	r1, [r7, #16]
 8006f0c:	415b      	adcs	r3, r3
 8006f0e:	617b      	str	r3, [r7, #20]
 8006f10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f14:	1912      	adds	r2, r2, r4
 8006f16:	eb45 0303 	adc.w	r3, r5, r3
 8006f1a:	f04f 0000 	mov.w	r0, #0
 8006f1e:	f04f 0100 	mov.w	r1, #0
 8006f22:	00d9      	lsls	r1, r3, #3
 8006f24:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f28:	00d0      	lsls	r0, r2, #3
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	eb12 0804 	adds.w	r8, r2, r4
 8006f32:	eb43 0905 	adc.w	r9, r3, r5
 8006f36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f38:	685b      	ldr	r3, [r3, #4]
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f04f 0100 	mov.w	r1, #0
 8006f40:	f04f 0200 	mov.w	r2, #0
 8006f44:	f04f 0300 	mov.w	r3, #0
 8006f48:	008b      	lsls	r3, r1, #2
 8006f4a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f4e:	0082      	lsls	r2, r0, #2
 8006f50:	4640      	mov	r0, r8
 8006f52:	4649      	mov	r1, r9
 8006f54:	f7f9 fe80 	bl	8000c58 <__aeabi_uldivmod>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	4b49      	ldr	r3, [pc, #292]	; (8007084 <UART_SetConfig+0x38c>)
 8006f5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006f62:	095b      	lsrs	r3, r3, #5
 8006f64:	011e      	lsls	r6, r3, #4
 8006f66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f04f 0100 	mov.w	r1, #0
 8006f6e:	4602      	mov	r2, r0
 8006f70:	460b      	mov	r3, r1
 8006f72:	1894      	adds	r4, r2, r2
 8006f74:	60bc      	str	r4, [r7, #8]
 8006f76:	415b      	adcs	r3, r3
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f7e:	1812      	adds	r2, r2, r0
 8006f80:	eb41 0303 	adc.w	r3, r1, r3
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	f04f 0500 	mov.w	r5, #0
 8006f8c:	00dd      	lsls	r5, r3, #3
 8006f8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f92:	00d4      	lsls	r4, r2, #3
 8006f94:	4622      	mov	r2, r4
 8006f96:	462b      	mov	r3, r5
 8006f98:	1814      	adds	r4, r2, r0
 8006f9a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f9c:	414b      	adcs	r3, r1
 8006f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f04f 0100 	mov.w	r1, #0
 8006faa:	f04f 0200 	mov.w	r2, #0
 8006fae:	f04f 0300 	mov.w	r3, #0
 8006fb2:	008b      	lsls	r3, r1, #2
 8006fb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fb8:	0082      	lsls	r2, r0, #2
 8006fba:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006fbe:	f7f9 fe4b 	bl	8000c58 <__aeabi_uldivmod>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	4b2f      	ldr	r3, [pc, #188]	; (8007084 <UART_SetConfig+0x38c>)
 8006fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8006fcc:	095b      	lsrs	r3, r3, #5
 8006fce:	2164      	movs	r1, #100	; 0x64
 8006fd0:	fb01 f303 	mul.w	r3, r1, r3
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	011b      	lsls	r3, r3, #4
 8006fd8:	3332      	adds	r3, #50	; 0x32
 8006fda:	4a2a      	ldr	r2, [pc, #168]	; (8007084 <UART_SetConfig+0x38c>)
 8006fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe0:	095b      	lsrs	r3, r3, #5
 8006fe2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fe6:	441e      	add	r6, r3
 8006fe8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fea:	4618      	mov	r0, r3
 8006fec:	f04f 0100 	mov.w	r1, #0
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	1894      	adds	r4, r2, r2
 8006ff6:	603c      	str	r4, [r7, #0]
 8006ff8:	415b      	adcs	r3, r3
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007000:	1812      	adds	r2, r2, r0
 8007002:	eb41 0303 	adc.w	r3, r1, r3
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	f04f 0500 	mov.w	r5, #0
 800700e:	00dd      	lsls	r5, r3, #3
 8007010:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007014:	00d4      	lsls	r4, r2, #3
 8007016:	4622      	mov	r2, r4
 8007018:	462b      	mov	r3, r5
 800701a:	eb12 0a00 	adds.w	sl, r2, r0
 800701e:	eb43 0b01 	adc.w	fp, r3, r1
 8007022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	4618      	mov	r0, r3
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	008b      	lsls	r3, r1, #2
 8007036:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800703a:	0082      	lsls	r2, r0, #2
 800703c:	4650      	mov	r0, sl
 800703e:	4659      	mov	r1, fp
 8007040:	f7f9 fe0a 	bl	8000c58 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4b0e      	ldr	r3, [pc, #56]	; (8007084 <UART_SetConfig+0x38c>)
 800704a:	fba3 1302 	umull	r1, r3, r3, r2
 800704e:	095b      	lsrs	r3, r3, #5
 8007050:	2164      	movs	r1, #100	; 0x64
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	3332      	adds	r3, #50	; 0x32
 800705c:	4a09      	ldr	r2, [pc, #36]	; (8007084 <UART_SetConfig+0x38c>)
 800705e:	fba2 2303 	umull	r2, r3, r2, r3
 8007062:	095b      	lsrs	r3, r3, #5
 8007064:	f003 020f 	and.w	r2, r3, #15
 8007068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4432      	add	r2, r6
 800706e:	609a      	str	r2, [r3, #8]
}
 8007070:	bf00      	nop
 8007072:	377c      	adds	r7, #124	; 0x7c
 8007074:	46bd      	mov	sp, r7
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	bf00      	nop
 800707c:	40011000 	.word	0x40011000
 8007080:	40011400 	.word	0x40011400
 8007084:	51eb851f 	.word	0x51eb851f

08007088 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007088:	b480      	push	{r7}
 800708a:	b085      	sub	sp, #20
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007096:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800709a:	2b84      	cmp	r3, #132	; 0x84
 800709c:	d005      	beq.n	80070aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800709e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	3303      	adds	r3, #3
 80070a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80070aa:	68fb      	ldr	r3, [r7, #12]
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3714      	adds	r7, #20
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80070bc:	f000 fb5c 	bl	8007778 <vTaskStartScheduler>
  
  return osOK;
 80070c0:	2300      	movs	r3, #0
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80070c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070c8:	b089      	sub	sp, #36	; 0x24
 80070ca:	af04      	add	r7, sp, #16
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	695b      	ldr	r3, [r3, #20]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <osThreadCreate+0x54>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01c      	beq.n	800711a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685c      	ldr	r4, [r3, #4]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681d      	ldr	r5, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	691e      	ldr	r6, [r3, #16]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7ff ffc8 	bl	8007088 <makeFreeRtosPriority>
 80070f8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007102:	9202      	str	r2, [sp, #8]
 8007104:	9301      	str	r3, [sp, #4]
 8007106:	9100      	str	r1, [sp, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	4632      	mov	r2, r6
 800710c:	4629      	mov	r1, r5
 800710e:	4620      	mov	r0, r4
 8007110:	f000 f8ed 	bl	80072ee <xTaskCreateStatic>
 8007114:	4603      	mov	r3, r0
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e01c      	b.n	8007154 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685c      	ldr	r4, [r3, #4]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007126:	b29e      	uxth	r6, r3
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff ffaa 	bl	8007088 <makeFreeRtosPriority>
 8007134:	4602      	mov	r2, r0
 8007136:	f107 030c 	add.w	r3, r7, #12
 800713a:	9301      	str	r3, [sp, #4]
 800713c:	9200      	str	r2, [sp, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	4632      	mov	r2, r6
 8007142:	4629      	mov	r1, r5
 8007144:	4620      	mov	r0, r4
 8007146:	f000 f92f 	bl	80073a8 <xTaskCreate>
 800714a:	4603      	mov	r3, r0
 800714c:	2b01      	cmp	r3, #1
 800714e:	d001      	beq.n	8007154 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007150:	2300      	movs	r3, #0
 8007152:	e000      	b.n	8007156 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007154:	68fb      	ldr	r3, [r7, #12]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800715e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d001      	beq.n	8007174 <osDelay+0x16>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	e000      	b.n	8007176 <osDelay+0x18>
 8007174:	2301      	movs	r3, #1
 8007176:	4618      	mov	r0, r3
 8007178:	f000 faca 	bl	8007710 <vTaskDelay>
  
  return osOK;
 800717c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800717e:	4618      	mov	r0, r3
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007186:	b480      	push	{r7}
 8007188:	b083      	sub	sp, #12
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f103 0208 	add.w	r2, r3, #8
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f04f 32ff 	mov.w	r2, #4294967295
 800719e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f103 0208 	add.w	r2, r3, #8
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f103 0208 	add.w	r2, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071ba:	bf00      	nop
 80071bc:	370c      	adds	r7, #12
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr

080071c6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071c6:	b480      	push	{r7}
 80071c8:	b083      	sub	sp, #12
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	68fa      	ldr	r2, [r7, #12]
 80071f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689a      	ldr	r2, [r3, #8]
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	683a      	ldr	r2, [r7, #0]
 8007204:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	683a      	ldr	r2, [r7, #0]
 800720a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	1c5a      	adds	r2, r3, #1
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	601a      	str	r2, [r3, #0]
}
 800721c:	bf00      	nop
 800721e:	3714      	adds	r7, #20
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723e:	d103      	bne.n	8007248 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	e00c      	b.n	8007262 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	3308      	adds	r3, #8
 800724c:	60fb      	str	r3, [r7, #12]
 800724e:	e002      	b.n	8007256 <vListInsert+0x2e>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	60fb      	str	r3, [r7, #12]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	429a      	cmp	r2, r3
 8007260:	d2f6      	bcs.n	8007250 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	1c5a      	adds	r2, r3, #1
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
}
 800728e:	bf00      	nop
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	691b      	ldr	r3, [r3, #16]
 80072a6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6892      	ldr	r2, [r2, #8]
 80072b0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	6852      	ldr	r2, [r2, #4]
 80072ba:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d103      	bne.n	80072ce <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	689a      	ldr	r2, [r3, #8]
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	1e5a      	subs	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b08e      	sub	sp, #56	; 0x38
 80072f2:	af04      	add	r7, sp, #16
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	60b9      	str	r1, [r7, #8]
 80072f8:	607a      	str	r2, [r7, #4]
 80072fa:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10a      	bne.n	8007318 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007314:	bf00      	nop
 8007316:	e7fe      	b.n	8007316 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10a      	bne.n	8007334 <xTaskCreateStatic+0x46>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	61fb      	str	r3, [r7, #28]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007334:	2354      	movs	r3, #84	; 0x54
 8007336:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	2b54      	cmp	r3, #84	; 0x54
 800733c:	d00a      	beq.n	8007354 <xTaskCreateStatic+0x66>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	61bb      	str	r3, [r7, #24]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007354:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01e      	beq.n	800739a <xTaskCreateStatic+0xac>
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735e:	2b00      	cmp	r3, #0
 8007360:	d01b      	beq.n	800739a <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007364:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800736a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800736c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736e:	2202      	movs	r2, #2
 8007370:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007374:	2300      	movs	r3, #0
 8007376:	9303      	str	r3, [sp, #12]
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	9302      	str	r3, [sp, #8]
 800737c:	f107 0314 	add.w	r3, r7, #20
 8007380:	9301      	str	r3, [sp, #4]
 8007382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	68b9      	ldr	r1, [r7, #8]
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 f850 	bl	8007432 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007392:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007394:	f000 f8d4 	bl	8007540 <prvAddNewTaskToReadyList>
 8007398:	e001      	b.n	800739e <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800739a:	2300      	movs	r3, #0
 800739c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800739e:	697b      	ldr	r3, [r7, #20]
	}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3728      	adds	r7, #40	; 0x28
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af04      	add	r7, sp, #16
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	603b      	str	r3, [r7, #0]
 80073b4:	4613      	mov	r3, r2
 80073b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80073b8:	88fb      	ldrh	r3, [r7, #6]
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4618      	mov	r0, r3
 80073be:	f000 ff53 	bl	8008268 <pvPortMalloc>
 80073c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00e      	beq.n	80073e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80073ca:	2054      	movs	r0, #84	; 0x54
 80073cc:	f000 ff4c 	bl	8008268 <pvPortMalloc>
 80073d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d003      	beq.n	80073e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	697a      	ldr	r2, [r7, #20]
 80073dc:	631a      	str	r2, [r3, #48]	; 0x30
 80073de:	e005      	b.n	80073ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80073e0:	6978      	ldr	r0, [r7, #20]
 80073e2:	f001 f80d 	bl	8008400 <vPortFree>
 80073e6:	e001      	b.n	80073ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80073ec:	69fb      	ldr	r3, [r7, #28]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d017      	beq.n	8007422 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073fa:	88fa      	ldrh	r2, [r7, #6]
 80073fc:	2300      	movs	r3, #0
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	9302      	str	r3, [sp, #8]
 8007404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007406:	9301      	str	r3, [sp, #4]
 8007408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740a:	9300      	str	r3, [sp, #0]
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	68b9      	ldr	r1, [r7, #8]
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f80e 	bl	8007432 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007416:	69f8      	ldr	r0, [r7, #28]
 8007418:	f000 f892 	bl	8007540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800741c:	2301      	movs	r3, #1
 800741e:	61bb      	str	r3, [r7, #24]
 8007420:	e002      	b.n	8007428 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007422:	f04f 33ff 	mov.w	r3, #4294967295
 8007426:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007428:	69bb      	ldr	r3, [r7, #24]
	}
 800742a:	4618      	mov	r0, r3
 800742c:	3720      	adds	r7, #32
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}

08007432 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007432:	b580      	push	{r7, lr}
 8007434:	b088      	sub	sp, #32
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
 800743e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007442:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800744a:	3b01      	subs	r3, #1
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	4413      	add	r3, r2
 8007450:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	f023 0307 	bic.w	r3, r3, #7
 8007458:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f003 0307 	and.w	r3, r3, #7
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <prvInitialiseNewTask+0x48>
	__asm volatile
 8007464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007468:	f383 8811 	msr	BASEPRI, r3
 800746c:	f3bf 8f6f 	isb	sy
 8007470:	f3bf 8f4f 	dsb	sy
 8007474:	617b      	str	r3, [r7, #20]
}
 8007476:	bf00      	nop
 8007478:	e7fe      	b.n	8007478 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d01f      	beq.n	80074c0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007480:	2300      	movs	r3, #0
 8007482:	61fb      	str	r3, [r7, #28]
 8007484:	e012      	b.n	80074ac <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007486:	68ba      	ldr	r2, [r7, #8]
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	7819      	ldrb	r1, [r3, #0]
 800748e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	4413      	add	r3, r2
 8007494:	3334      	adds	r3, #52	; 0x34
 8007496:	460a      	mov	r2, r1
 8007498:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800749a:	68ba      	ldr	r2, [r7, #8]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	4413      	add	r3, r2
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d006      	beq.n	80074b4 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	3301      	adds	r3, #1
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	2b0f      	cmp	r3, #15
 80074b0:	d9e9      	bls.n	8007486 <prvInitialiseNewTask+0x54>
 80074b2:	e000      	b.n	80074b6 <prvInitialiseNewTask+0x84>
			{
				break;
 80074b4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80074b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b8:	2200      	movs	r2, #0
 80074ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80074be:	e003      	b.n	80074c8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80074c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ca:	2b06      	cmp	r3, #6
 80074cc:	d901      	bls.n	80074d2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80074ce:	2306      	movs	r3, #6
 80074d0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80074d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074dc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80074de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e0:	2200      	movs	r2, #0
 80074e2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80074e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e6:	3304      	adds	r3, #4
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7ff fe6c 	bl	80071c6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	3318      	adds	r3, #24
 80074f2:	4618      	mov	r0, r3
 80074f4:	f7ff fe67 	bl	80071c6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074fc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	f1c3 0207 	rsb	r2, r3, #7
 8007504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007506:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800750c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2200      	movs	r2, #0
 8007512:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	68f9      	ldr	r1, [r7, #12]
 8007520:	69b8      	ldr	r0, [r7, #24]
 8007522:	f000 fc93 	bl	8007e4c <pxPortInitialiseStack>
 8007526:	4602      	mov	r2, r0
 8007528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007536:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007538:	bf00      	nop
 800753a:	3720      	adds	r7, #32
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007548:	f000 fdac 	bl	80080a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800754c:	4b2a      	ldr	r3, [pc, #168]	; (80075f8 <prvAddNewTaskToReadyList+0xb8>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	3301      	adds	r3, #1
 8007552:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <prvAddNewTaskToReadyList+0xb8>)
 8007554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007556:	4b29      	ldr	r3, [pc, #164]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d109      	bne.n	8007572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800755e:	4a27      	ldr	r2, [pc, #156]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007564:	4b24      	ldr	r3, [pc, #144]	; (80075f8 <prvAddNewTaskToReadyList+0xb8>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	2b01      	cmp	r3, #1
 800756a:	d110      	bne.n	800758e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800756c:	f000 fb4a 	bl	8007c04 <prvInitialiseTaskLists>
 8007570:	e00d      	b.n	800758e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007572:	4b23      	ldr	r3, [pc, #140]	; (8007600 <prvAddNewTaskToReadyList+0xc0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d109      	bne.n	800758e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800757a:	4b20      	ldr	r3, [pc, #128]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007584:	429a      	cmp	r2, r3
 8007586:	d802      	bhi.n	800758e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007588:	4a1c      	ldr	r2, [pc, #112]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800758e:	4b1d      	ldr	r3, [pc, #116]	; (8007604 <prvAddNewTaskToReadyList+0xc4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3301      	adds	r3, #1
 8007594:	4a1b      	ldr	r2, [pc, #108]	; (8007604 <prvAddNewTaskToReadyList+0xc4>)
 8007596:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759c:	2201      	movs	r2, #1
 800759e:	409a      	lsls	r2, r3
 80075a0:	4b19      	ldr	r3, [pc, #100]	; (8007608 <prvAddNewTaskToReadyList+0xc8>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	4a18      	ldr	r2, [pc, #96]	; (8007608 <prvAddNewTaskToReadyList+0xc8>)
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ae:	4613      	mov	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4a15      	ldr	r2, [pc, #84]	; (800760c <prvAddNewTaskToReadyList+0xcc>)
 80075b8:	441a      	add	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	3304      	adds	r3, #4
 80075be:	4619      	mov	r1, r3
 80075c0:	4610      	mov	r0, r2
 80075c2:	f7ff fe0d 	bl	80071e0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80075c6:	f000 fd9d 	bl	8008104 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80075ca:	4b0d      	ldr	r3, [pc, #52]	; (8007600 <prvAddNewTaskToReadyList+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00e      	beq.n	80075f0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80075d2:	4b0a      	ldr	r3, [pc, #40]	; (80075fc <prvAddNewTaskToReadyList+0xbc>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075dc:	429a      	cmp	r2, r3
 80075de:	d207      	bcs.n	80075f0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <prvAddNewTaskToReadyList+0xd0>)
 80075e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	20000de4 	.word	0x20000de4
 80075fc:	20000ce4 	.word	0x20000ce4
 8007600:	20000df0 	.word	0x20000df0
 8007604:	20000e00 	.word	0x20000e00
 8007608:	20000dec 	.word	0x20000dec
 800760c:	20000ce8 	.word	0x20000ce8
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800761e:	2300      	movs	r3, #0
 8007620:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	617b      	str	r3, [r7, #20]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <vTaskDelayUntil+0x46>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	613b      	str	r3, [r7, #16]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800765a:	4b2a      	ldr	r3, [pc, #168]	; (8007704 <vTaskDelayUntil+0xf0>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <vTaskDelayUntil+0x64>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60fb      	str	r3, [r7, #12]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007678:	f000 f8de 	bl	8007838 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800767c:	4b22      	ldr	r3, [pc, #136]	; (8007708 <vTaskDelayUntil+0xf4>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	4413      	add	r3, r2
 800768a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6a3a      	ldr	r2, [r7, #32]
 8007692:	429a      	cmp	r2, r3
 8007694:	d20b      	bcs.n	80076ae <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	69fa      	ldr	r2, [r7, #28]
 800769c:	429a      	cmp	r2, r3
 800769e:	d211      	bcs.n	80076c4 <vTaskDelayUntil+0xb0>
 80076a0:	69fa      	ldr	r2, [r7, #28]
 80076a2:	6a3b      	ldr	r3, [r7, #32]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d90d      	bls.n	80076c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80076a8:	2301      	movs	r3, #1
 80076aa:	627b      	str	r3, [r7, #36]	; 0x24
 80076ac:	e00a      	b.n	80076c4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	69fa      	ldr	r2, [r7, #28]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d303      	bcc.n	80076c0 <vTaskDelayUntil+0xac>
 80076b8:	69fa      	ldr	r2, [r7, #28]
 80076ba:	6a3b      	ldr	r3, [r7, #32]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d901      	bls.n	80076c4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80076c0:	2301      	movs	r3, #1
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	69fa      	ldr	r2, [r7, #28]
 80076c8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d006      	beq.n	80076de <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2100      	movs	r1, #0
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fb51 	bl	8007d80 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80076de:	f000 f8b9 	bl	8007854 <xTaskResumeAll>
 80076e2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076e4:	69bb      	ldr	r3, [r7, #24]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d107      	bne.n	80076fa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80076ea:	4b08      	ldr	r3, [pc, #32]	; (800770c <vTaskDelayUntil+0xf8>)
 80076ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076f0:	601a      	str	r2, [r3, #0]
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076fa:	bf00      	nop
 80076fc:	3728      	adds	r7, #40	; 0x28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd80      	pop	{r7, pc}
 8007702:	bf00      	nop
 8007704:	20000e0c 	.word	0x20000e0c
 8007708:	20000de8 	.word	0x20000de8
 800770c:	e000ed04 	.word	0xe000ed04

08007710 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007718:	2300      	movs	r3, #0
 800771a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d017      	beq.n	8007752 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007722:	4b13      	ldr	r3, [pc, #76]	; (8007770 <vTaskDelay+0x60>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00a      	beq.n	8007740 <vTaskDelay+0x30>
	__asm volatile
 800772a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800772e:	f383 8811 	msr	BASEPRI, r3
 8007732:	f3bf 8f6f 	isb	sy
 8007736:	f3bf 8f4f 	dsb	sy
 800773a:	60bb      	str	r3, [r7, #8]
}
 800773c:	bf00      	nop
 800773e:	e7fe      	b.n	800773e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007740:	f000 f87a 	bl	8007838 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007744:	2100      	movs	r1, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fb1a 	bl	8007d80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800774c:	f000 f882 	bl	8007854 <xTaskResumeAll>
 8007750:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d107      	bne.n	8007768 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007758:	4b06      	ldr	r3, [pc, #24]	; (8007774 <vTaskDelay+0x64>)
 800775a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800775e:	601a      	str	r2, [r3, #0]
 8007760:	f3bf 8f4f 	dsb	sy
 8007764:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007768:	bf00      	nop
 800776a:	3710      	adds	r7, #16
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000e0c 	.word	0x20000e0c
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08a      	sub	sp, #40	; 0x28
 800777c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800777e:	2300      	movs	r3, #0
 8007780:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007782:	2300      	movs	r3, #0
 8007784:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007786:	463a      	mov	r2, r7
 8007788:	1d39      	adds	r1, r7, #4
 800778a:	f107 0308 	add.w	r3, r7, #8
 800778e:	4618      	mov	r0, r3
 8007790:	f7f9 fbde 	bl	8000f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68ba      	ldr	r2, [r7, #8]
 800779a:	9202      	str	r2, [sp, #8]
 800779c:	9301      	str	r3, [sp, #4]
 800779e:	2300      	movs	r3, #0
 80077a0:	9300      	str	r3, [sp, #0]
 80077a2:	2300      	movs	r3, #0
 80077a4:	460a      	mov	r2, r1
 80077a6:	491e      	ldr	r1, [pc, #120]	; (8007820 <vTaskStartScheduler+0xa8>)
 80077a8:	481e      	ldr	r0, [pc, #120]	; (8007824 <vTaskStartScheduler+0xac>)
 80077aa:	f7ff fda0 	bl	80072ee <xTaskCreateStatic>
 80077ae:	4603      	mov	r3, r0
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <vTaskStartScheduler+0xb0>)
 80077b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80077b4:	4b1c      	ldr	r3, [pc, #112]	; (8007828 <vTaskStartScheduler+0xb0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80077bc:	2301      	movs	r3, #1
 80077be:	617b      	str	r3, [r7, #20]
 80077c0:	e001      	b.n	80077c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	d116      	bne.n	80077fa <vTaskStartScheduler+0x82>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	613b      	str	r3, [r7, #16]
}
 80077de:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077e0:	4b12      	ldr	r3, [pc, #72]	; (800782c <vTaskStartScheduler+0xb4>)
 80077e2:	f04f 32ff 	mov.w	r2, #4294967295
 80077e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077e8:	4b11      	ldr	r3, [pc, #68]	; (8007830 <vTaskStartScheduler+0xb8>)
 80077ea:	2201      	movs	r2, #1
 80077ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077ee:	4b11      	ldr	r3, [pc, #68]	; (8007834 <vTaskStartScheduler+0xbc>)
 80077f0:	2200      	movs	r2, #0
 80077f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077f4:	f000 fbb4 	bl	8007f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077f8:	e00e      	b.n	8007818 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007800:	d10a      	bne.n	8007818 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007806:	f383 8811 	msr	BASEPRI, r3
 800780a:	f3bf 8f6f 	isb	sy
 800780e:	f3bf 8f4f 	dsb	sy
 8007812:	60fb      	str	r3, [r7, #12]
}
 8007814:	bf00      	nop
 8007816:	e7fe      	b.n	8007816 <vTaskStartScheduler+0x9e>
}
 8007818:	bf00      	nop
 800781a:	3718      	adds	r7, #24
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	0800d164 	.word	0x0800d164
 8007824:	08007bd5 	.word	0x08007bd5
 8007828:	20000e08 	.word	0x20000e08
 800782c:	20000e04 	.word	0x20000e04
 8007830:	20000df0 	.word	0x20000df0
 8007834:	20000de8 	.word	0x20000de8

08007838 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800783c:	4b04      	ldr	r3, [pc, #16]	; (8007850 <vTaskSuspendAll+0x18>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3301      	adds	r3, #1
 8007842:	4a03      	ldr	r2, [pc, #12]	; (8007850 <vTaskSuspendAll+0x18>)
 8007844:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007846:	bf00      	nop
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000e0c 	.word	0x20000e0c

08007854 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800785a:	2300      	movs	r3, #0
 800785c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800785e:	2300      	movs	r3, #0
 8007860:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007862:	4b41      	ldr	r3, [pc, #260]	; (8007968 <xTaskResumeAll+0x114>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d10a      	bne.n	8007880 <xTaskResumeAll+0x2c>
	__asm volatile
 800786a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786e:	f383 8811 	msr	BASEPRI, r3
 8007872:	f3bf 8f6f 	isb	sy
 8007876:	f3bf 8f4f 	dsb	sy
 800787a:	603b      	str	r3, [r7, #0]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007880:	f000 fc10 	bl	80080a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007884:	4b38      	ldr	r3, [pc, #224]	; (8007968 <xTaskResumeAll+0x114>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3b01      	subs	r3, #1
 800788a:	4a37      	ldr	r2, [pc, #220]	; (8007968 <xTaskResumeAll+0x114>)
 800788c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800788e:	4b36      	ldr	r3, [pc, #216]	; (8007968 <xTaskResumeAll+0x114>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d161      	bne.n	800795a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007896:	4b35      	ldr	r3, [pc, #212]	; (800796c <xTaskResumeAll+0x118>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d05d      	beq.n	800795a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800789e:	e02e      	b.n	80078fe <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078a0:	4b33      	ldr	r3, [pc, #204]	; (8007970 <xTaskResumeAll+0x11c>)
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3318      	adds	r3, #24
 80078ac:	4618      	mov	r0, r3
 80078ae:	f7ff fcf4 	bl	800729a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3304      	adds	r3, #4
 80078b6:	4618      	mov	r0, r3
 80078b8:	f7ff fcef 	bl	800729a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c0:	2201      	movs	r2, #1
 80078c2:	409a      	lsls	r2, r3
 80078c4:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <xTaskResumeAll+0x120>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4313      	orrs	r3, r2
 80078ca:	4a2a      	ldr	r2, [pc, #168]	; (8007974 <xTaskResumeAll+0x120>)
 80078cc:	6013      	str	r3, [r2, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d2:	4613      	mov	r3, r2
 80078d4:	009b      	lsls	r3, r3, #2
 80078d6:	4413      	add	r3, r2
 80078d8:	009b      	lsls	r3, r3, #2
 80078da:	4a27      	ldr	r2, [pc, #156]	; (8007978 <xTaskResumeAll+0x124>)
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3304      	adds	r3, #4
 80078e2:	4619      	mov	r1, r3
 80078e4:	4610      	mov	r0, r2
 80078e6:	f7ff fc7b 	bl	80071e0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078ee:	4b23      	ldr	r3, [pc, #140]	; (800797c <xTaskResumeAll+0x128>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d302      	bcc.n	80078fe <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80078f8:	4b21      	ldr	r3, [pc, #132]	; (8007980 <xTaskResumeAll+0x12c>)
 80078fa:	2201      	movs	r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078fe:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <xTaskResumeAll+0x11c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1cc      	bne.n	80078a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d001      	beq.n	8007910 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800790c:	f000 fa18 	bl	8007d40 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007910:	4b1c      	ldr	r3, [pc, #112]	; (8007984 <xTaskResumeAll+0x130>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d010      	beq.n	800793e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800791c:	f000 f846 	bl	80079ac <xTaskIncrementTick>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007926:	4b16      	ldr	r3, [pc, #88]	; (8007980 <xTaskResumeAll+0x12c>)
 8007928:	2201      	movs	r2, #1
 800792a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3b01      	subs	r3, #1
 8007930:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1f1      	bne.n	800791c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007938:	4b12      	ldr	r3, [pc, #72]	; (8007984 <xTaskResumeAll+0x130>)
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800793e:	4b10      	ldr	r3, [pc, #64]	; (8007980 <xTaskResumeAll+0x12c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d009      	beq.n	800795a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007946:	2301      	movs	r3, #1
 8007948:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800794a:	4b0f      	ldr	r3, [pc, #60]	; (8007988 <xTaskResumeAll+0x134>)
 800794c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800795a:	f000 fbd3 	bl	8008104 <vPortExitCritical>

	return xAlreadyYielded;
 800795e:	68bb      	ldr	r3, [r7, #8]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000e0c 	.word	0x20000e0c
 800796c:	20000de4 	.word	0x20000de4
 8007970:	20000da4 	.word	0x20000da4
 8007974:	20000dec 	.word	0x20000dec
 8007978:	20000ce8 	.word	0x20000ce8
 800797c:	20000ce4 	.word	0x20000ce4
 8007980:	20000df8 	.word	0x20000df8
 8007984:	20000df4 	.word	0x20000df4
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007992:	4b05      	ldr	r3, [pc, #20]	; (80079a8 <xTaskGetTickCount+0x1c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007998:	687b      	ldr	r3, [r7, #4]
}
 800799a:	4618      	mov	r0, r3
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr
 80079a6:	bf00      	nop
 80079a8:	20000de8 	.word	0x20000de8

080079ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80079b2:	2300      	movs	r3, #0
 80079b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079b6:	4b4e      	ldr	r3, [pc, #312]	; (8007af0 <xTaskIncrementTick+0x144>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f040 808e 	bne.w	8007adc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079c0:	4b4c      	ldr	r3, [pc, #304]	; (8007af4 <xTaskIncrementTick+0x148>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	3301      	adds	r3, #1
 80079c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80079c8:	4a4a      	ldr	r2, [pc, #296]	; (8007af4 <xTaskIncrementTick+0x148>)
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d120      	bne.n	8007a16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079d4:	4b48      	ldr	r3, [pc, #288]	; (8007af8 <xTaskIncrementTick+0x14c>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00a      	beq.n	80079f4 <xTaskIncrementTick+0x48>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	603b      	str	r3, [r7, #0]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <xTaskIncrementTick+0x46>
 80079f4:	4b40      	ldr	r3, [pc, #256]	; (8007af8 <xTaskIncrementTick+0x14c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	60fb      	str	r3, [r7, #12]
 80079fa:	4b40      	ldr	r3, [pc, #256]	; (8007afc <xTaskIncrementTick+0x150>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a3e      	ldr	r2, [pc, #248]	; (8007af8 <xTaskIncrementTick+0x14c>)
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	4a3e      	ldr	r2, [pc, #248]	; (8007afc <xTaskIncrementTick+0x150>)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6013      	str	r3, [r2, #0]
 8007a08:	4b3d      	ldr	r3, [pc, #244]	; (8007b00 <xTaskIncrementTick+0x154>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	4a3c      	ldr	r2, [pc, #240]	; (8007b00 <xTaskIncrementTick+0x154>)
 8007a10:	6013      	str	r3, [r2, #0]
 8007a12:	f000 f995 	bl	8007d40 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007a16:	4b3b      	ldr	r3, [pc, #236]	; (8007b04 <xTaskIncrementTick+0x158>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d348      	bcc.n	8007ab2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a20:	4b35      	ldr	r3, [pc, #212]	; (8007af8 <xTaskIncrementTick+0x14c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d104      	bne.n	8007a34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a2a:	4b36      	ldr	r3, [pc, #216]	; (8007b04 <xTaskIncrementTick+0x158>)
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	601a      	str	r2, [r3, #0]
					break;
 8007a32:	e03e      	b.n	8007ab2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a34:	4b30      	ldr	r3, [pc, #192]	; (8007af8 <xTaskIncrementTick+0x14c>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	429a      	cmp	r2, r3
 8007a4a:	d203      	bcs.n	8007a54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a4c:	4a2d      	ldr	r2, [pc, #180]	; (8007b04 <xTaskIncrementTick+0x158>)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a52:	e02e      	b.n	8007ab2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3304      	adds	r3, #4
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7ff fc1e 	bl	800729a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d004      	beq.n	8007a70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	3318      	adds	r3, #24
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff fc15 	bl	800729a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a74:	2201      	movs	r2, #1
 8007a76:	409a      	lsls	r2, r3
 8007a78:	4b23      	ldr	r3, [pc, #140]	; (8007b08 <xTaskIncrementTick+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	4a22      	ldr	r2, [pc, #136]	; (8007b08 <xTaskIncrementTick+0x15c>)
 8007a80:	6013      	str	r3, [r2, #0]
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	4a1f      	ldr	r2, [pc, #124]	; (8007b0c <xTaskIncrementTick+0x160>)
 8007a90:	441a      	add	r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	3304      	adds	r3, #4
 8007a96:	4619      	mov	r1, r3
 8007a98:	4610      	mov	r0, r2
 8007a9a:	f7ff fba1 	bl	80071e0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	4b1b      	ldr	r3, [pc, #108]	; (8007b10 <xTaskIncrementTick+0x164>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d3b9      	bcc.n	8007a20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007aac:	2301      	movs	r3, #1
 8007aae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab0:	e7b6      	b.n	8007a20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ab2:	4b17      	ldr	r3, [pc, #92]	; (8007b10 <xTaskIncrementTick+0x164>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ab8:	4914      	ldr	r1, [pc, #80]	; (8007b0c <xTaskIncrementTick+0x160>)
 8007aba:	4613      	mov	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d901      	bls.n	8007ace <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007aca:	2301      	movs	r3, #1
 8007acc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007ace:	4b11      	ldr	r3, [pc, #68]	; (8007b14 <xTaskIncrementTick+0x168>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]
 8007ada:	e004      	b.n	8007ae6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007adc:	4b0e      	ldr	r3, [pc, #56]	; (8007b18 <xTaskIncrementTick+0x16c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	4a0d      	ldr	r2, [pc, #52]	; (8007b18 <xTaskIncrementTick+0x16c>)
 8007ae4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007ae6:	697b      	ldr	r3, [r7, #20]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20000e0c 	.word	0x20000e0c
 8007af4:	20000de8 	.word	0x20000de8
 8007af8:	20000d9c 	.word	0x20000d9c
 8007afc:	20000da0 	.word	0x20000da0
 8007b00:	20000dfc 	.word	0x20000dfc
 8007b04:	20000e04 	.word	0x20000e04
 8007b08:	20000dec 	.word	0x20000dec
 8007b0c:	20000ce8 	.word	0x20000ce8
 8007b10:	20000ce4 	.word	0x20000ce4
 8007b14:	20000df8 	.word	0x20000df8
 8007b18:	20000df4 	.word	0x20000df4

08007b1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b1c:	b480      	push	{r7}
 8007b1e:	b087      	sub	sp, #28
 8007b20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b22:	4b27      	ldr	r3, [pc, #156]	; (8007bc0 <vTaskSwitchContext+0xa4>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b2a:	4b26      	ldr	r3, [pc, #152]	; (8007bc4 <vTaskSwitchContext+0xa8>)
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b30:	e03f      	b.n	8007bb2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007b32:	4b24      	ldr	r3, [pc, #144]	; (8007bc4 <vTaskSwitchContext+0xa8>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b38:	4b23      	ldr	r3, [pc, #140]	; (8007bc8 <vTaskSwitchContext+0xac>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	fab3 f383 	clz	r3, r3
 8007b44:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007b46:	7afb      	ldrb	r3, [r7, #11]
 8007b48:	f1c3 031f 	rsb	r3, r3, #31
 8007b4c:	617b      	str	r3, [r7, #20]
 8007b4e:	491f      	ldr	r1, [pc, #124]	; (8007bcc <vTaskSwitchContext+0xb0>)
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	607b      	str	r3, [r7, #4]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vTaskSwitchContext+0x5a>
 8007b78:	697a      	ldr	r2, [r7, #20]
 8007b7a:	4613      	mov	r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4413      	add	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4a12      	ldr	r2, [pc, #72]	; (8007bcc <vTaskSwitchContext+0xb0>)
 8007b84:	4413      	add	r3, r2
 8007b86:	613b      	str	r3, [r7, #16]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	605a      	str	r2, [r3, #4]
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	3308      	adds	r3, #8
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d104      	bne.n	8007ba8 <vTaskSwitchContext+0x8c>
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	605a      	str	r2, [r3, #4]
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	4a08      	ldr	r2, [pc, #32]	; (8007bd0 <vTaskSwitchContext+0xb4>)
 8007bb0:	6013      	str	r3, [r2, #0]
}
 8007bb2:	bf00      	nop
 8007bb4:	371c      	adds	r7, #28
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbc:	4770      	bx	lr
 8007bbe:	bf00      	nop
 8007bc0:	20000e0c 	.word	0x20000e0c
 8007bc4:	20000df8 	.word	0x20000df8
 8007bc8:	20000dec 	.word	0x20000dec
 8007bcc:	20000ce8 	.word	0x20000ce8
 8007bd0:	20000ce4 	.word	0x20000ce4

08007bd4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b082      	sub	sp, #8
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007bdc:	f000 f852 	bl	8007c84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <prvIdleTask+0x28>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d9f9      	bls.n	8007bdc <prvIdleTask+0x8>
			{
				taskYIELD();
 8007be8:	4b05      	ldr	r3, [pc, #20]	; (8007c00 <prvIdleTask+0x2c>)
 8007bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bee:	601a      	str	r2, [r3, #0]
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bf8:	e7f0      	b.n	8007bdc <prvIdleTask+0x8>
 8007bfa:	bf00      	nop
 8007bfc:	20000ce8 	.word	0x20000ce8
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	607b      	str	r3, [r7, #4]
 8007c0e:	e00c      	b.n	8007c2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a12      	ldr	r2, [pc, #72]	; (8007c64 <prvInitialiseTaskLists+0x60>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7ff fab1 	bl	8007186 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	3301      	adds	r3, #1
 8007c28:	607b      	str	r3, [r7, #4]
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b06      	cmp	r3, #6
 8007c2e:	d9ef      	bls.n	8007c10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c30:	480d      	ldr	r0, [pc, #52]	; (8007c68 <prvInitialiseTaskLists+0x64>)
 8007c32:	f7ff faa8 	bl	8007186 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c36:	480d      	ldr	r0, [pc, #52]	; (8007c6c <prvInitialiseTaskLists+0x68>)
 8007c38:	f7ff faa5 	bl	8007186 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c3c:	480c      	ldr	r0, [pc, #48]	; (8007c70 <prvInitialiseTaskLists+0x6c>)
 8007c3e:	f7ff faa2 	bl	8007186 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c42:	480c      	ldr	r0, [pc, #48]	; (8007c74 <prvInitialiseTaskLists+0x70>)
 8007c44:	f7ff fa9f 	bl	8007186 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c48:	480b      	ldr	r0, [pc, #44]	; (8007c78 <prvInitialiseTaskLists+0x74>)
 8007c4a:	f7ff fa9c 	bl	8007186 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c4e:	4b0b      	ldr	r3, [pc, #44]	; (8007c7c <prvInitialiseTaskLists+0x78>)
 8007c50:	4a05      	ldr	r2, [pc, #20]	; (8007c68 <prvInitialiseTaskLists+0x64>)
 8007c52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c54:	4b0a      	ldr	r3, [pc, #40]	; (8007c80 <prvInitialiseTaskLists+0x7c>)
 8007c56:	4a05      	ldr	r2, [pc, #20]	; (8007c6c <prvInitialiseTaskLists+0x68>)
 8007c58:	601a      	str	r2, [r3, #0]
}
 8007c5a:	bf00      	nop
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	20000ce8 	.word	0x20000ce8
 8007c68:	20000d74 	.word	0x20000d74
 8007c6c:	20000d88 	.word	0x20000d88
 8007c70:	20000da4 	.word	0x20000da4
 8007c74:	20000db8 	.word	0x20000db8
 8007c78:	20000dd0 	.word	0x20000dd0
 8007c7c:	20000d9c 	.word	0x20000d9c
 8007c80:	20000da0 	.word	0x20000da0

08007c84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c8a:	e019      	b.n	8007cc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c8c:	f000 fa0a 	bl	80080a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c90:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <prvCheckTasksWaitingTermination+0x50>)
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f7ff fafc 	bl	800729a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ca2:	4b0d      	ldr	r3, [pc, #52]	; (8007cd8 <prvCheckTasksWaitingTermination+0x54>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	4a0b      	ldr	r2, [pc, #44]	; (8007cd8 <prvCheckTasksWaitingTermination+0x54>)
 8007caa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cac:	4b0b      	ldr	r3, [pc, #44]	; (8007cdc <prvCheckTasksWaitingTermination+0x58>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	3b01      	subs	r3, #1
 8007cb2:	4a0a      	ldr	r2, [pc, #40]	; (8007cdc <prvCheckTasksWaitingTermination+0x58>)
 8007cb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cb6:	f000 fa25 	bl	8008104 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f810 	bl	8007ce0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cc0:	4b06      	ldr	r3, [pc, #24]	; (8007cdc <prvCheckTasksWaitingTermination+0x58>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e1      	bne.n	8007c8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007cc8:	bf00      	nop
 8007cca:	bf00      	nop
 8007ccc:	3708      	adds	r7, #8
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	20000db8 	.word	0x20000db8
 8007cd8:	20000de4 	.word	0x20000de4
 8007cdc:	20000dcc 	.word	0x20000dcc

08007ce0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d108      	bne.n	8007d04 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fb82 	bl	8008400 <vPortFree>
				vPortFree( pxTCB );
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fb7f 	bl	8008400 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d02:	e018      	b.n	8007d36 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d103      	bne.n	8007d16 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fb76 	bl	8008400 <vPortFree>
	}
 8007d14:	e00f      	b.n	8007d36 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d00a      	beq.n	8007d36 <prvDeleteTCB+0x56>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	60fb      	str	r3, [r7, #12]
}
 8007d32:	bf00      	nop
 8007d34:	e7fe      	b.n	8007d34 <prvDeleteTCB+0x54>
	}
 8007d36:	bf00      	nop
 8007d38:	3710      	adds	r7, #16
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
	...

08007d40 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d46:	4b0c      	ldr	r3, [pc, #48]	; (8007d78 <prvResetNextTaskUnblockTime+0x38>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d104      	bne.n	8007d5a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d50:	4b0a      	ldr	r3, [pc, #40]	; (8007d7c <prvResetNextTaskUnblockTime+0x3c>)
 8007d52:	f04f 32ff 	mov.w	r2, #4294967295
 8007d56:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d58:	e008      	b.n	8007d6c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d5a:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <prvResetNextTaskUnblockTime+0x38>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	68db      	ldr	r3, [r3, #12]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a04      	ldr	r2, [pc, #16]	; (8007d7c <prvResetNextTaskUnblockTime+0x3c>)
 8007d6a:	6013      	str	r3, [r2, #0]
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	20000d9c 	.word	0x20000d9c
 8007d7c:	20000e04 	.word	0x20000e04

08007d80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d8a:	4b29      	ldr	r3, [pc, #164]	; (8007e30 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d90:	4b28      	ldr	r3, [pc, #160]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	3304      	adds	r3, #4
 8007d96:	4618      	mov	r0, r3
 8007d98:	f7ff fa7f 	bl	800729a <uxListRemove>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007da2:	4b24      	ldr	r3, [pc, #144]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007da8:	2201      	movs	r2, #1
 8007daa:	fa02 f303 	lsl.w	r3, r2, r3
 8007dae:	43da      	mvns	r2, r3
 8007db0:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4013      	ands	r3, r2
 8007db6:	4a20      	ldr	r2, [pc, #128]	; (8007e38 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007db8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc0:	d10a      	bne.n	8007dd8 <prvAddCurrentTaskToDelayedList+0x58>
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d007      	beq.n	8007dd8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dc8:	4b1a      	ldr	r3, [pc, #104]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	3304      	adds	r3, #4
 8007dce:	4619      	mov	r1, r3
 8007dd0:	481a      	ldr	r0, [pc, #104]	; (8007e3c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007dd2:	f7ff fa05 	bl	80071e0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007dd6:	e026      	b.n	8007e26 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007de0:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d209      	bcs.n	8007e04 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007df0:	4b13      	ldr	r3, [pc, #76]	; (8007e40 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	4b0f      	ldr	r3, [pc, #60]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3304      	adds	r3, #4
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4610      	mov	r0, r2
 8007dfe:	f7ff fa13 	bl	8007228 <vListInsert>
}
 8007e02:	e010      	b.n	8007e26 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e04:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	4b0a      	ldr	r3, [pc, #40]	; (8007e34 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	4619      	mov	r1, r3
 8007e10:	4610      	mov	r0, r2
 8007e12:	f7ff fa09 	bl	8007228 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007e16:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	68ba      	ldr	r2, [r7, #8]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d202      	bcs.n	8007e26 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007e20:	4a09      	ldr	r2, [pc, #36]	; (8007e48 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6013      	str	r3, [r2, #0]
}
 8007e26:	bf00      	nop
 8007e28:	3710      	adds	r7, #16
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20000de8 	.word	0x20000de8
 8007e34:	20000ce4 	.word	0x20000ce4
 8007e38:	20000dec 	.word	0x20000dec
 8007e3c:	20000dd0 	.word	0x20000dd0
 8007e40:	20000da0 	.word	0x20000da0
 8007e44:	20000d9c 	.word	0x20000d9c
 8007e48:	20000e04 	.word	0x20000e04

08007e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3b04      	subs	r3, #4
 8007e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f023 0201 	bic.w	r2, r3, #1
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e7c:	4a0c      	ldr	r2, [pc, #48]	; (8007eb0 <pxPortInitialiseStack+0x64>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b14      	subs	r3, #20
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b04      	subs	r3, #4
 8007e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f06f 0202 	mvn.w	r2, #2
 8007e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3b20      	subs	r3, #32
 8007ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	08007eb5 	.word	0x08007eb5

08007eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ebe:	4b12      	ldr	r3, [pc, #72]	; (8007f08 <prvTaskExitError+0x54>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ec6:	d00a      	beq.n	8007ede <prvTaskExitError+0x2a>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60fb      	str	r3, [r7, #12]
}
 8007eda:	bf00      	nop
 8007edc:	e7fe      	b.n	8007edc <prvTaskExitError+0x28>
	__asm volatile
 8007ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee2:	f383 8811 	msr	BASEPRI, r3
 8007ee6:	f3bf 8f6f 	isb	sy
 8007eea:	f3bf 8f4f 	dsb	sy
 8007eee:	60bb      	str	r3, [r7, #8]
}
 8007ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ef2:	bf00      	nop
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d0fc      	beq.n	8007ef4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	20000068 	.word	0x20000068
 8007f0c:	00000000 	.word	0x00000000

08007f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f10:	4b07      	ldr	r3, [pc, #28]	; (8007f30 <pxCurrentTCBConst2>)
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	6808      	ldr	r0, [r1, #0]
 8007f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	f380 8809 	msr	PSP, r0
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	4770      	bx	lr
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst2>:
 8007f30:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f38:	4808      	ldr	r0, [pc, #32]	; (8007f5c <prvPortStartFirstTask+0x24>)
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f380 8808 	msr	MSP, r0
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8814 	msr	CONTROL, r0
 8007f4a:	b662      	cpsie	i
 8007f4c:	b661      	cpsie	f
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	df00      	svc	0
 8007f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f5a:	bf00      	nop
 8007f5c:	e000ed08 	.word	0xe000ed08

08007f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f66:	4b46      	ldr	r3, [pc, #280]	; (8008080 <xPortStartScheduler+0x120>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a46      	ldr	r2, [pc, #280]	; (8008084 <xPortStartScheduler+0x124>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10a      	bne.n	8007f86 <xPortStartScheduler+0x26>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	613b      	str	r3, [r7, #16]
}
 8007f82:	bf00      	nop
 8007f84:	e7fe      	b.n	8007f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f86:	4b3e      	ldr	r3, [pc, #248]	; (8008080 <xPortStartScheduler+0x120>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a3f      	ldr	r2, [pc, #252]	; (8008088 <xPortStartScheduler+0x128>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d10a      	bne.n	8007fa6 <xPortStartScheduler+0x46>
	__asm volatile
 8007f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f94:	f383 8811 	msr	BASEPRI, r3
 8007f98:	f3bf 8f6f 	isb	sy
 8007f9c:	f3bf 8f4f 	dsb	sy
 8007fa0:	60fb      	str	r3, [r7, #12]
}
 8007fa2:	bf00      	nop
 8007fa4:	e7fe      	b.n	8007fa4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007fa6:	4b39      	ldr	r3, [pc, #228]	; (800808c <xPortStartScheduler+0x12c>)
 8007fa8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	22ff      	movs	r2, #255	; 0xff
 8007fb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc0:	78fb      	ldrb	r3, [r7, #3]
 8007fc2:	b2db      	uxtb	r3, r3
 8007fc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	4b31      	ldr	r3, [pc, #196]	; (8008090 <xPortStartScheduler+0x130>)
 8007fcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fce:	4b31      	ldr	r3, [pc, #196]	; (8008094 <xPortStartScheduler+0x134>)
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd4:	e009      	b.n	8007fea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007fd6:	4b2f      	ldr	r3, [pc, #188]	; (8008094 <xPortStartScheduler+0x134>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	3b01      	subs	r3, #1
 8007fdc:	4a2d      	ldr	r2, [pc, #180]	; (8008094 <xPortStartScheduler+0x134>)
 8007fde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe0:	78fb      	ldrb	r3, [r7, #3]
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fea:	78fb      	ldrb	r3, [r7, #3]
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff2:	2b80      	cmp	r3, #128	; 0x80
 8007ff4:	d0ef      	beq.n	8007fd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ff6:	4b27      	ldr	r3, [pc, #156]	; (8008094 <xPortStartScheduler+0x134>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f1c3 0307 	rsb	r3, r3, #7
 8007ffe:	2b04      	cmp	r3, #4
 8008000:	d00a      	beq.n	8008018 <xPortStartScheduler+0xb8>
	__asm volatile
 8008002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008006:	f383 8811 	msr	BASEPRI, r3
 800800a:	f3bf 8f6f 	isb	sy
 800800e:	f3bf 8f4f 	dsb	sy
 8008012:	60bb      	str	r3, [r7, #8]
}
 8008014:	bf00      	nop
 8008016:	e7fe      	b.n	8008016 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008018:	4b1e      	ldr	r3, [pc, #120]	; (8008094 <xPortStartScheduler+0x134>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	021b      	lsls	r3, r3, #8
 800801e:	4a1d      	ldr	r2, [pc, #116]	; (8008094 <xPortStartScheduler+0x134>)
 8008020:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008022:	4b1c      	ldr	r3, [pc, #112]	; (8008094 <xPortStartScheduler+0x134>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800802a:	4a1a      	ldr	r2, [pc, #104]	; (8008094 <xPortStartScheduler+0x134>)
 800802c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	b2da      	uxtb	r2, r3
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008036:	4b18      	ldr	r3, [pc, #96]	; (8008098 <xPortStartScheduler+0x138>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a17      	ldr	r2, [pc, #92]	; (8008098 <xPortStartScheduler+0x138>)
 800803c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008040:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <xPortStartScheduler+0x138>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4a14      	ldr	r2, [pc, #80]	; (8008098 <xPortStartScheduler+0x138>)
 8008048:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800804c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800804e:	f000 f8dd 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008052:	4b12      	ldr	r3, [pc, #72]	; (800809c <xPortStartScheduler+0x13c>)
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008058:	f000 f8fc 	bl	8008254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800805c:	4b10      	ldr	r3, [pc, #64]	; (80080a0 <xPortStartScheduler+0x140>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a0f      	ldr	r2, [pc, #60]	; (80080a0 <xPortStartScheduler+0x140>)
 8008062:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008066:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008068:	f7ff ff66 	bl	8007f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800806c:	f7ff fd56 	bl	8007b1c <vTaskSwitchContext>
	prvTaskExitError();
 8008070:	f7ff ff20 	bl	8007eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	e000ed00 	.word	0xe000ed00
 8008084:	410fc271 	.word	0x410fc271
 8008088:	410fc270 	.word	0x410fc270
 800808c:	e000e400 	.word	0xe000e400
 8008090:	20000e10 	.word	0x20000e10
 8008094:	20000e14 	.word	0x20000e14
 8008098:	e000ed20 	.word	0xe000ed20
 800809c:	20000068 	.word	0x20000068
 80080a0:	e000ef34 	.word	0xe000ef34

080080a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
	__asm volatile
 80080aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ae:	f383 8811 	msr	BASEPRI, r3
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	f3bf 8f4f 	dsb	sy
 80080ba:	607b      	str	r3, [r7, #4]
}
 80080bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080be:	4b0f      	ldr	r3, [pc, #60]	; (80080fc <vPortEnterCritical+0x58>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3301      	adds	r3, #1
 80080c4:	4a0d      	ldr	r2, [pc, #52]	; (80080fc <vPortEnterCritical+0x58>)
 80080c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080c8:	4b0c      	ldr	r3, [pc, #48]	; (80080fc <vPortEnterCritical+0x58>)
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d10f      	bne.n	80080f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d0:	4b0b      	ldr	r3, [pc, #44]	; (8008100 <vPortEnterCritical+0x5c>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00a      	beq.n	80080f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	603b      	str	r3, [r7, #0]
}
 80080ec:	bf00      	nop
 80080ee:	e7fe      	b.n	80080ee <vPortEnterCritical+0x4a>
	}
}
 80080f0:	bf00      	nop
 80080f2:	370c      	adds	r7, #12
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	20000068 	.word	0x20000068
 8008100:	e000ed04 	.word	0xe000ed04

08008104 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800810a:	4b12      	ldr	r3, [pc, #72]	; (8008154 <vPortExitCritical+0x50>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <vPortExitCritical+0x24>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	607b      	str	r3, [r7, #4]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008128:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <vPortExitCritical+0x50>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	3b01      	subs	r3, #1
 800812e:	4a09      	ldr	r2, [pc, #36]	; (8008154 <vPortExitCritical+0x50>)
 8008130:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008132:	4b08      	ldr	r3, [pc, #32]	; (8008154 <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d105      	bne.n	8008146 <vPortExitCritical+0x42>
 800813a:	2300      	movs	r3, #0
 800813c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008144:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000068 	.word	0x20000068
	...

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f01e 0f10 	tst.w	lr, #16
 8008170:	bf08      	it	eq
 8008172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008180:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008184:	f380 8811 	msr	BASEPRI, r0
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f7ff fcc4 	bl	8007b1c <vTaskSwitchContext>
 8008194:	f04f 0000 	mov.w	r0, #0
 8008198:	f380 8811 	msr	BASEPRI, r0
 800819c:	bc09      	pop	{r0, r3}
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	6808      	ldr	r0, [r1, #0]
 80081a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a6:	f01e 0f10 	tst.w	lr, #16
 80081aa:	bf08      	it	eq
 80081ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081b0:	f380 8809 	msr	PSP, r0
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst>:
 80081c0:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e2:	f7ff fbe3 	bl	80079ac <xTaskIncrementTick>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ec:	4b06      	ldr	r3, [pc, #24]	; (8008208 <SysTick_Handler+0x40>)
 80081ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0b      	ldr	r3, [pc, #44]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <vPortSetupTimerInterrupt+0x38>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b0a      	ldr	r3, [pc, #40]	; (8008248 <vPortSetupTimerInterrupt+0x3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	; (800824c <vPortSetupTimerInterrupt+0x40>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a09      	ldr	r2, [pc, #36]	; (8008250 <vPortSetupTimerInterrupt+0x44>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b04      	ldr	r3, [pc, #16]	; (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010
 8008244:	e000e018 	.word	0xe000e018
 8008248:	20000000 	.word	0x20000000
 800824c:	10624dd3 	.word	0x10624dd3
 8008250:	e000e014 	.word	0xe000e014

08008254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008254:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008264 <vPortEnableVFP+0x10>
 8008258:	6801      	ldr	r1, [r0, #0]
 800825a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800825e:	6001      	str	r1, [r0, #0]
 8008260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008262:	bf00      	nop
 8008264:	e000ed88 	.word	0xe000ed88

08008268 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b08a      	sub	sp, #40	; 0x28
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008270:	2300      	movs	r3, #0
 8008272:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008274:	f7ff fae0 	bl	8007838 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008278:	4b5b      	ldr	r3, [pc, #364]	; (80083e8 <pvPortMalloc+0x180>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d101      	bne.n	8008284 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008280:	f000 f920 	bl	80084c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008284:	4b59      	ldr	r3, [pc, #356]	; (80083ec <pvPortMalloc+0x184>)
 8008286:	681a      	ldr	r2, [r3, #0]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4013      	ands	r3, r2
 800828c:	2b00      	cmp	r3, #0
 800828e:	f040 8093 	bne.w	80083b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d01d      	beq.n	80082d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008298:	2208      	movs	r2, #8
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f003 0307 	and.w	r3, r3, #7
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d014      	beq.n	80082d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f023 0307 	bic.w	r3, r3, #7
 80082b0:	3308      	adds	r3, #8
 80082b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f003 0307 	and.w	r3, r3, #7
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <pvPortMalloc+0x6c>
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	617b      	str	r3, [r7, #20]
}
 80082d0:	bf00      	nop
 80082d2:	e7fe      	b.n	80082d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d06e      	beq.n	80083b8 <pvPortMalloc+0x150>
 80082da:	4b45      	ldr	r3, [pc, #276]	; (80083f0 <pvPortMalloc+0x188>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	429a      	cmp	r2, r3
 80082e2:	d869      	bhi.n	80083b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80082e4:	4b43      	ldr	r3, [pc, #268]	; (80083f4 <pvPortMalloc+0x18c>)
 80082e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80082e8:	4b42      	ldr	r3, [pc, #264]	; (80083f4 <pvPortMalloc+0x18c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082ee:	e004      	b.n	80082fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80082f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80082f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80082fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	687a      	ldr	r2, [r7, #4]
 8008300:	429a      	cmp	r2, r3
 8008302:	d903      	bls.n	800830c <pvPortMalloc+0xa4>
 8008304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d1f1      	bne.n	80082f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800830c:	4b36      	ldr	r3, [pc, #216]	; (80083e8 <pvPortMalloc+0x180>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008312:	429a      	cmp	r2, r3
 8008314:	d050      	beq.n	80083b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008316:	6a3b      	ldr	r3, [r7, #32]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	2208      	movs	r2, #8
 800831c:	4413      	add	r3, r2
 800831e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	6a3b      	ldr	r3, [r7, #32]
 8008326:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	2308      	movs	r3, #8
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	429a      	cmp	r2, r3
 8008336:	d91f      	bls.n	8008378 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	4413      	add	r3, r2
 800833e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	f003 0307 	and.w	r3, r3, #7
 8008346:	2b00      	cmp	r3, #0
 8008348:	d00a      	beq.n	8008360 <pvPortMalloc+0xf8>
	__asm volatile
 800834a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800834e:	f383 8811 	msr	BASEPRI, r3
 8008352:	f3bf 8f6f 	isb	sy
 8008356:	f3bf 8f4f 	dsb	sy
 800835a:	613b      	str	r3, [r7, #16]
}
 800835c:	bf00      	nop
 800835e:	e7fe      	b.n	800835e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	685a      	ldr	r2, [r3, #4]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	1ad2      	subs	r2, r2, r3
 8008368:	69bb      	ldr	r3, [r7, #24]
 800836a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	687a      	ldr	r2, [r7, #4]
 8008370:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008372:	69b8      	ldr	r0, [r7, #24]
 8008374:	f000 f908 	bl	8008588 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008378:	4b1d      	ldr	r3, [pc, #116]	; (80083f0 <pvPortMalloc+0x188>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	4a1b      	ldr	r2, [pc, #108]	; (80083f0 <pvPortMalloc+0x188>)
 8008384:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008386:	4b1a      	ldr	r3, [pc, #104]	; (80083f0 <pvPortMalloc+0x188>)
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	4b1b      	ldr	r3, [pc, #108]	; (80083f8 <pvPortMalloc+0x190>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d203      	bcs.n	800839a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008392:	4b17      	ldr	r3, [pc, #92]	; (80083f0 <pvPortMalloc+0x188>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	4a18      	ldr	r2, [pc, #96]	; (80083f8 <pvPortMalloc+0x190>)
 8008398:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800839a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	4b13      	ldr	r3, [pc, #76]	; (80083ec <pvPortMalloc+0x184>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	431a      	orrs	r2, r3
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	2200      	movs	r2, #0
 80083ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80083ae:	4b13      	ldr	r3, [pc, #76]	; (80083fc <pvPortMalloc+0x194>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	3301      	adds	r3, #1
 80083b4:	4a11      	ldr	r2, [pc, #68]	; (80083fc <pvPortMalloc+0x194>)
 80083b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083b8:	f7ff fa4c 	bl	8007854 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	f003 0307 	and.w	r3, r3, #7
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <pvPortMalloc+0x174>
	__asm volatile
 80083c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ca:	f383 8811 	msr	BASEPRI, r3
 80083ce:	f3bf 8f6f 	isb	sy
 80083d2:	f3bf 8f4f 	dsb	sy
 80083d6:	60fb      	str	r3, [r7, #12]
}
 80083d8:	bf00      	nop
 80083da:	e7fe      	b.n	80083da <pvPortMalloc+0x172>
	return pvReturn;
 80083dc:	69fb      	ldr	r3, [r7, #28]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3728      	adds	r7, #40	; 0x28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20004a20 	.word	0x20004a20
 80083ec:	20004a34 	.word	0x20004a34
 80083f0:	20004a24 	.word	0x20004a24
 80083f4:	20004a18 	.word	0x20004a18
 80083f8:	20004a28 	.word	0x20004a28
 80083fc:	20004a2c 	.word	0x20004a2c

08008400 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04d      	beq.n	80084ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008412:	2308      	movs	r3, #8
 8008414:	425b      	negs	r3, r3
 8008416:	697a      	ldr	r2, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008420:	693b      	ldr	r3, [r7, #16]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	4b24      	ldr	r3, [pc, #144]	; (80084b8 <vPortFree+0xb8>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	d10a      	bne.n	8008444 <vPortFree+0x44>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	60fb      	str	r3, [r7, #12]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <vPortFree+0x62>
	__asm volatile
 800844c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008450:	f383 8811 	msr	BASEPRI, r3
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	f3bf 8f4f 	dsb	sy
 800845c:	60bb      	str	r3, [r7, #8]
}
 800845e:	bf00      	nop
 8008460:	e7fe      	b.n	8008460 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	4b14      	ldr	r3, [pc, #80]	; (80084b8 <vPortFree+0xb8>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d01e      	beq.n	80084ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008470:	693b      	ldr	r3, [r7, #16]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d11a      	bne.n	80084ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <vPortFree+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	43db      	mvns	r3, r3
 8008482:	401a      	ands	r2, r3
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008488:	f7ff f9d6 	bl	8007838 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	4b0a      	ldr	r3, [pc, #40]	; (80084bc <vPortFree+0xbc>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4413      	add	r3, r2
 8008496:	4a09      	ldr	r2, [pc, #36]	; (80084bc <vPortFree+0xbc>)
 8008498:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800849a:	6938      	ldr	r0, [r7, #16]
 800849c:	f000 f874 	bl	8008588 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80084a0:	4b07      	ldr	r3, [pc, #28]	; (80084c0 <vPortFree+0xc0>)
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	3301      	adds	r3, #1
 80084a6:	4a06      	ldr	r2, [pc, #24]	; (80084c0 <vPortFree+0xc0>)
 80084a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80084aa:	f7ff f9d3 	bl	8007854 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80084ae:	bf00      	nop
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20004a34 	.word	0x20004a34
 80084bc:	20004a24 	.word	0x20004a24
 80084c0:	20004a30 	.word	0x20004a30

080084c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b085      	sub	sp, #20
 80084c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80084ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084d0:	4b27      	ldr	r3, [pc, #156]	; (8008570 <prvHeapInit+0xac>)
 80084d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f003 0307 	and.w	r3, r3, #7
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00c      	beq.n	80084f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	3307      	adds	r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f023 0307 	bic.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <prvHeapInit+0xac>)
 80084f4:	4413      	add	r3, r2
 80084f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084fc:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <prvHeapInit+0xb0>)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008502:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <prvHeapInit+0xb0>)
 8008504:	2200      	movs	r2, #0
 8008506:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	4413      	add	r3, r2
 800850e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008510:	2208      	movs	r2, #8
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	1a9b      	subs	r3, r3, r2
 8008516:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f023 0307 	bic.w	r3, r3, #7
 800851e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4a15      	ldr	r2, [pc, #84]	; (8008578 <prvHeapInit+0xb4>)
 8008524:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008526:	4b14      	ldr	r3, [pc, #80]	; (8008578 <prvHeapInit+0xb4>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	2200      	movs	r2, #0
 800852c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800852e:	4b12      	ldr	r3, [pc, #72]	; (8008578 <prvHeapInit+0xb4>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2200      	movs	r2, #0
 8008534:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	1ad2      	subs	r2, r2, r3
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008544:	4b0c      	ldr	r3, [pc, #48]	; (8008578 <prvHeapInit+0xb4>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	4a0a      	ldr	r2, [pc, #40]	; (800857c <prvHeapInit+0xb8>)
 8008552:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	4a09      	ldr	r2, [pc, #36]	; (8008580 <prvHeapInit+0xbc>)
 800855a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800855c:	4b09      	ldr	r3, [pc, #36]	; (8008584 <prvHeapInit+0xc0>)
 800855e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	20000e18 	.word	0x20000e18
 8008574:	20004a18 	.word	0x20004a18
 8008578:	20004a20 	.word	0x20004a20
 800857c:	20004a28 	.word	0x20004a28
 8008580:	20004a24 	.word	0x20004a24
 8008584:	20004a34 	.word	0x20004a34

08008588 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008588:	b480      	push	{r7}
 800858a:	b085      	sub	sp, #20
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008590:	4b28      	ldr	r3, [pc, #160]	; (8008634 <prvInsertBlockIntoFreeList+0xac>)
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e002      	b.n	800859c <prvInsertBlockIntoFreeList+0x14>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d8f7      	bhi.n	8008596 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4413      	add	r3, r2
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d108      	bne.n	80085ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685a      	ldr	r2, [r3, #4]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	441a      	add	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	68ba      	ldr	r2, [r7, #8]
 80085d4:	441a      	add	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d118      	bne.n	8008610 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681a      	ldr	r2, [r3, #0]
 80085e2:	4b15      	ldr	r3, [pc, #84]	; (8008638 <prvInsertBlockIntoFreeList+0xb0>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d00d      	beq.n	8008606 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	685a      	ldr	r2, [r3, #4]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	441a      	add	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	601a      	str	r2, [r3, #0]
 8008604:	e008      	b.n	8008618 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008606:	4b0c      	ldr	r3, [pc, #48]	; (8008638 <prvInsertBlockIntoFreeList+0xb0>)
 8008608:	681a      	ldr	r2, [r3, #0]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e003      	b.n	8008618 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d002      	beq.n	8008626 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	687a      	ldr	r2, [r7, #4]
 8008624:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008626:	bf00      	nop
 8008628:	3714      	adds	r7, #20
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr
 8008632:	bf00      	nop
 8008634:	20004a18 	.word	0x20004a18
 8008638:	20004a20 	.word	0x20004a20

0800863c <__errno>:
 800863c:	4b01      	ldr	r3, [pc, #4]	; (8008644 <__errno+0x8>)
 800863e:	6818      	ldr	r0, [r3, #0]
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	2000006c 	.word	0x2000006c

08008648 <__libc_init_array>:
 8008648:	b570      	push	{r4, r5, r6, lr}
 800864a:	4d0d      	ldr	r5, [pc, #52]	; (8008680 <__libc_init_array+0x38>)
 800864c:	4c0d      	ldr	r4, [pc, #52]	; (8008684 <__libc_init_array+0x3c>)
 800864e:	1b64      	subs	r4, r4, r5
 8008650:	10a4      	asrs	r4, r4, #2
 8008652:	2600      	movs	r6, #0
 8008654:	42a6      	cmp	r6, r4
 8008656:	d109      	bne.n	800866c <__libc_init_array+0x24>
 8008658:	4d0b      	ldr	r5, [pc, #44]	; (8008688 <__libc_init_array+0x40>)
 800865a:	4c0c      	ldr	r4, [pc, #48]	; (800868c <__libc_init_array+0x44>)
 800865c:	f004 fd2a 	bl	800d0b4 <_init>
 8008660:	1b64      	subs	r4, r4, r5
 8008662:	10a4      	asrs	r4, r4, #2
 8008664:	2600      	movs	r6, #0
 8008666:	42a6      	cmp	r6, r4
 8008668:	d105      	bne.n	8008676 <__libc_init_array+0x2e>
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008670:	4798      	blx	r3
 8008672:	3601      	adds	r6, #1
 8008674:	e7ee      	b.n	8008654 <__libc_init_array+0xc>
 8008676:	f855 3b04 	ldr.w	r3, [r5], #4
 800867a:	4798      	blx	r3
 800867c:	3601      	adds	r6, #1
 800867e:	e7f2      	b.n	8008666 <__libc_init_array+0x1e>
 8008680:	0800d534 	.word	0x0800d534
 8008684:	0800d534 	.word	0x0800d534
 8008688:	0800d534 	.word	0x0800d534
 800868c:	0800d53c 	.word	0x0800d53c

08008690 <malloc>:
 8008690:	4b02      	ldr	r3, [pc, #8]	; (800869c <malloc+0xc>)
 8008692:	4601      	mov	r1, r0
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	f000 b80b 	b.w	80086b0 <_malloc_r>
 800869a:	bf00      	nop
 800869c:	2000006c 	.word	0x2000006c

080086a0 <free>:
 80086a0:	4b02      	ldr	r3, [pc, #8]	; (80086ac <free+0xc>)
 80086a2:	4601      	mov	r1, r0
 80086a4:	6818      	ldr	r0, [r3, #0]
 80086a6:	f000 bb1d 	b.w	8008ce4 <_free_r>
 80086aa:	bf00      	nop
 80086ac:	2000006c 	.word	0x2000006c

080086b0 <_malloc_r>:
 80086b0:	f101 030b 	add.w	r3, r1, #11
 80086b4:	2b16      	cmp	r3, #22
 80086b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086ba:	4605      	mov	r5, r0
 80086bc:	d906      	bls.n	80086cc <_malloc_r+0x1c>
 80086be:	f033 0707 	bics.w	r7, r3, #7
 80086c2:	d504      	bpl.n	80086ce <_malloc_r+0x1e>
 80086c4:	230c      	movs	r3, #12
 80086c6:	602b      	str	r3, [r5, #0]
 80086c8:	2400      	movs	r4, #0
 80086ca:	e1ae      	b.n	8008a2a <_malloc_r+0x37a>
 80086cc:	2710      	movs	r7, #16
 80086ce:	42b9      	cmp	r1, r7
 80086d0:	d8f8      	bhi.n	80086c4 <_malloc_r+0x14>
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 fa44 	bl	8008b60 <__malloc_lock>
 80086d8:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 80086dc:	4ec3      	ldr	r6, [pc, #780]	; (80089ec <_malloc_r+0x33c>)
 80086de:	d238      	bcs.n	8008752 <_malloc_r+0xa2>
 80086e0:	f107 0208 	add.w	r2, r7, #8
 80086e4:	4432      	add	r2, r6
 80086e6:	f1a2 0108 	sub.w	r1, r2, #8
 80086ea:	6854      	ldr	r4, [r2, #4]
 80086ec:	428c      	cmp	r4, r1
 80086ee:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 80086f2:	d102      	bne.n	80086fa <_malloc_r+0x4a>
 80086f4:	68d4      	ldr	r4, [r2, #12]
 80086f6:	42a2      	cmp	r2, r4
 80086f8:	d010      	beq.n	800871c <_malloc_r+0x6c>
 80086fa:	6863      	ldr	r3, [r4, #4]
 80086fc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008700:	f023 0303 	bic.w	r3, r3, #3
 8008704:	60ca      	str	r2, [r1, #12]
 8008706:	4423      	add	r3, r4
 8008708:	6091      	str	r1, [r2, #8]
 800870a:	685a      	ldr	r2, [r3, #4]
 800870c:	f042 0201 	orr.w	r2, r2, #1
 8008710:	605a      	str	r2, [r3, #4]
 8008712:	4628      	mov	r0, r5
 8008714:	f000 fa2a 	bl	8008b6c <__malloc_unlock>
 8008718:	3408      	adds	r4, #8
 800871a:	e186      	b.n	8008a2a <_malloc_r+0x37a>
 800871c:	3302      	adds	r3, #2
 800871e:	4ab4      	ldr	r2, [pc, #720]	; (80089f0 <_malloc_r+0x340>)
 8008720:	6934      	ldr	r4, [r6, #16]
 8008722:	4294      	cmp	r4, r2
 8008724:	4611      	mov	r1, r2
 8008726:	d077      	beq.n	8008818 <_malloc_r+0x168>
 8008728:	6860      	ldr	r0, [r4, #4]
 800872a:	f020 0c03 	bic.w	ip, r0, #3
 800872e:	ebac 0007 	sub.w	r0, ip, r7
 8008732:	280f      	cmp	r0, #15
 8008734:	dd48      	ble.n	80087c8 <_malloc_r+0x118>
 8008736:	19e1      	adds	r1, r4, r7
 8008738:	f040 0301 	orr.w	r3, r0, #1
 800873c:	f047 0701 	orr.w	r7, r7, #1
 8008740:	6067      	str	r7, [r4, #4]
 8008742:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8008746:	e9c1 2202 	strd	r2, r2, [r1, #8]
 800874a:	604b      	str	r3, [r1, #4]
 800874c:	f844 000c 	str.w	r0, [r4, ip]
 8008750:	e7df      	b.n	8008712 <_malloc_r+0x62>
 8008752:	0a7b      	lsrs	r3, r7, #9
 8008754:	d02a      	beq.n	80087ac <_malloc_r+0xfc>
 8008756:	2b04      	cmp	r3, #4
 8008758:	d812      	bhi.n	8008780 <_malloc_r+0xd0>
 800875a:	09bb      	lsrs	r3, r7, #6
 800875c:	3338      	adds	r3, #56	; 0x38
 800875e:	1c5a      	adds	r2, r3, #1
 8008760:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8008764:	f1a2 0c08 	sub.w	ip, r2, #8
 8008768:	6854      	ldr	r4, [r2, #4]
 800876a:	4564      	cmp	r4, ip
 800876c:	d006      	beq.n	800877c <_malloc_r+0xcc>
 800876e:	6862      	ldr	r2, [r4, #4]
 8008770:	f022 0203 	bic.w	r2, r2, #3
 8008774:	1bd0      	subs	r0, r2, r7
 8008776:	280f      	cmp	r0, #15
 8008778:	dd1c      	ble.n	80087b4 <_malloc_r+0x104>
 800877a:	3b01      	subs	r3, #1
 800877c:	3301      	adds	r3, #1
 800877e:	e7ce      	b.n	800871e <_malloc_r+0x6e>
 8008780:	2b14      	cmp	r3, #20
 8008782:	d801      	bhi.n	8008788 <_malloc_r+0xd8>
 8008784:	335b      	adds	r3, #91	; 0x5b
 8008786:	e7ea      	b.n	800875e <_malloc_r+0xae>
 8008788:	2b54      	cmp	r3, #84	; 0x54
 800878a:	d802      	bhi.n	8008792 <_malloc_r+0xe2>
 800878c:	0b3b      	lsrs	r3, r7, #12
 800878e:	336e      	adds	r3, #110	; 0x6e
 8008790:	e7e5      	b.n	800875e <_malloc_r+0xae>
 8008792:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008796:	d802      	bhi.n	800879e <_malloc_r+0xee>
 8008798:	0bfb      	lsrs	r3, r7, #15
 800879a:	3377      	adds	r3, #119	; 0x77
 800879c:	e7df      	b.n	800875e <_malloc_r+0xae>
 800879e:	f240 5254 	movw	r2, #1364	; 0x554
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d804      	bhi.n	80087b0 <_malloc_r+0x100>
 80087a6:	0cbb      	lsrs	r3, r7, #18
 80087a8:	337c      	adds	r3, #124	; 0x7c
 80087aa:	e7d8      	b.n	800875e <_malloc_r+0xae>
 80087ac:	233f      	movs	r3, #63	; 0x3f
 80087ae:	e7d6      	b.n	800875e <_malloc_r+0xae>
 80087b0:	237e      	movs	r3, #126	; 0x7e
 80087b2:	e7d4      	b.n	800875e <_malloc_r+0xae>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	68e1      	ldr	r1, [r4, #12]
 80087b8:	db04      	blt.n	80087c4 <_malloc_r+0x114>
 80087ba:	68a3      	ldr	r3, [r4, #8]
 80087bc:	60d9      	str	r1, [r3, #12]
 80087be:	608b      	str	r3, [r1, #8]
 80087c0:	18a3      	adds	r3, r4, r2
 80087c2:	e7a2      	b.n	800870a <_malloc_r+0x5a>
 80087c4:	460c      	mov	r4, r1
 80087c6:	e7d0      	b.n	800876a <_malloc_r+0xba>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80087ce:	db07      	blt.n	80087e0 <_malloc_r+0x130>
 80087d0:	44a4      	add	ip, r4
 80087d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	f8cc 3004 	str.w	r3, [ip, #4]
 80087de:	e798      	b.n	8008712 <_malloc_r+0x62>
 80087e0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80087e4:	6870      	ldr	r0, [r6, #4]
 80087e6:	f080 809e 	bcs.w	8008926 <_malloc_r+0x276>
 80087ea:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80087ee:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80087f2:	f04f 0c01 	mov.w	ip, #1
 80087f6:	3201      	adds	r2, #1
 80087f8:	fa0c fc0e 	lsl.w	ip, ip, lr
 80087fc:	ea4c 0000 	orr.w	r0, ip, r0
 8008800:	6070      	str	r0, [r6, #4]
 8008802:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8008806:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 800880a:	3808      	subs	r0, #8
 800880c:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8008810:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8008814:	f8cc 400c 	str.w	r4, [ip, #12]
 8008818:	2001      	movs	r0, #1
 800881a:	109a      	asrs	r2, r3, #2
 800881c:	fa00 f202 	lsl.w	r2, r0, r2
 8008820:	6870      	ldr	r0, [r6, #4]
 8008822:	4290      	cmp	r0, r2
 8008824:	d326      	bcc.n	8008874 <_malloc_r+0x1c4>
 8008826:	4210      	tst	r0, r2
 8008828:	d106      	bne.n	8008838 <_malloc_r+0x188>
 800882a:	f023 0303 	bic.w	r3, r3, #3
 800882e:	0052      	lsls	r2, r2, #1
 8008830:	4210      	tst	r0, r2
 8008832:	f103 0304 	add.w	r3, r3, #4
 8008836:	d0fa      	beq.n	800882e <_malloc_r+0x17e>
 8008838:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 800883c:	46c1      	mov	r9, r8
 800883e:	469e      	mov	lr, r3
 8008840:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008844:	454c      	cmp	r4, r9
 8008846:	f040 80b3 	bne.w	80089b0 <_malloc_r+0x300>
 800884a:	f10e 0e01 	add.w	lr, lr, #1
 800884e:	f01e 0f03 	tst.w	lr, #3
 8008852:	f109 0908 	add.w	r9, r9, #8
 8008856:	d1f3      	bne.n	8008840 <_malloc_r+0x190>
 8008858:	0798      	lsls	r0, r3, #30
 800885a:	f040 80ec 	bne.w	8008a36 <_malloc_r+0x386>
 800885e:	6873      	ldr	r3, [r6, #4]
 8008860:	ea23 0302 	bic.w	r3, r3, r2
 8008864:	6073      	str	r3, [r6, #4]
 8008866:	6870      	ldr	r0, [r6, #4]
 8008868:	0052      	lsls	r2, r2, #1
 800886a:	4290      	cmp	r0, r2
 800886c:	d302      	bcc.n	8008874 <_malloc_r+0x1c4>
 800886e:	2a00      	cmp	r2, #0
 8008870:	f040 80ee 	bne.w	8008a50 <_malloc_r+0x3a0>
 8008874:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8008878:	f8db 1004 	ldr.w	r1, [fp, #4]
 800887c:	f021 0903 	bic.w	r9, r1, #3
 8008880:	45b9      	cmp	r9, r7
 8008882:	d304      	bcc.n	800888e <_malloc_r+0x1de>
 8008884:	eba9 0207 	sub.w	r2, r9, r7
 8008888:	2a0f      	cmp	r2, #15
 800888a:	f300 8149 	bgt.w	8008b20 <_malloc_r+0x470>
 800888e:	4a59      	ldr	r2, [pc, #356]	; (80089f4 <_malloc_r+0x344>)
 8008890:	6811      	ldr	r1, [r2, #0]
 8008892:	3110      	adds	r1, #16
 8008894:	eb0b 0309 	add.w	r3, fp, r9
 8008898:	4439      	add	r1, r7
 800889a:	2008      	movs	r0, #8
 800889c:	9301      	str	r3, [sp, #4]
 800889e:	9100      	str	r1, [sp, #0]
 80088a0:	f000 f97a 	bl	8008b98 <sysconf>
 80088a4:	4a54      	ldr	r2, [pc, #336]	; (80089f8 <_malloc_r+0x348>)
 80088a6:	e9dd 1300 	ldrd	r1, r3, [sp]
 80088aa:	4680      	mov	r8, r0
 80088ac:	6810      	ldr	r0, [r2, #0]
 80088ae:	3001      	adds	r0, #1
 80088b0:	bf1f      	itttt	ne
 80088b2:	f101 31ff 	addne.w	r1, r1, #4294967295
 80088b6:	4441      	addne	r1, r8
 80088b8:	f1c8 0000 	rsbne	r0, r8, #0
 80088bc:	4001      	andne	r1, r0
 80088be:	4628      	mov	r0, r5
 80088c0:	e9cd 1300 	strd	r1, r3, [sp]
 80088c4:	f000 f958 	bl	8008b78 <_sbrk_r>
 80088c8:	1c42      	adds	r2, r0, #1
 80088ca:	4604      	mov	r4, r0
 80088cc:	f000 80fc 	beq.w	8008ac8 <_malloc_r+0x418>
 80088d0:	9b01      	ldr	r3, [sp, #4]
 80088d2:	9900      	ldr	r1, [sp, #0]
 80088d4:	4a48      	ldr	r2, [pc, #288]	; (80089f8 <_malloc_r+0x348>)
 80088d6:	4283      	cmp	r3, r0
 80088d8:	d902      	bls.n	80088e0 <_malloc_r+0x230>
 80088da:	45b3      	cmp	fp, r6
 80088dc:	f040 80f4 	bne.w	8008ac8 <_malloc_r+0x418>
 80088e0:	f8df a120 	ldr.w	sl, [pc, #288]	; 8008a04 <_malloc_r+0x354>
 80088e4:	f8da 0000 	ldr.w	r0, [sl]
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	eb00 0e01 	add.w	lr, r0, r1
 80088ee:	f8ca e000 	str.w	lr, [sl]
 80088f2:	f108 3cff 	add.w	ip, r8, #4294967295
 80088f6:	f040 80ad 	bne.w	8008a54 <_malloc_r+0x3a4>
 80088fa:	ea13 0f0c 	tst.w	r3, ip
 80088fe:	f040 80a9 	bne.w	8008a54 <_malloc_r+0x3a4>
 8008902:	68b3      	ldr	r3, [r6, #8]
 8008904:	4449      	add	r1, r9
 8008906:	f041 0101 	orr.w	r1, r1, #1
 800890a:	6059      	str	r1, [r3, #4]
 800890c:	4a3b      	ldr	r2, [pc, #236]	; (80089fc <_malloc_r+0x34c>)
 800890e:	f8da 3000 	ldr.w	r3, [sl]
 8008912:	6811      	ldr	r1, [r2, #0]
 8008914:	428b      	cmp	r3, r1
 8008916:	bf88      	it	hi
 8008918:	6013      	strhi	r3, [r2, #0]
 800891a:	4a39      	ldr	r2, [pc, #228]	; (8008a00 <_malloc_r+0x350>)
 800891c:	6811      	ldr	r1, [r2, #0]
 800891e:	428b      	cmp	r3, r1
 8008920:	bf88      	it	hi
 8008922:	6013      	strhi	r3, [r2, #0]
 8008924:	e0d0      	b.n	8008ac8 <_malloc_r+0x418>
 8008926:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 800892a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800892e:	d218      	bcs.n	8008962 <_malloc_r+0x2b2>
 8008930:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008934:	3238      	adds	r2, #56	; 0x38
 8008936:	f102 0e01 	add.w	lr, r2, #1
 800893a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 800893e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8008942:	45f0      	cmp	r8, lr
 8008944:	d12b      	bne.n	800899e <_malloc_r+0x2ee>
 8008946:	1092      	asrs	r2, r2, #2
 8008948:	f04f 0c01 	mov.w	ip, #1
 800894c:	fa0c f202 	lsl.w	r2, ip, r2
 8008950:	4310      	orrs	r0, r2
 8008952:	6070      	str	r0, [r6, #4]
 8008954:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8008958:	f8c8 4008 	str.w	r4, [r8, #8]
 800895c:	f8ce 400c 	str.w	r4, [lr, #12]
 8008960:	e75a      	b.n	8008818 <_malloc_r+0x168>
 8008962:	2a14      	cmp	r2, #20
 8008964:	d801      	bhi.n	800896a <_malloc_r+0x2ba>
 8008966:	325b      	adds	r2, #91	; 0x5b
 8008968:	e7e5      	b.n	8008936 <_malloc_r+0x286>
 800896a:	2a54      	cmp	r2, #84	; 0x54
 800896c:	d803      	bhi.n	8008976 <_malloc_r+0x2c6>
 800896e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008972:	326e      	adds	r2, #110	; 0x6e
 8008974:	e7df      	b.n	8008936 <_malloc_r+0x286>
 8008976:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800897a:	d803      	bhi.n	8008984 <_malloc_r+0x2d4>
 800897c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8008980:	3277      	adds	r2, #119	; 0x77
 8008982:	e7d8      	b.n	8008936 <_malloc_r+0x286>
 8008984:	f240 5e54 	movw	lr, #1364	; 0x554
 8008988:	4572      	cmp	r2, lr
 800898a:	bf9a      	itte	ls
 800898c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008990:	327c      	addls	r2, #124	; 0x7c
 8008992:	227e      	movhi	r2, #126	; 0x7e
 8008994:	e7cf      	b.n	8008936 <_malloc_r+0x286>
 8008996:	f8de e008 	ldr.w	lr, [lr, #8]
 800899a:	45f0      	cmp	r8, lr
 800899c:	d005      	beq.n	80089aa <_malloc_r+0x2fa>
 800899e:	f8de 2004 	ldr.w	r2, [lr, #4]
 80089a2:	f022 0203 	bic.w	r2, r2, #3
 80089a6:	4562      	cmp	r2, ip
 80089a8:	d8f5      	bhi.n	8008996 <_malloc_r+0x2e6>
 80089aa:	f8de 800c 	ldr.w	r8, [lr, #12]
 80089ae:	e7d1      	b.n	8008954 <_malloc_r+0x2a4>
 80089b0:	6860      	ldr	r0, [r4, #4]
 80089b2:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80089b6:	f020 0003 	bic.w	r0, r0, #3
 80089ba:	eba0 0a07 	sub.w	sl, r0, r7
 80089be:	f1ba 0f0f 	cmp.w	sl, #15
 80089c2:	dd21      	ble.n	8008a08 <_malloc_r+0x358>
 80089c4:	68a3      	ldr	r3, [r4, #8]
 80089c6:	19e2      	adds	r2, r4, r7
 80089c8:	f047 0701 	orr.w	r7, r7, #1
 80089cc:	6067      	str	r7, [r4, #4]
 80089ce:	f8c3 c00c 	str.w	ip, [r3, #12]
 80089d2:	f8cc 3008 	str.w	r3, [ip, #8]
 80089d6:	f04a 0301 	orr.w	r3, sl, #1
 80089da:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80089de:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80089e2:	6053      	str	r3, [r2, #4]
 80089e4:	f844 a000 	str.w	sl, [r4, r0]
 80089e8:	e693      	b.n	8008712 <_malloc_r+0x62>
 80089ea:	bf00      	nop
 80089ec:	20000498 	.word	0x20000498
 80089f0:	200004a0 	.word	0x200004a0
 80089f4:	20004a68 	.word	0x20004a68
 80089f8:	200008a0 	.word	0x200008a0
 80089fc:	20004a60 	.word	0x20004a60
 8008a00:	20004a64 	.word	0x20004a64
 8008a04:	20004a38 	.word	0x20004a38
 8008a08:	f1ba 0f00 	cmp.w	sl, #0
 8008a0c:	db11      	blt.n	8008a32 <_malloc_r+0x382>
 8008a0e:	4420      	add	r0, r4
 8008a10:	6843      	ldr	r3, [r0, #4]
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	6043      	str	r3, [r0, #4]
 8008a18:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f8c3 c00c 	str.w	ip, [r3, #12]
 8008a22:	f8cc 3008 	str.w	r3, [ip, #8]
 8008a26:	f000 f8a1 	bl	8008b6c <__malloc_unlock>
 8008a2a:	4620      	mov	r0, r4
 8008a2c:	b003      	add	sp, #12
 8008a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a32:	4664      	mov	r4, ip
 8008a34:	e706      	b.n	8008844 <_malloc_r+0x194>
 8008a36:	f858 0908 	ldr.w	r0, [r8], #-8
 8008a3a:	4540      	cmp	r0, r8
 8008a3c:	f103 33ff 	add.w	r3, r3, #4294967295
 8008a40:	f43f af0a 	beq.w	8008858 <_malloc_r+0x1a8>
 8008a44:	e70f      	b.n	8008866 <_malloc_r+0x1b6>
 8008a46:	3304      	adds	r3, #4
 8008a48:	0052      	lsls	r2, r2, #1
 8008a4a:	4210      	tst	r0, r2
 8008a4c:	d0fb      	beq.n	8008a46 <_malloc_r+0x396>
 8008a4e:	e6f3      	b.n	8008838 <_malloc_r+0x188>
 8008a50:	4673      	mov	r3, lr
 8008a52:	e7fa      	b.n	8008a4a <_malloc_r+0x39a>
 8008a54:	6810      	ldr	r0, [r2, #0]
 8008a56:	3001      	adds	r0, #1
 8008a58:	bf1b      	ittet	ne
 8008a5a:	1ae3      	subne	r3, r4, r3
 8008a5c:	4473      	addne	r3, lr
 8008a5e:	6014      	streq	r4, [r2, #0]
 8008a60:	f8ca 3000 	strne.w	r3, [sl]
 8008a64:	f014 0307 	ands.w	r3, r4, #7
 8008a68:	bf1a      	itte	ne
 8008a6a:	f1c3 0008 	rsbne	r0, r3, #8
 8008a6e:	1824      	addne	r4, r4, r0
 8008a70:	4618      	moveq	r0, r3
 8008a72:	1862      	adds	r2, r4, r1
 8008a74:	ea02 010c 	and.w	r1, r2, ip
 8008a78:	4480      	add	r8, r0
 8008a7a:	eba8 0801 	sub.w	r8, r8, r1
 8008a7e:	ea08 080c 	and.w	r8, r8, ip
 8008a82:	4641      	mov	r1, r8
 8008a84:	4628      	mov	r0, r5
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	9200      	str	r2, [sp, #0]
 8008a8a:	f000 f875 	bl	8008b78 <_sbrk_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a94:	d105      	bne.n	8008aa2 <_malloc_r+0x3f2>
 8008a96:	b32b      	cbz	r3, 8008ae4 <_malloc_r+0x434>
 8008a98:	f1a3 0008 	sub.w	r0, r3, #8
 8008a9c:	4410      	add	r0, r2
 8008a9e:	f04f 0800 	mov.w	r8, #0
 8008aa2:	f8da 2000 	ldr.w	r2, [sl]
 8008aa6:	60b4      	str	r4, [r6, #8]
 8008aa8:	1b00      	subs	r0, r0, r4
 8008aaa:	4440      	add	r0, r8
 8008aac:	4442      	add	r2, r8
 8008aae:	f040 0001 	orr.w	r0, r0, #1
 8008ab2:	45b3      	cmp	fp, r6
 8008ab4:	f8ca 2000 	str.w	r2, [sl]
 8008ab8:	6060      	str	r0, [r4, #4]
 8008aba:	f43f af27 	beq.w	800890c <_malloc_r+0x25c>
 8008abe:	f1b9 0f0f 	cmp.w	r9, #15
 8008ac2:	d812      	bhi.n	8008aea <_malloc_r+0x43a>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	68b3      	ldr	r3, [r6, #8]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	f023 0303 	bic.w	r3, r3, #3
 8008ad0:	42bb      	cmp	r3, r7
 8008ad2:	eba3 0207 	sub.w	r2, r3, r7
 8008ad6:	d301      	bcc.n	8008adc <_malloc_r+0x42c>
 8008ad8:	2a0f      	cmp	r2, #15
 8008ada:	dc21      	bgt.n	8008b20 <_malloc_r+0x470>
 8008adc:	4628      	mov	r0, r5
 8008ade:	f000 f845 	bl	8008b6c <__malloc_unlock>
 8008ae2:	e5f1      	b.n	80086c8 <_malloc_r+0x18>
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	4698      	mov	r8, r3
 8008ae8:	e7db      	b.n	8008aa2 <_malloc_r+0x3f2>
 8008aea:	f8db 3004 	ldr.w	r3, [fp, #4]
 8008aee:	f1a9 090c 	sub.w	r9, r9, #12
 8008af2:	f029 0907 	bic.w	r9, r9, #7
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	ea43 0309 	orr.w	r3, r3, r9
 8008afe:	f8cb 3004 	str.w	r3, [fp, #4]
 8008b02:	2205      	movs	r2, #5
 8008b04:	eb0b 0309 	add.w	r3, fp, r9
 8008b08:	f1b9 0f0f 	cmp.w	r9, #15
 8008b0c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8008b10:	f67f aefc 	bls.w	800890c <_malloc_r+0x25c>
 8008b14:	f10b 0108 	add.w	r1, fp, #8
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 f8e3 	bl	8008ce4 <_free_r>
 8008b1e:	e6f5      	b.n	800890c <_malloc_r+0x25c>
 8008b20:	68b4      	ldr	r4, [r6, #8]
 8008b22:	f047 0301 	orr.w	r3, r7, #1
 8008b26:	4427      	add	r7, r4
 8008b28:	f042 0201 	orr.w	r2, r2, #1
 8008b2c:	6063      	str	r3, [r4, #4]
 8008b2e:	60b7      	str	r7, [r6, #8]
 8008b30:	607a      	str	r2, [r7, #4]
 8008b32:	e5ee      	b.n	8008712 <_malloc_r+0x62>

08008b34 <memcpy>:
 8008b34:	440a      	add	r2, r1
 8008b36:	4291      	cmp	r1, r2
 8008b38:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b3c:	d100      	bne.n	8008b40 <memcpy+0xc>
 8008b3e:	4770      	bx	lr
 8008b40:	b510      	push	{r4, lr}
 8008b42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b46:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b4a:	4291      	cmp	r1, r2
 8008b4c:	d1f9      	bne.n	8008b42 <memcpy+0xe>
 8008b4e:	bd10      	pop	{r4, pc}

08008b50 <memset>:
 8008b50:	4402      	add	r2, r0
 8008b52:	4603      	mov	r3, r0
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d100      	bne.n	8008b5a <memset+0xa>
 8008b58:	4770      	bx	lr
 8008b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b5e:	e7f9      	b.n	8008b54 <memset+0x4>

08008b60 <__malloc_lock>:
 8008b60:	4801      	ldr	r0, [pc, #4]	; (8008b68 <__malloc_lock+0x8>)
 8008b62:	f000 b981 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 8008b66:	bf00      	nop
 8008b68:	20004d24 	.word	0x20004d24

08008b6c <__malloc_unlock>:
 8008b6c:	4801      	ldr	r0, [pc, #4]	; (8008b74 <__malloc_unlock+0x8>)
 8008b6e:	f000 b97c 	b.w	8008e6a <__retarget_lock_release_recursive>
 8008b72:	bf00      	nop
 8008b74:	20004d24 	.word	0x20004d24

08008b78 <_sbrk_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	4d06      	ldr	r5, [pc, #24]	; (8008b94 <_sbrk_r+0x1c>)
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	4604      	mov	r4, r0
 8008b80:	4608      	mov	r0, r1
 8008b82:	602b      	str	r3, [r5, #0]
 8008b84:	f7f9 f9d0 	bl	8001f28 <_sbrk>
 8008b88:	1c43      	adds	r3, r0, #1
 8008b8a:	d102      	bne.n	8008b92 <_sbrk_r+0x1a>
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	b103      	cbz	r3, 8008b92 <_sbrk_r+0x1a>
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	bd38      	pop	{r3, r4, r5, pc}
 8008b94:	20004d2c 	.word	0x20004d2c

08008b98 <sysconf>:
 8008b98:	2808      	cmp	r0, #8
 8008b9a:	b508      	push	{r3, lr}
 8008b9c:	d006      	beq.n	8008bac <sysconf+0x14>
 8008b9e:	f7ff fd4d 	bl	800863c <__errno>
 8008ba2:	2316      	movs	r3, #22
 8008ba4:	6003      	str	r3, [r0, #0]
 8008ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8008baa:	bd08      	pop	{r3, pc}
 8008bac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008bb0:	e7fb      	b.n	8008baa <sysconf+0x12>
	...

08008bb4 <_vsprintf_r>:
 8008bb4:	b500      	push	{lr}
 8008bb6:	b09b      	sub	sp, #108	; 0x6c
 8008bb8:	9100      	str	r1, [sp, #0]
 8008bba:	9104      	str	r1, [sp, #16]
 8008bbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008bc0:	9105      	str	r1, [sp, #20]
 8008bc2:	9102      	str	r1, [sp, #8]
 8008bc4:	4905      	ldr	r1, [pc, #20]	; (8008bdc <_vsprintf_r+0x28>)
 8008bc6:	9103      	str	r1, [sp, #12]
 8008bc8:	4669      	mov	r1, sp
 8008bca:	f000 f951 	bl	8008e70 <_svfprintf_r>
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	b01b      	add	sp, #108	; 0x6c
 8008bd6:	f85d fb04 	ldr.w	pc, [sp], #4
 8008bda:	bf00      	nop
 8008bdc:	ffff0208 	.word	0xffff0208

08008be0 <vsprintf>:
 8008be0:	4613      	mov	r3, r2
 8008be2:	460a      	mov	r2, r1
 8008be4:	4601      	mov	r1, r0
 8008be6:	4802      	ldr	r0, [pc, #8]	; (8008bf0 <vsprintf+0x10>)
 8008be8:	6800      	ldr	r0, [r0, #0]
 8008bea:	f7ff bfe3 	b.w	8008bb4 <_vsprintf_r>
 8008bee:	bf00      	nop
 8008bf0:	2000006c 	.word	0x2000006c

08008bf4 <register_fini>:
 8008bf4:	4b02      	ldr	r3, [pc, #8]	; (8008c00 <register_fini+0xc>)
 8008bf6:	b113      	cbz	r3, 8008bfe <register_fini+0xa>
 8008bf8:	4802      	ldr	r0, [pc, #8]	; (8008c04 <register_fini+0x10>)
 8008bfa:	f000 b805 	b.w	8008c08 <atexit>
 8008bfe:	4770      	bx	lr
 8008c00:	00000000 	.word	0x00000000
 8008c04:	08008c15 	.word	0x08008c15

08008c08 <atexit>:
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f001 bb0e 	b.w	800a230 <__register_exitproc>

08008c14 <__libc_fini_array>:
 8008c14:	b538      	push	{r3, r4, r5, lr}
 8008c16:	4d07      	ldr	r5, [pc, #28]	; (8008c34 <__libc_fini_array+0x20>)
 8008c18:	4c07      	ldr	r4, [pc, #28]	; (8008c38 <__libc_fini_array+0x24>)
 8008c1a:	1b64      	subs	r4, r4, r5
 8008c1c:	10a4      	asrs	r4, r4, #2
 8008c1e:	b91c      	cbnz	r4, 8008c28 <__libc_fini_array+0x14>
 8008c20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c24:	f004 ba4c 	b.w	800d0c0 <_fini>
 8008c28:	3c01      	subs	r4, #1
 8008c2a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8008c2e:	4798      	blx	r3
 8008c30:	e7f5      	b.n	8008c1e <__libc_fini_array+0xa>
 8008c32:	bf00      	nop
 8008c34:	0800d53c 	.word	0x0800d53c
 8008c38:	0800d540 	.word	0x0800d540

08008c3c <_malloc_trim_r>:
 8008c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c40:	4606      	mov	r6, r0
 8008c42:	2008      	movs	r0, #8
 8008c44:	460c      	mov	r4, r1
 8008c46:	f7ff ffa7 	bl	8008b98 <sysconf>
 8008c4a:	4f23      	ldr	r7, [pc, #140]	; (8008cd8 <_malloc_trim_r+0x9c>)
 8008c4c:	4680      	mov	r8, r0
 8008c4e:	4630      	mov	r0, r6
 8008c50:	f7ff ff86 	bl	8008b60 <__malloc_lock>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	685d      	ldr	r5, [r3, #4]
 8008c58:	f025 0503 	bic.w	r5, r5, #3
 8008c5c:	1b2c      	subs	r4, r5, r4
 8008c5e:	3c11      	subs	r4, #17
 8008c60:	4444      	add	r4, r8
 8008c62:	fbb4 f4f8 	udiv	r4, r4, r8
 8008c66:	3c01      	subs	r4, #1
 8008c68:	fb08 f404 	mul.w	r4, r8, r4
 8008c6c:	45a0      	cmp	r8, r4
 8008c6e:	dd05      	ble.n	8008c7c <_malloc_trim_r+0x40>
 8008c70:	4630      	mov	r0, r6
 8008c72:	f7ff ff7b 	bl	8008b6c <__malloc_unlock>
 8008c76:	2000      	movs	r0, #0
 8008c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c7c:	2100      	movs	r1, #0
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7ff ff7a 	bl	8008b78 <_sbrk_r>
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	442b      	add	r3, r5
 8008c88:	4298      	cmp	r0, r3
 8008c8a:	d1f1      	bne.n	8008c70 <_malloc_trim_r+0x34>
 8008c8c:	4261      	negs	r1, r4
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7ff ff72 	bl	8008b78 <_sbrk_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	d110      	bne.n	8008cba <_malloc_trim_r+0x7e>
 8008c98:	2100      	movs	r1, #0
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	f7ff ff6c 	bl	8008b78 <_sbrk_r>
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	1a83      	subs	r3, r0, r2
 8008ca4:	2b0f      	cmp	r3, #15
 8008ca6:	dde3      	ble.n	8008c70 <_malloc_trim_r+0x34>
 8008ca8:	490c      	ldr	r1, [pc, #48]	; (8008cdc <_malloc_trim_r+0xa0>)
 8008caa:	6809      	ldr	r1, [r1, #0]
 8008cac:	1a40      	subs	r0, r0, r1
 8008cae:	490c      	ldr	r1, [pc, #48]	; (8008ce0 <_malloc_trim_r+0xa4>)
 8008cb0:	f043 0301 	orr.w	r3, r3, #1
 8008cb4:	6008      	str	r0, [r1, #0]
 8008cb6:	6053      	str	r3, [r2, #4]
 8008cb8:	e7da      	b.n	8008c70 <_malloc_trim_r+0x34>
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	4a08      	ldr	r2, [pc, #32]	; (8008ce0 <_malloc_trim_r+0xa4>)
 8008cbe:	1b2d      	subs	r5, r5, r4
 8008cc0:	f045 0501 	orr.w	r5, r5, #1
 8008cc4:	605d      	str	r5, [r3, #4]
 8008cc6:	6813      	ldr	r3, [r2, #0]
 8008cc8:	4630      	mov	r0, r6
 8008cca:	1b1c      	subs	r4, r3, r4
 8008ccc:	6014      	str	r4, [r2, #0]
 8008cce:	f7ff ff4d 	bl	8008b6c <__malloc_unlock>
 8008cd2:	2001      	movs	r0, #1
 8008cd4:	e7d0      	b.n	8008c78 <_malloc_trim_r+0x3c>
 8008cd6:	bf00      	nop
 8008cd8:	20000498 	.word	0x20000498
 8008cdc:	200008a0 	.word	0x200008a0
 8008ce0:	20004a38 	.word	0x20004a38

08008ce4 <_free_r>:
 8008ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ce6:	4605      	mov	r5, r0
 8008ce8:	460f      	mov	r7, r1
 8008cea:	2900      	cmp	r1, #0
 8008cec:	f000 80b1 	beq.w	8008e52 <_free_r+0x16e>
 8008cf0:	f7ff ff36 	bl	8008b60 <__malloc_lock>
 8008cf4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008cf8:	4856      	ldr	r0, [pc, #344]	; (8008e54 <_free_r+0x170>)
 8008cfa:	f022 0401 	bic.w	r4, r2, #1
 8008cfe:	f1a7 0308 	sub.w	r3, r7, #8
 8008d02:	eb03 0c04 	add.w	ip, r3, r4
 8008d06:	6881      	ldr	r1, [r0, #8]
 8008d08:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8008d0c:	4561      	cmp	r1, ip
 8008d0e:	f026 0603 	bic.w	r6, r6, #3
 8008d12:	f002 0201 	and.w	r2, r2, #1
 8008d16:	d11b      	bne.n	8008d50 <_free_r+0x6c>
 8008d18:	4434      	add	r4, r6
 8008d1a:	b93a      	cbnz	r2, 8008d2c <_free_r+0x48>
 8008d1c:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	4414      	add	r4, r2
 8008d24:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8008d28:	60ca      	str	r2, [r1, #12]
 8008d2a:	6091      	str	r1, [r2, #8]
 8008d2c:	f044 0201 	orr.w	r2, r4, #1
 8008d30:	605a      	str	r2, [r3, #4]
 8008d32:	6083      	str	r3, [r0, #8]
 8008d34:	4b48      	ldr	r3, [pc, #288]	; (8008e58 <_free_r+0x174>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	42a3      	cmp	r3, r4
 8008d3a:	d804      	bhi.n	8008d46 <_free_r+0x62>
 8008d3c:	4b47      	ldr	r3, [pc, #284]	; (8008e5c <_free_r+0x178>)
 8008d3e:	4628      	mov	r0, r5
 8008d40:	6819      	ldr	r1, [r3, #0]
 8008d42:	f7ff ff7b 	bl	8008c3c <_malloc_trim_r>
 8008d46:	4628      	mov	r0, r5
 8008d48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d4c:	f7ff bf0e 	b.w	8008b6c <__malloc_unlock>
 8008d50:	f8cc 6004 	str.w	r6, [ip, #4]
 8008d54:	2a00      	cmp	r2, #0
 8008d56:	d138      	bne.n	8008dca <_free_r+0xe6>
 8008d58:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8008d5c:	1a5b      	subs	r3, r3, r1
 8008d5e:	440c      	add	r4, r1
 8008d60:	6899      	ldr	r1, [r3, #8]
 8008d62:	f100 0708 	add.w	r7, r0, #8
 8008d66:	42b9      	cmp	r1, r7
 8008d68:	d031      	beq.n	8008dce <_free_r+0xea>
 8008d6a:	68df      	ldr	r7, [r3, #12]
 8008d6c:	60cf      	str	r7, [r1, #12]
 8008d6e:	60b9      	str	r1, [r7, #8]
 8008d70:	eb0c 0106 	add.w	r1, ip, r6
 8008d74:	6849      	ldr	r1, [r1, #4]
 8008d76:	07c9      	lsls	r1, r1, #31
 8008d78:	d40b      	bmi.n	8008d92 <_free_r+0xae>
 8008d7a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8008d7e:	4434      	add	r4, r6
 8008d80:	bb3a      	cbnz	r2, 8008dd2 <_free_r+0xee>
 8008d82:	4e37      	ldr	r6, [pc, #220]	; (8008e60 <_free_r+0x17c>)
 8008d84:	42b1      	cmp	r1, r6
 8008d86:	d124      	bne.n	8008dd2 <_free_r+0xee>
 8008d88:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d8c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f044 0101 	orr.w	r1, r4, #1
 8008d96:	6059      	str	r1, [r3, #4]
 8008d98:	511c      	str	r4, [r3, r4]
 8008d9a:	2a00      	cmp	r2, #0
 8008d9c:	d1d3      	bne.n	8008d46 <_free_r+0x62>
 8008d9e:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8008da2:	d21b      	bcs.n	8008ddc <_free_r+0xf8>
 8008da4:	0961      	lsrs	r1, r4, #5
 8008da6:	08e2      	lsrs	r2, r4, #3
 8008da8:	2401      	movs	r4, #1
 8008daa:	408c      	lsls	r4, r1
 8008dac:	6841      	ldr	r1, [r0, #4]
 8008dae:	3201      	adds	r2, #1
 8008db0:	430c      	orrs	r4, r1
 8008db2:	6044      	str	r4, [r0, #4]
 8008db4:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8008db8:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8008dbc:	3908      	subs	r1, #8
 8008dbe:	e9c3 4102 	strd	r4, r1, [r3, #8]
 8008dc2:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 8008dc6:	60e3      	str	r3, [r4, #12]
 8008dc8:	e7bd      	b.n	8008d46 <_free_r+0x62>
 8008dca:	2200      	movs	r2, #0
 8008dcc:	e7d0      	b.n	8008d70 <_free_r+0x8c>
 8008dce:	2201      	movs	r2, #1
 8008dd0:	e7ce      	b.n	8008d70 <_free_r+0x8c>
 8008dd2:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8008dd6:	60ce      	str	r6, [r1, #12]
 8008dd8:	60b1      	str	r1, [r6, #8]
 8008dda:	e7da      	b.n	8008d92 <_free_r+0xae>
 8008ddc:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 8008de0:	ea4f 2254 	mov.w	r2, r4, lsr #9
 8008de4:	d214      	bcs.n	8008e10 <_free_r+0x12c>
 8008de6:	09a2      	lsrs	r2, r4, #6
 8008de8:	3238      	adds	r2, #56	; 0x38
 8008dea:	1c51      	adds	r1, r2, #1
 8008dec:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8008df0:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 8008df4:	428e      	cmp	r6, r1
 8008df6:	d125      	bne.n	8008e44 <_free_r+0x160>
 8008df8:	2401      	movs	r4, #1
 8008dfa:	1092      	asrs	r2, r2, #2
 8008dfc:	fa04 f202 	lsl.w	r2, r4, r2
 8008e00:	6844      	ldr	r4, [r0, #4]
 8008e02:	4322      	orrs	r2, r4
 8008e04:	6042      	str	r2, [r0, #4]
 8008e06:	e9c3 1602 	strd	r1, r6, [r3, #8]
 8008e0a:	60b3      	str	r3, [r6, #8]
 8008e0c:	60cb      	str	r3, [r1, #12]
 8008e0e:	e79a      	b.n	8008d46 <_free_r+0x62>
 8008e10:	2a14      	cmp	r2, #20
 8008e12:	d801      	bhi.n	8008e18 <_free_r+0x134>
 8008e14:	325b      	adds	r2, #91	; 0x5b
 8008e16:	e7e8      	b.n	8008dea <_free_r+0x106>
 8008e18:	2a54      	cmp	r2, #84	; 0x54
 8008e1a:	d802      	bhi.n	8008e22 <_free_r+0x13e>
 8008e1c:	0b22      	lsrs	r2, r4, #12
 8008e1e:	326e      	adds	r2, #110	; 0x6e
 8008e20:	e7e3      	b.n	8008dea <_free_r+0x106>
 8008e22:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008e26:	d802      	bhi.n	8008e2e <_free_r+0x14a>
 8008e28:	0be2      	lsrs	r2, r4, #15
 8008e2a:	3277      	adds	r2, #119	; 0x77
 8008e2c:	e7dd      	b.n	8008dea <_free_r+0x106>
 8008e2e:	f240 5154 	movw	r1, #1364	; 0x554
 8008e32:	428a      	cmp	r2, r1
 8008e34:	bf9a      	itte	ls
 8008e36:	0ca2      	lsrls	r2, r4, #18
 8008e38:	327c      	addls	r2, #124	; 0x7c
 8008e3a:	227e      	movhi	r2, #126	; 0x7e
 8008e3c:	e7d5      	b.n	8008dea <_free_r+0x106>
 8008e3e:	6889      	ldr	r1, [r1, #8]
 8008e40:	428e      	cmp	r6, r1
 8008e42:	d004      	beq.n	8008e4e <_free_r+0x16a>
 8008e44:	684a      	ldr	r2, [r1, #4]
 8008e46:	f022 0203 	bic.w	r2, r2, #3
 8008e4a:	42a2      	cmp	r2, r4
 8008e4c:	d8f7      	bhi.n	8008e3e <_free_r+0x15a>
 8008e4e:	68ce      	ldr	r6, [r1, #12]
 8008e50:	e7d9      	b.n	8008e06 <_free_r+0x122>
 8008e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e54:	20000498 	.word	0x20000498
 8008e58:	200008a4 	.word	0x200008a4
 8008e5c:	20004a68 	.word	0x20004a68
 8008e60:	200004a0 	.word	0x200004a0

08008e64 <__retarget_lock_init_recursive>:
 8008e64:	4770      	bx	lr

08008e66 <__retarget_lock_close_recursive>:
 8008e66:	4770      	bx	lr

08008e68 <__retarget_lock_acquire_recursive>:
 8008e68:	4770      	bx	lr

08008e6a <__retarget_lock_release_recursive>:
 8008e6a:	4770      	bx	lr
 8008e6c:	0000      	movs	r0, r0
	...

08008e70 <_svfprintf_r>:
 8008e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e74:	ed2d 8b04 	vpush	{d8-d9}
 8008e78:	b0cf      	sub	sp, #316	; 0x13c
 8008e7a:	4689      	mov	r9, r1
 8008e7c:	4693      	mov	fp, r2
 8008e7e:	461e      	mov	r6, r3
 8008e80:	4682      	mov	sl, r0
 8008e82:	f002 f875 	bl	800af70 <_localeconv_r>
 8008e86:	6803      	ldr	r3, [r0, #0]
 8008e88:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f7f7 f9a8 	bl	80001e0 <strlen>
 8008e90:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8008e94:	900e      	str	r0, [sp, #56]	; 0x38
 8008e96:	0618      	lsls	r0, r3, #24
 8008e98:	d51a      	bpl.n	8008ed0 <_svfprintf_r+0x60>
 8008e9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e9e:	b9bb      	cbnz	r3, 8008ed0 <_svfprintf_r+0x60>
 8008ea0:	2140      	movs	r1, #64	; 0x40
 8008ea2:	4650      	mov	r0, sl
 8008ea4:	f7ff fc04 	bl	80086b0 <_malloc_r>
 8008ea8:	f8c9 0000 	str.w	r0, [r9]
 8008eac:	f8c9 0010 	str.w	r0, [r9, #16]
 8008eb0:	b958      	cbnz	r0, 8008eca <_svfprintf_r+0x5a>
 8008eb2:	230c      	movs	r3, #12
 8008eb4:	f8ca 3000 	str.w	r3, [sl]
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ebe:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008ec0:	b04f      	add	sp, #316	; 0x13c
 8008ec2:	ecbd 8b04 	vpop	{d8-d9}
 8008ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eca:	2340      	movs	r3, #64	; 0x40
 8008ecc:	f8c9 3014 	str.w	r3, [r9, #20]
 8008ed0:	ed9f 7b93 	vldr	d7, [pc, #588]	; 8009120 <_svfprintf_r+0x2b0>
 8008ed4:	2500      	movs	r5, #0
 8008ed6:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 8008eda:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8008ede:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 8008ee2:	ac25      	add	r4, sp, #148	; 0x94
 8008ee4:	9422      	str	r4, [sp, #136]	; 0x88
 8008ee6:	9505      	str	r5, [sp, #20]
 8008ee8:	950a      	str	r5, [sp, #40]	; 0x28
 8008eea:	9512      	str	r5, [sp, #72]	; 0x48
 8008eec:	9514      	str	r5, [sp, #80]	; 0x50
 8008eee:	950f      	str	r5, [sp, #60]	; 0x3c
 8008ef0:	465b      	mov	r3, fp
 8008ef2:	461d      	mov	r5, r3
 8008ef4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ef8:	b10a      	cbz	r2, 8008efe <_svfprintf_r+0x8e>
 8008efa:	2a25      	cmp	r2, #37	; 0x25
 8008efc:	d1f9      	bne.n	8008ef2 <_svfprintf_r+0x82>
 8008efe:	ebb5 070b 	subs.w	r7, r5, fp
 8008f02:	d00d      	beq.n	8008f20 <_svfprintf_r+0xb0>
 8008f04:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008f06:	443b      	add	r3, r7
 8008f08:	9324      	str	r3, [sp, #144]	; 0x90
 8008f0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	2b07      	cmp	r3, #7
 8008f10:	e9c4 b700 	strd	fp, r7, [r4]
 8008f14:	9323      	str	r3, [sp, #140]	; 0x8c
 8008f16:	dc79      	bgt.n	800900c <_svfprintf_r+0x19c>
 8008f18:	3408      	adds	r4, #8
 8008f1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f1c:	443b      	add	r3, r7
 8008f1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f20:	782b      	ldrb	r3, [r5, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	f001 8140 	beq.w	800a1a8 <_svfprintf_r+0x1338>
 8008f28:	2300      	movs	r3, #0
 8008f2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f2e:	3501      	adds	r5, #1
 8008f30:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8008f34:	9204      	str	r2, [sp, #16]
 8008f36:	9310      	str	r3, [sp, #64]	; 0x40
 8008f38:	4698      	mov	r8, r3
 8008f3a:	270a      	movs	r7, #10
 8008f3c:	212b      	movs	r1, #43	; 0x2b
 8008f3e:	462a      	mov	r2, r5
 8008f40:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008f44:	9307      	str	r3, [sp, #28]
 8008f46:	920b      	str	r2, [sp, #44]	; 0x2c
 8008f48:	9b07      	ldr	r3, [sp, #28]
 8008f4a:	3b20      	subs	r3, #32
 8008f4c:	2b5a      	cmp	r3, #90	; 0x5a
 8008f4e:	f200 85b4 	bhi.w	8009aba <_svfprintf_r+0xc4a>
 8008f52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008f56:	007e      	.short	0x007e
 8008f58:	05b205b2 	.word	0x05b205b2
 8008f5c:	05b20086 	.word	0x05b20086
 8008f60:	05b205b2 	.word	0x05b205b2
 8008f64:	05b20065 	.word	0x05b20065
 8008f68:	008905b2 	.word	0x008905b2
 8008f6c:	05b20093 	.word	0x05b20093
 8008f70:	00960090 	.word	0x00960090
 8008f74:	00b305b2 	.word	0x00b305b2
 8008f78:	00b600b6 	.word	0x00b600b6
 8008f7c:	00b600b6 	.word	0x00b600b6
 8008f80:	00b600b6 	.word	0x00b600b6
 8008f84:	00b600b6 	.word	0x00b600b6
 8008f88:	05b200b6 	.word	0x05b200b6
 8008f8c:	05b205b2 	.word	0x05b205b2
 8008f90:	05b205b2 	.word	0x05b205b2
 8008f94:	05b205b2 	.word	0x05b205b2
 8008f98:	05b20127 	.word	0x05b20127
 8008f9c:	00fc00e9 	.word	0x00fc00e9
 8008fa0:	01270127 	.word	0x01270127
 8008fa4:	05b20127 	.word	0x05b20127
 8008fa8:	05b205b2 	.word	0x05b205b2
 8008fac:	00c605b2 	.word	0x00c605b2
 8008fb0:	05b205b2 	.word	0x05b205b2
 8008fb4:	05b20492 	.word	0x05b20492
 8008fb8:	05b205b2 	.word	0x05b205b2
 8008fbc:	05b204d9 	.word	0x05b204d9
 8008fc0:	05b204fa 	.word	0x05b204fa
 8008fc4:	051905b2 	.word	0x051905b2
 8008fc8:	05b205b2 	.word	0x05b205b2
 8008fcc:	05b205b2 	.word	0x05b205b2
 8008fd0:	05b205b2 	.word	0x05b205b2
 8008fd4:	05b205b2 	.word	0x05b205b2
 8008fd8:	05b20127 	.word	0x05b20127
 8008fdc:	00fe00e9 	.word	0x00fe00e9
 8008fe0:	01270127 	.word	0x01270127
 8008fe4:	00c90127 	.word	0x00c90127
 8008fe8:	00dd00fe 	.word	0x00dd00fe
 8008fec:	00d605b2 	.word	0x00d605b2
 8008ff0:	046f05b2 	.word	0x046f05b2
 8008ff4:	04c80494 	.word	0x04c80494
 8008ff8:	05b200dd 	.word	0x05b200dd
 8008ffc:	007c04d9 	.word	0x007c04d9
 8009000:	05b204fc 	.word	0x05b204fc
 8009004:	053605b2 	.word	0x053605b2
 8009008:	007c05b2 	.word	0x007c05b2
 800900c:	aa22      	add	r2, sp, #136	; 0x88
 800900e:	4649      	mov	r1, r9
 8009010:	4650      	mov	r0, sl
 8009012:	f002 fb2c 	bl	800b66e <__ssprint_r>
 8009016:	2800      	cmp	r0, #0
 8009018:	f040 8132 	bne.w	8009280 <_svfprintf_r+0x410>
 800901c:	ac25      	add	r4, sp, #148	; 0x94
 800901e:	e77c      	b.n	8008f1a <_svfprintf_r+0xaa>
 8009020:	4650      	mov	r0, sl
 8009022:	f001 ffa5 	bl	800af70 <_localeconv_r>
 8009026:	6843      	ldr	r3, [r0, #4]
 8009028:	9314      	str	r3, [sp, #80]	; 0x50
 800902a:	4618      	mov	r0, r3
 800902c:	f7f7 f8d8 	bl	80001e0 <strlen>
 8009030:	9012      	str	r0, [sp, #72]	; 0x48
 8009032:	4650      	mov	r0, sl
 8009034:	f001 ff9c 	bl	800af70 <_localeconv_r>
 8009038:	6883      	ldr	r3, [r0, #8]
 800903a:	930a      	str	r3, [sp, #40]	; 0x28
 800903c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800903e:	212b      	movs	r1, #43	; 0x2b
 8009040:	b12b      	cbz	r3, 800904e <_svfprintf_r+0x1de>
 8009042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009044:	b11b      	cbz	r3, 800904e <_svfprintf_r+0x1de>
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	b10b      	cbz	r3, 800904e <_svfprintf_r+0x1de>
 800904a:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800904e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009050:	e775      	b.n	8008f3e <_svfprintf_r+0xce>
 8009052:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1f9      	bne.n	800904e <_svfprintf_r+0x1de>
 800905a:	2320      	movs	r3, #32
 800905c:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8009060:	e7f5      	b.n	800904e <_svfprintf_r+0x1de>
 8009062:	f048 0801 	orr.w	r8, r8, #1
 8009066:	e7f2      	b.n	800904e <_svfprintf_r+0x1de>
 8009068:	f856 3b04 	ldr.w	r3, [r6], #4
 800906c:	9310      	str	r3, [sp, #64]	; 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	daed      	bge.n	800904e <_svfprintf_r+0x1de>
 8009072:	425b      	negs	r3, r3
 8009074:	9310      	str	r3, [sp, #64]	; 0x40
 8009076:	f048 0804 	orr.w	r8, r8, #4
 800907a:	e7e8      	b.n	800904e <_svfprintf_r+0x1de>
 800907c:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 8009080:	e7e5      	b.n	800904e <_svfprintf_r+0x1de>
 8009082:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009084:	f812 3b01 	ldrb.w	r3, [r2], #1
 8009088:	9307      	str	r3, [sp, #28]
 800908a:	2b2a      	cmp	r3, #42	; 0x2a
 800908c:	d113      	bne.n	80090b6 <_svfprintf_r+0x246>
 800908e:	f856 0b04 	ldr.w	r0, [r6], #4
 8009092:	920b      	str	r2, [sp, #44]	; 0x2c
 8009094:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 8009098:	9304      	str	r3, [sp, #16]
 800909a:	e7d8      	b.n	800904e <_svfprintf_r+0x1de>
 800909c:	9804      	ldr	r0, [sp, #16]
 800909e:	fb07 3300 	mla	r3, r7, r0, r3
 80090a2:	9304      	str	r3, [sp, #16]
 80090a4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80090a8:	9307      	str	r3, [sp, #28]
 80090aa:	9b07      	ldr	r3, [sp, #28]
 80090ac:	3b30      	subs	r3, #48	; 0x30
 80090ae:	2b09      	cmp	r3, #9
 80090b0:	d9f4      	bls.n	800909c <_svfprintf_r+0x22c>
 80090b2:	920b      	str	r2, [sp, #44]	; 0x2c
 80090b4:	e748      	b.n	8008f48 <_svfprintf_r+0xd8>
 80090b6:	2300      	movs	r3, #0
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	e7f6      	b.n	80090aa <_svfprintf_r+0x23a>
 80090bc:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 80090c0:	e7c5      	b.n	800904e <_svfprintf_r+0x1de>
 80090c2:	2300      	movs	r3, #0
 80090c4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80090c6:	9310      	str	r3, [sp, #64]	; 0x40
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	9810      	ldr	r0, [sp, #64]	; 0x40
 80090cc:	3b30      	subs	r3, #48	; 0x30
 80090ce:	fb07 3300 	mla	r3, r7, r0, r3
 80090d2:	9310      	str	r3, [sp, #64]	; 0x40
 80090d4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80090d8:	9307      	str	r3, [sp, #28]
 80090da:	3b30      	subs	r3, #48	; 0x30
 80090dc:	2b09      	cmp	r3, #9
 80090de:	d9f3      	bls.n	80090c8 <_svfprintf_r+0x258>
 80090e0:	e7e7      	b.n	80090b2 <_svfprintf_r+0x242>
 80090e2:	f048 0808 	orr.w	r8, r8, #8
 80090e6:	e7b2      	b.n	800904e <_svfprintf_r+0x1de>
 80090e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b68      	cmp	r3, #104	; 0x68
 80090ee:	bf01      	itttt	eq
 80090f0:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 80090f2:	3301      	addeq	r3, #1
 80090f4:	930b      	streq	r3, [sp, #44]	; 0x2c
 80090f6:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 80090fa:	bf18      	it	ne
 80090fc:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 8009100:	e7a5      	b.n	800904e <_svfprintf_r+0x1de>
 8009102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b6c      	cmp	r3, #108	; 0x6c
 8009108:	d105      	bne.n	8009116 <_svfprintf_r+0x2a6>
 800910a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800910c:	3301      	adds	r3, #1
 800910e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009110:	f048 0820 	orr.w	r8, r8, #32
 8009114:	e79b      	b.n	800904e <_svfprintf_r+0x1de>
 8009116:	f048 0810 	orr.w	r8, r8, #16
 800911a:	e798      	b.n	800904e <_svfprintf_r+0x1de>
 800911c:	f3af 8000 	nop.w
	...
 8009128:	4632      	mov	r2, r6
 800912a:	2000      	movs	r0, #0
 800912c:	f852 3b04 	ldr.w	r3, [r2], #4
 8009130:	9206      	str	r2, [sp, #24]
 8009132:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009136:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800913a:	2301      	movs	r3, #1
 800913c:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8009140:	9003      	str	r0, [sp, #12]
 8009142:	9304      	str	r3, [sp, #16]
 8009144:	4606      	mov	r6, r0
 8009146:	4605      	mov	r5, r0
 8009148:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800914c:	e1b8      	b.n	80094c0 <_svfprintf_r+0x650>
 800914e:	f048 0810 	orr.w	r8, r8, #16
 8009152:	f018 0f20 	tst.w	r8, #32
 8009156:	d012      	beq.n	800917e <_svfprintf_r+0x30e>
 8009158:	3607      	adds	r6, #7
 800915a:	f026 0307 	bic.w	r3, r6, #7
 800915e:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 8009162:	9306      	str	r3, [sp, #24]
 8009164:	2e00      	cmp	r6, #0
 8009166:	f177 0300 	sbcs.w	r3, r7, #0
 800916a:	da06      	bge.n	800917a <_svfprintf_r+0x30a>
 800916c:	4276      	negs	r6, r6
 800916e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009172:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009176:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800917a:	2301      	movs	r3, #1
 800917c:	e38e      	b.n	800989c <_svfprintf_r+0xa2c>
 800917e:	1d33      	adds	r3, r6, #4
 8009180:	f018 0f10 	tst.w	r8, #16
 8009184:	9306      	str	r3, [sp, #24]
 8009186:	d002      	beq.n	800918e <_svfprintf_r+0x31e>
 8009188:	6836      	ldr	r6, [r6, #0]
 800918a:	17f7      	asrs	r7, r6, #31
 800918c:	e7ea      	b.n	8009164 <_svfprintf_r+0x2f4>
 800918e:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009192:	6836      	ldr	r6, [r6, #0]
 8009194:	d001      	beq.n	800919a <_svfprintf_r+0x32a>
 8009196:	b236      	sxth	r6, r6
 8009198:	e7f7      	b.n	800918a <_svfprintf_r+0x31a>
 800919a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800919e:	bf18      	it	ne
 80091a0:	b276      	sxtbne	r6, r6
 80091a2:	e7f2      	b.n	800918a <_svfprintf_r+0x31a>
 80091a4:	3607      	adds	r6, #7
 80091a6:	f026 0307 	bic.w	r3, r6, #7
 80091aa:	ecb3 7b02 	vldmia	r3!, {d7}
 80091ae:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80091b2:	9306      	str	r3, [sp, #24]
 80091b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091b6:	ee09 3a10 	vmov	s18, r3
 80091ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091c0:	ee09 3a90 	vmov	s19, r3
 80091c4:	f04f 32ff 	mov.w	r2, #4294967295
 80091c8:	4b3a      	ldr	r3, [pc, #232]	; (80092b4 <_svfprintf_r+0x444>)
 80091ca:	ec51 0b19 	vmov	r0, r1, d9
 80091ce:	f7f7 fcb5 	bl	8000b3c <__aeabi_dcmpun>
 80091d2:	bb10      	cbnz	r0, 800921a <_svfprintf_r+0x3aa>
 80091d4:	4b37      	ldr	r3, [pc, #220]	; (80092b4 <_svfprintf_r+0x444>)
 80091d6:	ec51 0b19 	vmov	r0, r1, d9
 80091da:	f04f 32ff 	mov.w	r2, #4294967295
 80091de:	f7f7 fc8f 	bl	8000b00 <__aeabi_dcmple>
 80091e2:	b9d0      	cbnz	r0, 800921a <_svfprintf_r+0x3aa>
 80091e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80091e8:	2200      	movs	r2, #0
 80091ea:	2300      	movs	r3, #0
 80091ec:	f7f7 fc7e 	bl	8000aec <__aeabi_dcmplt>
 80091f0:	b110      	cbz	r0, 80091f8 <_svfprintf_r+0x388>
 80091f2:	232d      	movs	r3, #45	; 0x2d
 80091f4:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80091f8:	4a2f      	ldr	r2, [pc, #188]	; (80092b8 <_svfprintf_r+0x448>)
 80091fa:	4830      	ldr	r0, [pc, #192]	; (80092bc <_svfprintf_r+0x44c>)
 80091fc:	9b07      	ldr	r3, [sp, #28]
 80091fe:	2100      	movs	r1, #0
 8009200:	2b47      	cmp	r3, #71	; 0x47
 8009202:	bfd4      	ite	le
 8009204:	4693      	movle	fp, r2
 8009206:	4683      	movgt	fp, r0
 8009208:	2303      	movs	r3, #3
 800920a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800920e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 8009212:	2600      	movs	r6, #0
 8009214:	4633      	mov	r3, r6
 8009216:	f001 b802 	b.w	800a21e <_svfprintf_r+0x13ae>
 800921a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800921e:	4610      	mov	r0, r2
 8009220:	4619      	mov	r1, r3
 8009222:	f7f7 fc8b 	bl	8000b3c <__aeabi_dcmpun>
 8009226:	b140      	cbz	r0, 800923a <_svfprintf_r+0x3ca>
 8009228:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800922a:	4a25      	ldr	r2, [pc, #148]	; (80092c0 <_svfprintf_r+0x450>)
 800922c:	4825      	ldr	r0, [pc, #148]	; (80092c4 <_svfprintf_r+0x454>)
 800922e:	2b00      	cmp	r3, #0
 8009230:	bfbc      	itt	lt
 8009232:	232d      	movlt	r3, #45	; 0x2d
 8009234:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8009238:	e7e0      	b.n	80091fc <_svfprintf_r+0x38c>
 800923a:	9b07      	ldr	r3, [sp, #28]
 800923c:	f023 0320 	bic.w	r3, r3, #32
 8009240:	2b41      	cmp	r3, #65	; 0x41
 8009242:	9308      	str	r3, [sp, #32]
 8009244:	d125      	bne.n	8009292 <_svfprintf_r+0x422>
 8009246:	2330      	movs	r3, #48	; 0x30
 8009248:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	2b61      	cmp	r3, #97	; 0x61
 8009250:	bf0c      	ite	eq
 8009252:	2378      	moveq	r3, #120	; 0x78
 8009254:	2358      	movne	r3, #88	; 0x58
 8009256:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800925a:	9b04      	ldr	r3, [sp, #16]
 800925c:	2b63      	cmp	r3, #99	; 0x63
 800925e:	f048 0802 	orr.w	r8, r8, #2
 8009262:	dd31      	ble.n	80092c8 <_svfprintf_r+0x458>
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	4650      	mov	r0, sl
 8009268:	f7ff fa22 	bl	80086b0 <_malloc_r>
 800926c:	4683      	mov	fp, r0
 800926e:	2800      	cmp	r0, #0
 8009270:	f040 81fe 	bne.w	8009670 <_svfprintf_r+0x800>
 8009274:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800927c:	f8a9 300c 	strh.w	r3, [r9, #12]
 8009280:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8009284:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800928a:	bf18      	it	ne
 800928c:	f04f 33ff 	movne.w	r3, #4294967295
 8009290:	e614      	b.n	8008ebc <_svfprintf_r+0x4c>
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	3301      	adds	r3, #1
 8009296:	f000 81ed 	beq.w	8009674 <_svfprintf_r+0x804>
 800929a:	9b08      	ldr	r3, [sp, #32]
 800929c:	2b47      	cmp	r3, #71	; 0x47
 800929e:	f040 81ec 	bne.w	800967a <_svfprintf_r+0x80a>
 80092a2:	9b04      	ldr	r3, [sp, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f040 81e8 	bne.w	800967a <_svfprintf_r+0x80a>
 80092aa:	9303      	str	r3, [sp, #12]
 80092ac:	2301      	movs	r3, #1
 80092ae:	9304      	str	r3, [sp, #16]
 80092b0:	e00d      	b.n	80092ce <_svfprintf_r+0x45e>
 80092b2:	bf00      	nop
 80092b4:	7fefffff 	.word	0x7fefffff
 80092b8:	0800d190 	.word	0x0800d190
 80092bc:	0800d194 	.word	0x0800d194
 80092c0:	0800d198 	.word	0x0800d198
 80092c4:	0800d19c 	.word	0x0800d19c
 80092c8:	9003      	str	r0, [sp, #12]
 80092ca:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 80092ce:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 80092d2:	9311      	str	r3, [sp, #68]	; 0x44
 80092d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	f280 81d1 	bge.w	800967e <_svfprintf_r+0x80e>
 80092dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80092de:	ee08 3a10 	vmov	s16, r3
 80092e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80092e8:	ee08 3a90 	vmov	s17, r3
 80092ec:	232d      	movs	r3, #45	; 0x2d
 80092ee:	9318      	str	r3, [sp, #96]	; 0x60
 80092f0:	9b08      	ldr	r3, [sp, #32]
 80092f2:	2b41      	cmp	r3, #65	; 0x41
 80092f4:	f040 81e1 	bne.w	80096ba <_svfprintf_r+0x84a>
 80092f8:	eeb0 0a48 	vmov.f32	s0, s16
 80092fc:	eef0 0a68 	vmov.f32	s1, s17
 8009300:	a81c      	add	r0, sp, #112	; 0x70
 8009302:	f002 f969 	bl	800b5d8 <frexp>
 8009306:	2200      	movs	r2, #0
 8009308:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800930c:	ec51 0b10 	vmov	r0, r1, d0
 8009310:	f7f7 f97a 	bl	8000608 <__aeabi_dmul>
 8009314:	2200      	movs	r2, #0
 8009316:	2300      	movs	r3, #0
 8009318:	4606      	mov	r6, r0
 800931a:	460f      	mov	r7, r1
 800931c:	f7f7 fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009320:	b108      	cbz	r0, 8009326 <_svfprintf_r+0x4b6>
 8009322:	2301      	movs	r3, #1
 8009324:	931c      	str	r3, [sp, #112]	; 0x70
 8009326:	4bb4      	ldr	r3, [pc, #720]	; (80095f8 <_svfprintf_r+0x788>)
 8009328:	4ab4      	ldr	r2, [pc, #720]	; (80095fc <_svfprintf_r+0x78c>)
 800932a:	9907      	ldr	r1, [sp, #28]
 800932c:	2961      	cmp	r1, #97	; 0x61
 800932e:	bf18      	it	ne
 8009330:	461a      	movne	r2, r3
 8009332:	9b04      	ldr	r3, [sp, #16]
 8009334:	9217      	str	r2, [sp, #92]	; 0x5c
 8009336:	3b01      	subs	r3, #1
 8009338:	9305      	str	r3, [sp, #20]
 800933a:	465d      	mov	r5, fp
 800933c:	4bb0      	ldr	r3, [pc, #704]	; (8009600 <_svfprintf_r+0x790>)
 800933e:	2200      	movs	r2, #0
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f7 f960 	bl	8000608 <__aeabi_dmul>
 8009348:	460f      	mov	r7, r1
 800934a:	4606      	mov	r6, r0
 800934c:	f7f7 fc0c 	bl	8000b68 <__aeabi_d2iz>
 8009350:	9019      	str	r0, [sp, #100]	; 0x64
 8009352:	f7f7 f8ef 	bl	8000534 <__aeabi_i2d>
 8009356:	4602      	mov	r2, r0
 8009358:	460b      	mov	r3, r1
 800935a:	4630      	mov	r0, r6
 800935c:	4639      	mov	r1, r7
 800935e:	f7f6 ff9b 	bl	8000298 <__aeabi_dsub>
 8009362:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009364:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009366:	5c9b      	ldrb	r3, [r3, r2]
 8009368:	f805 3b01 	strb.w	r3, [r5], #1
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	9309      	str	r3, [sp, #36]	; 0x24
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	4606      	mov	r6, r0
 8009374:	460f      	mov	r7, r1
 8009376:	d007      	beq.n	8009388 <_svfprintf_r+0x518>
 8009378:	3b01      	subs	r3, #1
 800937a:	9305      	str	r3, [sp, #20]
 800937c:	2200      	movs	r2, #0
 800937e:	2300      	movs	r3, #0
 8009380:	f7f7 fbaa 	bl	8000ad8 <__aeabi_dcmpeq>
 8009384:	2800      	cmp	r0, #0
 8009386:	d0d9      	beq.n	800933c <_svfprintf_r+0x4cc>
 8009388:	4b9e      	ldr	r3, [pc, #632]	; (8009604 <_svfprintf_r+0x794>)
 800938a:	2200      	movs	r2, #0
 800938c:	4630      	mov	r0, r6
 800938e:	4639      	mov	r1, r7
 8009390:	f7f7 fbca 	bl	8000b28 <__aeabi_dcmpgt>
 8009394:	b960      	cbnz	r0, 80093b0 <_svfprintf_r+0x540>
 8009396:	4b9b      	ldr	r3, [pc, #620]	; (8009604 <_svfprintf_r+0x794>)
 8009398:	2200      	movs	r2, #0
 800939a:	4630      	mov	r0, r6
 800939c:	4639      	mov	r1, r7
 800939e:	f7f7 fb9b 	bl	8000ad8 <__aeabi_dcmpeq>
 80093a2:	2800      	cmp	r0, #0
 80093a4:	f000 8184 	beq.w	80096b0 <_svfprintf_r+0x840>
 80093a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80093aa:	07df      	lsls	r7, r3, #31
 80093ac:	f140 8180 	bpl.w	80096b0 <_svfprintf_r+0x840>
 80093b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80093b2:	9520      	str	r5, [sp, #128]	; 0x80
 80093b4:	7bd9      	ldrb	r1, [r3, #15]
 80093b6:	2030      	movs	r0, #48	; 0x30
 80093b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093ba:	1e53      	subs	r3, r2, #1
 80093bc:	9320      	str	r3, [sp, #128]	; 0x80
 80093be:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80093c2:	428b      	cmp	r3, r1
 80093c4:	f000 8163 	beq.w	800968e <_svfprintf_r+0x81e>
 80093c8:	2b39      	cmp	r3, #57	; 0x39
 80093ca:	bf0b      	itete	eq
 80093cc:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 80093ce:	3301      	addne	r3, #1
 80093d0:	7a9b      	ldrbeq	r3, [r3, #10]
 80093d2:	b2db      	uxtbne	r3, r3
 80093d4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80093d8:	eba5 030b 	sub.w	r3, r5, fp
 80093dc:	9305      	str	r3, [sp, #20]
 80093de:	9b08      	ldr	r3, [sp, #32]
 80093e0:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80093e2:	2b47      	cmp	r3, #71	; 0x47
 80093e4:	f040 81b1 	bne.w	800974a <_svfprintf_r+0x8da>
 80093e8:	1cee      	adds	r6, r5, #3
 80093ea:	db03      	blt.n	80093f4 <_svfprintf_r+0x584>
 80093ec:	9b04      	ldr	r3, [sp, #16]
 80093ee:	42ab      	cmp	r3, r5
 80093f0:	f280 81d6 	bge.w	80097a0 <_svfprintf_r+0x930>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	3b02      	subs	r3, #2
 80093f8:	9307      	str	r3, [sp, #28]
 80093fa:	9907      	ldr	r1, [sp, #28]
 80093fc:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8009400:	f021 0120 	bic.w	r1, r1, #32
 8009404:	2941      	cmp	r1, #65	; 0x41
 8009406:	bf08      	it	eq
 8009408:	320f      	addeq	r2, #15
 800940a:	f105 33ff 	add.w	r3, r5, #4294967295
 800940e:	bf06      	itte	eq
 8009410:	b2d2      	uxtbeq	r2, r2
 8009412:	2101      	moveq	r1, #1
 8009414:	2100      	movne	r1, #0
 8009416:	2b00      	cmp	r3, #0
 8009418:	931c      	str	r3, [sp, #112]	; 0x70
 800941a:	bfb8      	it	lt
 800941c:	f1c5 0301 	rsblt	r3, r5, #1
 8009420:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8009424:	bfb4      	ite	lt
 8009426:	222d      	movlt	r2, #45	; 0x2d
 8009428:	222b      	movge	r2, #43	; 0x2b
 800942a:	2b09      	cmp	r3, #9
 800942c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8009430:	f340 81a4 	ble.w	800977c <_svfprintf_r+0x90c>
 8009434:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 8009438:	260a      	movs	r6, #10
 800943a:	4611      	mov	r1, r2
 800943c:	fb93 f5f6 	sdiv	r5, r3, r6
 8009440:	fb06 3015 	mls	r0, r6, r5, r3
 8009444:	3030      	adds	r0, #48	; 0x30
 8009446:	f801 0c01 	strb.w	r0, [r1, #-1]
 800944a:	4618      	mov	r0, r3
 800944c:	2863      	cmp	r0, #99	; 0x63
 800944e:	f102 32ff 	add.w	r2, r2, #4294967295
 8009452:	462b      	mov	r3, r5
 8009454:	dcf1      	bgt.n	800943a <_svfprintf_r+0x5ca>
 8009456:	3330      	adds	r3, #48	; 0x30
 8009458:	1e88      	subs	r0, r1, #2
 800945a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800945e:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 8009462:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8009466:	4603      	mov	r3, r0
 8009468:	42ab      	cmp	r3, r5
 800946a:	f0c0 8182 	bcc.w	8009772 <_svfprintf_r+0x902>
 800946e:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 8009472:	1a52      	subs	r2, r2, r1
 8009474:	42a8      	cmp	r0, r5
 8009476:	bf88      	it	hi
 8009478:	2200      	movhi	r2, #0
 800947a:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800947e:	441a      	add	r2, r3
 8009480:	ab1e      	add	r3, sp, #120	; 0x78
 8009482:	1ad3      	subs	r3, r2, r3
 8009484:	9a05      	ldr	r2, [sp, #20]
 8009486:	9315      	str	r3, [sp, #84]	; 0x54
 8009488:	2a01      	cmp	r2, #1
 800948a:	4413      	add	r3, r2
 800948c:	9304      	str	r3, [sp, #16]
 800948e:	dc02      	bgt.n	8009496 <_svfprintf_r+0x626>
 8009490:	f018 0f01 	tst.w	r8, #1
 8009494:	d003      	beq.n	800949e <_svfprintf_r+0x62e>
 8009496:	9b04      	ldr	r3, [sp, #16]
 8009498:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800949a:	4413      	add	r3, r2
 800949c:	9304      	str	r3, [sp, #16]
 800949e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 80094a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094a6:	9311      	str	r3, [sp, #68]	; 0x44
 80094a8:	2300      	movs	r3, #0
 80094aa:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80094ae:	461d      	mov	r5, r3
 80094b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80094b2:	b113      	cbz	r3, 80094ba <_svfprintf_r+0x64a>
 80094b4:	232d      	movs	r3, #45	; 0x2d
 80094b6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80094ba:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 80094be:	2600      	movs	r6, #0
 80094c0:	9b04      	ldr	r3, [sp, #16]
 80094c2:	42b3      	cmp	r3, r6
 80094c4:	bfb8      	it	lt
 80094c6:	4633      	movlt	r3, r6
 80094c8:	9311      	str	r3, [sp, #68]	; 0x44
 80094ca:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80094ce:	b113      	cbz	r3, 80094d6 <_svfprintf_r+0x666>
 80094d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80094d2:	3301      	adds	r3, #1
 80094d4:	9311      	str	r3, [sp, #68]	; 0x44
 80094d6:	f018 0302 	ands.w	r3, r8, #2
 80094da:	9317      	str	r3, [sp, #92]	; 0x5c
 80094dc:	bf1e      	ittt	ne
 80094de:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 80094e0:	3302      	addne	r3, #2
 80094e2:	9311      	strne	r3, [sp, #68]	; 0x44
 80094e4:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 80094e8:	9318      	str	r3, [sp, #96]	; 0x60
 80094ea:	d11f      	bne.n	800952c <_svfprintf_r+0x6bc>
 80094ec:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 80094f0:	1a9f      	subs	r7, r3, r2
 80094f2:	2f00      	cmp	r7, #0
 80094f4:	dd1a      	ble.n	800952c <_svfprintf_r+0x6bc>
 80094f6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80094fa:	4843      	ldr	r0, [pc, #268]	; (8009608 <_svfprintf_r+0x798>)
 80094fc:	6020      	str	r0, [r4, #0]
 80094fe:	2f10      	cmp	r7, #16
 8009500:	f103 0301 	add.w	r3, r3, #1
 8009504:	f104 0108 	add.w	r1, r4, #8
 8009508:	f300 82e6 	bgt.w	8009ad8 <_svfprintf_r+0xc68>
 800950c:	6067      	str	r7, [r4, #4]
 800950e:	2b07      	cmp	r3, #7
 8009510:	4417      	add	r7, r2
 8009512:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8009516:	f340 82f2 	ble.w	8009afe <_svfprintf_r+0xc8e>
 800951a:	aa22      	add	r2, sp, #136	; 0x88
 800951c:	4649      	mov	r1, r9
 800951e:	4650      	mov	r0, sl
 8009520:	f002 f8a5 	bl	800b66e <__ssprint_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	f040 861d 	bne.w	800a164 <_svfprintf_r+0x12f4>
 800952a:	ac25      	add	r4, sp, #148	; 0x94
 800952c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8009530:	b173      	cbz	r3, 8009550 <_svfprintf_r+0x6e0>
 8009532:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 8009536:	6023      	str	r3, [r4, #0]
 8009538:	2301      	movs	r3, #1
 800953a:	6063      	str	r3, [r4, #4]
 800953c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800953e:	3301      	adds	r3, #1
 8009540:	9324      	str	r3, [sp, #144]	; 0x90
 8009542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009544:	3301      	adds	r3, #1
 8009546:	2b07      	cmp	r3, #7
 8009548:	9323      	str	r3, [sp, #140]	; 0x8c
 800954a:	f300 82da 	bgt.w	8009b02 <_svfprintf_r+0xc92>
 800954e:	3408      	adds	r4, #8
 8009550:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009552:	b16b      	cbz	r3, 8009570 <_svfprintf_r+0x700>
 8009554:	ab1b      	add	r3, sp, #108	; 0x6c
 8009556:	6023      	str	r3, [r4, #0]
 8009558:	2302      	movs	r3, #2
 800955a:	6063      	str	r3, [r4, #4]
 800955c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800955e:	3302      	adds	r3, #2
 8009560:	9324      	str	r3, [sp, #144]	; 0x90
 8009562:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009564:	3301      	adds	r3, #1
 8009566:	2b07      	cmp	r3, #7
 8009568:	9323      	str	r3, [sp, #140]	; 0x8c
 800956a:	f300 82d4 	bgt.w	8009b16 <_svfprintf_r+0xca6>
 800956e:	3408      	adds	r4, #8
 8009570:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009572:	2b80      	cmp	r3, #128	; 0x80
 8009574:	d11f      	bne.n	80095b6 <_svfprintf_r+0x746>
 8009576:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800957a:	1a9f      	subs	r7, r3, r2
 800957c:	2f00      	cmp	r7, #0
 800957e:	dd1a      	ble.n	80095b6 <_svfprintf_r+0x746>
 8009580:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009584:	4821      	ldr	r0, [pc, #132]	; (800960c <_svfprintf_r+0x79c>)
 8009586:	6020      	str	r0, [r4, #0]
 8009588:	2f10      	cmp	r7, #16
 800958a:	f103 0301 	add.w	r3, r3, #1
 800958e:	f104 0108 	add.w	r1, r4, #8
 8009592:	f300 82ca 	bgt.w	8009b2a <_svfprintf_r+0xcba>
 8009596:	6067      	str	r7, [r4, #4]
 8009598:	2b07      	cmp	r3, #7
 800959a:	4417      	add	r7, r2
 800959c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 80095a0:	f340 82d6 	ble.w	8009b50 <_svfprintf_r+0xce0>
 80095a4:	aa22      	add	r2, sp, #136	; 0x88
 80095a6:	4649      	mov	r1, r9
 80095a8:	4650      	mov	r0, sl
 80095aa:	f002 f860 	bl	800b66e <__ssprint_r>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	f040 85d8 	bne.w	800a164 <_svfprintf_r+0x12f4>
 80095b4:	ac25      	add	r4, sp, #148	; 0x94
 80095b6:	9b04      	ldr	r3, [sp, #16]
 80095b8:	1af6      	subs	r6, r6, r3
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	dd28      	ble.n	8009610 <_svfprintf_r+0x7a0>
 80095be:	4f13      	ldr	r7, [pc, #76]	; (800960c <_svfprintf_r+0x79c>)
 80095c0:	6027      	str	r7, [r4, #0]
 80095c2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80095c6:	2e10      	cmp	r6, #16
 80095c8:	f103 0301 	add.w	r3, r3, #1
 80095cc:	f104 0108 	add.w	r1, r4, #8
 80095d0:	f300 82c0 	bgt.w	8009b54 <_svfprintf_r+0xce4>
 80095d4:	6066      	str	r6, [r4, #4]
 80095d6:	2b07      	cmp	r3, #7
 80095d8:	4416      	add	r6, r2
 80095da:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 80095de:	f340 82cc 	ble.w	8009b7a <_svfprintf_r+0xd0a>
 80095e2:	aa22      	add	r2, sp, #136	; 0x88
 80095e4:	4649      	mov	r1, r9
 80095e6:	4650      	mov	r0, sl
 80095e8:	f002 f841 	bl	800b66e <__ssprint_r>
 80095ec:	2800      	cmp	r0, #0
 80095ee:	f040 85b9 	bne.w	800a164 <_svfprintf_r+0x12f4>
 80095f2:	ac25      	add	r4, sp, #148	; 0x94
 80095f4:	e00c      	b.n	8009610 <_svfprintf_r+0x7a0>
 80095f6:	bf00      	nop
 80095f8:	0800d1b1 	.word	0x0800d1b1
 80095fc:	0800d1a0 	.word	0x0800d1a0
 8009600:	40300000 	.word	0x40300000
 8009604:	3fe00000 	.word	0x3fe00000
 8009608:	0800d1c4 	.word	0x0800d1c4
 800960c:	0800d1d4 	.word	0x0800d1d4
 8009610:	f418 7f80 	tst.w	r8, #256	; 0x100
 8009614:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8009616:	f040 82b7 	bne.w	8009b88 <_svfprintf_r+0xd18>
 800961a:	9b04      	ldr	r3, [sp, #16]
 800961c:	f8c4 b000 	str.w	fp, [r4]
 8009620:	441e      	add	r6, r3
 8009622:	6063      	str	r3, [r4, #4]
 8009624:	9624      	str	r6, [sp, #144]	; 0x90
 8009626:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009628:	3301      	adds	r3, #1
 800962a:	2b07      	cmp	r3, #7
 800962c:	9323      	str	r3, [sp, #140]	; 0x8c
 800962e:	f300 82f0 	bgt.w	8009c12 <_svfprintf_r+0xda2>
 8009632:	3408      	adds	r4, #8
 8009634:	f018 0f04 	tst.w	r8, #4
 8009638:	f040 8576 	bne.w	800a128 <_svfprintf_r+0x12b8>
 800963c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8009640:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009642:	428a      	cmp	r2, r1
 8009644:	bfac      	ite	ge
 8009646:	189b      	addge	r3, r3, r2
 8009648:	185b      	addlt	r3, r3, r1
 800964a:	930f      	str	r3, [sp, #60]	; 0x3c
 800964c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800964e:	b13b      	cbz	r3, 8009660 <_svfprintf_r+0x7f0>
 8009650:	aa22      	add	r2, sp, #136	; 0x88
 8009652:	4649      	mov	r1, r9
 8009654:	4650      	mov	r0, sl
 8009656:	f002 f80a 	bl	800b66e <__ssprint_r>
 800965a:	2800      	cmp	r0, #0
 800965c:	f040 8582 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009660:	2300      	movs	r3, #0
 8009662:	9323      	str	r3, [sp, #140]	; 0x8c
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	2b00      	cmp	r3, #0
 8009668:	f040 8598 	bne.w	800a19c <_svfprintf_r+0x132c>
 800966c:	ac25      	add	r4, sp, #148	; 0x94
 800966e:	e0ed      	b.n	800984c <_svfprintf_r+0x9dc>
 8009670:	9003      	str	r0, [sp, #12]
 8009672:	e62c      	b.n	80092ce <_svfprintf_r+0x45e>
 8009674:	9003      	str	r0, [sp, #12]
 8009676:	2306      	movs	r3, #6
 8009678:	e619      	b.n	80092ae <_svfprintf_r+0x43e>
 800967a:	9003      	str	r0, [sp, #12]
 800967c:	e627      	b.n	80092ce <_svfprintf_r+0x45e>
 800967e:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8009682:	2300      	movs	r3, #0
 8009684:	eeb0 8a47 	vmov.f32	s16, s14
 8009688:	eef0 8a67 	vmov.f32	s17, s15
 800968c:	e62f      	b.n	80092ee <_svfprintf_r+0x47e>
 800968e:	f802 0c01 	strb.w	r0, [r2, #-1]
 8009692:	e691      	b.n	80093b8 <_svfprintf_r+0x548>
 8009694:	f803 0b01 	strb.w	r0, [r3], #1
 8009698:	1aca      	subs	r2, r1, r3
 800969a:	2a00      	cmp	r2, #0
 800969c:	dafa      	bge.n	8009694 <_svfprintf_r+0x824>
 800969e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096a2:	3201      	adds	r2, #1
 80096a4:	f103 0301 	add.w	r3, r3, #1
 80096a8:	bfb8      	it	lt
 80096aa:	2300      	movlt	r3, #0
 80096ac:	441d      	add	r5, r3
 80096ae:	e693      	b.n	80093d8 <_svfprintf_r+0x568>
 80096b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096b2:	462b      	mov	r3, r5
 80096b4:	18a9      	adds	r1, r5, r2
 80096b6:	2030      	movs	r0, #48	; 0x30
 80096b8:	e7ee      	b.n	8009698 <_svfprintf_r+0x828>
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	2b46      	cmp	r3, #70	; 0x46
 80096be:	d005      	beq.n	80096cc <_svfprintf_r+0x85c>
 80096c0:	2b45      	cmp	r3, #69	; 0x45
 80096c2:	d11b      	bne.n	80096fc <_svfprintf_r+0x88c>
 80096c4:	9b04      	ldr	r3, [sp, #16]
 80096c6:	1c5d      	adds	r5, r3, #1
 80096c8:	2102      	movs	r1, #2
 80096ca:	e001      	b.n	80096d0 <_svfprintf_r+0x860>
 80096cc:	9d04      	ldr	r5, [sp, #16]
 80096ce:	2103      	movs	r1, #3
 80096d0:	ab20      	add	r3, sp, #128	; 0x80
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	ab1d      	add	r3, sp, #116	; 0x74
 80096d6:	9300      	str	r3, [sp, #0]
 80096d8:	462a      	mov	r2, r5
 80096da:	ab1c      	add	r3, sp, #112	; 0x70
 80096dc:	4650      	mov	r0, sl
 80096de:	eeb0 0a48 	vmov.f32	s0, s16
 80096e2:	eef0 0a68 	vmov.f32	s1, s17
 80096e6:	f000 fe6f 	bl	800a3c8 <_dtoa_r>
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	2b47      	cmp	r3, #71	; 0x47
 80096ee:	4683      	mov	fp, r0
 80096f0:	d106      	bne.n	8009700 <_svfprintf_r+0x890>
 80096f2:	f018 0f01 	tst.w	r8, #1
 80096f6:	d103      	bne.n	8009700 <_svfprintf_r+0x890>
 80096f8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80096fa:	e66d      	b.n	80093d8 <_svfprintf_r+0x568>
 80096fc:	9d04      	ldr	r5, [sp, #16]
 80096fe:	e7e3      	b.n	80096c8 <_svfprintf_r+0x858>
 8009700:	9b08      	ldr	r3, [sp, #32]
 8009702:	2b46      	cmp	r3, #70	; 0x46
 8009704:	eb0b 0605 	add.w	r6, fp, r5
 8009708:	d10f      	bne.n	800972a <_svfprintf_r+0x8ba>
 800970a:	f89b 3000 	ldrb.w	r3, [fp]
 800970e:	2b30      	cmp	r3, #48	; 0x30
 8009710:	d109      	bne.n	8009726 <_svfprintf_r+0x8b6>
 8009712:	ec51 0b18 	vmov	r0, r1, d8
 8009716:	2200      	movs	r2, #0
 8009718:	2300      	movs	r3, #0
 800971a:	f7f7 f9dd 	bl	8000ad8 <__aeabi_dcmpeq>
 800971e:	b910      	cbnz	r0, 8009726 <_svfprintf_r+0x8b6>
 8009720:	f1c5 0501 	rsb	r5, r5, #1
 8009724:	951c      	str	r5, [sp, #112]	; 0x70
 8009726:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009728:	441e      	add	r6, r3
 800972a:	ec51 0b18 	vmov	r0, r1, d8
 800972e:	2200      	movs	r2, #0
 8009730:	2300      	movs	r3, #0
 8009732:	f7f7 f9d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8009736:	b100      	cbz	r0, 800973a <_svfprintf_r+0x8ca>
 8009738:	9620      	str	r6, [sp, #128]	; 0x80
 800973a:	2230      	movs	r2, #48	; 0x30
 800973c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800973e:	429e      	cmp	r6, r3
 8009740:	d9da      	bls.n	80096f8 <_svfprintf_r+0x888>
 8009742:	1c59      	adds	r1, r3, #1
 8009744:	9120      	str	r1, [sp, #128]	; 0x80
 8009746:	701a      	strb	r2, [r3, #0]
 8009748:	e7f8      	b.n	800973c <_svfprintf_r+0x8cc>
 800974a:	9b08      	ldr	r3, [sp, #32]
 800974c:	2b46      	cmp	r3, #70	; 0x46
 800974e:	f47f ae54 	bne.w	80093fa <_svfprintf_r+0x58a>
 8009752:	9a04      	ldr	r2, [sp, #16]
 8009754:	f008 0301 	and.w	r3, r8, #1
 8009758:	2d00      	cmp	r5, #0
 800975a:	ea43 0302 	orr.w	r3, r3, r2
 800975e:	dd1a      	ble.n	8009796 <_svfprintf_r+0x926>
 8009760:	2b00      	cmp	r3, #0
 8009762:	d034      	beq.n	80097ce <_svfprintf_r+0x95e>
 8009764:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009766:	18eb      	adds	r3, r5, r3
 8009768:	441a      	add	r2, r3
 800976a:	9204      	str	r2, [sp, #16]
 800976c:	2366      	movs	r3, #102	; 0x66
 800976e:	9307      	str	r3, [sp, #28]
 8009770:	e033      	b.n	80097da <_svfprintf_r+0x96a>
 8009772:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009776:	f802 6b01 	strb.w	r6, [r2], #1
 800977a:	e675      	b.n	8009468 <_svfprintf_r+0x5f8>
 800977c:	b941      	cbnz	r1, 8009790 <_svfprintf_r+0x920>
 800977e:	2230      	movs	r2, #48	; 0x30
 8009780:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 8009784:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8009788:	3330      	adds	r3, #48	; 0x30
 800978a:	f802 3b01 	strb.w	r3, [r2], #1
 800978e:	e677      	b.n	8009480 <_svfprintf_r+0x610>
 8009790:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8009794:	e7f8      	b.n	8009788 <_svfprintf_r+0x918>
 8009796:	b1e3      	cbz	r3, 80097d2 <_svfprintf_r+0x962>
 8009798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800979a:	9a04      	ldr	r2, [sp, #16]
 800979c:	3301      	adds	r3, #1
 800979e:	e7e3      	b.n	8009768 <_svfprintf_r+0x8f8>
 80097a0:	9b05      	ldr	r3, [sp, #20]
 80097a2:	429d      	cmp	r5, r3
 80097a4:	db07      	blt.n	80097b6 <_svfprintf_r+0x946>
 80097a6:	f018 0f01 	tst.w	r8, #1
 80097aa:	d02d      	beq.n	8009808 <_svfprintf_r+0x998>
 80097ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097ae:	18eb      	adds	r3, r5, r3
 80097b0:	9304      	str	r3, [sp, #16]
 80097b2:	2367      	movs	r3, #103	; 0x67
 80097b4:	e7db      	b.n	800976e <_svfprintf_r+0x8fe>
 80097b6:	9b05      	ldr	r3, [sp, #20]
 80097b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	4413      	add	r3, r2
 80097be:	9304      	str	r3, [sp, #16]
 80097c0:	dcf7      	bgt.n	80097b2 <_svfprintf_r+0x942>
 80097c2:	9a04      	ldr	r2, [sp, #16]
 80097c4:	f1c5 0301 	rsb	r3, r5, #1
 80097c8:	441a      	add	r2, r3
 80097ca:	4613      	mov	r3, r2
 80097cc:	e7f0      	b.n	80097b0 <_svfprintf_r+0x940>
 80097ce:	9504      	str	r5, [sp, #16]
 80097d0:	e7cc      	b.n	800976c <_svfprintf_r+0x8fc>
 80097d2:	2366      	movs	r3, #102	; 0x66
 80097d4:	9307      	str	r3, [sp, #28]
 80097d6:	2301      	movs	r3, #1
 80097d8:	9304      	str	r3, [sp, #16]
 80097da:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 80097de:	9309      	str	r3, [sp, #36]	; 0x24
 80097e0:	d025      	beq.n	800982e <_svfprintf_r+0x9be>
 80097e2:	2300      	movs	r3, #0
 80097e4:	2d00      	cmp	r5, #0
 80097e6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80097ea:	f77f ae61 	ble.w	80094b0 <_svfprintf_r+0x640>
 80097ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	2bff      	cmp	r3, #255	; 0xff
 80097f4:	d10a      	bne.n	800980c <_svfprintf_r+0x99c>
 80097f6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80097fa:	9904      	ldr	r1, [sp, #16]
 80097fc:	4413      	add	r3, r2
 80097fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009800:	fb02 1303 	mla	r3, r2, r3, r1
 8009804:	9304      	str	r3, [sp, #16]
 8009806:	e653      	b.n	80094b0 <_svfprintf_r+0x640>
 8009808:	9504      	str	r5, [sp, #16]
 800980a:	e7d2      	b.n	80097b2 <_svfprintf_r+0x942>
 800980c:	42ab      	cmp	r3, r5
 800980e:	daf2      	bge.n	80097f6 <_svfprintf_r+0x986>
 8009810:	1aed      	subs	r5, r5, r3
 8009812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009814:	785b      	ldrb	r3, [r3, #1]
 8009816:	b133      	cbz	r3, 8009826 <_svfprintf_r+0x9b6>
 8009818:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800981a:	3301      	adds	r3, #1
 800981c:	9309      	str	r3, [sp, #36]	; 0x24
 800981e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009820:	3301      	adds	r3, #1
 8009822:	930a      	str	r3, [sp, #40]	; 0x28
 8009824:	e7e3      	b.n	80097ee <_svfprintf_r+0x97e>
 8009826:	9b08      	ldr	r3, [sp, #32]
 8009828:	3301      	adds	r3, #1
 800982a:	9308      	str	r3, [sp, #32]
 800982c:	e7df      	b.n	80097ee <_svfprintf_r+0x97e>
 800982e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	e63d      	b.n	80094b0 <_svfprintf_r+0x640>
 8009834:	4632      	mov	r2, r6
 8009836:	f018 0f20 	tst.w	r8, #32
 800983a:	f852 3b04 	ldr.w	r3, [r2], #4
 800983e:	9206      	str	r2, [sp, #24]
 8009840:	d009      	beq.n	8009856 <_svfprintf_r+0x9e6>
 8009842:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009844:	4610      	mov	r0, r2
 8009846:	17d1      	asrs	r1, r2, #31
 8009848:	e9c3 0100 	strd	r0, r1, [r3]
 800984c:	9e06      	ldr	r6, [sp, #24]
 800984e:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8009852:	f7ff bb4d 	b.w	8008ef0 <_svfprintf_r+0x80>
 8009856:	f018 0f10 	tst.w	r8, #16
 800985a:	d002      	beq.n	8009862 <_svfprintf_r+0x9f2>
 800985c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800985e:	601a      	str	r2, [r3, #0]
 8009860:	e7f4      	b.n	800984c <_svfprintf_r+0x9dc>
 8009862:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009866:	d002      	beq.n	800986e <_svfprintf_r+0x9fe>
 8009868:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800986a:	801a      	strh	r2, [r3, #0]
 800986c:	e7ee      	b.n	800984c <_svfprintf_r+0x9dc>
 800986e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8009872:	d0f3      	beq.n	800985c <_svfprintf_r+0x9ec>
 8009874:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009876:	701a      	strb	r2, [r3, #0]
 8009878:	e7e8      	b.n	800984c <_svfprintf_r+0x9dc>
 800987a:	f048 0810 	orr.w	r8, r8, #16
 800987e:	f018 0f20 	tst.w	r8, #32
 8009882:	d01e      	beq.n	80098c2 <_svfprintf_r+0xa52>
 8009884:	3607      	adds	r6, #7
 8009886:	f026 0307 	bic.w	r3, r6, #7
 800988a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800988e:	9306      	str	r3, [sp, #24]
 8009890:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 8009894:	2300      	movs	r3, #0
 8009896:	2200      	movs	r2, #0
 8009898:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800989c:	9a04      	ldr	r2, [sp, #16]
 800989e:	3201      	adds	r2, #1
 80098a0:	f000 848d 	beq.w	800a1be <_svfprintf_r+0x134e>
 80098a4:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 80098a8:	9203      	str	r2, [sp, #12]
 80098aa:	ea56 0207 	orrs.w	r2, r6, r7
 80098ae:	f040 848c 	bne.w	800a1ca <_svfprintf_r+0x135a>
 80098b2:	9a04      	ldr	r2, [sp, #16]
 80098b4:	2a00      	cmp	r2, #0
 80098b6:	f000 80f5 	beq.w	8009aa4 <_svfprintf_r+0xc34>
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	f040 8488 	bne.w	800a1d0 <_svfprintf_r+0x1360>
 80098c0:	e097      	b.n	80099f2 <_svfprintf_r+0xb82>
 80098c2:	1d33      	adds	r3, r6, #4
 80098c4:	f018 0f10 	tst.w	r8, #16
 80098c8:	9306      	str	r3, [sp, #24]
 80098ca:	d001      	beq.n	80098d0 <_svfprintf_r+0xa60>
 80098cc:	6836      	ldr	r6, [r6, #0]
 80098ce:	e003      	b.n	80098d8 <_svfprintf_r+0xa68>
 80098d0:	f018 0f40 	tst.w	r8, #64	; 0x40
 80098d4:	d002      	beq.n	80098dc <_svfprintf_r+0xa6c>
 80098d6:	8836      	ldrh	r6, [r6, #0]
 80098d8:	2700      	movs	r7, #0
 80098da:	e7d9      	b.n	8009890 <_svfprintf_r+0xa20>
 80098dc:	f418 7f00 	tst.w	r8, #512	; 0x200
 80098e0:	d0f4      	beq.n	80098cc <_svfprintf_r+0xa5c>
 80098e2:	7836      	ldrb	r6, [r6, #0]
 80098e4:	e7f8      	b.n	80098d8 <_svfprintf_r+0xa68>
 80098e6:	4633      	mov	r3, r6
 80098e8:	2278      	movs	r2, #120	; 0x78
 80098ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80098ee:	9306      	str	r3, [sp, #24]
 80098f0:	f647 0330 	movw	r3, #30768	; 0x7830
 80098f4:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 80098f8:	4ba1      	ldr	r3, [pc, #644]	; (8009b80 <_svfprintf_r+0xd10>)
 80098fa:	9316      	str	r3, [sp, #88]	; 0x58
 80098fc:	2700      	movs	r7, #0
 80098fe:	f048 0802 	orr.w	r8, r8, #2
 8009902:	2302      	movs	r3, #2
 8009904:	9207      	str	r2, [sp, #28]
 8009906:	e7c6      	b.n	8009896 <_svfprintf_r+0xa26>
 8009908:	4633      	mov	r3, r6
 800990a:	2500      	movs	r5, #0
 800990c:	f853 bb04 	ldr.w	fp, [r3], #4
 8009910:	9306      	str	r3, [sp, #24]
 8009912:	9b04      	ldr	r3, [sp, #16]
 8009914:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8009918:	1c59      	adds	r1, r3, #1
 800991a:	d010      	beq.n	800993e <_svfprintf_r+0xace>
 800991c:	461a      	mov	r2, r3
 800991e:	4629      	mov	r1, r5
 8009920:	4658      	mov	r0, fp
 8009922:	f7f6 fc65 	bl	80001f0 <memchr>
 8009926:	9003      	str	r0, [sp, #12]
 8009928:	2800      	cmp	r0, #0
 800992a:	f000 80d2 	beq.w	8009ad2 <_svfprintf_r+0xc62>
 800992e:	eba0 030b 	sub.w	r3, r0, fp
 8009932:	e9cd 5303 	strd	r5, r3, [sp, #12]
 8009936:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800993a:	462e      	mov	r6, r5
 800993c:	e5c0      	b.n	80094c0 <_svfprintf_r+0x650>
 800993e:	4658      	mov	r0, fp
 8009940:	f7f6 fc4e 	bl	80001e0 <strlen>
 8009944:	e9cd 5003 	strd	r5, r0, [sp, #12]
 8009948:	e463      	b.n	8009212 <_svfprintf_r+0x3a2>
 800994a:	f048 0810 	orr.w	r8, r8, #16
 800994e:	f018 0f20 	tst.w	r8, #32
 8009952:	d007      	beq.n	8009964 <_svfprintf_r+0xaf4>
 8009954:	3607      	adds	r6, #7
 8009956:	f026 0307 	bic.w	r3, r6, #7
 800995a:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800995e:	9306      	str	r3, [sp, #24]
 8009960:	2301      	movs	r3, #1
 8009962:	e798      	b.n	8009896 <_svfprintf_r+0xa26>
 8009964:	1d33      	adds	r3, r6, #4
 8009966:	f018 0f10 	tst.w	r8, #16
 800996a:	9306      	str	r3, [sp, #24]
 800996c:	d001      	beq.n	8009972 <_svfprintf_r+0xb02>
 800996e:	6836      	ldr	r6, [r6, #0]
 8009970:	e003      	b.n	800997a <_svfprintf_r+0xb0a>
 8009972:	f018 0f40 	tst.w	r8, #64	; 0x40
 8009976:	d002      	beq.n	800997e <_svfprintf_r+0xb0e>
 8009978:	8836      	ldrh	r6, [r6, #0]
 800997a:	2700      	movs	r7, #0
 800997c:	e7f0      	b.n	8009960 <_svfprintf_r+0xaf0>
 800997e:	f418 7f00 	tst.w	r8, #512	; 0x200
 8009982:	d0f4      	beq.n	800996e <_svfprintf_r+0xafe>
 8009984:	7836      	ldrb	r6, [r6, #0]
 8009986:	e7f8      	b.n	800997a <_svfprintf_r+0xb0a>
 8009988:	4b7e      	ldr	r3, [pc, #504]	; (8009b84 <_svfprintf_r+0xd14>)
 800998a:	9316      	str	r3, [sp, #88]	; 0x58
 800998c:	f018 0f20 	tst.w	r8, #32
 8009990:	d019      	beq.n	80099c6 <_svfprintf_r+0xb56>
 8009992:	3607      	adds	r6, #7
 8009994:	f026 0307 	bic.w	r3, r6, #7
 8009998:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800999c:	9306      	str	r3, [sp, #24]
 800999e:	f018 0f01 	tst.w	r8, #1
 80099a2:	d00a      	beq.n	80099ba <_svfprintf_r+0xb4a>
 80099a4:	ea56 0307 	orrs.w	r3, r6, r7
 80099a8:	d007      	beq.n	80099ba <_svfprintf_r+0xb4a>
 80099aa:	2330      	movs	r3, #48	; 0x30
 80099ac:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80099b0:	9b07      	ldr	r3, [sp, #28]
 80099b2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 80099b6:	f048 0802 	orr.w	r8, r8, #2
 80099ba:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 80099be:	2302      	movs	r3, #2
 80099c0:	e769      	b.n	8009896 <_svfprintf_r+0xa26>
 80099c2:	4b6f      	ldr	r3, [pc, #444]	; (8009b80 <_svfprintf_r+0xd10>)
 80099c4:	e7e1      	b.n	800998a <_svfprintf_r+0xb1a>
 80099c6:	1d33      	adds	r3, r6, #4
 80099c8:	f018 0f10 	tst.w	r8, #16
 80099cc:	9306      	str	r3, [sp, #24]
 80099ce:	d001      	beq.n	80099d4 <_svfprintf_r+0xb64>
 80099d0:	6836      	ldr	r6, [r6, #0]
 80099d2:	e003      	b.n	80099dc <_svfprintf_r+0xb6c>
 80099d4:	f018 0f40 	tst.w	r8, #64	; 0x40
 80099d8:	d002      	beq.n	80099e0 <_svfprintf_r+0xb70>
 80099da:	8836      	ldrh	r6, [r6, #0]
 80099dc:	2700      	movs	r7, #0
 80099de:	e7de      	b.n	800999e <_svfprintf_r+0xb2e>
 80099e0:	f418 7f00 	tst.w	r8, #512	; 0x200
 80099e4:	d0f4      	beq.n	80099d0 <_svfprintf_r+0xb60>
 80099e6:	7836      	ldrb	r6, [r6, #0]
 80099e8:	e7f8      	b.n	80099dc <_svfprintf_r+0xb6c>
 80099ea:	2f00      	cmp	r7, #0
 80099ec:	bf08      	it	eq
 80099ee:	2e0a      	cmpeq	r6, #10
 80099f0:	d206      	bcs.n	8009a00 <_svfprintf_r+0xb90>
 80099f2:	3630      	adds	r6, #48	; 0x30
 80099f4:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 80099f8:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 80099fc:	f000 bc06 	b.w	800a20c <_svfprintf_r+0x139c>
 8009a00:	2300      	movs	r3, #0
 8009a02:	9305      	str	r3, [sp, #20]
 8009a04:	9b03      	ldr	r3, [sp, #12]
 8009a06:	ad4e      	add	r5, sp, #312	; 0x138
 8009a08:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 8009a0c:	220a      	movs	r2, #10
 8009a0e:	2300      	movs	r3, #0
 8009a10:	4630      	mov	r0, r6
 8009a12:	4639      	mov	r1, r7
 8009a14:	f7f7 f920 	bl	8000c58 <__aeabi_uldivmod>
 8009a18:	9b05      	ldr	r3, [sp, #20]
 8009a1a:	3230      	adds	r2, #48	; 0x30
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	f105 3bff 	add.w	fp, r5, #4294967295
 8009a22:	f805 2c01 	strb.w	r2, [r5, #-1]
 8009a26:	9305      	str	r3, [sp, #20]
 8009a28:	f1b8 0f00 	cmp.w	r8, #0
 8009a2c:	d019      	beq.n	8009a62 <_svfprintf_r+0xbf2>
 8009a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a30:	9a05      	ldr	r2, [sp, #20]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d114      	bne.n	8009a62 <_svfprintf_r+0xbf2>
 8009a38:	2aff      	cmp	r2, #255	; 0xff
 8009a3a:	d012      	beq.n	8009a62 <_svfprintf_r+0xbf2>
 8009a3c:	2f00      	cmp	r7, #0
 8009a3e:	bf08      	it	eq
 8009a40:	2e0a      	cmpeq	r6, #10
 8009a42:	d30e      	bcc.n	8009a62 <_svfprintf_r+0xbf2>
 8009a44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009a46:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009a48:	ebab 0b03 	sub.w	fp, fp, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	4658      	mov	r0, fp
 8009a50:	f001 fdfa 	bl	800b648 <strncpy>
 8009a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a56:	785d      	ldrb	r5, [r3, #1]
 8009a58:	b195      	cbz	r5, 8009a80 <_svfprintf_r+0xc10>
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8009a5e:	2300      	movs	r3, #0
 8009a60:	9305      	str	r3, [sp, #20]
 8009a62:	220a      	movs	r2, #10
 8009a64:	2300      	movs	r3, #0
 8009a66:	4630      	mov	r0, r6
 8009a68:	4639      	mov	r1, r7
 8009a6a:	f7f7 f8f5 	bl	8000c58 <__aeabi_uldivmod>
 8009a6e:	2f00      	cmp	r7, #0
 8009a70:	bf08      	it	eq
 8009a72:	2e0a      	cmpeq	r6, #10
 8009a74:	f0c0 83ca 	bcc.w	800a20c <_svfprintf_r+0x139c>
 8009a78:	4606      	mov	r6, r0
 8009a7a:	460f      	mov	r7, r1
 8009a7c:	465d      	mov	r5, fp
 8009a7e:	e7c5      	b.n	8009a0c <_svfprintf_r+0xb9c>
 8009a80:	9505      	str	r5, [sp, #20]
 8009a82:	e7ee      	b.n	8009a62 <_svfprintf_r+0xbf2>
 8009a84:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009a86:	f006 030f 	and.w	r3, r6, #15
 8009a8a:	5cd3      	ldrb	r3, [r2, r3]
 8009a8c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8009a90:	0933      	lsrs	r3, r6, #4
 8009a92:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8009a96:	093a      	lsrs	r2, r7, #4
 8009a98:	461e      	mov	r6, r3
 8009a9a:	4617      	mov	r7, r2
 8009a9c:	ea56 0307 	orrs.w	r3, r6, r7
 8009aa0:	d1f0      	bne.n	8009a84 <_svfprintf_r+0xc14>
 8009aa2:	e3b3      	b.n	800a20c <_svfprintf_r+0x139c>
 8009aa4:	b933      	cbnz	r3, 8009ab4 <_svfprintf_r+0xc44>
 8009aa6:	f018 0f01 	tst.w	r8, #1
 8009aaa:	d003      	beq.n	8009ab4 <_svfprintf_r+0xc44>
 8009aac:	2330      	movs	r3, #48	; 0x30
 8009aae:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 8009ab2:	e7a1      	b.n	80099f8 <_svfprintf_r+0xb88>
 8009ab4:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 8009ab8:	e3a8      	b.n	800a20c <_svfprintf_r+0x139c>
 8009aba:	9b07      	ldr	r3, [sp, #28]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	f000 8373 	beq.w	800a1a8 <_svfprintf_r+0x1338>
 8009ac2:	2000      	movs	r0, #0
 8009ac4:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8009ac8:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 8009acc:	9606      	str	r6, [sp, #24]
 8009ace:	f7ff bb34 	b.w	800913a <_svfprintf_r+0x2ca>
 8009ad2:	9e03      	ldr	r6, [sp, #12]
 8009ad4:	f7ff bb9e 	b.w	8009214 <_svfprintf_r+0x3a4>
 8009ad8:	2010      	movs	r0, #16
 8009ada:	4402      	add	r2, r0
 8009adc:	2b07      	cmp	r3, #7
 8009ade:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009ae2:	6060      	str	r0, [r4, #4]
 8009ae4:	dd08      	ble.n	8009af8 <_svfprintf_r+0xc88>
 8009ae6:	aa22      	add	r2, sp, #136	; 0x88
 8009ae8:	4649      	mov	r1, r9
 8009aea:	4650      	mov	r0, sl
 8009aec:	f001 fdbf 	bl	800b66e <__ssprint_r>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f040 8337 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009af6:	a925      	add	r1, sp, #148	; 0x94
 8009af8:	3f10      	subs	r7, #16
 8009afa:	460c      	mov	r4, r1
 8009afc:	e4fb      	b.n	80094f6 <_svfprintf_r+0x686>
 8009afe:	460c      	mov	r4, r1
 8009b00:	e514      	b.n	800952c <_svfprintf_r+0x6bc>
 8009b02:	aa22      	add	r2, sp, #136	; 0x88
 8009b04:	4649      	mov	r1, r9
 8009b06:	4650      	mov	r0, sl
 8009b08:	f001 fdb1 	bl	800b66e <__ssprint_r>
 8009b0c:	2800      	cmp	r0, #0
 8009b0e:	f040 8329 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009b12:	ac25      	add	r4, sp, #148	; 0x94
 8009b14:	e51c      	b.n	8009550 <_svfprintf_r+0x6e0>
 8009b16:	aa22      	add	r2, sp, #136	; 0x88
 8009b18:	4649      	mov	r1, r9
 8009b1a:	4650      	mov	r0, sl
 8009b1c:	f001 fda7 	bl	800b66e <__ssprint_r>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	f040 831f 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009b26:	ac25      	add	r4, sp, #148	; 0x94
 8009b28:	e522      	b.n	8009570 <_svfprintf_r+0x700>
 8009b2a:	2010      	movs	r0, #16
 8009b2c:	4402      	add	r2, r0
 8009b2e:	2b07      	cmp	r3, #7
 8009b30:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009b34:	6060      	str	r0, [r4, #4]
 8009b36:	dd08      	ble.n	8009b4a <_svfprintf_r+0xcda>
 8009b38:	aa22      	add	r2, sp, #136	; 0x88
 8009b3a:	4649      	mov	r1, r9
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	f001 fd96 	bl	800b66e <__ssprint_r>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	f040 830e 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009b48:	a925      	add	r1, sp, #148	; 0x94
 8009b4a:	3f10      	subs	r7, #16
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	e517      	b.n	8009580 <_svfprintf_r+0x710>
 8009b50:	460c      	mov	r4, r1
 8009b52:	e530      	b.n	80095b6 <_svfprintf_r+0x746>
 8009b54:	2010      	movs	r0, #16
 8009b56:	4402      	add	r2, r0
 8009b58:	2b07      	cmp	r3, #7
 8009b5a:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009b5e:	6060      	str	r0, [r4, #4]
 8009b60:	dd08      	ble.n	8009b74 <_svfprintf_r+0xd04>
 8009b62:	aa22      	add	r2, sp, #136	; 0x88
 8009b64:	4649      	mov	r1, r9
 8009b66:	4650      	mov	r0, sl
 8009b68:	f001 fd81 	bl	800b66e <__ssprint_r>
 8009b6c:	2800      	cmp	r0, #0
 8009b6e:	f040 82f9 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009b72:	a925      	add	r1, sp, #148	; 0x94
 8009b74:	3e10      	subs	r6, #16
 8009b76:	460c      	mov	r4, r1
 8009b78:	e522      	b.n	80095c0 <_svfprintf_r+0x750>
 8009b7a:	460c      	mov	r4, r1
 8009b7c:	e548      	b.n	8009610 <_svfprintf_r+0x7a0>
 8009b7e:	bf00      	nop
 8009b80:	0800d1a0 	.word	0x0800d1a0
 8009b84:	0800d1b1 	.word	0x0800d1b1
 8009b88:	9b07      	ldr	r3, [sp, #28]
 8009b8a:	2b65      	cmp	r3, #101	; 0x65
 8009b8c:	f340 8232 	ble.w	8009ff4 <_svfprintf_r+0x1184>
 8009b90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b94:	2200      	movs	r2, #0
 8009b96:	2300      	movs	r3, #0
 8009b98:	f7f6 ff9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d068      	beq.n	8009c72 <_svfprintf_r+0xe02>
 8009ba0:	4b6d      	ldr	r3, [pc, #436]	; (8009d58 <_svfprintf_r+0xee8>)
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	441e      	add	r6, r3
 8009ba8:	6063      	str	r3, [r4, #4]
 8009baa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bac:	9624      	str	r6, [sp, #144]	; 0x90
 8009bae:	3301      	adds	r3, #1
 8009bb0:	2b07      	cmp	r3, #7
 8009bb2:	9323      	str	r3, [sp, #140]	; 0x8c
 8009bb4:	dc37      	bgt.n	8009c26 <_svfprintf_r+0xdb6>
 8009bb6:	3408      	adds	r4, #8
 8009bb8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009bba:	9a05      	ldr	r2, [sp, #20]
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	db03      	blt.n	8009bc8 <_svfprintf_r+0xd58>
 8009bc0:	f018 0f01 	tst.w	r8, #1
 8009bc4:	f43f ad36 	beq.w	8009634 <_svfprintf_r+0x7c4>
 8009bc8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009bce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009bd0:	6063      	str	r3, [r4, #4]
 8009bd2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009bd4:	4413      	add	r3, r2
 8009bd6:	9324      	str	r3, [sp, #144]	; 0x90
 8009bd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009bda:	3301      	adds	r3, #1
 8009bdc:	2b07      	cmp	r3, #7
 8009bde:	9323      	str	r3, [sp, #140]	; 0x8c
 8009be0:	dc2b      	bgt.n	8009c3a <_svfprintf_r+0xdca>
 8009be2:	3408      	adds	r4, #8
 8009be4:	9b05      	ldr	r3, [sp, #20]
 8009be6:	1e5d      	subs	r5, r3, #1
 8009be8:	2d00      	cmp	r5, #0
 8009bea:	f77f ad23 	ble.w	8009634 <_svfprintf_r+0x7c4>
 8009bee:	4e5b      	ldr	r6, [pc, #364]	; (8009d5c <_svfprintf_r+0xeec>)
 8009bf0:	2710      	movs	r7, #16
 8009bf2:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009bf6:	2d10      	cmp	r5, #16
 8009bf8:	f103 0301 	add.w	r3, r3, #1
 8009bfc:	f104 0108 	add.w	r1, r4, #8
 8009c00:	6026      	str	r6, [r4, #0]
 8009c02:	dc24      	bgt.n	8009c4e <_svfprintf_r+0xdde>
 8009c04:	6065      	str	r5, [r4, #4]
 8009c06:	2b07      	cmp	r3, #7
 8009c08:	4415      	add	r5, r2
 8009c0a:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8009c0e:	f340 8288 	ble.w	800a122 <_svfprintf_r+0x12b2>
 8009c12:	aa22      	add	r2, sp, #136	; 0x88
 8009c14:	4649      	mov	r1, r9
 8009c16:	4650      	mov	r0, sl
 8009c18:	f001 fd29 	bl	800b66e <__ssprint_r>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	f040 82a1 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009c22:	ac25      	add	r4, sp, #148	; 0x94
 8009c24:	e506      	b.n	8009634 <_svfprintf_r+0x7c4>
 8009c26:	aa22      	add	r2, sp, #136	; 0x88
 8009c28:	4649      	mov	r1, r9
 8009c2a:	4650      	mov	r0, sl
 8009c2c:	f001 fd1f 	bl	800b66e <__ssprint_r>
 8009c30:	2800      	cmp	r0, #0
 8009c32:	f040 8297 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009c36:	ac25      	add	r4, sp, #148	; 0x94
 8009c38:	e7be      	b.n	8009bb8 <_svfprintf_r+0xd48>
 8009c3a:	aa22      	add	r2, sp, #136	; 0x88
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	4650      	mov	r0, sl
 8009c40:	f001 fd15 	bl	800b66e <__ssprint_r>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f040 828d 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009c4a:	ac25      	add	r4, sp, #148	; 0x94
 8009c4c:	e7ca      	b.n	8009be4 <_svfprintf_r+0xd74>
 8009c4e:	3210      	adds	r2, #16
 8009c50:	2b07      	cmp	r3, #7
 8009c52:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009c56:	6067      	str	r7, [r4, #4]
 8009c58:	dd08      	ble.n	8009c6c <_svfprintf_r+0xdfc>
 8009c5a:	aa22      	add	r2, sp, #136	; 0x88
 8009c5c:	4649      	mov	r1, r9
 8009c5e:	4650      	mov	r0, sl
 8009c60:	f001 fd05 	bl	800b66e <__ssprint_r>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f040 827d 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009c6a:	a925      	add	r1, sp, #148	; 0x94
 8009c6c:	3d10      	subs	r5, #16
 8009c6e:	460c      	mov	r4, r1
 8009c70:	e7bf      	b.n	8009bf2 <_svfprintf_r+0xd82>
 8009c72:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	dc73      	bgt.n	8009d60 <_svfprintf_r+0xef0>
 8009c78:	4b37      	ldr	r3, [pc, #220]	; (8009d58 <_svfprintf_r+0xee8>)
 8009c7a:	6023      	str	r3, [r4, #0]
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	441e      	add	r6, r3
 8009c80:	6063      	str	r3, [r4, #4]
 8009c82:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009c84:	9624      	str	r6, [sp, #144]	; 0x90
 8009c86:	3301      	adds	r3, #1
 8009c88:	2b07      	cmp	r3, #7
 8009c8a:	9323      	str	r3, [sp, #140]	; 0x8c
 8009c8c:	dc3d      	bgt.n	8009d0a <_svfprintf_r+0xe9a>
 8009c8e:	3408      	adds	r4, #8
 8009c90:	9905      	ldr	r1, [sp, #20]
 8009c92:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8009c94:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009c96:	430a      	orrs	r2, r1
 8009c98:	f008 0101 	and.w	r1, r8, #1
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	f43f acc9 	beq.w	8009634 <_svfprintf_r+0x7c4>
 8009ca2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009ca4:	6022      	str	r2, [r4, #0]
 8009ca6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ca8:	6062      	str	r2, [r4, #4]
 8009caa:	4413      	add	r3, r2
 8009cac:	9324      	str	r3, [sp, #144]	; 0x90
 8009cae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	2b07      	cmp	r3, #7
 8009cb4:	9323      	str	r3, [sp, #140]	; 0x8c
 8009cb6:	dc32      	bgt.n	8009d1e <_svfprintf_r+0xeae>
 8009cb8:	3408      	adds	r4, #8
 8009cba:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009cbc:	2d00      	cmp	r5, #0
 8009cbe:	da1b      	bge.n	8009cf8 <_svfprintf_r+0xe88>
 8009cc0:	4e26      	ldr	r6, [pc, #152]	; (8009d5c <_svfprintf_r+0xeec>)
 8009cc2:	426d      	negs	r5, r5
 8009cc4:	4623      	mov	r3, r4
 8009cc6:	2710      	movs	r7, #16
 8009cc8:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 8009ccc:	2d10      	cmp	r5, #16
 8009cce:	f102 0201 	add.w	r2, r2, #1
 8009cd2:	f104 0408 	add.w	r4, r4, #8
 8009cd6:	601e      	str	r6, [r3, #0]
 8009cd8:	dc2b      	bgt.n	8009d32 <_svfprintf_r+0xec2>
 8009cda:	605d      	str	r5, [r3, #4]
 8009cdc:	2a07      	cmp	r2, #7
 8009cde:	440d      	add	r5, r1
 8009ce0:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8009ce4:	dd08      	ble.n	8009cf8 <_svfprintf_r+0xe88>
 8009ce6:	aa22      	add	r2, sp, #136	; 0x88
 8009ce8:	4649      	mov	r1, r9
 8009cea:	4650      	mov	r0, sl
 8009cec:	f001 fcbf 	bl	800b66e <__ssprint_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	f040 8237 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009cf6:	ac25      	add	r4, sp, #148	; 0x94
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	9a05      	ldr	r2, [sp, #20]
 8009cfc:	6063      	str	r3, [r4, #4]
 8009cfe:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009d00:	f8c4 b000 	str.w	fp, [r4]
 8009d04:	4413      	add	r3, r2
 8009d06:	9324      	str	r3, [sp, #144]	; 0x90
 8009d08:	e48d      	b.n	8009626 <_svfprintf_r+0x7b6>
 8009d0a:	aa22      	add	r2, sp, #136	; 0x88
 8009d0c:	4649      	mov	r1, r9
 8009d0e:	4650      	mov	r0, sl
 8009d10:	f001 fcad 	bl	800b66e <__ssprint_r>
 8009d14:	2800      	cmp	r0, #0
 8009d16:	f040 8225 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009d1a:	ac25      	add	r4, sp, #148	; 0x94
 8009d1c:	e7b8      	b.n	8009c90 <_svfprintf_r+0xe20>
 8009d1e:	aa22      	add	r2, sp, #136	; 0x88
 8009d20:	4649      	mov	r1, r9
 8009d22:	4650      	mov	r0, sl
 8009d24:	f001 fca3 	bl	800b66e <__ssprint_r>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	f040 821b 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009d2e:	ac25      	add	r4, sp, #148	; 0x94
 8009d30:	e7c3      	b.n	8009cba <_svfprintf_r+0xe4a>
 8009d32:	3110      	adds	r1, #16
 8009d34:	2a07      	cmp	r2, #7
 8009d36:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 8009d3a:	605f      	str	r7, [r3, #4]
 8009d3c:	dd08      	ble.n	8009d50 <_svfprintf_r+0xee0>
 8009d3e:	aa22      	add	r2, sp, #136	; 0x88
 8009d40:	4649      	mov	r1, r9
 8009d42:	4650      	mov	r0, sl
 8009d44:	f001 fc93 	bl	800b66e <__ssprint_r>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	f040 820b 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009d4e:	ac25      	add	r4, sp, #148	; 0x94
 8009d50:	3d10      	subs	r5, #16
 8009d52:	4623      	mov	r3, r4
 8009d54:	e7b8      	b.n	8009cc8 <_svfprintf_r+0xe58>
 8009d56:	bf00      	nop
 8009d58:	0800d1c2 	.word	0x0800d1c2
 8009d5c:	0800d1d4 	.word	0x0800d1d4
 8009d60:	9b05      	ldr	r3, [sp, #20]
 8009d62:	42ab      	cmp	r3, r5
 8009d64:	bfa8      	it	ge
 8009d66:	462b      	movge	r3, r5
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	461f      	mov	r7, r3
 8009d6c:	dd0a      	ble.n	8009d84 <_svfprintf_r+0xf14>
 8009d6e:	441e      	add	r6, r3
 8009d70:	e9c4 b300 	strd	fp, r3, [r4]
 8009d74:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009d76:	9624      	str	r6, [sp, #144]	; 0x90
 8009d78:	3301      	adds	r3, #1
 8009d7a:	2b07      	cmp	r3, #7
 8009d7c:	9323      	str	r3, [sp, #140]	; 0x8c
 8009d7e:	f300 8086 	bgt.w	8009e8e <_svfprintf_r+0x101e>
 8009d82:	3408      	adds	r4, #8
 8009d84:	2f00      	cmp	r7, #0
 8009d86:	bfac      	ite	ge
 8009d88:	1bee      	subge	r6, r5, r7
 8009d8a:	462e      	movlt	r6, r5
 8009d8c:	2e00      	cmp	r6, #0
 8009d8e:	dd19      	ble.n	8009dc4 <_svfprintf_r+0xf54>
 8009d90:	4f97      	ldr	r7, [pc, #604]	; (8009ff0 <_svfprintf_r+0x1180>)
 8009d92:	6027      	str	r7, [r4, #0]
 8009d94:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009d98:	2e10      	cmp	r6, #16
 8009d9a:	f103 0301 	add.w	r3, r3, #1
 8009d9e:	f104 0108 	add.w	r1, r4, #8
 8009da2:	dc7e      	bgt.n	8009ea2 <_svfprintf_r+0x1032>
 8009da4:	6066      	str	r6, [r4, #4]
 8009da6:	2b07      	cmp	r3, #7
 8009da8:	4416      	add	r6, r2
 8009daa:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 8009dae:	f340 808b 	ble.w	8009ec8 <_svfprintf_r+0x1058>
 8009db2:	aa22      	add	r2, sp, #136	; 0x88
 8009db4:	4649      	mov	r1, r9
 8009db6:	4650      	mov	r0, sl
 8009db8:	f001 fc59 	bl	800b66e <__ssprint_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	f040 81d1 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009dc2:	ac25      	add	r4, sp, #148	; 0x94
 8009dc4:	f418 6f80 	tst.w	r8, #1024	; 0x400
 8009dc8:	445d      	add	r5, fp
 8009dca:	d00b      	beq.n	8009de4 <_svfprintf_r+0xf74>
 8009dcc:	4e88      	ldr	r6, [pc, #544]	; (8009ff0 <_svfprintf_r+0x1180>)
 8009dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d17b      	bne.n	8009ecc <_svfprintf_r+0x105c>
 8009dd4:	9b08      	ldr	r3, [sp, #32]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d17b      	bne.n	8009ed2 <_svfprintf_r+0x1062>
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	445b      	add	r3, fp
 8009dde:	429d      	cmp	r5, r3
 8009de0:	bf28      	it	cs
 8009de2:	461d      	movcs	r5, r3
 8009de4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8009de6:	9a05      	ldr	r2, [sp, #20]
 8009de8:	4293      	cmp	r3, r2
 8009dea:	db02      	blt.n	8009df2 <_svfprintf_r+0xf82>
 8009dec:	f018 0f01 	tst.w	r8, #1
 8009df0:	d00e      	beq.n	8009e10 <_svfprintf_r+0xfa0>
 8009df2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009df4:	6023      	str	r3, [r4, #0]
 8009df6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009df8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009dfa:	6063      	str	r3, [r4, #4]
 8009dfc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009dfe:	4413      	add	r3, r2
 8009e00:	9324      	str	r3, [sp, #144]	; 0x90
 8009e02:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e04:	3301      	adds	r3, #1
 8009e06:	2b07      	cmp	r3, #7
 8009e08:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e0a:	f300 80dd 	bgt.w	8009fc8 <_svfprintf_r+0x1158>
 8009e0e:	3408      	adds	r4, #8
 8009e10:	9b05      	ldr	r3, [sp, #20]
 8009e12:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8009e14:	eb0b 0203 	add.w	r2, fp, r3
 8009e18:	1b9e      	subs	r6, r3, r6
 8009e1a:	1b52      	subs	r2, r2, r5
 8009e1c:	4296      	cmp	r6, r2
 8009e1e:	bfa8      	it	ge
 8009e20:	4616      	movge	r6, r2
 8009e22:	2e00      	cmp	r6, #0
 8009e24:	dd0b      	ble.n	8009e3e <_svfprintf_r+0xfce>
 8009e26:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009e28:	4433      	add	r3, r6
 8009e2a:	9324      	str	r3, [sp, #144]	; 0x90
 8009e2c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009e2e:	3301      	adds	r3, #1
 8009e30:	2b07      	cmp	r3, #7
 8009e32:	e9c4 5600 	strd	r5, r6, [r4]
 8009e36:	9323      	str	r3, [sp, #140]	; 0x8c
 8009e38:	f300 80d0 	bgt.w	8009fdc <_svfprintf_r+0x116c>
 8009e3c:	3408      	adds	r4, #8
 8009e3e:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8009e40:	9b05      	ldr	r3, [sp, #20]
 8009e42:	2e00      	cmp	r6, #0
 8009e44:	eba3 0505 	sub.w	r5, r3, r5
 8009e48:	bfa8      	it	ge
 8009e4a:	1bad      	subge	r5, r5, r6
 8009e4c:	2d00      	cmp	r5, #0
 8009e4e:	f77f abf1 	ble.w	8009634 <_svfprintf_r+0x7c4>
 8009e52:	4e67      	ldr	r6, [pc, #412]	; (8009ff0 <_svfprintf_r+0x1180>)
 8009e54:	2710      	movs	r7, #16
 8009e56:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8009e5a:	2d10      	cmp	r5, #16
 8009e5c:	f103 0301 	add.w	r3, r3, #1
 8009e60:	f104 0108 	add.w	r1, r4, #8
 8009e64:	6026      	str	r6, [r4, #0]
 8009e66:	f77f aecd 	ble.w	8009c04 <_svfprintf_r+0xd94>
 8009e6a:	3210      	adds	r2, #16
 8009e6c:	2b07      	cmp	r3, #7
 8009e6e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009e72:	6067      	str	r7, [r4, #4]
 8009e74:	dd08      	ble.n	8009e88 <_svfprintf_r+0x1018>
 8009e76:	aa22      	add	r2, sp, #136	; 0x88
 8009e78:	4649      	mov	r1, r9
 8009e7a:	4650      	mov	r0, sl
 8009e7c:	f001 fbf7 	bl	800b66e <__ssprint_r>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	f040 816f 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009e86:	a925      	add	r1, sp, #148	; 0x94
 8009e88:	3d10      	subs	r5, #16
 8009e8a:	460c      	mov	r4, r1
 8009e8c:	e7e3      	b.n	8009e56 <_svfprintf_r+0xfe6>
 8009e8e:	aa22      	add	r2, sp, #136	; 0x88
 8009e90:	4649      	mov	r1, r9
 8009e92:	4650      	mov	r0, sl
 8009e94:	f001 fbeb 	bl	800b66e <__ssprint_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f040 8163 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009e9e:	ac25      	add	r4, sp, #148	; 0x94
 8009ea0:	e770      	b.n	8009d84 <_svfprintf_r+0xf14>
 8009ea2:	2010      	movs	r0, #16
 8009ea4:	4402      	add	r2, r0
 8009ea6:	2b07      	cmp	r3, #7
 8009ea8:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8009eac:	6060      	str	r0, [r4, #4]
 8009eae:	dd08      	ble.n	8009ec2 <_svfprintf_r+0x1052>
 8009eb0:	aa22      	add	r2, sp, #136	; 0x88
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	4650      	mov	r0, sl
 8009eb6:	f001 fbda 	bl	800b66e <__ssprint_r>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f040 8152 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009ec0:	a925      	add	r1, sp, #148	; 0x94
 8009ec2:	3e10      	subs	r6, #16
 8009ec4:	460c      	mov	r4, r1
 8009ec6:	e764      	b.n	8009d92 <_svfprintf_r+0xf22>
 8009ec8:	460c      	mov	r4, r1
 8009eca:	e77b      	b.n	8009dc4 <_svfprintf_r+0xf54>
 8009ecc:	9b08      	ldr	r3, [sp, #32]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d04a      	beq.n	8009f68 <_svfprintf_r+0x10f8>
 8009ed2:	9b08      	ldr	r3, [sp, #32]
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	9308      	str	r3, [sp, #32]
 8009ed8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009eda:	6023      	str	r3, [r4, #0]
 8009edc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ee0:	6063      	str	r3, [r4, #4]
 8009ee2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009ee4:	4413      	add	r3, r2
 8009ee6:	9324      	str	r3, [sp, #144]	; 0x90
 8009ee8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009eea:	3301      	adds	r3, #1
 8009eec:	2b07      	cmp	r3, #7
 8009eee:	9323      	str	r3, [sp, #140]	; 0x8c
 8009ef0:	dc41      	bgt.n	8009f76 <_svfprintf_r+0x1106>
 8009ef2:	3408      	adds	r4, #8
 8009ef4:	9b05      	ldr	r3, [sp, #20]
 8009ef6:	445b      	add	r3, fp
 8009ef8:	1b5a      	subs	r2, r3, r5
 8009efa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009efc:	781b      	ldrb	r3, [r3, #0]
 8009efe:	4293      	cmp	r3, r2
 8009f00:	bfa8      	it	ge
 8009f02:	4613      	movge	r3, r2
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	461f      	mov	r7, r3
 8009f08:	dd0a      	ble.n	8009f20 <_svfprintf_r+0x10b0>
 8009f0a:	e9c4 5300 	strd	r5, r3, [r4]
 8009f0e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8009f10:	443b      	add	r3, r7
 8009f12:	9324      	str	r3, [sp, #144]	; 0x90
 8009f14:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f16:	3301      	adds	r3, #1
 8009f18:	2b07      	cmp	r3, #7
 8009f1a:	9323      	str	r3, [sp, #140]	; 0x8c
 8009f1c:	dc35      	bgt.n	8009f8a <_svfprintf_r+0x111a>
 8009f1e:	3408      	adds	r4, #8
 8009f20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2f00      	cmp	r7, #0
 8009f26:	bfac      	ite	ge
 8009f28:	1bdf      	subge	r7, r3, r7
 8009f2a:	461f      	movlt	r7, r3
 8009f2c:	2f00      	cmp	r7, #0
 8009f2e:	dd17      	ble.n	8009f60 <_svfprintf_r+0x10f0>
 8009f30:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8009f34:	2f10      	cmp	r7, #16
 8009f36:	f102 0201 	add.w	r2, r2, #1
 8009f3a:	f104 0108 	add.w	r1, r4, #8
 8009f3e:	6026      	str	r6, [r4, #0]
 8009f40:	dc2d      	bgt.n	8009f9e <_svfprintf_r+0x112e>
 8009f42:	443b      	add	r3, r7
 8009f44:	2a07      	cmp	r2, #7
 8009f46:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8009f4a:	6067      	str	r7, [r4, #4]
 8009f4c:	dd3a      	ble.n	8009fc4 <_svfprintf_r+0x1154>
 8009f4e:	aa22      	add	r2, sp, #136	; 0x88
 8009f50:	4649      	mov	r1, r9
 8009f52:	4650      	mov	r0, sl
 8009f54:	f001 fb8b 	bl	800b66e <__ssprint_r>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	f040 8103 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009f5e:	ac25      	add	r4, sp, #148	; 0x94
 8009f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f62:	781b      	ldrb	r3, [r3, #0]
 8009f64:	441d      	add	r5, r3
 8009f66:	e732      	b.n	8009dce <_svfprintf_r+0xf5e>
 8009f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6a:	3b01      	subs	r3, #1
 8009f6c:	930a      	str	r3, [sp, #40]	; 0x28
 8009f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f70:	3b01      	subs	r3, #1
 8009f72:	9309      	str	r3, [sp, #36]	; 0x24
 8009f74:	e7b0      	b.n	8009ed8 <_svfprintf_r+0x1068>
 8009f76:	aa22      	add	r2, sp, #136	; 0x88
 8009f78:	4649      	mov	r1, r9
 8009f7a:	4650      	mov	r0, sl
 8009f7c:	f001 fb77 	bl	800b66e <__ssprint_r>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	f040 80ef 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009f86:	ac25      	add	r4, sp, #148	; 0x94
 8009f88:	e7b4      	b.n	8009ef4 <_svfprintf_r+0x1084>
 8009f8a:	aa22      	add	r2, sp, #136	; 0x88
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	4650      	mov	r0, sl
 8009f90:	f001 fb6d 	bl	800b66e <__ssprint_r>
 8009f94:	2800      	cmp	r0, #0
 8009f96:	f040 80e5 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009f9a:	ac25      	add	r4, sp, #148	; 0x94
 8009f9c:	e7c0      	b.n	8009f20 <_svfprintf_r+0x10b0>
 8009f9e:	2010      	movs	r0, #16
 8009fa0:	4403      	add	r3, r0
 8009fa2:	2a07      	cmp	r2, #7
 8009fa4:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8009fa8:	6060      	str	r0, [r4, #4]
 8009faa:	dd08      	ble.n	8009fbe <_svfprintf_r+0x114e>
 8009fac:	aa22      	add	r2, sp, #136	; 0x88
 8009fae:	4649      	mov	r1, r9
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	f001 fb5c 	bl	800b66e <__ssprint_r>
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	f040 80d4 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009fbc:	a925      	add	r1, sp, #148	; 0x94
 8009fbe:	3f10      	subs	r7, #16
 8009fc0:	460c      	mov	r4, r1
 8009fc2:	e7b5      	b.n	8009f30 <_svfprintf_r+0x10c0>
 8009fc4:	460c      	mov	r4, r1
 8009fc6:	e7cb      	b.n	8009f60 <_svfprintf_r+0x10f0>
 8009fc8:	aa22      	add	r2, sp, #136	; 0x88
 8009fca:	4649      	mov	r1, r9
 8009fcc:	4650      	mov	r0, sl
 8009fce:	f001 fb4e 	bl	800b66e <__ssprint_r>
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f040 80c6 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009fd8:	ac25      	add	r4, sp, #148	; 0x94
 8009fda:	e719      	b.n	8009e10 <_svfprintf_r+0xfa0>
 8009fdc:	aa22      	add	r2, sp, #136	; 0x88
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4650      	mov	r0, sl
 8009fe2:	f001 fb44 	bl	800b66e <__ssprint_r>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f040 80bc 	bne.w	800a164 <_svfprintf_r+0x12f4>
 8009fec:	ac25      	add	r4, sp, #148	; 0x94
 8009fee:	e726      	b.n	8009e3e <_svfprintf_r+0xfce>
 8009ff0:	0800d1d4 	.word	0x0800d1d4
 8009ff4:	9a05      	ldr	r2, [sp, #20]
 8009ff6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ff8:	2a01      	cmp	r2, #1
 8009ffa:	f106 0601 	add.w	r6, r6, #1
 8009ffe:	f103 0301 	add.w	r3, r3, #1
 800a002:	f104 0508 	add.w	r5, r4, #8
 800a006:	dc02      	bgt.n	800a00e <_svfprintf_r+0x119e>
 800a008:	f018 0f01 	tst.w	r8, #1
 800a00c:	d07e      	beq.n	800a10c <_svfprintf_r+0x129c>
 800a00e:	2201      	movs	r2, #1
 800a010:	2b07      	cmp	r3, #7
 800a012:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a016:	f8c4 b000 	str.w	fp, [r4]
 800a01a:	6062      	str	r2, [r4, #4]
 800a01c:	dd08      	ble.n	800a030 <_svfprintf_r+0x11c0>
 800a01e:	aa22      	add	r2, sp, #136	; 0x88
 800a020:	4649      	mov	r1, r9
 800a022:	4650      	mov	r0, sl
 800a024:	f001 fb23 	bl	800b66e <__ssprint_r>
 800a028:	2800      	cmp	r0, #0
 800a02a:	f040 809b 	bne.w	800a164 <_svfprintf_r+0x12f4>
 800a02e:	ad25      	add	r5, sp, #148	; 0x94
 800a030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a032:	602b      	str	r3, [r5, #0]
 800a034:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a036:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a038:	606b      	str	r3, [r5, #4]
 800a03a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a03c:	4413      	add	r3, r2
 800a03e:	9324      	str	r3, [sp, #144]	; 0x90
 800a040:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a042:	3301      	adds	r3, #1
 800a044:	2b07      	cmp	r3, #7
 800a046:	9323      	str	r3, [sp, #140]	; 0x8c
 800a048:	dc32      	bgt.n	800a0b0 <_svfprintf_r+0x1240>
 800a04a:	3508      	adds	r5, #8
 800a04c:	9b05      	ldr	r3, [sp, #20]
 800a04e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a052:	1e5c      	subs	r4, r3, #1
 800a054:	2200      	movs	r2, #0
 800a056:	2300      	movs	r3, #0
 800a058:	f7f6 fd3e 	bl	8000ad8 <__aeabi_dcmpeq>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	d130      	bne.n	800a0c2 <_svfprintf_r+0x1252>
 800a060:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800a062:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a064:	9a05      	ldr	r2, [sp, #20]
 800a066:	3101      	adds	r1, #1
 800a068:	3b01      	subs	r3, #1
 800a06a:	f10b 0001 	add.w	r0, fp, #1
 800a06e:	4413      	add	r3, r2
 800a070:	2907      	cmp	r1, #7
 800a072:	e9c5 0400 	strd	r0, r4, [r5]
 800a076:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800a07a:	dd50      	ble.n	800a11e <_svfprintf_r+0x12ae>
 800a07c:	aa22      	add	r2, sp, #136	; 0x88
 800a07e:	4649      	mov	r1, r9
 800a080:	4650      	mov	r0, sl
 800a082:	f001 faf4 	bl	800b66e <__ssprint_r>
 800a086:	2800      	cmp	r0, #0
 800a088:	d16c      	bne.n	800a164 <_svfprintf_r+0x12f4>
 800a08a:	ad25      	add	r5, sp, #148	; 0x94
 800a08c:	ab1e      	add	r3, sp, #120	; 0x78
 800a08e:	602b      	str	r3, [r5, #0]
 800a090:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a092:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a094:	606b      	str	r3, [r5, #4]
 800a096:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a098:	4413      	add	r3, r2
 800a09a:	9324      	str	r3, [sp, #144]	; 0x90
 800a09c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a09e:	3301      	adds	r3, #1
 800a0a0:	2b07      	cmp	r3, #7
 800a0a2:	9323      	str	r3, [sp, #140]	; 0x8c
 800a0a4:	f73f adb5 	bgt.w	8009c12 <_svfprintf_r+0xda2>
 800a0a8:	f105 0408 	add.w	r4, r5, #8
 800a0ac:	f7ff bac2 	b.w	8009634 <_svfprintf_r+0x7c4>
 800a0b0:	aa22      	add	r2, sp, #136	; 0x88
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	4650      	mov	r0, sl
 800a0b6:	f001 fada 	bl	800b66e <__ssprint_r>
 800a0ba:	2800      	cmp	r0, #0
 800a0bc:	d152      	bne.n	800a164 <_svfprintf_r+0x12f4>
 800a0be:	ad25      	add	r5, sp, #148	; 0x94
 800a0c0:	e7c4      	b.n	800a04c <_svfprintf_r+0x11dc>
 800a0c2:	2c00      	cmp	r4, #0
 800a0c4:	dde2      	ble.n	800a08c <_svfprintf_r+0x121c>
 800a0c6:	4e58      	ldr	r6, [pc, #352]	; (800a228 <_svfprintf_r+0x13b8>)
 800a0c8:	2710      	movs	r7, #16
 800a0ca:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a0ce:	2c10      	cmp	r4, #16
 800a0d0:	f103 0301 	add.w	r3, r3, #1
 800a0d4:	f105 0108 	add.w	r1, r5, #8
 800a0d8:	602e      	str	r6, [r5, #0]
 800a0da:	dc07      	bgt.n	800a0ec <_svfprintf_r+0x127c>
 800a0dc:	606c      	str	r4, [r5, #4]
 800a0de:	2b07      	cmp	r3, #7
 800a0e0:	4414      	add	r4, r2
 800a0e2:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800a0e6:	dcc9      	bgt.n	800a07c <_svfprintf_r+0x120c>
 800a0e8:	460d      	mov	r5, r1
 800a0ea:	e7cf      	b.n	800a08c <_svfprintf_r+0x121c>
 800a0ec:	3210      	adds	r2, #16
 800a0ee:	2b07      	cmp	r3, #7
 800a0f0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a0f4:	606f      	str	r7, [r5, #4]
 800a0f6:	dd06      	ble.n	800a106 <_svfprintf_r+0x1296>
 800a0f8:	aa22      	add	r2, sp, #136	; 0x88
 800a0fa:	4649      	mov	r1, r9
 800a0fc:	4650      	mov	r0, sl
 800a0fe:	f001 fab6 	bl	800b66e <__ssprint_r>
 800a102:	bb78      	cbnz	r0, 800a164 <_svfprintf_r+0x12f4>
 800a104:	a925      	add	r1, sp, #148	; 0x94
 800a106:	3c10      	subs	r4, #16
 800a108:	460d      	mov	r5, r1
 800a10a:	e7de      	b.n	800a0ca <_svfprintf_r+0x125a>
 800a10c:	2201      	movs	r2, #1
 800a10e:	2b07      	cmp	r3, #7
 800a110:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800a114:	f8c4 b000 	str.w	fp, [r4]
 800a118:	6062      	str	r2, [r4, #4]
 800a11a:	ddb7      	ble.n	800a08c <_svfprintf_r+0x121c>
 800a11c:	e7ae      	b.n	800a07c <_svfprintf_r+0x120c>
 800a11e:	3508      	adds	r5, #8
 800a120:	e7b4      	b.n	800a08c <_svfprintf_r+0x121c>
 800a122:	460c      	mov	r4, r1
 800a124:	f7ff ba86 	b.w	8009634 <_svfprintf_r+0x7c4>
 800a128:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800a12c:	1a9d      	subs	r5, r3, r2
 800a12e:	2d00      	cmp	r5, #0
 800a130:	f77f aa84 	ble.w	800963c <_svfprintf_r+0x7cc>
 800a134:	4e3d      	ldr	r6, [pc, #244]	; (800a22c <_svfprintf_r+0x13bc>)
 800a136:	2710      	movs	r7, #16
 800a138:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800a13c:	2d10      	cmp	r5, #16
 800a13e:	f103 0301 	add.w	r3, r3, #1
 800a142:	6026      	str	r6, [r4, #0]
 800a144:	dc18      	bgt.n	800a178 <_svfprintf_r+0x1308>
 800a146:	6065      	str	r5, [r4, #4]
 800a148:	2b07      	cmp	r3, #7
 800a14a:	4415      	add	r5, r2
 800a14c:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800a150:	f77f aa74 	ble.w	800963c <_svfprintf_r+0x7cc>
 800a154:	aa22      	add	r2, sp, #136	; 0x88
 800a156:	4649      	mov	r1, r9
 800a158:	4650      	mov	r0, sl
 800a15a:	f001 fa88 	bl	800b66e <__ssprint_r>
 800a15e:	2800      	cmp	r0, #0
 800a160:	f43f aa6c 	beq.w	800963c <_svfprintf_r+0x7cc>
 800a164:	9b03      	ldr	r3, [sp, #12]
 800a166:	2b00      	cmp	r3, #0
 800a168:	f43f a88a 	beq.w	8009280 <_svfprintf_r+0x410>
 800a16c:	4619      	mov	r1, r3
 800a16e:	4650      	mov	r0, sl
 800a170:	f7fe fdb8 	bl	8008ce4 <_free_r>
 800a174:	f7ff b884 	b.w	8009280 <_svfprintf_r+0x410>
 800a178:	3210      	adds	r2, #16
 800a17a:	2b07      	cmp	r3, #7
 800a17c:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800a180:	6067      	str	r7, [r4, #4]
 800a182:	dc02      	bgt.n	800a18a <_svfprintf_r+0x131a>
 800a184:	3408      	adds	r4, #8
 800a186:	3d10      	subs	r5, #16
 800a188:	e7d6      	b.n	800a138 <_svfprintf_r+0x12c8>
 800a18a:	aa22      	add	r2, sp, #136	; 0x88
 800a18c:	4649      	mov	r1, r9
 800a18e:	4650      	mov	r0, sl
 800a190:	f001 fa6d 	bl	800b66e <__ssprint_r>
 800a194:	2800      	cmp	r0, #0
 800a196:	d1e5      	bne.n	800a164 <_svfprintf_r+0x12f4>
 800a198:	ac25      	add	r4, sp, #148	; 0x94
 800a19a:	e7f4      	b.n	800a186 <_svfprintf_r+0x1316>
 800a19c:	9903      	ldr	r1, [sp, #12]
 800a19e:	4650      	mov	r0, sl
 800a1a0:	f7fe fda0 	bl	8008ce4 <_free_r>
 800a1a4:	f7ff ba62 	b.w	800966c <_svfprintf_r+0x7fc>
 800a1a8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	f43f a868 	beq.w	8009280 <_svfprintf_r+0x410>
 800a1b0:	aa22      	add	r2, sp, #136	; 0x88
 800a1b2:	4649      	mov	r1, r9
 800a1b4:	4650      	mov	r0, sl
 800a1b6:	f001 fa5a 	bl	800b66e <__ssprint_r>
 800a1ba:	f7ff b861 	b.w	8009280 <_svfprintf_r+0x410>
 800a1be:	ea56 0207 	orrs.w	r2, r6, r7
 800a1c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a1c6:	f43f ab78 	beq.w	80098ba <_svfprintf_r+0xa4a>
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	f43f ac0d 	beq.w	80099ea <_svfprintf_r+0xb7a>
 800a1d0:	2b02      	cmp	r3, #2
 800a1d2:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800a1d6:	f43f ac55 	beq.w	8009a84 <_svfprintf_r+0xc14>
 800a1da:	08f2      	lsrs	r2, r6, #3
 800a1dc:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800a1e0:	08f8      	lsrs	r0, r7, #3
 800a1e2:	f006 0307 	and.w	r3, r6, #7
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	4616      	mov	r6, r2
 800a1ea:	3330      	adds	r3, #48	; 0x30
 800a1ec:	ea56 0207 	orrs.w	r2, r6, r7
 800a1f0:	4659      	mov	r1, fp
 800a1f2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800a1f6:	d1f0      	bne.n	800a1da <_svfprintf_r+0x136a>
 800a1f8:	9a03      	ldr	r2, [sp, #12]
 800a1fa:	07d2      	lsls	r2, r2, #31
 800a1fc:	d506      	bpl.n	800a20c <_svfprintf_r+0x139c>
 800a1fe:	2b30      	cmp	r3, #48	; 0x30
 800a200:	d004      	beq.n	800a20c <_svfprintf_r+0x139c>
 800a202:	2330      	movs	r3, #48	; 0x30
 800a204:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800a208:	f1a1 0b02 	sub.w	fp, r1, #2
 800a20c:	ab4e      	add	r3, sp, #312	; 0x138
 800a20e:	eba3 030b 	sub.w	r3, r3, fp
 800a212:	9e04      	ldr	r6, [sp, #16]
 800a214:	9304      	str	r3, [sp, #16]
 800a216:	2300      	movs	r3, #0
 800a218:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a21c:	9303      	str	r3, [sp, #12]
 800a21e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800a222:	461d      	mov	r5, r3
 800a224:	f7ff b94c 	b.w	80094c0 <_svfprintf_r+0x650>
 800a228:	0800d1d4 	.word	0x0800d1d4
 800a22c:	0800d1c4 	.word	0x0800d1c4

0800a230 <__register_exitproc>:
 800a230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a234:	4d1c      	ldr	r5, [pc, #112]	; (800a2a8 <__register_exitproc+0x78>)
 800a236:	4606      	mov	r6, r0
 800a238:	6828      	ldr	r0, [r5, #0]
 800a23a:	4698      	mov	r8, r3
 800a23c:	460f      	mov	r7, r1
 800a23e:	4691      	mov	r9, r2
 800a240:	f7fe fe12 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800a244:	4b19      	ldr	r3, [pc, #100]	; (800a2ac <__register_exitproc+0x7c>)
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800a24c:	4628      	mov	r0, r5
 800a24e:	b91c      	cbnz	r4, 800a258 <__register_exitproc+0x28>
 800a250:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800a254:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800a258:	6865      	ldr	r5, [r4, #4]
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	2d1f      	cmp	r5, #31
 800a25e:	dd05      	ble.n	800a26c <__register_exitproc+0x3c>
 800a260:	f7fe fe03 	bl	8008e6a <__retarget_lock_release_recursive>
 800a264:	f04f 30ff 	mov.w	r0, #4294967295
 800a268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a26c:	b19e      	cbz	r6, 800a296 <__register_exitproc+0x66>
 800a26e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800a272:	2201      	movs	r2, #1
 800a274:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800a278:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800a27c:	40aa      	lsls	r2, r5
 800a27e:	4313      	orrs	r3, r2
 800a280:	2e02      	cmp	r6, #2
 800a282:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800a286:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800a28a:	bf02      	ittt	eq
 800a28c:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800a290:	431a      	orreq	r2, r3
 800a292:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800a296:	1c6b      	adds	r3, r5, #1
 800a298:	3502      	adds	r5, #2
 800a29a:	6063      	str	r3, [r4, #4]
 800a29c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800a2a0:	f7fe fde3 	bl	8008e6a <__retarget_lock_release_recursive>
 800a2a4:	2000      	movs	r0, #0
 800a2a6:	e7df      	b.n	800a268 <__register_exitproc+0x38>
 800a2a8:	200008a8 	.word	0x200008a8
 800a2ac:	0800d18c 	.word	0x0800d18c

0800a2b0 <quorem>:
 800a2b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2b4:	6903      	ldr	r3, [r0, #16]
 800a2b6:	690c      	ldr	r4, [r1, #16]
 800a2b8:	42a3      	cmp	r3, r4
 800a2ba:	4607      	mov	r7, r0
 800a2bc:	f2c0 8081 	blt.w	800a3c2 <quorem+0x112>
 800a2c0:	3c01      	subs	r4, #1
 800a2c2:	f101 0814 	add.w	r8, r1, #20
 800a2c6:	f100 0514 	add.w	r5, r0, #20
 800a2ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2ce:	9301      	str	r3, [sp, #4]
 800a2d0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2d4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2e0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2e4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2e8:	d331      	bcc.n	800a34e <quorem+0x9e>
 800a2ea:	f04f 0e00 	mov.w	lr, #0
 800a2ee:	4640      	mov	r0, r8
 800a2f0:	46ac      	mov	ip, r5
 800a2f2:	46f2      	mov	sl, lr
 800a2f4:	f850 2b04 	ldr.w	r2, [r0], #4
 800a2f8:	b293      	uxth	r3, r2
 800a2fa:	fb06 e303 	mla	r3, r6, r3, lr
 800a2fe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a302:	b29b      	uxth	r3, r3
 800a304:	ebaa 0303 	sub.w	r3, sl, r3
 800a308:	0c12      	lsrs	r2, r2, #16
 800a30a:	f8dc a000 	ldr.w	sl, [ip]
 800a30e:	fb06 e202 	mla	r2, r6, r2, lr
 800a312:	fa13 f38a 	uxtah	r3, r3, sl
 800a316:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a31a:	fa1f fa82 	uxth.w	sl, r2
 800a31e:	f8dc 2000 	ldr.w	r2, [ip]
 800a322:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a326:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a330:	4581      	cmp	r9, r0
 800a332:	f84c 3b04 	str.w	r3, [ip], #4
 800a336:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a33a:	d2db      	bcs.n	800a2f4 <quorem+0x44>
 800a33c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a340:	b92b      	cbnz	r3, 800a34e <quorem+0x9e>
 800a342:	9b01      	ldr	r3, [sp, #4]
 800a344:	3b04      	subs	r3, #4
 800a346:	429d      	cmp	r5, r3
 800a348:	461a      	mov	r2, r3
 800a34a:	d32e      	bcc.n	800a3aa <quorem+0xfa>
 800a34c:	613c      	str	r4, [r7, #16]
 800a34e:	4638      	mov	r0, r7
 800a350:	f001 f842 	bl	800b3d8 <__mcmp>
 800a354:	2800      	cmp	r0, #0
 800a356:	db24      	blt.n	800a3a2 <quorem+0xf2>
 800a358:	3601      	adds	r6, #1
 800a35a:	4628      	mov	r0, r5
 800a35c:	f04f 0c00 	mov.w	ip, #0
 800a360:	f858 2b04 	ldr.w	r2, [r8], #4
 800a364:	f8d0 e000 	ldr.w	lr, [r0]
 800a368:	b293      	uxth	r3, r2
 800a36a:	ebac 0303 	sub.w	r3, ip, r3
 800a36e:	0c12      	lsrs	r2, r2, #16
 800a370:	fa13 f38e 	uxtah	r3, r3, lr
 800a374:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a378:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a37c:	b29b      	uxth	r3, r3
 800a37e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a382:	45c1      	cmp	r9, r8
 800a384:	f840 3b04 	str.w	r3, [r0], #4
 800a388:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a38c:	d2e8      	bcs.n	800a360 <quorem+0xb0>
 800a38e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a392:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a396:	b922      	cbnz	r2, 800a3a2 <quorem+0xf2>
 800a398:	3b04      	subs	r3, #4
 800a39a:	429d      	cmp	r5, r3
 800a39c:	461a      	mov	r2, r3
 800a39e:	d30a      	bcc.n	800a3b6 <quorem+0x106>
 800a3a0:	613c      	str	r4, [r7, #16]
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	b003      	add	sp, #12
 800a3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3aa:	6812      	ldr	r2, [r2, #0]
 800a3ac:	3b04      	subs	r3, #4
 800a3ae:	2a00      	cmp	r2, #0
 800a3b0:	d1cc      	bne.n	800a34c <quorem+0x9c>
 800a3b2:	3c01      	subs	r4, #1
 800a3b4:	e7c7      	b.n	800a346 <quorem+0x96>
 800a3b6:	6812      	ldr	r2, [r2, #0]
 800a3b8:	3b04      	subs	r3, #4
 800a3ba:	2a00      	cmp	r2, #0
 800a3bc:	d1f0      	bne.n	800a3a0 <quorem+0xf0>
 800a3be:	3c01      	subs	r4, #1
 800a3c0:	e7eb      	b.n	800a39a <quorem+0xea>
 800a3c2:	2000      	movs	r0, #0
 800a3c4:	e7ee      	b.n	800a3a4 <quorem+0xf4>
	...

0800a3c8 <_dtoa_r>:
 800a3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3cc:	ed2d 8b02 	vpush	{d8}
 800a3d0:	b095      	sub	sp, #84	; 0x54
 800a3d2:	ec57 6b10 	vmov	r6, r7, d0
 800a3d6:	9105      	str	r1, [sp, #20]
 800a3d8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800a3da:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800a3dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a3de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a3e6:	b141      	cbz	r1, 800a3fa <_dtoa_r+0x32>
 800a3e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a3ea:	604a      	str	r2, [r1, #4]
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	4093      	lsls	r3, r2
 800a3f0:	608b      	str	r3, [r1, #8]
 800a3f2:	f000 fde6 	bl	800afc2 <_Bfree>
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	6423      	str	r3, [r4, #64]	; 0x40
 800a3fa:	1e3b      	subs	r3, r7, #0
 800a3fc:	bfb9      	ittee	lt
 800a3fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a402:	9303      	strlt	r3, [sp, #12]
 800a404:	2300      	movge	r3, #0
 800a406:	602b      	strge	r3, [r5, #0]
 800a408:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a40c:	4ba2      	ldr	r3, [pc, #648]	; (800a698 <_dtoa_r+0x2d0>)
 800a40e:	bfbc      	itt	lt
 800a410:	2201      	movlt	r2, #1
 800a412:	602a      	strlt	r2, [r5, #0]
 800a414:	ea33 0309 	bics.w	r3, r3, r9
 800a418:	d11b      	bne.n	800a452 <_dtoa_r+0x8a>
 800a41a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a41c:	f242 730f 	movw	r3, #9999	; 0x270f
 800a420:	6013      	str	r3, [r2, #0]
 800a422:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a426:	4333      	orrs	r3, r6
 800a428:	f000 8578 	beq.w	800af1c <_dtoa_r+0xb54>
 800a42c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a42e:	b90b      	cbnz	r3, 800a434 <_dtoa_r+0x6c>
 800a430:	4b9a      	ldr	r3, [pc, #616]	; (800a69c <_dtoa_r+0x2d4>)
 800a432:	e024      	b.n	800a47e <_dtoa_r+0xb6>
 800a434:	4b99      	ldr	r3, [pc, #612]	; (800a69c <_dtoa_r+0x2d4>)
 800a436:	9300      	str	r3, [sp, #0]
 800a438:	3303      	adds	r3, #3
 800a43a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	9800      	ldr	r0, [sp, #0]
 800a440:	b015      	add	sp, #84	; 0x54
 800a442:	ecbd 8b02 	vpop	{d8}
 800a446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44a:	4b95      	ldr	r3, [pc, #596]	; (800a6a0 <_dtoa_r+0x2d8>)
 800a44c:	9300      	str	r3, [sp, #0]
 800a44e:	3308      	adds	r3, #8
 800a450:	e7f3      	b.n	800a43a <_dtoa_r+0x72>
 800a452:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a456:	2200      	movs	r2, #0
 800a458:	ec51 0b17 	vmov	r0, r1, d7
 800a45c:	2300      	movs	r3, #0
 800a45e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a462:	f7f6 fb39 	bl	8000ad8 <__aeabi_dcmpeq>
 800a466:	4680      	mov	r8, r0
 800a468:	b158      	cbz	r0, 800a482 <_dtoa_r+0xba>
 800a46a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a46c:	2301      	movs	r3, #1
 800a46e:	6013      	str	r3, [r2, #0]
 800a470:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a472:	2b00      	cmp	r3, #0
 800a474:	f000 854f 	beq.w	800af16 <_dtoa_r+0xb4e>
 800a478:	488a      	ldr	r0, [pc, #552]	; (800a6a4 <_dtoa_r+0x2dc>)
 800a47a:	6018      	str	r0, [r3, #0]
 800a47c:	1e43      	subs	r3, r0, #1
 800a47e:	9300      	str	r3, [sp, #0]
 800a480:	e7dd      	b.n	800a43e <_dtoa_r+0x76>
 800a482:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a486:	aa12      	add	r2, sp, #72	; 0x48
 800a488:	a913      	add	r1, sp, #76	; 0x4c
 800a48a:	4620      	mov	r0, r4
 800a48c:	f001 f848 	bl	800b520 <__d2b>
 800a490:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a494:	4683      	mov	fp, r0
 800a496:	2d00      	cmp	r5, #0
 800a498:	d07c      	beq.n	800a594 <_dtoa_r+0x1cc>
 800a49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a49c:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a4a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a4a4:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a4a8:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a4ac:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a4b0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a4b4:	4b7c      	ldr	r3, [pc, #496]	; (800a6a8 <_dtoa_r+0x2e0>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f5 feec 	bl	8000298 <__aeabi_dsub>
 800a4c0:	a36f      	add	r3, pc, #444	; (adr r3, 800a680 <_dtoa_r+0x2b8>)
 800a4c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c6:	f7f6 f89f 	bl	8000608 <__aeabi_dmul>
 800a4ca:	a36f      	add	r3, pc, #444	; (adr r3, 800a688 <_dtoa_r+0x2c0>)
 800a4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d0:	f7f5 fee4 	bl	800029c <__adddf3>
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	460f      	mov	r7, r1
 800a4da:	f7f6 f82b 	bl	8000534 <__aeabi_i2d>
 800a4de:	a36c      	add	r3, pc, #432	; (adr r3, 800a690 <_dtoa_r+0x2c8>)
 800a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e4:	f7f6 f890 	bl	8000608 <__aeabi_dmul>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	f7f5 fed4 	bl	800029c <__adddf3>
 800a4f4:	4606      	mov	r6, r0
 800a4f6:	460f      	mov	r7, r1
 800a4f8:	f7f6 fb36 	bl	8000b68 <__aeabi_d2iz>
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4682      	mov	sl, r0
 800a500:	2300      	movs	r3, #0
 800a502:	4630      	mov	r0, r6
 800a504:	4639      	mov	r1, r7
 800a506:	f7f6 faf1 	bl	8000aec <__aeabi_dcmplt>
 800a50a:	b148      	cbz	r0, 800a520 <_dtoa_r+0x158>
 800a50c:	4650      	mov	r0, sl
 800a50e:	f7f6 f811 	bl	8000534 <__aeabi_i2d>
 800a512:	4632      	mov	r2, r6
 800a514:	463b      	mov	r3, r7
 800a516:	f7f6 fadf 	bl	8000ad8 <__aeabi_dcmpeq>
 800a51a:	b908      	cbnz	r0, 800a520 <_dtoa_r+0x158>
 800a51c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a520:	f1ba 0f16 	cmp.w	sl, #22
 800a524:	d854      	bhi.n	800a5d0 <_dtoa_r+0x208>
 800a526:	4b61      	ldr	r3, [pc, #388]	; (800a6ac <_dtoa_r+0x2e4>)
 800a528:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a530:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a534:	f7f6 fada 	bl	8000aec <__aeabi_dcmplt>
 800a538:	2800      	cmp	r0, #0
 800a53a:	d04b      	beq.n	800a5d4 <_dtoa_r+0x20c>
 800a53c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a540:	2300      	movs	r3, #0
 800a542:	930e      	str	r3, [sp, #56]	; 0x38
 800a544:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a546:	1b5d      	subs	r5, r3, r5
 800a548:	1e6b      	subs	r3, r5, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	bf43      	ittte	mi
 800a54e:	2300      	movmi	r3, #0
 800a550:	f1c5 0801 	rsbmi	r8, r5, #1
 800a554:	9304      	strmi	r3, [sp, #16]
 800a556:	f04f 0800 	movpl.w	r8, #0
 800a55a:	f1ba 0f00 	cmp.w	sl, #0
 800a55e:	db3b      	blt.n	800a5d8 <_dtoa_r+0x210>
 800a560:	9b04      	ldr	r3, [sp, #16]
 800a562:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a566:	4453      	add	r3, sl
 800a568:	9304      	str	r3, [sp, #16]
 800a56a:	2300      	movs	r3, #0
 800a56c:	9306      	str	r3, [sp, #24]
 800a56e:	9b05      	ldr	r3, [sp, #20]
 800a570:	2b09      	cmp	r3, #9
 800a572:	d86a      	bhi.n	800a64a <_dtoa_r+0x282>
 800a574:	2b05      	cmp	r3, #5
 800a576:	bfc4      	itt	gt
 800a578:	3b04      	subgt	r3, #4
 800a57a:	9305      	strgt	r3, [sp, #20]
 800a57c:	9b05      	ldr	r3, [sp, #20]
 800a57e:	f1a3 0302 	sub.w	r3, r3, #2
 800a582:	bfcc      	ite	gt
 800a584:	2500      	movgt	r5, #0
 800a586:	2501      	movle	r5, #1
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d86a      	bhi.n	800a662 <_dtoa_r+0x29a>
 800a58c:	e8df f003 	tbb	[pc, r3]
 800a590:	5b4d4f2c 	.word	0x5b4d4f2c
 800a594:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a598:	441d      	add	r5, r3
 800a59a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a59e:	2b20      	cmp	r3, #32
 800a5a0:	bfc1      	itttt	gt
 800a5a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a5a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a5aa:	fa09 f303 	lslgt.w	r3, r9, r3
 800a5ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a5b2:	bfda      	itte	le
 800a5b4:	f1c3 0320 	rsble	r3, r3, #32
 800a5b8:	fa06 f003 	lslle.w	r0, r6, r3
 800a5bc:	4318      	orrgt	r0, r3
 800a5be:	f7f5 ffa9 	bl	8000514 <__aeabi_ui2d>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a5ca:	3d01      	subs	r5, #1
 800a5cc:	9310      	str	r3, [sp, #64]	; 0x40
 800a5ce:	e771      	b.n	800a4b4 <_dtoa_r+0xec>
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e7b6      	b.n	800a542 <_dtoa_r+0x17a>
 800a5d4:	900e      	str	r0, [sp, #56]	; 0x38
 800a5d6:	e7b5      	b.n	800a544 <_dtoa_r+0x17c>
 800a5d8:	f1ca 0300 	rsb	r3, sl, #0
 800a5dc:	9306      	str	r3, [sp, #24]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	eba8 080a 	sub.w	r8, r8, sl
 800a5e4:	930d      	str	r3, [sp, #52]	; 0x34
 800a5e6:	e7c2      	b.n	800a56e <_dtoa_r+0x1a6>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	9308      	str	r3, [sp, #32]
 800a5ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	dc3a      	bgt.n	800a668 <_dtoa_r+0x2a0>
 800a5f2:	f04f 0901 	mov.w	r9, #1
 800a5f6:	f8cd 9004 	str.w	r9, [sp, #4]
 800a5fa:	464b      	mov	r3, r9
 800a5fc:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a600:	2200      	movs	r2, #0
 800a602:	6462      	str	r2, [r4, #68]	; 0x44
 800a604:	2204      	movs	r2, #4
 800a606:	f102 0014 	add.w	r0, r2, #20
 800a60a:	4298      	cmp	r0, r3
 800a60c:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a60e:	d931      	bls.n	800a674 <_dtoa_r+0x2ac>
 800a610:	4620      	mov	r0, r4
 800a612:	f000 fcb1 	bl	800af78 <_Balloc>
 800a616:	9000      	str	r0, [sp, #0]
 800a618:	2800      	cmp	r0, #0
 800a61a:	d14d      	bne.n	800a6b8 <_dtoa_r+0x2f0>
 800a61c:	4b24      	ldr	r3, [pc, #144]	; (800a6b0 <_dtoa_r+0x2e8>)
 800a61e:	4602      	mov	r2, r0
 800a620:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a624:	4823      	ldr	r0, [pc, #140]	; (800a6b4 <_dtoa_r+0x2ec>)
 800a626:	f001 f89d 	bl	800b764 <__assert_func>
 800a62a:	2301      	movs	r3, #1
 800a62c:	e7dd      	b.n	800a5ea <_dtoa_r+0x222>
 800a62e:	2300      	movs	r3, #0
 800a630:	9308      	str	r3, [sp, #32]
 800a632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a634:	eb0a 0903 	add.w	r9, sl, r3
 800a638:	f109 0301 	add.w	r3, r9, #1
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	9301      	str	r3, [sp, #4]
 800a640:	bfb8      	it	lt
 800a642:	2301      	movlt	r3, #1
 800a644:	e7dc      	b.n	800a600 <_dtoa_r+0x238>
 800a646:	2301      	movs	r3, #1
 800a648:	e7f2      	b.n	800a630 <_dtoa_r+0x268>
 800a64a:	2501      	movs	r5, #1
 800a64c:	2300      	movs	r3, #0
 800a64e:	9305      	str	r3, [sp, #20]
 800a650:	9508      	str	r5, [sp, #32]
 800a652:	f04f 39ff 	mov.w	r9, #4294967295
 800a656:	2200      	movs	r2, #0
 800a658:	f8cd 9004 	str.w	r9, [sp, #4]
 800a65c:	2312      	movs	r3, #18
 800a65e:	9209      	str	r2, [sp, #36]	; 0x24
 800a660:	e7ce      	b.n	800a600 <_dtoa_r+0x238>
 800a662:	2301      	movs	r3, #1
 800a664:	9308      	str	r3, [sp, #32]
 800a666:	e7f4      	b.n	800a652 <_dtoa_r+0x28a>
 800a668:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a66c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a670:	464b      	mov	r3, r9
 800a672:	e7c5      	b.n	800a600 <_dtoa_r+0x238>
 800a674:	3101      	adds	r1, #1
 800a676:	6461      	str	r1, [r4, #68]	; 0x44
 800a678:	0052      	lsls	r2, r2, #1
 800a67a:	e7c4      	b.n	800a606 <_dtoa_r+0x23e>
 800a67c:	f3af 8000 	nop.w
 800a680:	636f4361 	.word	0x636f4361
 800a684:	3fd287a7 	.word	0x3fd287a7
 800a688:	8b60c8b3 	.word	0x8b60c8b3
 800a68c:	3fc68a28 	.word	0x3fc68a28
 800a690:	509f79fb 	.word	0x509f79fb
 800a694:	3fd34413 	.word	0x3fd34413
 800a698:	7ff00000 	.word	0x7ff00000
 800a69c:	0800d1e4 	.word	0x0800d1e4
 800a6a0:	0800d1e8 	.word	0x0800d1e8
 800a6a4:	0800d1c3 	.word	0x0800d1c3
 800a6a8:	3ff80000 	.word	0x3ff80000
 800a6ac:	0800d2f0 	.word	0x0800d2f0
 800a6b0:	0800d1f1 	.word	0x0800d1f1
 800a6b4:	0800d202 	.word	0x0800d202
 800a6b8:	9b00      	ldr	r3, [sp, #0]
 800a6ba:	6423      	str	r3, [r4, #64]	; 0x40
 800a6bc:	9b01      	ldr	r3, [sp, #4]
 800a6be:	2b0e      	cmp	r3, #14
 800a6c0:	f200 80ad 	bhi.w	800a81e <_dtoa_r+0x456>
 800a6c4:	2d00      	cmp	r5, #0
 800a6c6:	f000 80aa 	beq.w	800a81e <_dtoa_r+0x456>
 800a6ca:	f1ba 0f00 	cmp.w	sl, #0
 800a6ce:	dd36      	ble.n	800a73e <_dtoa_r+0x376>
 800a6d0:	4ac2      	ldr	r2, [pc, #776]	; (800a9dc <_dtoa_r+0x614>)
 800a6d2:	f00a 030f 	and.w	r3, sl, #15
 800a6d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a6da:	ed93 7b00 	vldr	d7, [r3]
 800a6de:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a6e2:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a6e6:	eeb0 8a47 	vmov.f32	s16, s14
 800a6ea:	eef0 8a67 	vmov.f32	s17, s15
 800a6ee:	d016      	beq.n	800a71e <_dtoa_r+0x356>
 800a6f0:	4bbb      	ldr	r3, [pc, #748]	; (800a9e0 <_dtoa_r+0x618>)
 800a6f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a6f6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6fa:	f7f6 f8af 	bl	800085c <__aeabi_ddiv>
 800a6fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a702:	f007 070f 	and.w	r7, r7, #15
 800a706:	2503      	movs	r5, #3
 800a708:	4eb5      	ldr	r6, [pc, #724]	; (800a9e0 <_dtoa_r+0x618>)
 800a70a:	b957      	cbnz	r7, 800a722 <_dtoa_r+0x35a>
 800a70c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a710:	ec53 2b18 	vmov	r2, r3, d8
 800a714:	f7f6 f8a2 	bl	800085c <__aeabi_ddiv>
 800a718:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a71c:	e029      	b.n	800a772 <_dtoa_r+0x3aa>
 800a71e:	2502      	movs	r5, #2
 800a720:	e7f2      	b.n	800a708 <_dtoa_r+0x340>
 800a722:	07f9      	lsls	r1, r7, #31
 800a724:	d508      	bpl.n	800a738 <_dtoa_r+0x370>
 800a726:	ec51 0b18 	vmov	r0, r1, d8
 800a72a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a72e:	f7f5 ff6b 	bl	8000608 <__aeabi_dmul>
 800a732:	ec41 0b18 	vmov	d8, r0, r1
 800a736:	3501      	adds	r5, #1
 800a738:	107f      	asrs	r7, r7, #1
 800a73a:	3608      	adds	r6, #8
 800a73c:	e7e5      	b.n	800a70a <_dtoa_r+0x342>
 800a73e:	f000 80a6 	beq.w	800a88e <_dtoa_r+0x4c6>
 800a742:	f1ca 0600 	rsb	r6, sl, #0
 800a746:	4ba5      	ldr	r3, [pc, #660]	; (800a9dc <_dtoa_r+0x614>)
 800a748:	4fa5      	ldr	r7, [pc, #660]	; (800a9e0 <_dtoa_r+0x618>)
 800a74a:	f006 020f 	and.w	r2, r6, #15
 800a74e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a752:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a756:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a75a:	f7f5 ff55 	bl	8000608 <__aeabi_dmul>
 800a75e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a762:	1136      	asrs	r6, r6, #4
 800a764:	2300      	movs	r3, #0
 800a766:	2502      	movs	r5, #2
 800a768:	2e00      	cmp	r6, #0
 800a76a:	f040 8085 	bne.w	800a878 <_dtoa_r+0x4b0>
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d1d2      	bne.n	800a718 <_dtoa_r+0x350>
 800a772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a774:	2b00      	cmp	r3, #0
 800a776:	f000 808c 	beq.w	800a892 <_dtoa_r+0x4ca>
 800a77a:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a77e:	4b99      	ldr	r3, [pc, #612]	; (800a9e4 <_dtoa_r+0x61c>)
 800a780:	2200      	movs	r2, #0
 800a782:	4630      	mov	r0, r6
 800a784:	4639      	mov	r1, r7
 800a786:	f7f6 f9b1 	bl	8000aec <__aeabi_dcmplt>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f000 8081 	beq.w	800a892 <_dtoa_r+0x4ca>
 800a790:	9b01      	ldr	r3, [sp, #4]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d07d      	beq.n	800a892 <_dtoa_r+0x4ca>
 800a796:	f1b9 0f00 	cmp.w	r9, #0
 800a79a:	dd3c      	ble.n	800a816 <_dtoa_r+0x44e>
 800a79c:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a7a0:	9307      	str	r3, [sp, #28]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	4b90      	ldr	r3, [pc, #576]	; (800a9e8 <_dtoa_r+0x620>)
 800a7a6:	4630      	mov	r0, r6
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	f7f5 ff2d 	bl	8000608 <__aeabi_dmul>
 800a7ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7b2:	3501      	adds	r5, #1
 800a7b4:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a7b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a7bc:	4628      	mov	r0, r5
 800a7be:	f7f5 feb9 	bl	8000534 <__aeabi_i2d>
 800a7c2:	4632      	mov	r2, r6
 800a7c4:	463b      	mov	r3, r7
 800a7c6:	f7f5 ff1f 	bl	8000608 <__aeabi_dmul>
 800a7ca:	4b88      	ldr	r3, [pc, #544]	; (800a9ec <_dtoa_r+0x624>)
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f7f5 fd65 	bl	800029c <__adddf3>
 800a7d2:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a7d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7da:	9303      	str	r3, [sp, #12]
 800a7dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d15c      	bne.n	800a89c <_dtoa_r+0x4d4>
 800a7e2:	4b83      	ldr	r3, [pc, #524]	; (800a9f0 <_dtoa_r+0x628>)
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	4639      	mov	r1, r7
 800a7ea:	f7f5 fd55 	bl	8000298 <__aeabi_dsub>
 800a7ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	460f      	mov	r7, r1
 800a7f6:	f7f6 f997 	bl	8000b28 <__aeabi_dcmpgt>
 800a7fa:	2800      	cmp	r0, #0
 800a7fc:	f040 8295 	bne.w	800ad2a <_dtoa_r+0x962>
 800a800:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a804:	4630      	mov	r0, r6
 800a806:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a80a:	4639      	mov	r1, r7
 800a80c:	f7f6 f96e 	bl	8000aec <__aeabi_dcmplt>
 800a810:	2800      	cmp	r0, #0
 800a812:	f040 8287 	bne.w	800ad24 <_dtoa_r+0x95c>
 800a816:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a81a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a81e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a820:	2b00      	cmp	r3, #0
 800a822:	f2c0 8157 	blt.w	800aad4 <_dtoa_r+0x70c>
 800a826:	f1ba 0f0e 	cmp.w	sl, #14
 800a82a:	f300 8153 	bgt.w	800aad4 <_dtoa_r+0x70c>
 800a82e:	4b6b      	ldr	r3, [pc, #428]	; (800a9dc <_dtoa_r+0x614>)
 800a830:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a834:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	f280 80e2 	bge.w	800aa04 <_dtoa_r+0x63c>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	f300 80de 	bgt.w	800aa04 <_dtoa_r+0x63c>
 800a848:	f040 826c 	bne.w	800ad24 <_dtoa_r+0x95c>
 800a84c:	4b68      	ldr	r3, [pc, #416]	; (800a9f0 <_dtoa_r+0x628>)
 800a84e:	2200      	movs	r2, #0
 800a850:	4640      	mov	r0, r8
 800a852:	4649      	mov	r1, r9
 800a854:	f7f5 fed8 	bl	8000608 <__aeabi_dmul>
 800a858:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a85c:	f7f6 f95a 	bl	8000b14 <__aeabi_dcmpge>
 800a860:	9e01      	ldr	r6, [sp, #4]
 800a862:	4637      	mov	r7, r6
 800a864:	2800      	cmp	r0, #0
 800a866:	f040 8242 	bne.w	800acee <_dtoa_r+0x926>
 800a86a:	9d00      	ldr	r5, [sp, #0]
 800a86c:	2331      	movs	r3, #49	; 0x31
 800a86e:	f805 3b01 	strb.w	r3, [r5], #1
 800a872:	f10a 0a01 	add.w	sl, sl, #1
 800a876:	e23e      	b.n	800acf6 <_dtoa_r+0x92e>
 800a878:	07f2      	lsls	r2, r6, #31
 800a87a:	d505      	bpl.n	800a888 <_dtoa_r+0x4c0>
 800a87c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a880:	f7f5 fec2 	bl	8000608 <__aeabi_dmul>
 800a884:	3501      	adds	r5, #1
 800a886:	2301      	movs	r3, #1
 800a888:	1076      	asrs	r6, r6, #1
 800a88a:	3708      	adds	r7, #8
 800a88c:	e76c      	b.n	800a768 <_dtoa_r+0x3a0>
 800a88e:	2502      	movs	r5, #2
 800a890:	e76f      	b.n	800a772 <_dtoa_r+0x3aa>
 800a892:	9b01      	ldr	r3, [sp, #4]
 800a894:	f8cd a01c 	str.w	sl, [sp, #28]
 800a898:	930c      	str	r3, [sp, #48]	; 0x30
 800a89a:	e78d      	b.n	800a7b8 <_dtoa_r+0x3f0>
 800a89c:	9900      	ldr	r1, [sp, #0]
 800a89e:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8a2:	4b4e      	ldr	r3, [pc, #312]	; (800a9dc <_dtoa_r+0x614>)
 800a8a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a8a8:	4401      	add	r1, r0
 800a8aa:	9102      	str	r1, [sp, #8]
 800a8ac:	9908      	ldr	r1, [sp, #32]
 800a8ae:	eeb0 8a47 	vmov.f32	s16, s14
 800a8b2:	eef0 8a67 	vmov.f32	s17, s15
 800a8b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a8be:	2900      	cmp	r1, #0
 800a8c0:	d045      	beq.n	800a94e <_dtoa_r+0x586>
 800a8c2:	494c      	ldr	r1, [pc, #304]	; (800a9f4 <_dtoa_r+0x62c>)
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f7f5 ffc9 	bl	800085c <__aeabi_ddiv>
 800a8ca:	ec53 2b18 	vmov	r2, r3, d8
 800a8ce:	f7f5 fce3 	bl	8000298 <__aeabi_dsub>
 800a8d2:	9d00      	ldr	r5, [sp, #0]
 800a8d4:	ec41 0b18 	vmov	d8, r0, r1
 800a8d8:	4639      	mov	r1, r7
 800a8da:	4630      	mov	r0, r6
 800a8dc:	f7f6 f944 	bl	8000b68 <__aeabi_d2iz>
 800a8e0:	900c      	str	r0, [sp, #48]	; 0x30
 800a8e2:	f7f5 fe27 	bl	8000534 <__aeabi_i2d>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fcd3 	bl	8000298 <__aeabi_dsub>
 800a8f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8f4:	3330      	adds	r3, #48	; 0x30
 800a8f6:	f805 3b01 	strb.w	r3, [r5], #1
 800a8fa:	ec53 2b18 	vmov	r2, r3, d8
 800a8fe:	4606      	mov	r6, r0
 800a900:	460f      	mov	r7, r1
 800a902:	f7f6 f8f3 	bl	8000aec <__aeabi_dcmplt>
 800a906:	2800      	cmp	r0, #0
 800a908:	d165      	bne.n	800a9d6 <_dtoa_r+0x60e>
 800a90a:	4632      	mov	r2, r6
 800a90c:	463b      	mov	r3, r7
 800a90e:	4935      	ldr	r1, [pc, #212]	; (800a9e4 <_dtoa_r+0x61c>)
 800a910:	2000      	movs	r0, #0
 800a912:	f7f5 fcc1 	bl	8000298 <__aeabi_dsub>
 800a916:	ec53 2b18 	vmov	r2, r3, d8
 800a91a:	f7f6 f8e7 	bl	8000aec <__aeabi_dcmplt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f040 80b8 	bne.w	800aa94 <_dtoa_r+0x6cc>
 800a924:	9b02      	ldr	r3, [sp, #8]
 800a926:	429d      	cmp	r5, r3
 800a928:	f43f af75 	beq.w	800a816 <_dtoa_r+0x44e>
 800a92c:	4b2e      	ldr	r3, [pc, #184]	; (800a9e8 <_dtoa_r+0x620>)
 800a92e:	ec51 0b18 	vmov	r0, r1, d8
 800a932:	2200      	movs	r2, #0
 800a934:	f7f5 fe68 	bl	8000608 <__aeabi_dmul>
 800a938:	4b2b      	ldr	r3, [pc, #172]	; (800a9e8 <_dtoa_r+0x620>)
 800a93a:	ec41 0b18 	vmov	d8, r0, r1
 800a93e:	2200      	movs	r2, #0
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f5 fe60 	bl	8000608 <__aeabi_dmul>
 800a948:	4606      	mov	r6, r0
 800a94a:	460f      	mov	r7, r1
 800a94c:	e7c4      	b.n	800a8d8 <_dtoa_r+0x510>
 800a94e:	ec51 0b17 	vmov	r0, r1, d7
 800a952:	f7f5 fe59 	bl	8000608 <__aeabi_dmul>
 800a956:	9b02      	ldr	r3, [sp, #8]
 800a958:	9d00      	ldr	r5, [sp, #0]
 800a95a:	930c      	str	r3, [sp, #48]	; 0x30
 800a95c:	ec41 0b18 	vmov	d8, r0, r1
 800a960:	4639      	mov	r1, r7
 800a962:	4630      	mov	r0, r6
 800a964:	f7f6 f900 	bl	8000b68 <__aeabi_d2iz>
 800a968:	9011      	str	r0, [sp, #68]	; 0x44
 800a96a:	f7f5 fde3 	bl	8000534 <__aeabi_i2d>
 800a96e:	4602      	mov	r2, r0
 800a970:	460b      	mov	r3, r1
 800a972:	4630      	mov	r0, r6
 800a974:	4639      	mov	r1, r7
 800a976:	f7f5 fc8f 	bl	8000298 <__aeabi_dsub>
 800a97a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a97c:	3330      	adds	r3, #48	; 0x30
 800a97e:	f805 3b01 	strb.w	r3, [r5], #1
 800a982:	9b02      	ldr	r3, [sp, #8]
 800a984:	429d      	cmp	r5, r3
 800a986:	4606      	mov	r6, r0
 800a988:	460f      	mov	r7, r1
 800a98a:	f04f 0200 	mov.w	r2, #0
 800a98e:	d133      	bne.n	800a9f8 <_dtoa_r+0x630>
 800a990:	4b18      	ldr	r3, [pc, #96]	; (800a9f4 <_dtoa_r+0x62c>)
 800a992:	ec51 0b18 	vmov	r0, r1, d8
 800a996:	f7f5 fc81 	bl	800029c <__adddf3>
 800a99a:	4602      	mov	r2, r0
 800a99c:	460b      	mov	r3, r1
 800a99e:	4630      	mov	r0, r6
 800a9a0:	4639      	mov	r1, r7
 800a9a2:	f7f6 f8c1 	bl	8000b28 <__aeabi_dcmpgt>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d174      	bne.n	800aa94 <_dtoa_r+0x6cc>
 800a9aa:	ec53 2b18 	vmov	r2, r3, d8
 800a9ae:	4911      	ldr	r1, [pc, #68]	; (800a9f4 <_dtoa_r+0x62c>)
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	f7f5 fc71 	bl	8000298 <__aeabi_dsub>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	460b      	mov	r3, r1
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	4639      	mov	r1, r7
 800a9be:	f7f6 f895 	bl	8000aec <__aeabi_dcmplt>
 800a9c2:	2800      	cmp	r0, #0
 800a9c4:	f43f af27 	beq.w	800a816 <_dtoa_r+0x44e>
 800a9c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9ca:	1e6b      	subs	r3, r5, #1
 800a9cc:	930c      	str	r3, [sp, #48]	; 0x30
 800a9ce:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9d2:	2b30      	cmp	r3, #48	; 0x30
 800a9d4:	d0f8      	beq.n	800a9c8 <_dtoa_r+0x600>
 800a9d6:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a9da:	e049      	b.n	800aa70 <_dtoa_r+0x6a8>
 800a9dc:	0800d2f0 	.word	0x0800d2f0
 800a9e0:	0800d2c8 	.word	0x0800d2c8
 800a9e4:	3ff00000 	.word	0x3ff00000
 800a9e8:	40240000 	.word	0x40240000
 800a9ec:	401c0000 	.word	0x401c0000
 800a9f0:	40140000 	.word	0x40140000
 800a9f4:	3fe00000 	.word	0x3fe00000
 800a9f8:	4baf      	ldr	r3, [pc, #700]	; (800acb8 <_dtoa_r+0x8f0>)
 800a9fa:	f7f5 fe05 	bl	8000608 <__aeabi_dmul>
 800a9fe:	4606      	mov	r6, r0
 800aa00:	460f      	mov	r7, r1
 800aa02:	e7ad      	b.n	800a960 <_dtoa_r+0x598>
 800aa04:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800aa08:	9d00      	ldr	r5, [sp, #0]
 800aa0a:	4642      	mov	r2, r8
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	4630      	mov	r0, r6
 800aa10:	4639      	mov	r1, r7
 800aa12:	f7f5 ff23 	bl	800085c <__aeabi_ddiv>
 800aa16:	f7f6 f8a7 	bl	8000b68 <__aeabi_d2iz>
 800aa1a:	9002      	str	r0, [sp, #8]
 800aa1c:	f7f5 fd8a 	bl	8000534 <__aeabi_i2d>
 800aa20:	4642      	mov	r2, r8
 800aa22:	464b      	mov	r3, r9
 800aa24:	f7f5 fdf0 	bl	8000608 <__aeabi_dmul>
 800aa28:	4602      	mov	r2, r0
 800aa2a:	460b      	mov	r3, r1
 800aa2c:	4630      	mov	r0, r6
 800aa2e:	4639      	mov	r1, r7
 800aa30:	f7f5 fc32 	bl	8000298 <__aeabi_dsub>
 800aa34:	9e02      	ldr	r6, [sp, #8]
 800aa36:	9f01      	ldr	r7, [sp, #4]
 800aa38:	3630      	adds	r6, #48	; 0x30
 800aa3a:	f805 6b01 	strb.w	r6, [r5], #1
 800aa3e:	9e00      	ldr	r6, [sp, #0]
 800aa40:	1bae      	subs	r6, r5, r6
 800aa42:	42b7      	cmp	r7, r6
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	d137      	bne.n	800aaba <_dtoa_r+0x6f2>
 800aa4a:	f7f5 fc27 	bl	800029c <__adddf3>
 800aa4e:	4642      	mov	r2, r8
 800aa50:	464b      	mov	r3, r9
 800aa52:	4606      	mov	r6, r0
 800aa54:	460f      	mov	r7, r1
 800aa56:	f7f6 f867 	bl	8000b28 <__aeabi_dcmpgt>
 800aa5a:	b9c8      	cbnz	r0, 800aa90 <_dtoa_r+0x6c8>
 800aa5c:	4642      	mov	r2, r8
 800aa5e:	464b      	mov	r3, r9
 800aa60:	4630      	mov	r0, r6
 800aa62:	4639      	mov	r1, r7
 800aa64:	f7f6 f838 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa68:	b110      	cbz	r0, 800aa70 <_dtoa_r+0x6a8>
 800aa6a:	9b02      	ldr	r3, [sp, #8]
 800aa6c:	07d9      	lsls	r1, r3, #31
 800aa6e:	d40f      	bmi.n	800aa90 <_dtoa_r+0x6c8>
 800aa70:	4620      	mov	r0, r4
 800aa72:	4659      	mov	r1, fp
 800aa74:	f000 faa5 	bl	800afc2 <_Bfree>
 800aa78:	2300      	movs	r3, #0
 800aa7a:	702b      	strb	r3, [r5, #0]
 800aa7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aa7e:	f10a 0001 	add.w	r0, sl, #1
 800aa82:	6018      	str	r0, [r3, #0]
 800aa84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f43f acd9 	beq.w	800a43e <_dtoa_r+0x76>
 800aa8c:	601d      	str	r5, [r3, #0]
 800aa8e:	e4d6      	b.n	800a43e <_dtoa_r+0x76>
 800aa90:	f8cd a01c 	str.w	sl, [sp, #28]
 800aa94:	462b      	mov	r3, r5
 800aa96:	461d      	mov	r5, r3
 800aa98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa9c:	2a39      	cmp	r2, #57	; 0x39
 800aa9e:	d108      	bne.n	800aab2 <_dtoa_r+0x6ea>
 800aaa0:	9a00      	ldr	r2, [sp, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d1f7      	bne.n	800aa96 <_dtoa_r+0x6ce>
 800aaa6:	9a07      	ldr	r2, [sp, #28]
 800aaa8:	9900      	ldr	r1, [sp, #0]
 800aaaa:	3201      	adds	r2, #1
 800aaac:	9207      	str	r2, [sp, #28]
 800aaae:	2230      	movs	r2, #48	; 0x30
 800aab0:	700a      	strb	r2, [r1, #0]
 800aab2:	781a      	ldrb	r2, [r3, #0]
 800aab4:	3201      	adds	r2, #1
 800aab6:	701a      	strb	r2, [r3, #0]
 800aab8:	e78d      	b.n	800a9d6 <_dtoa_r+0x60e>
 800aaba:	4b7f      	ldr	r3, [pc, #508]	; (800acb8 <_dtoa_r+0x8f0>)
 800aabc:	2200      	movs	r2, #0
 800aabe:	f7f5 fda3 	bl	8000608 <__aeabi_dmul>
 800aac2:	2200      	movs	r2, #0
 800aac4:	2300      	movs	r3, #0
 800aac6:	4606      	mov	r6, r0
 800aac8:	460f      	mov	r7, r1
 800aaca:	f7f6 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 800aace:	2800      	cmp	r0, #0
 800aad0:	d09b      	beq.n	800aa0a <_dtoa_r+0x642>
 800aad2:	e7cd      	b.n	800aa70 <_dtoa_r+0x6a8>
 800aad4:	9a08      	ldr	r2, [sp, #32]
 800aad6:	2a00      	cmp	r2, #0
 800aad8:	f000 80c4 	beq.w	800ac64 <_dtoa_r+0x89c>
 800aadc:	9a05      	ldr	r2, [sp, #20]
 800aade:	2a01      	cmp	r2, #1
 800aae0:	f300 80a8 	bgt.w	800ac34 <_dtoa_r+0x86c>
 800aae4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	f000 80a0 	beq.w	800ac2c <_dtoa_r+0x864>
 800aaec:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aaf0:	9e06      	ldr	r6, [sp, #24]
 800aaf2:	4645      	mov	r5, r8
 800aaf4:	9a04      	ldr	r2, [sp, #16]
 800aaf6:	2101      	movs	r1, #1
 800aaf8:	441a      	add	r2, r3
 800aafa:	4620      	mov	r0, r4
 800aafc:	4498      	add	r8, r3
 800aafe:	9204      	str	r2, [sp, #16]
 800ab00:	f000 fb02 	bl	800b108 <__i2b>
 800ab04:	4607      	mov	r7, r0
 800ab06:	2d00      	cmp	r5, #0
 800ab08:	dd0b      	ble.n	800ab22 <_dtoa_r+0x75a>
 800ab0a:	9b04      	ldr	r3, [sp, #16]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	dd08      	ble.n	800ab22 <_dtoa_r+0x75a>
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	9a04      	ldr	r2, [sp, #16]
 800ab14:	bfa8      	it	ge
 800ab16:	462b      	movge	r3, r5
 800ab18:	eba8 0803 	sub.w	r8, r8, r3
 800ab1c:	1aed      	subs	r5, r5, r3
 800ab1e:	1ad3      	subs	r3, r2, r3
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	9b06      	ldr	r3, [sp, #24]
 800ab24:	b1fb      	cbz	r3, 800ab66 <_dtoa_r+0x79e>
 800ab26:	9b08      	ldr	r3, [sp, #32]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 809f 	beq.w	800ac6c <_dtoa_r+0x8a4>
 800ab2e:	2e00      	cmp	r6, #0
 800ab30:	dd11      	ble.n	800ab56 <_dtoa_r+0x78e>
 800ab32:	4639      	mov	r1, r7
 800ab34:	4632      	mov	r2, r6
 800ab36:	4620      	mov	r0, r4
 800ab38:	f000 fba2 	bl	800b280 <__pow5mult>
 800ab3c:	465a      	mov	r2, fp
 800ab3e:	4601      	mov	r1, r0
 800ab40:	4607      	mov	r7, r0
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 faf6 	bl	800b134 <__multiply>
 800ab48:	4659      	mov	r1, fp
 800ab4a:	9007      	str	r0, [sp, #28]
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fa38 	bl	800afc2 <_Bfree>
 800ab52:	9b07      	ldr	r3, [sp, #28]
 800ab54:	469b      	mov	fp, r3
 800ab56:	9b06      	ldr	r3, [sp, #24]
 800ab58:	1b9a      	subs	r2, r3, r6
 800ab5a:	d004      	beq.n	800ab66 <_dtoa_r+0x79e>
 800ab5c:	4659      	mov	r1, fp
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 fb8e 	bl	800b280 <__pow5mult>
 800ab64:	4683      	mov	fp, r0
 800ab66:	2101      	movs	r1, #1
 800ab68:	4620      	mov	r0, r4
 800ab6a:	f000 facd 	bl	800b108 <__i2b>
 800ab6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	4606      	mov	r6, r0
 800ab74:	dd7c      	ble.n	800ac70 <_dtoa_r+0x8a8>
 800ab76:	461a      	mov	r2, r3
 800ab78:	4601      	mov	r1, r0
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f000 fb80 	bl	800b280 <__pow5mult>
 800ab80:	9b05      	ldr	r3, [sp, #20]
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	4606      	mov	r6, r0
 800ab86:	dd76      	ble.n	800ac76 <_dtoa_r+0x8ae>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	9306      	str	r3, [sp, #24]
 800ab8c:	6933      	ldr	r3, [r6, #16]
 800ab8e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab92:	6918      	ldr	r0, [r3, #16]
 800ab94:	f000 fa68 	bl	800b068 <__hi0bits>
 800ab98:	f1c0 0020 	rsb	r0, r0, #32
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	4418      	add	r0, r3
 800aba0:	f010 001f 	ands.w	r0, r0, #31
 800aba4:	f000 8086 	beq.w	800acb4 <_dtoa_r+0x8ec>
 800aba8:	f1c0 0320 	rsb	r3, r0, #32
 800abac:	2b04      	cmp	r3, #4
 800abae:	dd7f      	ble.n	800acb0 <_dtoa_r+0x8e8>
 800abb0:	f1c0 001c 	rsb	r0, r0, #28
 800abb4:	9b04      	ldr	r3, [sp, #16]
 800abb6:	4403      	add	r3, r0
 800abb8:	4480      	add	r8, r0
 800abba:	4405      	add	r5, r0
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	f1b8 0f00 	cmp.w	r8, #0
 800abc2:	dd05      	ble.n	800abd0 <_dtoa_r+0x808>
 800abc4:	4659      	mov	r1, fp
 800abc6:	4642      	mov	r2, r8
 800abc8:	4620      	mov	r0, r4
 800abca:	f000 fb99 	bl	800b300 <__lshift>
 800abce:	4683      	mov	fp, r0
 800abd0:	9b04      	ldr	r3, [sp, #16]
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	dd05      	ble.n	800abe2 <_dtoa_r+0x81a>
 800abd6:	4631      	mov	r1, r6
 800abd8:	461a      	mov	r2, r3
 800abda:	4620      	mov	r0, r4
 800abdc:	f000 fb90 	bl	800b300 <__lshift>
 800abe0:	4606      	mov	r6, r0
 800abe2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d069      	beq.n	800acbc <_dtoa_r+0x8f4>
 800abe8:	4631      	mov	r1, r6
 800abea:	4658      	mov	r0, fp
 800abec:	f000 fbf4 	bl	800b3d8 <__mcmp>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	da63      	bge.n	800acbc <_dtoa_r+0x8f4>
 800abf4:	2300      	movs	r3, #0
 800abf6:	4659      	mov	r1, fp
 800abf8:	220a      	movs	r2, #10
 800abfa:	4620      	mov	r0, r4
 800abfc:	f000 f9ea 	bl	800afd4 <__multadd>
 800ac00:	9b08      	ldr	r3, [sp, #32]
 800ac02:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac06:	4683      	mov	fp, r0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	f000 818e 	beq.w	800af2a <_dtoa_r+0xb62>
 800ac0e:	4639      	mov	r1, r7
 800ac10:	2300      	movs	r3, #0
 800ac12:	220a      	movs	r2, #10
 800ac14:	4620      	mov	r0, r4
 800ac16:	f000 f9dd 	bl	800afd4 <__multadd>
 800ac1a:	f1b9 0f00 	cmp.w	r9, #0
 800ac1e:	4607      	mov	r7, r0
 800ac20:	f300 808e 	bgt.w	800ad40 <_dtoa_r+0x978>
 800ac24:	9b05      	ldr	r3, [sp, #20]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	dc50      	bgt.n	800accc <_dtoa_r+0x904>
 800ac2a:	e089      	b.n	800ad40 <_dtoa_r+0x978>
 800ac2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ac2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ac32:	e75d      	b.n	800aaf0 <_dtoa_r+0x728>
 800ac34:	9b01      	ldr	r3, [sp, #4]
 800ac36:	1e5e      	subs	r6, r3, #1
 800ac38:	9b06      	ldr	r3, [sp, #24]
 800ac3a:	42b3      	cmp	r3, r6
 800ac3c:	bfbf      	itttt	lt
 800ac3e:	9b06      	ldrlt	r3, [sp, #24]
 800ac40:	9606      	strlt	r6, [sp, #24]
 800ac42:	1af2      	sublt	r2, r6, r3
 800ac44:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800ac46:	bfb6      	itet	lt
 800ac48:	189b      	addlt	r3, r3, r2
 800ac4a:	1b9e      	subge	r6, r3, r6
 800ac4c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800ac4e:	9b01      	ldr	r3, [sp, #4]
 800ac50:	bfb8      	it	lt
 800ac52:	2600      	movlt	r6, #0
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	bfb5      	itete	lt
 800ac58:	eba8 0503 	sublt.w	r5, r8, r3
 800ac5c:	9b01      	ldrge	r3, [sp, #4]
 800ac5e:	2300      	movlt	r3, #0
 800ac60:	4645      	movge	r5, r8
 800ac62:	e747      	b.n	800aaf4 <_dtoa_r+0x72c>
 800ac64:	9e06      	ldr	r6, [sp, #24]
 800ac66:	9f08      	ldr	r7, [sp, #32]
 800ac68:	4645      	mov	r5, r8
 800ac6a:	e74c      	b.n	800ab06 <_dtoa_r+0x73e>
 800ac6c:	9a06      	ldr	r2, [sp, #24]
 800ac6e:	e775      	b.n	800ab5c <_dtoa_r+0x794>
 800ac70:	9b05      	ldr	r3, [sp, #20]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	dc18      	bgt.n	800aca8 <_dtoa_r+0x8e0>
 800ac76:	9b02      	ldr	r3, [sp, #8]
 800ac78:	b9b3      	cbnz	r3, 800aca8 <_dtoa_r+0x8e0>
 800ac7a:	9b03      	ldr	r3, [sp, #12]
 800ac7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac80:	b9a3      	cbnz	r3, 800acac <_dtoa_r+0x8e4>
 800ac82:	9b03      	ldr	r3, [sp, #12]
 800ac84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac88:	0d1b      	lsrs	r3, r3, #20
 800ac8a:	051b      	lsls	r3, r3, #20
 800ac8c:	b12b      	cbz	r3, 800ac9a <_dtoa_r+0x8d2>
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	3301      	adds	r3, #1
 800ac92:	9304      	str	r3, [sp, #16]
 800ac94:	f108 0801 	add.w	r8, r8, #1
 800ac98:	2301      	movs	r3, #1
 800ac9a:	9306      	str	r3, [sp, #24]
 800ac9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	f47f af74 	bne.w	800ab8c <_dtoa_r+0x7c4>
 800aca4:	2001      	movs	r0, #1
 800aca6:	e779      	b.n	800ab9c <_dtoa_r+0x7d4>
 800aca8:	2300      	movs	r3, #0
 800acaa:	e7f6      	b.n	800ac9a <_dtoa_r+0x8d2>
 800acac:	9b02      	ldr	r3, [sp, #8]
 800acae:	e7f4      	b.n	800ac9a <_dtoa_r+0x8d2>
 800acb0:	d085      	beq.n	800abbe <_dtoa_r+0x7f6>
 800acb2:	4618      	mov	r0, r3
 800acb4:	301c      	adds	r0, #28
 800acb6:	e77d      	b.n	800abb4 <_dtoa_r+0x7ec>
 800acb8:	40240000 	.word	0x40240000
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dc38      	bgt.n	800ad34 <_dtoa_r+0x96c>
 800acc2:	9b05      	ldr	r3, [sp, #20]
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	dd35      	ble.n	800ad34 <_dtoa_r+0x96c>
 800acc8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800accc:	f1b9 0f00 	cmp.w	r9, #0
 800acd0:	d10d      	bne.n	800acee <_dtoa_r+0x926>
 800acd2:	4631      	mov	r1, r6
 800acd4:	464b      	mov	r3, r9
 800acd6:	2205      	movs	r2, #5
 800acd8:	4620      	mov	r0, r4
 800acda:	f000 f97b 	bl	800afd4 <__multadd>
 800acde:	4601      	mov	r1, r0
 800ace0:	4606      	mov	r6, r0
 800ace2:	4658      	mov	r0, fp
 800ace4:	f000 fb78 	bl	800b3d8 <__mcmp>
 800ace8:	2800      	cmp	r0, #0
 800acea:	f73f adbe 	bgt.w	800a86a <_dtoa_r+0x4a2>
 800acee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf0:	9d00      	ldr	r5, [sp, #0]
 800acf2:	ea6f 0a03 	mvn.w	sl, r3
 800acf6:	f04f 0800 	mov.w	r8, #0
 800acfa:	4631      	mov	r1, r6
 800acfc:	4620      	mov	r0, r4
 800acfe:	f000 f960 	bl	800afc2 <_Bfree>
 800ad02:	2f00      	cmp	r7, #0
 800ad04:	f43f aeb4 	beq.w	800aa70 <_dtoa_r+0x6a8>
 800ad08:	f1b8 0f00 	cmp.w	r8, #0
 800ad0c:	d005      	beq.n	800ad1a <_dtoa_r+0x952>
 800ad0e:	45b8      	cmp	r8, r7
 800ad10:	d003      	beq.n	800ad1a <_dtoa_r+0x952>
 800ad12:	4641      	mov	r1, r8
 800ad14:	4620      	mov	r0, r4
 800ad16:	f000 f954 	bl	800afc2 <_Bfree>
 800ad1a:	4639      	mov	r1, r7
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	f000 f950 	bl	800afc2 <_Bfree>
 800ad22:	e6a5      	b.n	800aa70 <_dtoa_r+0x6a8>
 800ad24:	2600      	movs	r6, #0
 800ad26:	4637      	mov	r7, r6
 800ad28:	e7e1      	b.n	800acee <_dtoa_r+0x926>
 800ad2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ad2c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ad30:	4637      	mov	r7, r6
 800ad32:	e59a      	b.n	800a86a <_dtoa_r+0x4a2>
 800ad34:	9b08      	ldr	r3, [sp, #32]
 800ad36:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	f000 80fc 	beq.w	800af38 <_dtoa_r+0xb70>
 800ad40:	2d00      	cmp	r5, #0
 800ad42:	dd05      	ble.n	800ad50 <_dtoa_r+0x988>
 800ad44:	4639      	mov	r1, r7
 800ad46:	462a      	mov	r2, r5
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f000 fad9 	bl	800b300 <__lshift>
 800ad4e:	4607      	mov	r7, r0
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d05b      	beq.n	800ae0e <_dtoa_r+0xa46>
 800ad56:	6879      	ldr	r1, [r7, #4]
 800ad58:	4620      	mov	r0, r4
 800ad5a:	f000 f90d 	bl	800af78 <_Balloc>
 800ad5e:	4605      	mov	r5, r0
 800ad60:	b920      	cbnz	r0, 800ad6c <_dtoa_r+0x9a4>
 800ad62:	4b80      	ldr	r3, [pc, #512]	; (800af64 <_dtoa_r+0xb9c>)
 800ad64:	4602      	mov	r2, r0
 800ad66:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad6a:	e45b      	b.n	800a624 <_dtoa_r+0x25c>
 800ad6c:	693a      	ldr	r2, [r7, #16]
 800ad6e:	3202      	adds	r2, #2
 800ad70:	0092      	lsls	r2, r2, #2
 800ad72:	f107 010c 	add.w	r1, r7, #12
 800ad76:	300c      	adds	r0, #12
 800ad78:	f7fd fedc 	bl	8008b34 <memcpy>
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4620      	mov	r0, r4
 800ad82:	f000 fabd 	bl	800b300 <__lshift>
 800ad86:	9b00      	ldr	r3, [sp, #0]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	9301      	str	r3, [sp, #4]
 800ad8c:	9b00      	ldr	r3, [sp, #0]
 800ad8e:	444b      	add	r3, r9
 800ad90:	9307      	str	r3, [sp, #28]
 800ad92:	9b02      	ldr	r3, [sp, #8]
 800ad94:	f003 0301 	and.w	r3, r3, #1
 800ad98:	46b8      	mov	r8, r7
 800ad9a:	9306      	str	r3, [sp, #24]
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	4631      	mov	r1, r6
 800ada2:	3b01      	subs	r3, #1
 800ada4:	4658      	mov	r0, fp
 800ada6:	9302      	str	r3, [sp, #8]
 800ada8:	f7ff fa82 	bl	800a2b0 <quorem>
 800adac:	4603      	mov	r3, r0
 800adae:	3330      	adds	r3, #48	; 0x30
 800adb0:	9004      	str	r0, [sp, #16]
 800adb2:	4641      	mov	r1, r8
 800adb4:	4658      	mov	r0, fp
 800adb6:	9308      	str	r3, [sp, #32]
 800adb8:	f000 fb0e 	bl	800b3d8 <__mcmp>
 800adbc:	463a      	mov	r2, r7
 800adbe:	4681      	mov	r9, r0
 800adc0:	4631      	mov	r1, r6
 800adc2:	4620      	mov	r0, r4
 800adc4:	f000 fb24 	bl	800b410 <__mdiff>
 800adc8:	68c2      	ldr	r2, [r0, #12]
 800adca:	9b08      	ldr	r3, [sp, #32]
 800adcc:	4605      	mov	r5, r0
 800adce:	bb02      	cbnz	r2, 800ae12 <_dtoa_r+0xa4a>
 800add0:	4601      	mov	r1, r0
 800add2:	4658      	mov	r0, fp
 800add4:	f000 fb00 	bl	800b3d8 <__mcmp>
 800add8:	9b08      	ldr	r3, [sp, #32]
 800adda:	4602      	mov	r2, r0
 800addc:	4629      	mov	r1, r5
 800adde:	4620      	mov	r0, r4
 800ade0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ade4:	f000 f8ed 	bl	800afc2 <_Bfree>
 800ade8:	9b05      	ldr	r3, [sp, #20]
 800adea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adec:	9d01      	ldr	r5, [sp, #4]
 800adee:	ea43 0102 	orr.w	r1, r3, r2
 800adf2:	9b06      	ldr	r3, [sp, #24]
 800adf4:	430b      	orrs	r3, r1
 800adf6:	9b08      	ldr	r3, [sp, #32]
 800adf8:	d10d      	bne.n	800ae16 <_dtoa_r+0xa4e>
 800adfa:	2b39      	cmp	r3, #57	; 0x39
 800adfc:	d029      	beq.n	800ae52 <_dtoa_r+0xa8a>
 800adfe:	f1b9 0f00 	cmp.w	r9, #0
 800ae02:	dd01      	ble.n	800ae08 <_dtoa_r+0xa40>
 800ae04:	9b04      	ldr	r3, [sp, #16]
 800ae06:	3331      	adds	r3, #49	; 0x31
 800ae08:	9a02      	ldr	r2, [sp, #8]
 800ae0a:	7013      	strb	r3, [r2, #0]
 800ae0c:	e775      	b.n	800acfa <_dtoa_r+0x932>
 800ae0e:	4638      	mov	r0, r7
 800ae10:	e7b9      	b.n	800ad86 <_dtoa_r+0x9be>
 800ae12:	2201      	movs	r2, #1
 800ae14:	e7e2      	b.n	800addc <_dtoa_r+0xa14>
 800ae16:	f1b9 0f00 	cmp.w	r9, #0
 800ae1a:	db06      	blt.n	800ae2a <_dtoa_r+0xa62>
 800ae1c:	9905      	ldr	r1, [sp, #20]
 800ae1e:	ea41 0909 	orr.w	r9, r1, r9
 800ae22:	9906      	ldr	r1, [sp, #24]
 800ae24:	ea59 0101 	orrs.w	r1, r9, r1
 800ae28:	d120      	bne.n	800ae6c <_dtoa_r+0xaa4>
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	ddec      	ble.n	800ae08 <_dtoa_r+0xa40>
 800ae2e:	4659      	mov	r1, fp
 800ae30:	2201      	movs	r2, #1
 800ae32:	4620      	mov	r0, r4
 800ae34:	9301      	str	r3, [sp, #4]
 800ae36:	f000 fa63 	bl	800b300 <__lshift>
 800ae3a:	4631      	mov	r1, r6
 800ae3c:	4683      	mov	fp, r0
 800ae3e:	f000 facb 	bl	800b3d8 <__mcmp>
 800ae42:	2800      	cmp	r0, #0
 800ae44:	9b01      	ldr	r3, [sp, #4]
 800ae46:	dc02      	bgt.n	800ae4e <_dtoa_r+0xa86>
 800ae48:	d1de      	bne.n	800ae08 <_dtoa_r+0xa40>
 800ae4a:	07da      	lsls	r2, r3, #31
 800ae4c:	d5dc      	bpl.n	800ae08 <_dtoa_r+0xa40>
 800ae4e:	2b39      	cmp	r3, #57	; 0x39
 800ae50:	d1d8      	bne.n	800ae04 <_dtoa_r+0xa3c>
 800ae52:	9a02      	ldr	r2, [sp, #8]
 800ae54:	2339      	movs	r3, #57	; 0x39
 800ae56:	7013      	strb	r3, [r2, #0]
 800ae58:	462b      	mov	r3, r5
 800ae5a:	461d      	mov	r5, r3
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae62:	2a39      	cmp	r2, #57	; 0x39
 800ae64:	d050      	beq.n	800af08 <_dtoa_r+0xb40>
 800ae66:	3201      	adds	r2, #1
 800ae68:	701a      	strb	r2, [r3, #0]
 800ae6a:	e746      	b.n	800acfa <_dtoa_r+0x932>
 800ae6c:	2a00      	cmp	r2, #0
 800ae6e:	dd03      	ble.n	800ae78 <_dtoa_r+0xab0>
 800ae70:	2b39      	cmp	r3, #57	; 0x39
 800ae72:	d0ee      	beq.n	800ae52 <_dtoa_r+0xa8a>
 800ae74:	3301      	adds	r3, #1
 800ae76:	e7c7      	b.n	800ae08 <_dtoa_r+0xa40>
 800ae78:	9a01      	ldr	r2, [sp, #4]
 800ae7a:	9907      	ldr	r1, [sp, #28]
 800ae7c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ae80:	428a      	cmp	r2, r1
 800ae82:	d02a      	beq.n	800aeda <_dtoa_r+0xb12>
 800ae84:	4659      	mov	r1, fp
 800ae86:	2300      	movs	r3, #0
 800ae88:	220a      	movs	r2, #10
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f000 f8a2 	bl	800afd4 <__multadd>
 800ae90:	45b8      	cmp	r8, r7
 800ae92:	4683      	mov	fp, r0
 800ae94:	f04f 0300 	mov.w	r3, #0
 800ae98:	f04f 020a 	mov.w	r2, #10
 800ae9c:	4641      	mov	r1, r8
 800ae9e:	4620      	mov	r0, r4
 800aea0:	d107      	bne.n	800aeb2 <_dtoa_r+0xaea>
 800aea2:	f000 f897 	bl	800afd4 <__multadd>
 800aea6:	4680      	mov	r8, r0
 800aea8:	4607      	mov	r7, r0
 800aeaa:	9b01      	ldr	r3, [sp, #4]
 800aeac:	3301      	adds	r3, #1
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	e775      	b.n	800ad9e <_dtoa_r+0x9d6>
 800aeb2:	f000 f88f 	bl	800afd4 <__multadd>
 800aeb6:	4639      	mov	r1, r7
 800aeb8:	4680      	mov	r8, r0
 800aeba:	2300      	movs	r3, #0
 800aebc:	220a      	movs	r2, #10
 800aebe:	4620      	mov	r0, r4
 800aec0:	f000 f888 	bl	800afd4 <__multadd>
 800aec4:	4607      	mov	r7, r0
 800aec6:	e7f0      	b.n	800aeaa <_dtoa_r+0xae2>
 800aec8:	f1b9 0f00 	cmp.w	r9, #0
 800aecc:	9a00      	ldr	r2, [sp, #0]
 800aece:	bfcc      	ite	gt
 800aed0:	464d      	movgt	r5, r9
 800aed2:	2501      	movle	r5, #1
 800aed4:	4415      	add	r5, r2
 800aed6:	f04f 0800 	mov.w	r8, #0
 800aeda:	4659      	mov	r1, fp
 800aedc:	2201      	movs	r2, #1
 800aede:	4620      	mov	r0, r4
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	f000 fa0d 	bl	800b300 <__lshift>
 800aee6:	4631      	mov	r1, r6
 800aee8:	4683      	mov	fp, r0
 800aeea:	f000 fa75 	bl	800b3d8 <__mcmp>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	dcb2      	bgt.n	800ae58 <_dtoa_r+0xa90>
 800aef2:	d102      	bne.n	800aefa <_dtoa_r+0xb32>
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	07db      	lsls	r3, r3, #31
 800aef8:	d4ae      	bmi.n	800ae58 <_dtoa_r+0xa90>
 800aefa:	462b      	mov	r3, r5
 800aefc:	461d      	mov	r5, r3
 800aefe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800af02:	2a30      	cmp	r2, #48	; 0x30
 800af04:	d0fa      	beq.n	800aefc <_dtoa_r+0xb34>
 800af06:	e6f8      	b.n	800acfa <_dtoa_r+0x932>
 800af08:	9a00      	ldr	r2, [sp, #0]
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d1a5      	bne.n	800ae5a <_dtoa_r+0xa92>
 800af0e:	f10a 0a01 	add.w	sl, sl, #1
 800af12:	2331      	movs	r3, #49	; 0x31
 800af14:	e779      	b.n	800ae0a <_dtoa_r+0xa42>
 800af16:	4b14      	ldr	r3, [pc, #80]	; (800af68 <_dtoa_r+0xba0>)
 800af18:	f7ff bab1 	b.w	800a47e <_dtoa_r+0xb6>
 800af1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af1e:	2b00      	cmp	r3, #0
 800af20:	f47f aa93 	bne.w	800a44a <_dtoa_r+0x82>
 800af24:	4b11      	ldr	r3, [pc, #68]	; (800af6c <_dtoa_r+0xba4>)
 800af26:	f7ff baaa 	b.w	800a47e <_dtoa_r+0xb6>
 800af2a:	f1b9 0f00 	cmp.w	r9, #0
 800af2e:	dc03      	bgt.n	800af38 <_dtoa_r+0xb70>
 800af30:	9b05      	ldr	r3, [sp, #20]
 800af32:	2b02      	cmp	r3, #2
 800af34:	f73f aeca 	bgt.w	800accc <_dtoa_r+0x904>
 800af38:	9d00      	ldr	r5, [sp, #0]
 800af3a:	4631      	mov	r1, r6
 800af3c:	4658      	mov	r0, fp
 800af3e:	f7ff f9b7 	bl	800a2b0 <quorem>
 800af42:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800af46:	f805 3b01 	strb.w	r3, [r5], #1
 800af4a:	9a00      	ldr	r2, [sp, #0]
 800af4c:	1aaa      	subs	r2, r5, r2
 800af4e:	4591      	cmp	r9, r2
 800af50:	ddba      	ble.n	800aec8 <_dtoa_r+0xb00>
 800af52:	4659      	mov	r1, fp
 800af54:	2300      	movs	r3, #0
 800af56:	220a      	movs	r2, #10
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 f83b 	bl	800afd4 <__multadd>
 800af5e:	4683      	mov	fp, r0
 800af60:	e7eb      	b.n	800af3a <_dtoa_r+0xb72>
 800af62:	bf00      	nop
 800af64:	0800d1f1 	.word	0x0800d1f1
 800af68:	0800d1c2 	.word	0x0800d1c2
 800af6c:	0800d1e8 	.word	0x0800d1e8

0800af70 <_localeconv_r>:
 800af70:	4800      	ldr	r0, [pc, #0]	; (800af74 <_localeconv_r+0x4>)
 800af72:	4770      	bx	lr
 800af74:	2000099c 	.word	0x2000099c

0800af78 <_Balloc>:
 800af78:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800af7a:	b570      	push	{r4, r5, r6, lr}
 800af7c:	4605      	mov	r5, r0
 800af7e:	460c      	mov	r4, r1
 800af80:	b17b      	cbz	r3, 800afa2 <_Balloc+0x2a>
 800af82:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800af84:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800af88:	b9a0      	cbnz	r0, 800afb4 <_Balloc+0x3c>
 800af8a:	2101      	movs	r1, #1
 800af8c:	fa01 f604 	lsl.w	r6, r1, r4
 800af90:	1d72      	adds	r2, r6, #5
 800af92:	0092      	lsls	r2, r2, #2
 800af94:	4628      	mov	r0, r5
 800af96:	f000 fc03 	bl	800b7a0 <_calloc_r>
 800af9a:	b148      	cbz	r0, 800afb0 <_Balloc+0x38>
 800af9c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800afa0:	e00b      	b.n	800afba <_Balloc+0x42>
 800afa2:	2221      	movs	r2, #33	; 0x21
 800afa4:	2104      	movs	r1, #4
 800afa6:	f000 fbfb 	bl	800b7a0 <_calloc_r>
 800afaa:	64e8      	str	r0, [r5, #76]	; 0x4c
 800afac:	2800      	cmp	r0, #0
 800afae:	d1e8      	bne.n	800af82 <_Balloc+0xa>
 800afb0:	2000      	movs	r0, #0
 800afb2:	bd70      	pop	{r4, r5, r6, pc}
 800afb4:	6802      	ldr	r2, [r0, #0]
 800afb6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800afba:	2300      	movs	r3, #0
 800afbc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afc0:	e7f7      	b.n	800afb2 <_Balloc+0x3a>

0800afc2 <_Bfree>:
 800afc2:	b131      	cbz	r1, 800afd2 <_Bfree+0x10>
 800afc4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800afc6:	684a      	ldr	r2, [r1, #4]
 800afc8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800afcc:	6008      	str	r0, [r1, #0]
 800afce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800afd2:	4770      	bx	lr

0800afd4 <__multadd>:
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	690e      	ldr	r6, [r1, #16]
 800afda:	4607      	mov	r7, r0
 800afdc:	4698      	mov	r8, r3
 800afde:	460c      	mov	r4, r1
 800afe0:	f101 0014 	add.w	r0, r1, #20
 800afe4:	2300      	movs	r3, #0
 800afe6:	6805      	ldr	r5, [r0, #0]
 800afe8:	b2a9      	uxth	r1, r5
 800afea:	fb02 8101 	mla	r1, r2, r1, r8
 800afee:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800aff2:	0c2d      	lsrs	r5, r5, #16
 800aff4:	fb02 c505 	mla	r5, r2, r5, ip
 800aff8:	b289      	uxth	r1, r1
 800affa:	3301      	adds	r3, #1
 800affc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b000:	429e      	cmp	r6, r3
 800b002:	f840 1b04 	str.w	r1, [r0], #4
 800b006:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b00a:	dcec      	bgt.n	800afe6 <__multadd+0x12>
 800b00c:	f1b8 0f00 	cmp.w	r8, #0
 800b010:	d022      	beq.n	800b058 <__multadd+0x84>
 800b012:	68a3      	ldr	r3, [r4, #8]
 800b014:	42b3      	cmp	r3, r6
 800b016:	dc19      	bgt.n	800b04c <__multadd+0x78>
 800b018:	6861      	ldr	r1, [r4, #4]
 800b01a:	4638      	mov	r0, r7
 800b01c:	3101      	adds	r1, #1
 800b01e:	f7ff ffab 	bl	800af78 <_Balloc>
 800b022:	4605      	mov	r5, r0
 800b024:	b928      	cbnz	r0, 800b032 <__multadd+0x5e>
 800b026:	4602      	mov	r2, r0
 800b028:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <__multadd+0x8c>)
 800b02a:	480e      	ldr	r0, [pc, #56]	; (800b064 <__multadd+0x90>)
 800b02c:	21b5      	movs	r1, #181	; 0xb5
 800b02e:	f000 fb99 	bl	800b764 <__assert_func>
 800b032:	6922      	ldr	r2, [r4, #16]
 800b034:	3202      	adds	r2, #2
 800b036:	f104 010c 	add.w	r1, r4, #12
 800b03a:	0092      	lsls	r2, r2, #2
 800b03c:	300c      	adds	r0, #12
 800b03e:	f7fd fd79 	bl	8008b34 <memcpy>
 800b042:	4621      	mov	r1, r4
 800b044:	4638      	mov	r0, r7
 800b046:	f7ff ffbc 	bl	800afc2 <_Bfree>
 800b04a:	462c      	mov	r4, r5
 800b04c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b050:	3601      	adds	r6, #1
 800b052:	f8c3 8014 	str.w	r8, [r3, #20]
 800b056:	6126      	str	r6, [r4, #16]
 800b058:	4620      	mov	r0, r4
 800b05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b05e:	bf00      	nop
 800b060:	0800d1f1 	.word	0x0800d1f1
 800b064:	0800d261 	.word	0x0800d261

0800b068 <__hi0bits>:
 800b068:	0c03      	lsrs	r3, r0, #16
 800b06a:	041b      	lsls	r3, r3, #16
 800b06c:	b9d3      	cbnz	r3, 800b0a4 <__hi0bits+0x3c>
 800b06e:	0400      	lsls	r0, r0, #16
 800b070:	2310      	movs	r3, #16
 800b072:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b076:	bf04      	itt	eq
 800b078:	0200      	lsleq	r0, r0, #8
 800b07a:	3308      	addeq	r3, #8
 800b07c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b080:	bf04      	itt	eq
 800b082:	0100      	lsleq	r0, r0, #4
 800b084:	3304      	addeq	r3, #4
 800b086:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b08a:	bf04      	itt	eq
 800b08c:	0080      	lsleq	r0, r0, #2
 800b08e:	3302      	addeq	r3, #2
 800b090:	2800      	cmp	r0, #0
 800b092:	db05      	blt.n	800b0a0 <__hi0bits+0x38>
 800b094:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b098:	f103 0301 	add.w	r3, r3, #1
 800b09c:	bf08      	it	eq
 800b09e:	2320      	moveq	r3, #32
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	4770      	bx	lr
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e7e4      	b.n	800b072 <__hi0bits+0xa>

0800b0a8 <__lo0bits>:
 800b0a8:	6803      	ldr	r3, [r0, #0]
 800b0aa:	f013 0207 	ands.w	r2, r3, #7
 800b0ae:	4601      	mov	r1, r0
 800b0b0:	d00b      	beq.n	800b0ca <__lo0bits+0x22>
 800b0b2:	07da      	lsls	r2, r3, #31
 800b0b4:	d424      	bmi.n	800b100 <__lo0bits+0x58>
 800b0b6:	0798      	lsls	r0, r3, #30
 800b0b8:	bf49      	itett	mi
 800b0ba:	085b      	lsrmi	r3, r3, #1
 800b0bc:	089b      	lsrpl	r3, r3, #2
 800b0be:	2001      	movmi	r0, #1
 800b0c0:	600b      	strmi	r3, [r1, #0]
 800b0c2:	bf5c      	itt	pl
 800b0c4:	600b      	strpl	r3, [r1, #0]
 800b0c6:	2002      	movpl	r0, #2
 800b0c8:	4770      	bx	lr
 800b0ca:	b298      	uxth	r0, r3
 800b0cc:	b9b0      	cbnz	r0, 800b0fc <__lo0bits+0x54>
 800b0ce:	0c1b      	lsrs	r3, r3, #16
 800b0d0:	2010      	movs	r0, #16
 800b0d2:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0d6:	bf04      	itt	eq
 800b0d8:	0a1b      	lsreq	r3, r3, #8
 800b0da:	3008      	addeq	r0, #8
 800b0dc:	071a      	lsls	r2, r3, #28
 800b0de:	bf04      	itt	eq
 800b0e0:	091b      	lsreq	r3, r3, #4
 800b0e2:	3004      	addeq	r0, #4
 800b0e4:	079a      	lsls	r2, r3, #30
 800b0e6:	bf04      	itt	eq
 800b0e8:	089b      	lsreq	r3, r3, #2
 800b0ea:	3002      	addeq	r0, #2
 800b0ec:	07da      	lsls	r2, r3, #31
 800b0ee:	d403      	bmi.n	800b0f8 <__lo0bits+0x50>
 800b0f0:	085b      	lsrs	r3, r3, #1
 800b0f2:	f100 0001 	add.w	r0, r0, #1
 800b0f6:	d005      	beq.n	800b104 <__lo0bits+0x5c>
 800b0f8:	600b      	str	r3, [r1, #0]
 800b0fa:	4770      	bx	lr
 800b0fc:	4610      	mov	r0, r2
 800b0fe:	e7e8      	b.n	800b0d2 <__lo0bits+0x2a>
 800b100:	2000      	movs	r0, #0
 800b102:	4770      	bx	lr
 800b104:	2020      	movs	r0, #32
 800b106:	4770      	bx	lr

0800b108 <__i2b>:
 800b108:	b510      	push	{r4, lr}
 800b10a:	460c      	mov	r4, r1
 800b10c:	2101      	movs	r1, #1
 800b10e:	f7ff ff33 	bl	800af78 <_Balloc>
 800b112:	4602      	mov	r2, r0
 800b114:	b928      	cbnz	r0, 800b122 <__i2b+0x1a>
 800b116:	4b05      	ldr	r3, [pc, #20]	; (800b12c <__i2b+0x24>)
 800b118:	4805      	ldr	r0, [pc, #20]	; (800b130 <__i2b+0x28>)
 800b11a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b11e:	f000 fb21 	bl	800b764 <__assert_func>
 800b122:	2301      	movs	r3, #1
 800b124:	6144      	str	r4, [r0, #20]
 800b126:	6103      	str	r3, [r0, #16]
 800b128:	bd10      	pop	{r4, pc}
 800b12a:	bf00      	nop
 800b12c:	0800d1f1 	.word	0x0800d1f1
 800b130:	0800d261 	.word	0x0800d261

0800b134 <__multiply>:
 800b134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b138:	4614      	mov	r4, r2
 800b13a:	690a      	ldr	r2, [r1, #16]
 800b13c:	6923      	ldr	r3, [r4, #16]
 800b13e:	429a      	cmp	r2, r3
 800b140:	bfb8      	it	lt
 800b142:	460b      	movlt	r3, r1
 800b144:	460d      	mov	r5, r1
 800b146:	bfbc      	itt	lt
 800b148:	4625      	movlt	r5, r4
 800b14a:	461c      	movlt	r4, r3
 800b14c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b150:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b154:	68ab      	ldr	r3, [r5, #8]
 800b156:	6869      	ldr	r1, [r5, #4]
 800b158:	eb0a 0709 	add.w	r7, sl, r9
 800b15c:	42bb      	cmp	r3, r7
 800b15e:	b085      	sub	sp, #20
 800b160:	bfb8      	it	lt
 800b162:	3101      	addlt	r1, #1
 800b164:	f7ff ff08 	bl	800af78 <_Balloc>
 800b168:	b930      	cbnz	r0, 800b178 <__multiply+0x44>
 800b16a:	4602      	mov	r2, r0
 800b16c:	4b42      	ldr	r3, [pc, #264]	; (800b278 <__multiply+0x144>)
 800b16e:	4843      	ldr	r0, [pc, #268]	; (800b27c <__multiply+0x148>)
 800b170:	f240 115d 	movw	r1, #349	; 0x15d
 800b174:	f000 faf6 	bl	800b764 <__assert_func>
 800b178:	f100 0614 	add.w	r6, r0, #20
 800b17c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b180:	4633      	mov	r3, r6
 800b182:	2200      	movs	r2, #0
 800b184:	4543      	cmp	r3, r8
 800b186:	d31e      	bcc.n	800b1c6 <__multiply+0x92>
 800b188:	f105 0c14 	add.w	ip, r5, #20
 800b18c:	f104 0314 	add.w	r3, r4, #20
 800b190:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b194:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b198:	9202      	str	r2, [sp, #8]
 800b19a:	ebac 0205 	sub.w	r2, ip, r5
 800b19e:	3a15      	subs	r2, #21
 800b1a0:	f022 0203 	bic.w	r2, r2, #3
 800b1a4:	3204      	adds	r2, #4
 800b1a6:	f105 0115 	add.w	r1, r5, #21
 800b1aa:	458c      	cmp	ip, r1
 800b1ac:	bf38      	it	cc
 800b1ae:	2204      	movcc	r2, #4
 800b1b0:	9201      	str	r2, [sp, #4]
 800b1b2:	9a02      	ldr	r2, [sp, #8]
 800b1b4:	9303      	str	r3, [sp, #12]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d808      	bhi.n	800b1cc <__multiply+0x98>
 800b1ba:	2f00      	cmp	r7, #0
 800b1bc:	dc55      	bgt.n	800b26a <__multiply+0x136>
 800b1be:	6107      	str	r7, [r0, #16]
 800b1c0:	b005      	add	sp, #20
 800b1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1c6:	f843 2b04 	str.w	r2, [r3], #4
 800b1ca:	e7db      	b.n	800b184 <__multiply+0x50>
 800b1cc:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1d0:	f1ba 0f00 	cmp.w	sl, #0
 800b1d4:	d020      	beq.n	800b218 <__multiply+0xe4>
 800b1d6:	f105 0e14 	add.w	lr, r5, #20
 800b1da:	46b1      	mov	r9, r6
 800b1dc:	2200      	movs	r2, #0
 800b1de:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b1e2:	f8d9 b000 	ldr.w	fp, [r9]
 800b1e6:	b2a1      	uxth	r1, r4
 800b1e8:	fa1f fb8b 	uxth.w	fp, fp
 800b1ec:	fb0a b101 	mla	r1, sl, r1, fp
 800b1f0:	4411      	add	r1, r2
 800b1f2:	f8d9 2000 	ldr.w	r2, [r9]
 800b1f6:	0c24      	lsrs	r4, r4, #16
 800b1f8:	0c12      	lsrs	r2, r2, #16
 800b1fa:	fb0a 2404 	mla	r4, sl, r4, r2
 800b1fe:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b202:	b289      	uxth	r1, r1
 800b204:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b208:	45f4      	cmp	ip, lr
 800b20a:	f849 1b04 	str.w	r1, [r9], #4
 800b20e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b212:	d8e4      	bhi.n	800b1de <__multiply+0xaa>
 800b214:	9901      	ldr	r1, [sp, #4]
 800b216:	5072      	str	r2, [r6, r1]
 800b218:	9a03      	ldr	r2, [sp, #12]
 800b21a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b21e:	3304      	adds	r3, #4
 800b220:	f1b9 0f00 	cmp.w	r9, #0
 800b224:	d01f      	beq.n	800b266 <__multiply+0x132>
 800b226:	6834      	ldr	r4, [r6, #0]
 800b228:	f105 0114 	add.w	r1, r5, #20
 800b22c:	46b6      	mov	lr, r6
 800b22e:	f04f 0a00 	mov.w	sl, #0
 800b232:	880a      	ldrh	r2, [r1, #0]
 800b234:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b238:	fb09 b202 	mla	r2, r9, r2, fp
 800b23c:	4492      	add	sl, r2
 800b23e:	b2a4      	uxth	r4, r4
 800b240:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b244:	f84e 4b04 	str.w	r4, [lr], #4
 800b248:	f851 4b04 	ldr.w	r4, [r1], #4
 800b24c:	f8be 2000 	ldrh.w	r2, [lr]
 800b250:	0c24      	lsrs	r4, r4, #16
 800b252:	fb09 2404 	mla	r4, r9, r4, r2
 800b256:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b25a:	458c      	cmp	ip, r1
 800b25c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b260:	d8e7      	bhi.n	800b232 <__multiply+0xfe>
 800b262:	9a01      	ldr	r2, [sp, #4]
 800b264:	50b4      	str	r4, [r6, r2]
 800b266:	3604      	adds	r6, #4
 800b268:	e7a3      	b.n	800b1b2 <__multiply+0x7e>
 800b26a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d1a5      	bne.n	800b1be <__multiply+0x8a>
 800b272:	3f01      	subs	r7, #1
 800b274:	e7a1      	b.n	800b1ba <__multiply+0x86>
 800b276:	bf00      	nop
 800b278:	0800d1f1 	.word	0x0800d1f1
 800b27c:	0800d261 	.word	0x0800d261

0800b280 <__pow5mult>:
 800b280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b284:	4615      	mov	r5, r2
 800b286:	f012 0203 	ands.w	r2, r2, #3
 800b28a:	4606      	mov	r6, r0
 800b28c:	460f      	mov	r7, r1
 800b28e:	d007      	beq.n	800b2a0 <__pow5mult+0x20>
 800b290:	4c1a      	ldr	r4, [pc, #104]	; (800b2fc <__pow5mult+0x7c>)
 800b292:	3a01      	subs	r2, #1
 800b294:	2300      	movs	r3, #0
 800b296:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b29a:	f7ff fe9b 	bl	800afd4 <__multadd>
 800b29e:	4607      	mov	r7, r0
 800b2a0:	10ad      	asrs	r5, r5, #2
 800b2a2:	d027      	beq.n	800b2f4 <__pow5mult+0x74>
 800b2a4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800b2a6:	b944      	cbnz	r4, 800b2ba <__pow5mult+0x3a>
 800b2a8:	f240 2171 	movw	r1, #625	; 0x271
 800b2ac:	4630      	mov	r0, r6
 800b2ae:	f7ff ff2b 	bl	800b108 <__i2b>
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	64b0      	str	r0, [r6, #72]	; 0x48
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	6003      	str	r3, [r0, #0]
 800b2ba:	f04f 0900 	mov.w	r9, #0
 800b2be:	07eb      	lsls	r3, r5, #31
 800b2c0:	d50a      	bpl.n	800b2d8 <__pow5mult+0x58>
 800b2c2:	4639      	mov	r1, r7
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	f7ff ff34 	bl	800b134 <__multiply>
 800b2cc:	4639      	mov	r1, r7
 800b2ce:	4680      	mov	r8, r0
 800b2d0:	4630      	mov	r0, r6
 800b2d2:	f7ff fe76 	bl	800afc2 <_Bfree>
 800b2d6:	4647      	mov	r7, r8
 800b2d8:	106d      	asrs	r5, r5, #1
 800b2da:	d00b      	beq.n	800b2f4 <__pow5mult+0x74>
 800b2dc:	6820      	ldr	r0, [r4, #0]
 800b2de:	b938      	cbnz	r0, 800b2f0 <__pow5mult+0x70>
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	4621      	mov	r1, r4
 800b2e4:	4630      	mov	r0, r6
 800b2e6:	f7ff ff25 	bl	800b134 <__multiply>
 800b2ea:	6020      	str	r0, [r4, #0]
 800b2ec:	f8c0 9000 	str.w	r9, [r0]
 800b2f0:	4604      	mov	r4, r0
 800b2f2:	e7e4      	b.n	800b2be <__pow5mult+0x3e>
 800b2f4:	4638      	mov	r0, r7
 800b2f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2fa:	bf00      	nop
 800b2fc:	0800d3b8 	.word	0x0800d3b8

0800b300 <__lshift>:
 800b300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b304:	460c      	mov	r4, r1
 800b306:	6849      	ldr	r1, [r1, #4]
 800b308:	6923      	ldr	r3, [r4, #16]
 800b30a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	4607      	mov	r7, r0
 800b312:	4691      	mov	r9, r2
 800b314:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b318:	f108 0601 	add.w	r6, r8, #1
 800b31c:	42b3      	cmp	r3, r6
 800b31e:	db0b      	blt.n	800b338 <__lshift+0x38>
 800b320:	4638      	mov	r0, r7
 800b322:	f7ff fe29 	bl	800af78 <_Balloc>
 800b326:	4605      	mov	r5, r0
 800b328:	b948      	cbnz	r0, 800b33e <__lshift+0x3e>
 800b32a:	4602      	mov	r2, r0
 800b32c:	4b28      	ldr	r3, [pc, #160]	; (800b3d0 <__lshift+0xd0>)
 800b32e:	4829      	ldr	r0, [pc, #164]	; (800b3d4 <__lshift+0xd4>)
 800b330:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b334:	f000 fa16 	bl	800b764 <__assert_func>
 800b338:	3101      	adds	r1, #1
 800b33a:	005b      	lsls	r3, r3, #1
 800b33c:	e7ee      	b.n	800b31c <__lshift+0x1c>
 800b33e:	2300      	movs	r3, #0
 800b340:	f100 0114 	add.w	r1, r0, #20
 800b344:	f100 0210 	add.w	r2, r0, #16
 800b348:	4618      	mov	r0, r3
 800b34a:	4553      	cmp	r3, sl
 800b34c:	db33      	blt.n	800b3b6 <__lshift+0xb6>
 800b34e:	6920      	ldr	r0, [r4, #16]
 800b350:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b354:	f104 0314 	add.w	r3, r4, #20
 800b358:	f019 091f 	ands.w	r9, r9, #31
 800b35c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b360:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b364:	d02b      	beq.n	800b3be <__lshift+0xbe>
 800b366:	f1c9 0e20 	rsb	lr, r9, #32
 800b36a:	468a      	mov	sl, r1
 800b36c:	2200      	movs	r2, #0
 800b36e:	6818      	ldr	r0, [r3, #0]
 800b370:	fa00 f009 	lsl.w	r0, r0, r9
 800b374:	4302      	orrs	r2, r0
 800b376:	f84a 2b04 	str.w	r2, [sl], #4
 800b37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b37e:	459c      	cmp	ip, r3
 800b380:	fa22 f20e 	lsr.w	r2, r2, lr
 800b384:	d8f3      	bhi.n	800b36e <__lshift+0x6e>
 800b386:	ebac 0304 	sub.w	r3, ip, r4
 800b38a:	3b15      	subs	r3, #21
 800b38c:	f023 0303 	bic.w	r3, r3, #3
 800b390:	3304      	adds	r3, #4
 800b392:	f104 0015 	add.w	r0, r4, #21
 800b396:	4584      	cmp	ip, r0
 800b398:	bf38      	it	cc
 800b39a:	2304      	movcc	r3, #4
 800b39c:	50ca      	str	r2, [r1, r3]
 800b39e:	b10a      	cbz	r2, 800b3a4 <__lshift+0xa4>
 800b3a0:	f108 0602 	add.w	r6, r8, #2
 800b3a4:	3e01      	subs	r6, #1
 800b3a6:	4638      	mov	r0, r7
 800b3a8:	612e      	str	r6, [r5, #16]
 800b3aa:	4621      	mov	r1, r4
 800b3ac:	f7ff fe09 	bl	800afc2 <_Bfree>
 800b3b0:	4628      	mov	r0, r5
 800b3b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3ba:	3301      	adds	r3, #1
 800b3bc:	e7c5      	b.n	800b34a <__lshift+0x4a>
 800b3be:	3904      	subs	r1, #4
 800b3c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3c8:	459c      	cmp	ip, r3
 800b3ca:	d8f9      	bhi.n	800b3c0 <__lshift+0xc0>
 800b3cc:	e7ea      	b.n	800b3a4 <__lshift+0xa4>
 800b3ce:	bf00      	nop
 800b3d0:	0800d1f1 	.word	0x0800d1f1
 800b3d4:	0800d261 	.word	0x0800d261

0800b3d8 <__mcmp>:
 800b3d8:	b530      	push	{r4, r5, lr}
 800b3da:	6902      	ldr	r2, [r0, #16]
 800b3dc:	690c      	ldr	r4, [r1, #16]
 800b3de:	1b12      	subs	r2, r2, r4
 800b3e0:	d10e      	bne.n	800b400 <__mcmp+0x28>
 800b3e2:	f100 0314 	add.w	r3, r0, #20
 800b3e6:	3114      	adds	r1, #20
 800b3e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3f8:	42a5      	cmp	r5, r4
 800b3fa:	d003      	beq.n	800b404 <__mcmp+0x2c>
 800b3fc:	d305      	bcc.n	800b40a <__mcmp+0x32>
 800b3fe:	2201      	movs	r2, #1
 800b400:	4610      	mov	r0, r2
 800b402:	bd30      	pop	{r4, r5, pc}
 800b404:	4283      	cmp	r3, r0
 800b406:	d3f3      	bcc.n	800b3f0 <__mcmp+0x18>
 800b408:	e7fa      	b.n	800b400 <__mcmp+0x28>
 800b40a:	f04f 32ff 	mov.w	r2, #4294967295
 800b40e:	e7f7      	b.n	800b400 <__mcmp+0x28>

0800b410 <__mdiff>:
 800b410:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	4606      	mov	r6, r0
 800b418:	4611      	mov	r1, r2
 800b41a:	4620      	mov	r0, r4
 800b41c:	4617      	mov	r7, r2
 800b41e:	f7ff ffdb 	bl	800b3d8 <__mcmp>
 800b422:	1e05      	subs	r5, r0, #0
 800b424:	d110      	bne.n	800b448 <__mdiff+0x38>
 800b426:	4629      	mov	r1, r5
 800b428:	4630      	mov	r0, r6
 800b42a:	f7ff fda5 	bl	800af78 <_Balloc>
 800b42e:	b930      	cbnz	r0, 800b43e <__mdiff+0x2e>
 800b430:	4b39      	ldr	r3, [pc, #228]	; (800b518 <__mdiff+0x108>)
 800b432:	4602      	mov	r2, r0
 800b434:	f240 2132 	movw	r1, #562	; 0x232
 800b438:	4838      	ldr	r0, [pc, #224]	; (800b51c <__mdiff+0x10c>)
 800b43a:	f000 f993 	bl	800b764 <__assert_func>
 800b43e:	2301      	movs	r3, #1
 800b440:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b444:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b448:	bfa4      	itt	ge
 800b44a:	463b      	movge	r3, r7
 800b44c:	4627      	movge	r7, r4
 800b44e:	4630      	mov	r0, r6
 800b450:	6879      	ldr	r1, [r7, #4]
 800b452:	bfa6      	itte	ge
 800b454:	461c      	movge	r4, r3
 800b456:	2500      	movge	r5, #0
 800b458:	2501      	movlt	r5, #1
 800b45a:	f7ff fd8d 	bl	800af78 <_Balloc>
 800b45e:	b920      	cbnz	r0, 800b46a <__mdiff+0x5a>
 800b460:	4b2d      	ldr	r3, [pc, #180]	; (800b518 <__mdiff+0x108>)
 800b462:	4602      	mov	r2, r0
 800b464:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b468:	e7e6      	b.n	800b438 <__mdiff+0x28>
 800b46a:	693e      	ldr	r6, [r7, #16]
 800b46c:	60c5      	str	r5, [r0, #12]
 800b46e:	6925      	ldr	r5, [r4, #16]
 800b470:	f107 0114 	add.w	r1, r7, #20
 800b474:	f104 0914 	add.w	r9, r4, #20
 800b478:	f100 0e14 	add.w	lr, r0, #20
 800b47c:	f107 0210 	add.w	r2, r7, #16
 800b480:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b484:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b488:	46f2      	mov	sl, lr
 800b48a:	2700      	movs	r7, #0
 800b48c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b490:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b494:	fa1f f883 	uxth.w	r8, r3
 800b498:	fa17 f78b 	uxtah	r7, r7, fp
 800b49c:	0c1b      	lsrs	r3, r3, #16
 800b49e:	eba7 0808 	sub.w	r8, r7, r8
 800b4a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4aa:	fa1f f888 	uxth.w	r8, r8
 800b4ae:	141f      	asrs	r7, r3, #16
 800b4b0:	454d      	cmp	r5, r9
 800b4b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4b6:	f84a 3b04 	str.w	r3, [sl], #4
 800b4ba:	d8e7      	bhi.n	800b48c <__mdiff+0x7c>
 800b4bc:	1b2b      	subs	r3, r5, r4
 800b4be:	3b15      	subs	r3, #21
 800b4c0:	f023 0303 	bic.w	r3, r3, #3
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	3415      	adds	r4, #21
 800b4c8:	42a5      	cmp	r5, r4
 800b4ca:	bf38      	it	cc
 800b4cc:	2304      	movcc	r3, #4
 800b4ce:	4419      	add	r1, r3
 800b4d0:	4473      	add	r3, lr
 800b4d2:	469e      	mov	lr, r3
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	4565      	cmp	r5, ip
 800b4d8:	d30e      	bcc.n	800b4f8 <__mdiff+0xe8>
 800b4da:	f10c 0203 	add.w	r2, ip, #3
 800b4de:	1a52      	subs	r2, r2, r1
 800b4e0:	f022 0203 	bic.w	r2, r2, #3
 800b4e4:	3903      	subs	r1, #3
 800b4e6:	458c      	cmp	ip, r1
 800b4e8:	bf38      	it	cc
 800b4ea:	2200      	movcc	r2, #0
 800b4ec:	441a      	add	r2, r3
 800b4ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b4f2:	b17b      	cbz	r3, 800b514 <__mdiff+0x104>
 800b4f4:	6106      	str	r6, [r0, #16]
 800b4f6:	e7a5      	b.n	800b444 <__mdiff+0x34>
 800b4f8:	f855 8b04 	ldr.w	r8, [r5], #4
 800b4fc:	fa17 f488 	uxtah	r4, r7, r8
 800b500:	1422      	asrs	r2, r4, #16
 800b502:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b506:	b2a4      	uxth	r4, r4
 800b508:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b50c:	f84e 4b04 	str.w	r4, [lr], #4
 800b510:	1417      	asrs	r7, r2, #16
 800b512:	e7e0      	b.n	800b4d6 <__mdiff+0xc6>
 800b514:	3e01      	subs	r6, #1
 800b516:	e7ea      	b.n	800b4ee <__mdiff+0xde>
 800b518:	0800d1f1 	.word	0x0800d1f1
 800b51c:	0800d261 	.word	0x0800d261

0800b520 <__d2b>:
 800b520:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b524:	4689      	mov	r9, r1
 800b526:	2101      	movs	r1, #1
 800b528:	ec57 6b10 	vmov	r6, r7, d0
 800b52c:	4690      	mov	r8, r2
 800b52e:	f7ff fd23 	bl	800af78 <_Balloc>
 800b532:	4604      	mov	r4, r0
 800b534:	b930      	cbnz	r0, 800b544 <__d2b+0x24>
 800b536:	4602      	mov	r2, r0
 800b538:	4b25      	ldr	r3, [pc, #148]	; (800b5d0 <__d2b+0xb0>)
 800b53a:	4826      	ldr	r0, [pc, #152]	; (800b5d4 <__d2b+0xb4>)
 800b53c:	f240 310a 	movw	r1, #778	; 0x30a
 800b540:	f000 f910 	bl	800b764 <__assert_func>
 800b544:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b548:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b54c:	bb35      	cbnz	r5, 800b59c <__d2b+0x7c>
 800b54e:	2e00      	cmp	r6, #0
 800b550:	9301      	str	r3, [sp, #4]
 800b552:	d028      	beq.n	800b5a6 <__d2b+0x86>
 800b554:	4668      	mov	r0, sp
 800b556:	9600      	str	r6, [sp, #0]
 800b558:	f7ff fda6 	bl	800b0a8 <__lo0bits>
 800b55c:	9900      	ldr	r1, [sp, #0]
 800b55e:	b300      	cbz	r0, 800b5a2 <__d2b+0x82>
 800b560:	9a01      	ldr	r2, [sp, #4]
 800b562:	f1c0 0320 	rsb	r3, r0, #32
 800b566:	fa02 f303 	lsl.w	r3, r2, r3
 800b56a:	430b      	orrs	r3, r1
 800b56c:	40c2      	lsrs	r2, r0
 800b56e:	6163      	str	r3, [r4, #20]
 800b570:	9201      	str	r2, [sp, #4]
 800b572:	9b01      	ldr	r3, [sp, #4]
 800b574:	61a3      	str	r3, [r4, #24]
 800b576:	2b00      	cmp	r3, #0
 800b578:	bf14      	ite	ne
 800b57a:	2202      	movne	r2, #2
 800b57c:	2201      	moveq	r2, #1
 800b57e:	6122      	str	r2, [r4, #16]
 800b580:	b1d5      	cbz	r5, 800b5b8 <__d2b+0x98>
 800b582:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b586:	4405      	add	r5, r0
 800b588:	f8c9 5000 	str.w	r5, [r9]
 800b58c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b590:	f8c8 0000 	str.w	r0, [r8]
 800b594:	4620      	mov	r0, r4
 800b596:	b003      	add	sp, #12
 800b598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b59c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b5a0:	e7d5      	b.n	800b54e <__d2b+0x2e>
 800b5a2:	6161      	str	r1, [r4, #20]
 800b5a4:	e7e5      	b.n	800b572 <__d2b+0x52>
 800b5a6:	a801      	add	r0, sp, #4
 800b5a8:	f7ff fd7e 	bl	800b0a8 <__lo0bits>
 800b5ac:	9b01      	ldr	r3, [sp, #4]
 800b5ae:	6163      	str	r3, [r4, #20]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	6122      	str	r2, [r4, #16]
 800b5b4:	3020      	adds	r0, #32
 800b5b6:	e7e3      	b.n	800b580 <__d2b+0x60>
 800b5b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b5bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5c0:	f8c9 0000 	str.w	r0, [r9]
 800b5c4:	6918      	ldr	r0, [r3, #16]
 800b5c6:	f7ff fd4f 	bl	800b068 <__hi0bits>
 800b5ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b5ce:	e7df      	b.n	800b590 <__d2b+0x70>
 800b5d0:	0800d1f1 	.word	0x0800d1f1
 800b5d4:	0800d261 	.word	0x0800d261

0800b5d8 <frexp>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	2100      	movs	r1, #0
 800b5dc:	ec55 4b10 	vmov	r4, r5, d0
 800b5e0:	6001      	str	r1, [r0, #0]
 800b5e2:	4916      	ldr	r1, [pc, #88]	; (800b63c <frexp+0x64>)
 800b5e4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800b5e8:	428a      	cmp	r2, r1
 800b5ea:	4606      	mov	r6, r0
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	dc22      	bgt.n	800b636 <frexp+0x5e>
 800b5f0:	ee10 1a10 	vmov	r1, s0
 800b5f4:	4311      	orrs	r1, r2
 800b5f6:	d01e      	beq.n	800b636 <frexp+0x5e>
 800b5f8:	4911      	ldr	r1, [pc, #68]	; (800b640 <frexp+0x68>)
 800b5fa:	4029      	ands	r1, r5
 800b5fc:	b969      	cbnz	r1, 800b61a <frexp+0x42>
 800b5fe:	4b11      	ldr	r3, [pc, #68]	; (800b644 <frexp+0x6c>)
 800b600:	2200      	movs	r2, #0
 800b602:	ee10 0a10 	vmov	r0, s0
 800b606:	4629      	mov	r1, r5
 800b608:	f7f4 fffe 	bl	8000608 <__aeabi_dmul>
 800b60c:	460b      	mov	r3, r1
 800b60e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800b612:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b616:	4604      	mov	r4, r0
 800b618:	6031      	str	r1, [r6, #0]
 800b61a:	6831      	ldr	r1, [r6, #0]
 800b61c:	1512      	asrs	r2, r2, #20
 800b61e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b622:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800b626:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b62a:	440a      	add	r2, r1
 800b62c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800b630:	6032      	str	r2, [r6, #0]
 800b632:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b636:	ec45 4b10 	vmov	d0, r4, r5
 800b63a:	bd70      	pop	{r4, r5, r6, pc}
 800b63c:	7fefffff 	.word	0x7fefffff
 800b640:	7ff00000 	.word	0x7ff00000
 800b644:	43500000 	.word	0x43500000

0800b648 <strncpy>:
 800b648:	b510      	push	{r4, lr}
 800b64a:	3901      	subs	r1, #1
 800b64c:	4603      	mov	r3, r0
 800b64e:	b132      	cbz	r2, 800b65e <strncpy+0x16>
 800b650:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b654:	f803 4b01 	strb.w	r4, [r3], #1
 800b658:	3a01      	subs	r2, #1
 800b65a:	2c00      	cmp	r4, #0
 800b65c:	d1f7      	bne.n	800b64e <strncpy+0x6>
 800b65e:	441a      	add	r2, r3
 800b660:	2100      	movs	r1, #0
 800b662:	4293      	cmp	r3, r2
 800b664:	d100      	bne.n	800b668 <strncpy+0x20>
 800b666:	bd10      	pop	{r4, pc}
 800b668:	f803 1b01 	strb.w	r1, [r3], #1
 800b66c:	e7f9      	b.n	800b662 <strncpy+0x1a>

0800b66e <__ssprint_r>:
 800b66e:	6893      	ldr	r3, [r2, #8]
 800b670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b674:	4680      	mov	r8, r0
 800b676:	460c      	mov	r4, r1
 800b678:	4617      	mov	r7, r2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d061      	beq.n	800b742 <__ssprint_r+0xd4>
 800b67e:	2300      	movs	r3, #0
 800b680:	f8d2 a000 	ldr.w	sl, [r2]
 800b684:	9301      	str	r3, [sp, #4]
 800b686:	469b      	mov	fp, r3
 800b688:	f1bb 0f00 	cmp.w	fp, #0
 800b68c:	d02b      	beq.n	800b6e6 <__ssprint_r+0x78>
 800b68e:	68a6      	ldr	r6, [r4, #8]
 800b690:	45b3      	cmp	fp, r6
 800b692:	d342      	bcc.n	800b71a <__ssprint_r+0xac>
 800b694:	89a2      	ldrh	r2, [r4, #12]
 800b696:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b69a:	d03e      	beq.n	800b71a <__ssprint_r+0xac>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	6921      	ldr	r1, [r4, #16]
 800b6a0:	eba5 0901 	sub.w	r9, r5, r1
 800b6a4:	6965      	ldr	r5, [r4, #20]
 800b6a6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6aa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6ae:	f109 0001 	add.w	r0, r9, #1
 800b6b2:	106d      	asrs	r5, r5, #1
 800b6b4:	4458      	add	r0, fp
 800b6b6:	4285      	cmp	r5, r0
 800b6b8:	bf38      	it	cc
 800b6ba:	4605      	movcc	r5, r0
 800b6bc:	0553      	lsls	r3, r2, #21
 800b6be:	d545      	bpl.n	800b74c <__ssprint_r+0xde>
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4640      	mov	r0, r8
 800b6c4:	f7fc fff4 	bl	80086b0 <_malloc_r>
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	b9a0      	cbnz	r0, 800b6f6 <__ssprint_r+0x88>
 800b6cc:	230c      	movs	r3, #12
 800b6ce:	f8c8 3000 	str.w	r3, [r8]
 800b6d2:	89a3      	ldrh	r3, [r4, #12]
 800b6d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6d8:	81a3      	strh	r3, [r4, #12]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800b6e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e4:	e02f      	b.n	800b746 <__ssprint_r+0xd8>
 800b6e6:	f8da 3000 	ldr.w	r3, [sl]
 800b6ea:	f8da b004 	ldr.w	fp, [sl, #4]
 800b6ee:	9301      	str	r3, [sp, #4]
 800b6f0:	f10a 0a08 	add.w	sl, sl, #8
 800b6f4:	e7c8      	b.n	800b688 <__ssprint_r+0x1a>
 800b6f6:	464a      	mov	r2, r9
 800b6f8:	6921      	ldr	r1, [r4, #16]
 800b6fa:	f7fd fa1b 	bl	8008b34 <memcpy>
 800b6fe:	89a2      	ldrh	r2, [r4, #12]
 800b700:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800b704:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b708:	81a2      	strh	r2, [r4, #12]
 800b70a:	6126      	str	r6, [r4, #16]
 800b70c:	6165      	str	r5, [r4, #20]
 800b70e:	444e      	add	r6, r9
 800b710:	eba5 0509 	sub.w	r5, r5, r9
 800b714:	6026      	str	r6, [r4, #0]
 800b716:	60a5      	str	r5, [r4, #8]
 800b718:	465e      	mov	r6, fp
 800b71a:	455e      	cmp	r6, fp
 800b71c:	bf28      	it	cs
 800b71e:	465e      	movcs	r6, fp
 800b720:	4632      	mov	r2, r6
 800b722:	9901      	ldr	r1, [sp, #4]
 800b724:	6820      	ldr	r0, [r4, #0]
 800b726:	f000 f893 	bl	800b850 <memmove>
 800b72a:	68a2      	ldr	r2, [r4, #8]
 800b72c:	1b92      	subs	r2, r2, r6
 800b72e:	60a2      	str	r2, [r4, #8]
 800b730:	6822      	ldr	r2, [r4, #0]
 800b732:	4432      	add	r2, r6
 800b734:	6022      	str	r2, [r4, #0]
 800b736:	68ba      	ldr	r2, [r7, #8]
 800b738:	eba2 030b 	sub.w	r3, r2, fp
 800b73c:	60bb      	str	r3, [r7, #8]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d1d1      	bne.n	800b6e6 <__ssprint_r+0x78>
 800b742:	2000      	movs	r0, #0
 800b744:	6078      	str	r0, [r7, #4]
 800b746:	b003      	add	sp, #12
 800b748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b74c:	462a      	mov	r2, r5
 800b74e:	4640      	mov	r0, r8
 800b750:	f000 f898 	bl	800b884 <_realloc_r>
 800b754:	4606      	mov	r6, r0
 800b756:	2800      	cmp	r0, #0
 800b758:	d1d7      	bne.n	800b70a <__ssprint_r+0x9c>
 800b75a:	6921      	ldr	r1, [r4, #16]
 800b75c:	4640      	mov	r0, r8
 800b75e:	f7fd fac1 	bl	8008ce4 <_free_r>
 800b762:	e7b3      	b.n	800b6cc <__ssprint_r+0x5e>

0800b764 <__assert_func>:
 800b764:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b766:	4614      	mov	r4, r2
 800b768:	461a      	mov	r2, r3
 800b76a:	4b09      	ldr	r3, [pc, #36]	; (800b790 <__assert_func+0x2c>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	4605      	mov	r5, r0
 800b770:	68d8      	ldr	r0, [r3, #12]
 800b772:	b14c      	cbz	r4, 800b788 <__assert_func+0x24>
 800b774:	4b07      	ldr	r3, [pc, #28]	; (800b794 <__assert_func+0x30>)
 800b776:	9100      	str	r1, [sp, #0]
 800b778:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b77c:	4906      	ldr	r1, [pc, #24]	; (800b798 <__assert_func+0x34>)
 800b77e:	462b      	mov	r3, r5
 800b780:	f000 f83c 	bl	800b7fc <fiprintf>
 800b784:	f000 ff84 	bl	800c690 <abort>
 800b788:	4b04      	ldr	r3, [pc, #16]	; (800b79c <__assert_func+0x38>)
 800b78a:	461c      	mov	r4, r3
 800b78c:	e7f3      	b.n	800b776 <__assert_func+0x12>
 800b78e:	bf00      	nop
 800b790:	2000006c 	.word	0x2000006c
 800b794:	0800d3c4 	.word	0x0800d3c4
 800b798:	0800d3d1 	.word	0x0800d3d1
 800b79c:	0800d3ff 	.word	0x0800d3ff

0800b7a0 <_calloc_r>:
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	4351      	muls	r1, r2
 800b7a4:	f7fc ff84 	bl	80086b0 <_malloc_r>
 800b7a8:	4604      	mov	r4, r0
 800b7aa:	b198      	cbz	r0, 800b7d4 <_calloc_r+0x34>
 800b7ac:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b7b0:	f022 0203 	bic.w	r2, r2, #3
 800b7b4:	3a04      	subs	r2, #4
 800b7b6:	2a24      	cmp	r2, #36	; 0x24
 800b7b8:	d81b      	bhi.n	800b7f2 <_calloc_r+0x52>
 800b7ba:	2a13      	cmp	r2, #19
 800b7bc:	d917      	bls.n	800b7ee <_calloc_r+0x4e>
 800b7be:	2100      	movs	r1, #0
 800b7c0:	2a1b      	cmp	r2, #27
 800b7c2:	e9c0 1100 	strd	r1, r1, [r0]
 800b7c6:	d807      	bhi.n	800b7d8 <_calloc_r+0x38>
 800b7c8:	f100 0308 	add.w	r3, r0, #8
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	e9c3 2200 	strd	r2, r2, [r3]
 800b7d2:	609a      	str	r2, [r3, #8]
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	bd10      	pop	{r4, pc}
 800b7d8:	2a24      	cmp	r2, #36	; 0x24
 800b7da:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800b7de:	bf11      	iteee	ne
 800b7e0:	f100 0310 	addne.w	r3, r0, #16
 800b7e4:	6101      	streq	r1, [r0, #16]
 800b7e6:	f100 0318 	addeq.w	r3, r0, #24
 800b7ea:	6141      	streq	r1, [r0, #20]
 800b7ec:	e7ee      	b.n	800b7cc <_calloc_r+0x2c>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	e7ec      	b.n	800b7cc <_calloc_r+0x2c>
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	f7fd f9ac 	bl	8008b50 <memset>
 800b7f8:	e7ec      	b.n	800b7d4 <_calloc_r+0x34>
	...

0800b7fc <fiprintf>:
 800b7fc:	b40e      	push	{r1, r2, r3}
 800b7fe:	b503      	push	{r0, r1, lr}
 800b800:	4601      	mov	r1, r0
 800b802:	ab03      	add	r3, sp, #12
 800b804:	4805      	ldr	r0, [pc, #20]	; (800b81c <fiprintf+0x20>)
 800b806:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80a:	6800      	ldr	r0, [r0, #0]
 800b80c:	9301      	str	r3, [sp, #4]
 800b80e:	f000 fa11 	bl	800bc34 <_vfiprintf_r>
 800b812:	b002      	add	sp, #8
 800b814:	f85d eb04 	ldr.w	lr, [sp], #4
 800b818:	b003      	add	sp, #12
 800b81a:	4770      	bx	lr
 800b81c:	2000006c 	.word	0x2000006c

0800b820 <__locale_mb_cur_max>:
 800b820:	4b01      	ldr	r3, [pc, #4]	; (800b828 <__locale_mb_cur_max+0x8>)
 800b822:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 800b826:	4770      	bx	lr
 800b828:	200008ac 	.word	0x200008ac

0800b82c <__ascii_mbtowc>:
 800b82c:	b082      	sub	sp, #8
 800b82e:	b901      	cbnz	r1, 800b832 <__ascii_mbtowc+0x6>
 800b830:	a901      	add	r1, sp, #4
 800b832:	b142      	cbz	r2, 800b846 <__ascii_mbtowc+0x1a>
 800b834:	b14b      	cbz	r3, 800b84a <__ascii_mbtowc+0x1e>
 800b836:	7813      	ldrb	r3, [r2, #0]
 800b838:	600b      	str	r3, [r1, #0]
 800b83a:	7812      	ldrb	r2, [r2, #0]
 800b83c:	1e10      	subs	r0, r2, #0
 800b83e:	bf18      	it	ne
 800b840:	2001      	movne	r0, #1
 800b842:	b002      	add	sp, #8
 800b844:	4770      	bx	lr
 800b846:	4610      	mov	r0, r2
 800b848:	e7fb      	b.n	800b842 <__ascii_mbtowc+0x16>
 800b84a:	f06f 0001 	mvn.w	r0, #1
 800b84e:	e7f8      	b.n	800b842 <__ascii_mbtowc+0x16>

0800b850 <memmove>:
 800b850:	4288      	cmp	r0, r1
 800b852:	b510      	push	{r4, lr}
 800b854:	eb01 0402 	add.w	r4, r1, r2
 800b858:	d902      	bls.n	800b860 <memmove+0x10>
 800b85a:	4284      	cmp	r4, r0
 800b85c:	4623      	mov	r3, r4
 800b85e:	d807      	bhi.n	800b870 <memmove+0x20>
 800b860:	1e43      	subs	r3, r0, #1
 800b862:	42a1      	cmp	r1, r4
 800b864:	d008      	beq.n	800b878 <memmove+0x28>
 800b866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b86a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b86e:	e7f8      	b.n	800b862 <memmove+0x12>
 800b870:	4402      	add	r2, r0
 800b872:	4601      	mov	r1, r0
 800b874:	428a      	cmp	r2, r1
 800b876:	d100      	bne.n	800b87a <memmove+0x2a>
 800b878:	bd10      	pop	{r4, pc}
 800b87a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b87e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b882:	e7f7      	b.n	800b874 <memmove+0x24>

0800b884 <_realloc_r>:
 800b884:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	4681      	mov	r9, r0
 800b88a:	460c      	mov	r4, r1
 800b88c:	b929      	cbnz	r1, 800b89a <_realloc_r+0x16>
 800b88e:	4611      	mov	r1, r2
 800b890:	b003      	add	sp, #12
 800b892:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b896:	f7fc bf0b 	b.w	80086b0 <_malloc_r>
 800b89a:	9201      	str	r2, [sp, #4]
 800b89c:	f7fd f960 	bl	8008b60 <__malloc_lock>
 800b8a0:	9a01      	ldr	r2, [sp, #4]
 800b8a2:	f102 080b 	add.w	r8, r2, #11
 800b8a6:	f1b8 0f16 	cmp.w	r8, #22
 800b8aa:	d90b      	bls.n	800b8c4 <_realloc_r+0x40>
 800b8ac:	f038 0807 	bics.w	r8, r8, #7
 800b8b0:	d50a      	bpl.n	800b8c8 <_realloc_r+0x44>
 800b8b2:	230c      	movs	r3, #12
 800b8b4:	f8c9 3000 	str.w	r3, [r9]
 800b8b8:	f04f 0b00 	mov.w	fp, #0
 800b8bc:	4658      	mov	r0, fp
 800b8be:	b003      	add	sp, #12
 800b8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c4:	f04f 0810 	mov.w	r8, #16
 800b8c8:	4590      	cmp	r8, r2
 800b8ca:	d3f2      	bcc.n	800b8b2 <_realloc_r+0x2e>
 800b8cc:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b8d0:	f025 0603 	bic.w	r6, r5, #3
 800b8d4:	45b0      	cmp	r8, r6
 800b8d6:	f1a4 0a08 	sub.w	sl, r4, #8
 800b8da:	f340 8170 	ble.w	800bbbe <_realloc_r+0x33a>
 800b8de:	48a9      	ldr	r0, [pc, #676]	; (800bb84 <_realloc_r+0x300>)
 800b8e0:	9001      	str	r0, [sp, #4]
 800b8e2:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800b8e6:	eb0a 0306 	add.w	r3, sl, r6
 800b8ea:	459c      	cmp	ip, r3
 800b8ec:	6859      	ldr	r1, [r3, #4]
 800b8ee:	d005      	beq.n	800b8fc <_realloc_r+0x78>
 800b8f0:	f021 0001 	bic.w	r0, r1, #1
 800b8f4:	4418      	add	r0, r3
 800b8f6:	6840      	ldr	r0, [r0, #4]
 800b8f8:	07c7      	lsls	r7, r0, #31
 800b8fa:	d427      	bmi.n	800b94c <_realloc_r+0xc8>
 800b8fc:	f021 0103 	bic.w	r1, r1, #3
 800b900:	459c      	cmp	ip, r3
 800b902:	eb06 0701 	add.w	r7, r6, r1
 800b906:	d119      	bne.n	800b93c <_realloc_r+0xb8>
 800b908:	f108 0010 	add.w	r0, r8, #16
 800b90c:	42b8      	cmp	r0, r7
 800b90e:	dc1f      	bgt.n	800b950 <_realloc_r+0xcc>
 800b910:	eb0a 0308 	add.w	r3, sl, r8
 800b914:	9a01      	ldr	r2, [sp, #4]
 800b916:	eba7 0708 	sub.w	r7, r7, r8
 800b91a:	f047 0701 	orr.w	r7, r7, #1
 800b91e:	6093      	str	r3, [r2, #8]
 800b920:	605f      	str	r7, [r3, #4]
 800b922:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b926:	f003 0301 	and.w	r3, r3, #1
 800b92a:	ea43 0308 	orr.w	r3, r3, r8
 800b92e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b932:	4648      	mov	r0, r9
 800b934:	f7fd f91a 	bl	8008b6c <__malloc_unlock>
 800b938:	46a3      	mov	fp, r4
 800b93a:	e7bf      	b.n	800b8bc <_realloc_r+0x38>
 800b93c:	45b8      	cmp	r8, r7
 800b93e:	dc07      	bgt.n	800b950 <_realloc_r+0xcc>
 800b940:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b944:	60da      	str	r2, [r3, #12]
 800b946:	6093      	str	r3, [r2, #8]
 800b948:	4655      	mov	r5, sl
 800b94a:	e07f      	b.n	800ba4c <_realloc_r+0x1c8>
 800b94c:	2100      	movs	r1, #0
 800b94e:	460b      	mov	r3, r1
 800b950:	07e8      	lsls	r0, r5, #31
 800b952:	f100 80e5 	bmi.w	800bb20 <_realloc_r+0x29c>
 800b956:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b95a:	ebaa 0505 	sub.w	r5, sl, r5
 800b95e:	6868      	ldr	r0, [r5, #4]
 800b960:	f020 0003 	bic.w	r0, r0, #3
 800b964:	eb00 0b06 	add.w	fp, r0, r6
 800b968:	2b00      	cmp	r3, #0
 800b96a:	f000 80a5 	beq.w	800bab8 <_realloc_r+0x234>
 800b96e:	459c      	cmp	ip, r3
 800b970:	eb01 070b 	add.w	r7, r1, fp
 800b974:	d14a      	bne.n	800ba0c <_realloc_r+0x188>
 800b976:	f108 0310 	add.w	r3, r8, #16
 800b97a:	42bb      	cmp	r3, r7
 800b97c:	f300 809c 	bgt.w	800bab8 <_realloc_r+0x234>
 800b980:	46ab      	mov	fp, r5
 800b982:	68eb      	ldr	r3, [r5, #12]
 800b984:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800b988:	60d3      	str	r3, [r2, #12]
 800b98a:	609a      	str	r2, [r3, #8]
 800b98c:	1f32      	subs	r2, r6, #4
 800b98e:	2a24      	cmp	r2, #36	; 0x24
 800b990:	d837      	bhi.n	800ba02 <_realloc_r+0x17e>
 800b992:	2a13      	cmp	r2, #19
 800b994:	d933      	bls.n	800b9fe <_realloc_r+0x17a>
 800b996:	6823      	ldr	r3, [r4, #0]
 800b998:	60ab      	str	r3, [r5, #8]
 800b99a:	6863      	ldr	r3, [r4, #4]
 800b99c:	60eb      	str	r3, [r5, #12]
 800b99e:	2a1b      	cmp	r2, #27
 800b9a0:	d81b      	bhi.n	800b9da <_realloc_r+0x156>
 800b9a2:	3408      	adds	r4, #8
 800b9a4:	f105 0310 	add.w	r3, r5, #16
 800b9a8:	6822      	ldr	r2, [r4, #0]
 800b9aa:	601a      	str	r2, [r3, #0]
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	605a      	str	r2, [r3, #4]
 800b9b0:	68a2      	ldr	r2, [r4, #8]
 800b9b2:	609a      	str	r2, [r3, #8]
 800b9b4:	eb05 0308 	add.w	r3, r5, r8
 800b9b8:	9a01      	ldr	r2, [sp, #4]
 800b9ba:	eba7 0708 	sub.w	r7, r7, r8
 800b9be:	f047 0701 	orr.w	r7, r7, #1
 800b9c2:	6093      	str	r3, [r2, #8]
 800b9c4:	605f      	str	r7, [r3, #4]
 800b9c6:	686b      	ldr	r3, [r5, #4]
 800b9c8:	f003 0301 	and.w	r3, r3, #1
 800b9cc:	ea43 0308 	orr.w	r3, r3, r8
 800b9d0:	606b      	str	r3, [r5, #4]
 800b9d2:	4648      	mov	r0, r9
 800b9d4:	f7fd f8ca 	bl	8008b6c <__malloc_unlock>
 800b9d8:	e770      	b.n	800b8bc <_realloc_r+0x38>
 800b9da:	68a3      	ldr	r3, [r4, #8]
 800b9dc:	612b      	str	r3, [r5, #16]
 800b9de:	68e3      	ldr	r3, [r4, #12]
 800b9e0:	616b      	str	r3, [r5, #20]
 800b9e2:	2a24      	cmp	r2, #36	; 0x24
 800b9e4:	bf01      	itttt	eq
 800b9e6:	6923      	ldreq	r3, [r4, #16]
 800b9e8:	61ab      	streq	r3, [r5, #24]
 800b9ea:	6962      	ldreq	r2, [r4, #20]
 800b9ec:	61ea      	streq	r2, [r5, #28]
 800b9ee:	bf19      	ittee	ne
 800b9f0:	3410      	addne	r4, #16
 800b9f2:	f105 0318 	addne.w	r3, r5, #24
 800b9f6:	f105 0320 	addeq.w	r3, r5, #32
 800b9fa:	3418      	addeq	r4, #24
 800b9fc:	e7d4      	b.n	800b9a8 <_realloc_r+0x124>
 800b9fe:	465b      	mov	r3, fp
 800ba00:	e7d2      	b.n	800b9a8 <_realloc_r+0x124>
 800ba02:	4621      	mov	r1, r4
 800ba04:	4658      	mov	r0, fp
 800ba06:	f7ff ff23 	bl	800b850 <memmove>
 800ba0a:	e7d3      	b.n	800b9b4 <_realloc_r+0x130>
 800ba0c:	45b8      	cmp	r8, r7
 800ba0e:	dc53      	bgt.n	800bab8 <_realloc_r+0x234>
 800ba10:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800ba14:	4628      	mov	r0, r5
 800ba16:	60da      	str	r2, [r3, #12]
 800ba18:	6093      	str	r3, [r2, #8]
 800ba1a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ba1e:	68eb      	ldr	r3, [r5, #12]
 800ba20:	60d3      	str	r3, [r2, #12]
 800ba22:	609a      	str	r2, [r3, #8]
 800ba24:	1f32      	subs	r2, r6, #4
 800ba26:	2a24      	cmp	r2, #36	; 0x24
 800ba28:	d842      	bhi.n	800bab0 <_realloc_r+0x22c>
 800ba2a:	2a13      	cmp	r2, #19
 800ba2c:	d908      	bls.n	800ba40 <_realloc_r+0x1bc>
 800ba2e:	6823      	ldr	r3, [r4, #0]
 800ba30:	60ab      	str	r3, [r5, #8]
 800ba32:	6863      	ldr	r3, [r4, #4]
 800ba34:	60eb      	str	r3, [r5, #12]
 800ba36:	2a1b      	cmp	r2, #27
 800ba38:	d828      	bhi.n	800ba8c <_realloc_r+0x208>
 800ba3a:	3408      	adds	r4, #8
 800ba3c:	f105 0010 	add.w	r0, r5, #16
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	6003      	str	r3, [r0, #0]
 800ba44:	6863      	ldr	r3, [r4, #4]
 800ba46:	6043      	str	r3, [r0, #4]
 800ba48:	68a3      	ldr	r3, [r4, #8]
 800ba4a:	6083      	str	r3, [r0, #8]
 800ba4c:	686a      	ldr	r2, [r5, #4]
 800ba4e:	eba7 0008 	sub.w	r0, r7, r8
 800ba52:	280f      	cmp	r0, #15
 800ba54:	f002 0201 	and.w	r2, r2, #1
 800ba58:	eb05 0307 	add.w	r3, r5, r7
 800ba5c:	f240 80b1 	bls.w	800bbc2 <_realloc_r+0x33e>
 800ba60:	eb05 0108 	add.w	r1, r5, r8
 800ba64:	ea48 0202 	orr.w	r2, r8, r2
 800ba68:	f040 0001 	orr.w	r0, r0, #1
 800ba6c:	606a      	str	r2, [r5, #4]
 800ba6e:	6048      	str	r0, [r1, #4]
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	f042 0201 	orr.w	r2, r2, #1
 800ba76:	605a      	str	r2, [r3, #4]
 800ba78:	3108      	adds	r1, #8
 800ba7a:	4648      	mov	r0, r9
 800ba7c:	f7fd f932 	bl	8008ce4 <_free_r>
 800ba80:	4648      	mov	r0, r9
 800ba82:	f7fd f873 	bl	8008b6c <__malloc_unlock>
 800ba86:	f105 0b08 	add.w	fp, r5, #8
 800ba8a:	e717      	b.n	800b8bc <_realloc_r+0x38>
 800ba8c:	68a3      	ldr	r3, [r4, #8]
 800ba8e:	612b      	str	r3, [r5, #16]
 800ba90:	68e3      	ldr	r3, [r4, #12]
 800ba92:	616b      	str	r3, [r5, #20]
 800ba94:	2a24      	cmp	r2, #36	; 0x24
 800ba96:	bf01      	itttt	eq
 800ba98:	6923      	ldreq	r3, [r4, #16]
 800ba9a:	61ab      	streq	r3, [r5, #24]
 800ba9c:	6963      	ldreq	r3, [r4, #20]
 800ba9e:	61eb      	streq	r3, [r5, #28]
 800baa0:	bf19      	ittee	ne
 800baa2:	3410      	addne	r4, #16
 800baa4:	f105 0018 	addne.w	r0, r5, #24
 800baa8:	f105 0020 	addeq.w	r0, r5, #32
 800baac:	3418      	addeq	r4, #24
 800baae:	e7c7      	b.n	800ba40 <_realloc_r+0x1bc>
 800bab0:	4621      	mov	r1, r4
 800bab2:	f7ff fecd 	bl	800b850 <memmove>
 800bab6:	e7c9      	b.n	800ba4c <_realloc_r+0x1c8>
 800bab8:	45d8      	cmp	r8, fp
 800baba:	dc31      	bgt.n	800bb20 <_realloc_r+0x29c>
 800babc:	4628      	mov	r0, r5
 800babe:	68eb      	ldr	r3, [r5, #12]
 800bac0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800bac4:	60d3      	str	r3, [r2, #12]
 800bac6:	609a      	str	r2, [r3, #8]
 800bac8:	1f32      	subs	r2, r6, #4
 800baca:	2a24      	cmp	r2, #36	; 0x24
 800bacc:	d824      	bhi.n	800bb18 <_realloc_r+0x294>
 800bace:	2a13      	cmp	r2, #19
 800bad0:	d908      	bls.n	800bae4 <_realloc_r+0x260>
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	60ab      	str	r3, [r5, #8]
 800bad6:	6863      	ldr	r3, [r4, #4]
 800bad8:	60eb      	str	r3, [r5, #12]
 800bada:	2a1b      	cmp	r2, #27
 800badc:	d80a      	bhi.n	800baf4 <_realloc_r+0x270>
 800bade:	3408      	adds	r4, #8
 800bae0:	f105 0010 	add.w	r0, r5, #16
 800bae4:	6823      	ldr	r3, [r4, #0]
 800bae6:	6003      	str	r3, [r0, #0]
 800bae8:	6863      	ldr	r3, [r4, #4]
 800baea:	6043      	str	r3, [r0, #4]
 800baec:	68a3      	ldr	r3, [r4, #8]
 800baee:	6083      	str	r3, [r0, #8]
 800baf0:	465f      	mov	r7, fp
 800baf2:	e7ab      	b.n	800ba4c <_realloc_r+0x1c8>
 800baf4:	68a3      	ldr	r3, [r4, #8]
 800baf6:	612b      	str	r3, [r5, #16]
 800baf8:	68e3      	ldr	r3, [r4, #12]
 800bafa:	616b      	str	r3, [r5, #20]
 800bafc:	2a24      	cmp	r2, #36	; 0x24
 800bafe:	bf01      	itttt	eq
 800bb00:	6923      	ldreq	r3, [r4, #16]
 800bb02:	61ab      	streq	r3, [r5, #24]
 800bb04:	6963      	ldreq	r3, [r4, #20]
 800bb06:	61eb      	streq	r3, [r5, #28]
 800bb08:	bf19      	ittee	ne
 800bb0a:	3410      	addne	r4, #16
 800bb0c:	f105 0018 	addne.w	r0, r5, #24
 800bb10:	f105 0020 	addeq.w	r0, r5, #32
 800bb14:	3418      	addeq	r4, #24
 800bb16:	e7e5      	b.n	800bae4 <_realloc_r+0x260>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	f7ff fe99 	bl	800b850 <memmove>
 800bb1e:	e7e7      	b.n	800baf0 <_realloc_r+0x26c>
 800bb20:	4611      	mov	r1, r2
 800bb22:	4648      	mov	r0, r9
 800bb24:	f7fc fdc4 	bl	80086b0 <_malloc_r>
 800bb28:	4683      	mov	fp, r0
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	f43f af51 	beq.w	800b9d2 <_realloc_r+0x14e>
 800bb30:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800bb34:	f023 0301 	bic.w	r3, r3, #1
 800bb38:	4453      	add	r3, sl
 800bb3a:	f1a0 0208 	sub.w	r2, r0, #8
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d105      	bne.n	800bb4e <_realloc_r+0x2ca>
 800bb42:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800bb46:	f027 0703 	bic.w	r7, r7, #3
 800bb4a:	4437      	add	r7, r6
 800bb4c:	e6fc      	b.n	800b948 <_realloc_r+0xc4>
 800bb4e:	1f32      	subs	r2, r6, #4
 800bb50:	2a24      	cmp	r2, #36	; 0x24
 800bb52:	d830      	bhi.n	800bbb6 <_realloc_r+0x332>
 800bb54:	2a13      	cmp	r2, #19
 800bb56:	d92b      	bls.n	800bbb0 <_realloc_r+0x32c>
 800bb58:	6823      	ldr	r3, [r4, #0]
 800bb5a:	6003      	str	r3, [r0, #0]
 800bb5c:	6863      	ldr	r3, [r4, #4]
 800bb5e:	6043      	str	r3, [r0, #4]
 800bb60:	2a1b      	cmp	r2, #27
 800bb62:	d811      	bhi.n	800bb88 <_realloc_r+0x304>
 800bb64:	f104 0208 	add.w	r2, r4, #8
 800bb68:	f100 0308 	add.w	r3, r0, #8
 800bb6c:	6811      	ldr	r1, [r2, #0]
 800bb6e:	6019      	str	r1, [r3, #0]
 800bb70:	6851      	ldr	r1, [r2, #4]
 800bb72:	6059      	str	r1, [r3, #4]
 800bb74:	6892      	ldr	r2, [r2, #8]
 800bb76:	609a      	str	r2, [r3, #8]
 800bb78:	4621      	mov	r1, r4
 800bb7a:	4648      	mov	r0, r9
 800bb7c:	f7fd f8b2 	bl	8008ce4 <_free_r>
 800bb80:	e727      	b.n	800b9d2 <_realloc_r+0x14e>
 800bb82:	bf00      	nop
 800bb84:	20000498 	.word	0x20000498
 800bb88:	68a3      	ldr	r3, [r4, #8]
 800bb8a:	6083      	str	r3, [r0, #8]
 800bb8c:	68e3      	ldr	r3, [r4, #12]
 800bb8e:	60c3      	str	r3, [r0, #12]
 800bb90:	2a24      	cmp	r2, #36	; 0x24
 800bb92:	bf01      	itttt	eq
 800bb94:	6923      	ldreq	r3, [r4, #16]
 800bb96:	6103      	streq	r3, [r0, #16]
 800bb98:	6961      	ldreq	r1, [r4, #20]
 800bb9a:	6141      	streq	r1, [r0, #20]
 800bb9c:	bf19      	ittee	ne
 800bb9e:	f104 0210 	addne.w	r2, r4, #16
 800bba2:	f100 0310 	addne.w	r3, r0, #16
 800bba6:	f104 0218 	addeq.w	r2, r4, #24
 800bbaa:	f100 0318 	addeq.w	r3, r0, #24
 800bbae:	e7dd      	b.n	800bb6c <_realloc_r+0x2e8>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	e7da      	b.n	800bb6c <_realloc_r+0x2e8>
 800bbb6:	4621      	mov	r1, r4
 800bbb8:	f7ff fe4a 	bl	800b850 <memmove>
 800bbbc:	e7dc      	b.n	800bb78 <_realloc_r+0x2f4>
 800bbbe:	4637      	mov	r7, r6
 800bbc0:	e6c2      	b.n	800b948 <_realloc_r+0xc4>
 800bbc2:	4317      	orrs	r7, r2
 800bbc4:	606f      	str	r7, [r5, #4]
 800bbc6:	685a      	ldr	r2, [r3, #4]
 800bbc8:	f042 0201 	orr.w	r2, r2, #1
 800bbcc:	605a      	str	r2, [r3, #4]
 800bbce:	e757      	b.n	800ba80 <_realloc_r+0x1fc>

0800bbd0 <__sprint_r>:
 800bbd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbd4:	6893      	ldr	r3, [r2, #8]
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	460f      	mov	r7, r1
 800bbda:	4614      	mov	r4, r2
 800bbdc:	b91b      	cbnz	r3, 800bbe6 <__sprint_r+0x16>
 800bbde:	6053      	str	r3, [r2, #4]
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800bbe8:	049d      	lsls	r5, r3, #18
 800bbea:	d520      	bpl.n	800bc2e <__sprint_r+0x5e>
 800bbec:	6815      	ldr	r5, [r2, #0]
 800bbee:	3508      	adds	r5, #8
 800bbf0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800bbf4:	f04f 0900 	mov.w	r9, #0
 800bbf8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800bbfc:	45ca      	cmp	sl, r9
 800bbfe:	dc0b      	bgt.n	800bc18 <__sprint_r+0x48>
 800bc00:	68a3      	ldr	r3, [r4, #8]
 800bc02:	f026 0003 	bic.w	r0, r6, #3
 800bc06:	1a18      	subs	r0, r3, r0
 800bc08:	60a0      	str	r0, [r4, #8]
 800bc0a:	3508      	adds	r5, #8
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d1ef      	bne.n	800bbf0 <__sprint_r+0x20>
 800bc10:	2300      	movs	r3, #0
 800bc12:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800bc16:	e7e4      	b.n	800bbe2 <__sprint_r+0x12>
 800bc18:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800bc1c:	463a      	mov	r2, r7
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f000 fea1 	bl	800c966 <_fputwc_r>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d0f3      	beq.n	800bc10 <__sprint_r+0x40>
 800bc28:	f109 0901 	add.w	r9, r9, #1
 800bc2c:	e7e6      	b.n	800bbfc <__sprint_r+0x2c>
 800bc2e:	f000 fec5 	bl	800c9bc <__sfvwrite_r>
 800bc32:	e7ed      	b.n	800bc10 <__sprint_r+0x40>

0800bc34 <_vfiprintf_r>:
 800bc34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc38:	ed2d 8b02 	vpush	{d8}
 800bc3c:	b0b9      	sub	sp, #228	; 0xe4
 800bc3e:	460f      	mov	r7, r1
 800bc40:	9201      	str	r2, [sp, #4]
 800bc42:	461d      	mov	r5, r3
 800bc44:	461c      	mov	r4, r3
 800bc46:	4681      	mov	r9, r0
 800bc48:	b118      	cbz	r0, 800bc52 <_vfiprintf_r+0x1e>
 800bc4a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800bc4c:	b90b      	cbnz	r3, 800bc52 <_vfiprintf_r+0x1e>
 800bc4e:	f000 fe21 	bl	800c894 <__sinit>
 800bc52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc54:	07d8      	lsls	r0, r3, #31
 800bc56:	d405      	bmi.n	800bc64 <_vfiprintf_r+0x30>
 800bc58:	89bb      	ldrh	r3, [r7, #12]
 800bc5a:	0599      	lsls	r1, r3, #22
 800bc5c:	d402      	bmi.n	800bc64 <_vfiprintf_r+0x30>
 800bc5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bc60:	f7fd f902 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800bc64:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800bc68:	049a      	lsls	r2, r3, #18
 800bc6a:	d406      	bmi.n	800bc7a <_vfiprintf_r+0x46>
 800bc6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bc70:	81bb      	strh	r3, [r7, #12]
 800bc72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bc78:	667b      	str	r3, [r7, #100]	; 0x64
 800bc7a:	89bb      	ldrh	r3, [r7, #12]
 800bc7c:	071e      	lsls	r6, r3, #28
 800bc7e:	d501      	bpl.n	800bc84 <_vfiprintf_r+0x50>
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	b9bb      	cbnz	r3, 800bcb4 <_vfiprintf_r+0x80>
 800bc84:	4639      	mov	r1, r7
 800bc86:	4648      	mov	r0, r9
 800bc88:	f000 fcaa 	bl	800c5e0 <__swsetup_r>
 800bc8c:	b190      	cbz	r0, 800bcb4 <_vfiprintf_r+0x80>
 800bc8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc90:	07d8      	lsls	r0, r3, #31
 800bc92:	d508      	bpl.n	800bca6 <_vfiprintf_r+0x72>
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	9302      	str	r3, [sp, #8]
 800bc9a:	9802      	ldr	r0, [sp, #8]
 800bc9c:	b039      	add	sp, #228	; 0xe4
 800bc9e:	ecbd 8b02 	vpop	{d8}
 800bca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bca6:	89bb      	ldrh	r3, [r7, #12]
 800bca8:	0599      	lsls	r1, r3, #22
 800bcaa:	d4f3      	bmi.n	800bc94 <_vfiprintf_r+0x60>
 800bcac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bcae:	f7fd f8dc 	bl	8008e6a <__retarget_lock_release_recursive>
 800bcb2:	e7ef      	b.n	800bc94 <_vfiprintf_r+0x60>
 800bcb4:	89bb      	ldrh	r3, [r7, #12]
 800bcb6:	f003 021a 	and.w	r2, r3, #26
 800bcba:	2a0a      	cmp	r2, #10
 800bcbc:	d113      	bne.n	800bce6 <_vfiprintf_r+0xb2>
 800bcbe:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800bcc2:	2a00      	cmp	r2, #0
 800bcc4:	db0f      	blt.n	800bce6 <_vfiprintf_r+0xb2>
 800bcc6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcc8:	07d2      	lsls	r2, r2, #31
 800bcca:	d404      	bmi.n	800bcd6 <_vfiprintf_r+0xa2>
 800bccc:	059e      	lsls	r6, r3, #22
 800bcce:	d402      	bmi.n	800bcd6 <_vfiprintf_r+0xa2>
 800bcd0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bcd2:	f7fd f8ca 	bl	8008e6a <__retarget_lock_release_recursive>
 800bcd6:	9a01      	ldr	r2, [sp, #4]
 800bcd8:	462b      	mov	r3, r5
 800bcda:	4639      	mov	r1, r7
 800bcdc:	4648      	mov	r0, r9
 800bcde:	f000 fc31 	bl	800c544 <__sbprintf>
 800bce2:	9002      	str	r0, [sp, #8]
 800bce4:	e7d9      	b.n	800bc9a <_vfiprintf_r+0x66>
 800bce6:	2300      	movs	r3, #0
 800bce8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800bcec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800bcf0:	ae0f      	add	r6, sp, #60	; 0x3c
 800bcf2:	ee08 3a10 	vmov	s16, r3
 800bcf6:	960c      	str	r6, [sp, #48]	; 0x30
 800bcf8:	9307      	str	r3, [sp, #28]
 800bcfa:	9302      	str	r3, [sp, #8]
 800bcfc:	9b01      	ldr	r3, [sp, #4]
 800bcfe:	461d      	mov	r5, r3
 800bd00:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd04:	b10a      	cbz	r2, 800bd0a <_vfiprintf_r+0xd6>
 800bd06:	2a25      	cmp	r2, #37	; 0x25
 800bd08:	d1f9      	bne.n	800bcfe <_vfiprintf_r+0xca>
 800bd0a:	9b01      	ldr	r3, [sp, #4]
 800bd0c:	ebb5 0803 	subs.w	r8, r5, r3
 800bd10:	d00d      	beq.n	800bd2e <_vfiprintf_r+0xfa>
 800bd12:	e9c6 3800 	strd	r3, r8, [r6]
 800bd16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bd18:	4443      	add	r3, r8
 800bd1a:	930e      	str	r3, [sp, #56]	; 0x38
 800bd1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bd1e:	3301      	adds	r3, #1
 800bd20:	2b07      	cmp	r3, #7
 800bd22:	930d      	str	r3, [sp, #52]	; 0x34
 800bd24:	dc75      	bgt.n	800be12 <_vfiprintf_r+0x1de>
 800bd26:	3608      	adds	r6, #8
 800bd28:	9b02      	ldr	r3, [sp, #8]
 800bd2a:	4443      	add	r3, r8
 800bd2c:	9302      	str	r3, [sp, #8]
 800bd2e:	782b      	ldrb	r3, [r5, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 83c8 	beq.w	800c4c6 <_vfiprintf_r+0x892>
 800bd36:	2300      	movs	r3, #0
 800bd38:	f04f 31ff 	mov.w	r1, #4294967295
 800bd3c:	1c6a      	adds	r2, r5, #1
 800bd3e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bd42:	9100      	str	r1, [sp, #0]
 800bd44:	9303      	str	r3, [sp, #12]
 800bd46:	469a      	mov	sl, r3
 800bd48:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bd4c:	9201      	str	r2, [sp, #4]
 800bd4e:	f1a3 0220 	sub.w	r2, r3, #32
 800bd52:	2a5a      	cmp	r2, #90	; 0x5a
 800bd54:	f200 8310 	bhi.w	800c378 <_vfiprintf_r+0x744>
 800bd58:	e8df f012 	tbh	[pc, r2, lsl #1]
 800bd5c:	030e0099 	.word	0x030e0099
 800bd60:	00a1030e 	.word	0x00a1030e
 800bd64:	030e030e 	.word	0x030e030e
 800bd68:	0080030e 	.word	0x0080030e
 800bd6c:	030e030e 	.word	0x030e030e
 800bd70:	00ae00a4 	.word	0x00ae00a4
 800bd74:	00ab030e 	.word	0x00ab030e
 800bd78:	030e00b0 	.word	0x030e00b0
 800bd7c:	00ce00cb 	.word	0x00ce00cb
 800bd80:	00ce00ce 	.word	0x00ce00ce
 800bd84:	00ce00ce 	.word	0x00ce00ce
 800bd88:	00ce00ce 	.word	0x00ce00ce
 800bd8c:	00ce00ce 	.word	0x00ce00ce
 800bd90:	030e030e 	.word	0x030e030e
 800bd94:	030e030e 	.word	0x030e030e
 800bd98:	030e030e 	.word	0x030e030e
 800bd9c:	030e030e 	.word	0x030e030e
 800bda0:	00f8030e 	.word	0x00f8030e
 800bda4:	030e0106 	.word	0x030e0106
 800bda8:	030e030e 	.word	0x030e030e
 800bdac:	030e030e 	.word	0x030e030e
 800bdb0:	030e030e 	.word	0x030e030e
 800bdb4:	030e030e 	.word	0x030e030e
 800bdb8:	014d030e 	.word	0x014d030e
 800bdbc:	030e030e 	.word	0x030e030e
 800bdc0:	0192030e 	.word	0x0192030e
 800bdc4:	0270030e 	.word	0x0270030e
 800bdc8:	030e030e 	.word	0x030e030e
 800bdcc:	030e028e 	.word	0x030e028e
 800bdd0:	030e030e 	.word	0x030e030e
 800bdd4:	030e030e 	.word	0x030e030e
 800bdd8:	030e030e 	.word	0x030e030e
 800bddc:	030e030e 	.word	0x030e030e
 800bde0:	00f8030e 	.word	0x00f8030e
 800bde4:	030e0108 	.word	0x030e0108
 800bde8:	030e030e 	.word	0x030e030e
 800bdec:	010800de 	.word	0x010800de
 800bdf0:	030e00f2 	.word	0x030e00f2
 800bdf4:	030e00eb 	.word	0x030e00eb
 800bdf8:	014f0130 	.word	0x014f0130
 800bdfc:	00f20182 	.word	0x00f20182
 800be00:	0192030e 	.word	0x0192030e
 800be04:	02720097 	.word	0x02720097
 800be08:	030e030e 	.word	0x030e030e
 800be0c:	030e0065 	.word	0x030e0065
 800be10:	0097      	.short	0x0097
 800be12:	aa0c      	add	r2, sp, #48	; 0x30
 800be14:	4639      	mov	r1, r7
 800be16:	4648      	mov	r0, r9
 800be18:	f7ff feda 	bl	800bbd0 <__sprint_r>
 800be1c:	2800      	cmp	r0, #0
 800be1e:	f040 8331 	bne.w	800c484 <_vfiprintf_r+0x850>
 800be22:	ae0f      	add	r6, sp, #60	; 0x3c
 800be24:	e780      	b.n	800bd28 <_vfiprintf_r+0xf4>
 800be26:	4a95      	ldr	r2, [pc, #596]	; (800c07c <_vfiprintf_r+0x448>)
 800be28:	9205      	str	r2, [sp, #20]
 800be2a:	f01a 0f20 	tst.w	sl, #32
 800be2e:	f000 8225 	beq.w	800c27c <_vfiprintf_r+0x648>
 800be32:	3407      	adds	r4, #7
 800be34:	f024 0b07 	bic.w	fp, r4, #7
 800be38:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800be3c:	f01a 0f01 	tst.w	sl, #1
 800be40:	d009      	beq.n	800be56 <_vfiprintf_r+0x222>
 800be42:	ea54 0205 	orrs.w	r2, r4, r5
 800be46:	bf1f      	itttt	ne
 800be48:	2230      	movne	r2, #48	; 0x30
 800be4a:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800be4e:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800be52:	f04a 0a02 	orrne.w	sl, sl, #2
 800be56:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800be5a:	e10d      	b.n	800c078 <_vfiprintf_r+0x444>
 800be5c:	4648      	mov	r0, r9
 800be5e:	f7ff f887 	bl	800af70 <_localeconv_r>
 800be62:	6843      	ldr	r3, [r0, #4]
 800be64:	4618      	mov	r0, r3
 800be66:	ee08 3a10 	vmov	s16, r3
 800be6a:	f7f4 f9b9 	bl	80001e0 <strlen>
 800be6e:	9007      	str	r0, [sp, #28]
 800be70:	4648      	mov	r0, r9
 800be72:	f7ff f87d 	bl	800af70 <_localeconv_r>
 800be76:	6883      	ldr	r3, [r0, #8]
 800be78:	9306      	str	r3, [sp, #24]
 800be7a:	9b07      	ldr	r3, [sp, #28]
 800be7c:	b12b      	cbz	r3, 800be8a <_vfiprintf_r+0x256>
 800be7e:	9b06      	ldr	r3, [sp, #24]
 800be80:	b11b      	cbz	r3, 800be8a <_vfiprintf_r+0x256>
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	b10b      	cbz	r3, 800be8a <_vfiprintf_r+0x256>
 800be86:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800be8a:	9a01      	ldr	r2, [sp, #4]
 800be8c:	e75c      	b.n	800bd48 <_vfiprintf_r+0x114>
 800be8e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1f9      	bne.n	800be8a <_vfiprintf_r+0x256>
 800be96:	2320      	movs	r3, #32
 800be98:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800be9c:	e7f5      	b.n	800be8a <_vfiprintf_r+0x256>
 800be9e:	f04a 0a01 	orr.w	sl, sl, #1
 800bea2:	e7f2      	b.n	800be8a <_vfiprintf_r+0x256>
 800bea4:	f854 3b04 	ldr.w	r3, [r4], #4
 800bea8:	9303      	str	r3, [sp, #12]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	daed      	bge.n	800be8a <_vfiprintf_r+0x256>
 800beae:	425b      	negs	r3, r3
 800beb0:	9303      	str	r3, [sp, #12]
 800beb2:	f04a 0a04 	orr.w	sl, sl, #4
 800beb6:	e7e8      	b.n	800be8a <_vfiprintf_r+0x256>
 800beb8:	232b      	movs	r3, #43	; 0x2b
 800beba:	e7ed      	b.n	800be98 <_vfiprintf_r+0x264>
 800bebc:	9a01      	ldr	r2, [sp, #4]
 800bebe:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bec2:	2b2a      	cmp	r3, #42	; 0x2a
 800bec4:	d112      	bne.n	800beec <_vfiprintf_r+0x2b8>
 800bec6:	f854 0b04 	ldr.w	r0, [r4], #4
 800beca:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800bece:	e9cd 3200 	strd	r3, r2, [sp]
 800bed2:	e7da      	b.n	800be8a <_vfiprintf_r+0x256>
 800bed4:	9b00      	ldr	r3, [sp, #0]
 800bed6:	200a      	movs	r0, #10
 800bed8:	fb00 1303 	mla	r3, r0, r3, r1
 800bedc:	9300      	str	r3, [sp, #0]
 800bede:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bee2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bee6:	2909      	cmp	r1, #9
 800bee8:	d9f4      	bls.n	800bed4 <_vfiprintf_r+0x2a0>
 800beea:	e72f      	b.n	800bd4c <_vfiprintf_r+0x118>
 800beec:	2100      	movs	r1, #0
 800beee:	9100      	str	r1, [sp, #0]
 800bef0:	e7f7      	b.n	800bee2 <_vfiprintf_r+0x2ae>
 800bef2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800bef6:	e7c8      	b.n	800be8a <_vfiprintf_r+0x256>
 800bef8:	2100      	movs	r1, #0
 800befa:	9a01      	ldr	r2, [sp, #4]
 800befc:	9103      	str	r1, [sp, #12]
 800befe:	9903      	ldr	r1, [sp, #12]
 800bf00:	3b30      	subs	r3, #48	; 0x30
 800bf02:	200a      	movs	r0, #10
 800bf04:	fb00 3301 	mla	r3, r0, r1, r3
 800bf08:	9303      	str	r3, [sp, #12]
 800bf0a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800bf0e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800bf12:	2909      	cmp	r1, #9
 800bf14:	d9f3      	bls.n	800befe <_vfiprintf_r+0x2ca>
 800bf16:	e719      	b.n	800bd4c <_vfiprintf_r+0x118>
 800bf18:	9b01      	ldr	r3, [sp, #4]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	2b68      	cmp	r3, #104	; 0x68
 800bf1e:	bf01      	itttt	eq
 800bf20:	9b01      	ldreq	r3, [sp, #4]
 800bf22:	3301      	addeq	r3, #1
 800bf24:	9301      	streq	r3, [sp, #4]
 800bf26:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800bf2a:	bf18      	it	ne
 800bf2c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800bf30:	e7ab      	b.n	800be8a <_vfiprintf_r+0x256>
 800bf32:	9b01      	ldr	r3, [sp, #4]
 800bf34:	781b      	ldrb	r3, [r3, #0]
 800bf36:	2b6c      	cmp	r3, #108	; 0x6c
 800bf38:	d105      	bne.n	800bf46 <_vfiprintf_r+0x312>
 800bf3a:	9b01      	ldr	r3, [sp, #4]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	f04a 0a20 	orr.w	sl, sl, #32
 800bf44:	e7a1      	b.n	800be8a <_vfiprintf_r+0x256>
 800bf46:	f04a 0a10 	orr.w	sl, sl, #16
 800bf4a:	e79e      	b.n	800be8a <_vfiprintf_r+0x256>
 800bf4c:	46a3      	mov	fp, r4
 800bf4e:	2100      	movs	r1, #0
 800bf50:	f85b 3b04 	ldr.w	r3, [fp], #4
 800bf54:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800bf58:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800bf5c:	2301      	movs	r3, #1
 800bf5e:	9300      	str	r3, [sp, #0]
 800bf60:	460d      	mov	r5, r1
 800bf62:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800bf66:	e0a0      	b.n	800c0aa <_vfiprintf_r+0x476>
 800bf68:	f04a 0a10 	orr.w	sl, sl, #16
 800bf6c:	f01a 0f20 	tst.w	sl, #32
 800bf70:	d011      	beq.n	800bf96 <_vfiprintf_r+0x362>
 800bf72:	3407      	adds	r4, #7
 800bf74:	f024 0b07 	bic.w	fp, r4, #7
 800bf78:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800bf7c:	2c00      	cmp	r4, #0
 800bf7e:	f175 0300 	sbcs.w	r3, r5, #0
 800bf82:	da06      	bge.n	800bf92 <_vfiprintf_r+0x35e>
 800bf84:	4264      	negs	r4, r4
 800bf86:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800bf8a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800bf8e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800bf92:	2301      	movs	r3, #1
 800bf94:	e03f      	b.n	800c016 <_vfiprintf_r+0x3e2>
 800bf96:	f01a 0f10 	tst.w	sl, #16
 800bf9a:	f104 0b04 	add.w	fp, r4, #4
 800bf9e:	d002      	beq.n	800bfa6 <_vfiprintf_r+0x372>
 800bfa0:	6824      	ldr	r4, [r4, #0]
 800bfa2:	17e5      	asrs	r5, r4, #31
 800bfa4:	e7ea      	b.n	800bf7c <_vfiprintf_r+0x348>
 800bfa6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bfaa:	6824      	ldr	r4, [r4, #0]
 800bfac:	d001      	beq.n	800bfb2 <_vfiprintf_r+0x37e>
 800bfae:	b224      	sxth	r4, r4
 800bfb0:	e7f7      	b.n	800bfa2 <_vfiprintf_r+0x36e>
 800bfb2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bfb6:	bf18      	it	ne
 800bfb8:	b264      	sxtbne	r4, r4
 800bfba:	e7f2      	b.n	800bfa2 <_vfiprintf_r+0x36e>
 800bfbc:	f01a 0f20 	tst.w	sl, #32
 800bfc0:	f854 3b04 	ldr.w	r3, [r4], #4
 800bfc4:	d005      	beq.n	800bfd2 <_vfiprintf_r+0x39e>
 800bfc6:	9a02      	ldr	r2, [sp, #8]
 800bfc8:	4610      	mov	r0, r2
 800bfca:	17d1      	asrs	r1, r2, #31
 800bfcc:	e9c3 0100 	strd	r0, r1, [r3]
 800bfd0:	e694      	b.n	800bcfc <_vfiprintf_r+0xc8>
 800bfd2:	f01a 0f10 	tst.w	sl, #16
 800bfd6:	d002      	beq.n	800bfde <_vfiprintf_r+0x3aa>
 800bfd8:	9a02      	ldr	r2, [sp, #8]
 800bfda:	601a      	str	r2, [r3, #0]
 800bfdc:	e68e      	b.n	800bcfc <_vfiprintf_r+0xc8>
 800bfde:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800bfe2:	d002      	beq.n	800bfea <_vfiprintf_r+0x3b6>
 800bfe4:	9a02      	ldr	r2, [sp, #8]
 800bfe6:	801a      	strh	r2, [r3, #0]
 800bfe8:	e688      	b.n	800bcfc <_vfiprintf_r+0xc8>
 800bfea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800bfee:	d0f3      	beq.n	800bfd8 <_vfiprintf_r+0x3a4>
 800bff0:	9a02      	ldr	r2, [sp, #8]
 800bff2:	701a      	strb	r2, [r3, #0]
 800bff4:	e682      	b.n	800bcfc <_vfiprintf_r+0xc8>
 800bff6:	f04a 0a10 	orr.w	sl, sl, #16
 800bffa:	f01a 0f20 	tst.w	sl, #32
 800bffe:	d01d      	beq.n	800c03c <_vfiprintf_r+0x408>
 800c000:	3407      	adds	r4, #7
 800c002:	f024 0b07 	bic.w	fp, r4, #7
 800c006:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c00a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800c00e:	2300      	movs	r3, #0
 800c010:	2200      	movs	r2, #0
 800c012:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800c016:	9a00      	ldr	r2, [sp, #0]
 800c018:	3201      	adds	r2, #1
 800c01a:	f000 8261 	beq.w	800c4e0 <_vfiprintf_r+0x8ac>
 800c01e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800c022:	9204      	str	r2, [sp, #16]
 800c024:	ea54 0205 	orrs.w	r2, r4, r5
 800c028:	f040 8260 	bne.w	800c4ec <_vfiprintf_r+0x8b8>
 800c02c:	9a00      	ldr	r2, [sp, #0]
 800c02e:	2a00      	cmp	r2, #0
 800c030:	f000 8197 	beq.w	800c362 <_vfiprintf_r+0x72e>
 800c034:	2b01      	cmp	r3, #1
 800c036:	f040 825c 	bne.w	800c4f2 <_vfiprintf_r+0x8be>
 800c03a:	e135      	b.n	800c2a8 <_vfiprintf_r+0x674>
 800c03c:	f01a 0f10 	tst.w	sl, #16
 800c040:	f104 0b04 	add.w	fp, r4, #4
 800c044:	d001      	beq.n	800c04a <_vfiprintf_r+0x416>
 800c046:	6824      	ldr	r4, [r4, #0]
 800c048:	e003      	b.n	800c052 <_vfiprintf_r+0x41e>
 800c04a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c04e:	d002      	beq.n	800c056 <_vfiprintf_r+0x422>
 800c050:	8824      	ldrh	r4, [r4, #0]
 800c052:	2500      	movs	r5, #0
 800c054:	e7d9      	b.n	800c00a <_vfiprintf_r+0x3d6>
 800c056:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c05a:	d0f4      	beq.n	800c046 <_vfiprintf_r+0x412>
 800c05c:	7824      	ldrb	r4, [r4, #0]
 800c05e:	e7f8      	b.n	800c052 <_vfiprintf_r+0x41e>
 800c060:	46a3      	mov	fp, r4
 800c062:	f647 0330 	movw	r3, #30768	; 0x7830
 800c066:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800c06a:	f85b 4b04 	ldr.w	r4, [fp], #4
 800c06e:	4b03      	ldr	r3, [pc, #12]	; (800c07c <_vfiprintf_r+0x448>)
 800c070:	9305      	str	r3, [sp, #20]
 800c072:	2500      	movs	r5, #0
 800c074:	f04a 0a02 	orr.w	sl, sl, #2
 800c078:	2302      	movs	r3, #2
 800c07a:	e7c9      	b.n	800c010 <_vfiprintf_r+0x3dc>
 800c07c:	0800d1a0 	.word	0x0800d1a0
 800c080:	9b00      	ldr	r3, [sp, #0]
 800c082:	46a3      	mov	fp, r4
 800c084:	2500      	movs	r5, #0
 800c086:	1c5c      	adds	r4, r3, #1
 800c088:	f85b 8b04 	ldr.w	r8, [fp], #4
 800c08c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800c090:	f000 80cf 	beq.w	800c232 <_vfiprintf_r+0x5fe>
 800c094:	461a      	mov	r2, r3
 800c096:	4629      	mov	r1, r5
 800c098:	4640      	mov	r0, r8
 800c09a:	f7f4 f8a9 	bl	80001f0 <memchr>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f000 8174 	beq.w	800c38c <_vfiprintf_r+0x758>
 800c0a4:	eba0 0308 	sub.w	r3, r0, r8
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	9b00      	ldr	r3, [sp, #0]
 800c0ac:	42ab      	cmp	r3, r5
 800c0ae:	bfb8      	it	lt
 800c0b0:	462b      	movlt	r3, r5
 800c0b2:	9304      	str	r3, [sp, #16]
 800c0b4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800c0b8:	b113      	cbz	r3, 800c0c0 <_vfiprintf_r+0x48c>
 800c0ba:	9b04      	ldr	r3, [sp, #16]
 800c0bc:	3301      	adds	r3, #1
 800c0be:	9304      	str	r3, [sp, #16]
 800c0c0:	f01a 0302 	ands.w	r3, sl, #2
 800c0c4:	9308      	str	r3, [sp, #32]
 800c0c6:	bf1e      	ittt	ne
 800c0c8:	9b04      	ldrne	r3, [sp, #16]
 800c0ca:	3302      	addne	r3, #2
 800c0cc:	9304      	strne	r3, [sp, #16]
 800c0ce:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800c0d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c0d4:	d11f      	bne.n	800c116 <_vfiprintf_r+0x4e2>
 800c0d6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c0da:	1a9c      	subs	r4, r3, r2
 800c0dc:	2c00      	cmp	r4, #0
 800c0de:	dd1a      	ble.n	800c116 <_vfiprintf_r+0x4e2>
 800c0e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800c0e4:	48b9      	ldr	r0, [pc, #740]	; (800c3cc <_vfiprintf_r+0x798>)
 800c0e6:	6030      	str	r0, [r6, #0]
 800c0e8:	2c10      	cmp	r4, #16
 800c0ea:	f103 0301 	add.w	r3, r3, #1
 800c0ee:	f106 0108 	add.w	r1, r6, #8
 800c0f2:	f300 814d 	bgt.w	800c390 <_vfiprintf_r+0x75c>
 800c0f6:	6074      	str	r4, [r6, #4]
 800c0f8:	2b07      	cmp	r3, #7
 800c0fa:	4414      	add	r4, r2
 800c0fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c100:	f340 8158 	ble.w	800c3b4 <_vfiprintf_r+0x780>
 800c104:	aa0c      	add	r2, sp, #48	; 0x30
 800c106:	4639      	mov	r1, r7
 800c108:	4648      	mov	r0, r9
 800c10a:	f7ff fd61 	bl	800bbd0 <__sprint_r>
 800c10e:	2800      	cmp	r0, #0
 800c110:	f040 81b8 	bne.w	800c484 <_vfiprintf_r+0x850>
 800c114:	ae0f      	add	r6, sp, #60	; 0x3c
 800c116:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800c11a:	b173      	cbz	r3, 800c13a <_vfiprintf_r+0x506>
 800c11c:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800c120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c122:	6032      	str	r2, [r6, #0]
 800c124:	2201      	movs	r2, #1
 800c126:	6072      	str	r2, [r6, #4]
 800c128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c12a:	3301      	adds	r3, #1
 800c12c:	3201      	adds	r2, #1
 800c12e:	2b07      	cmp	r3, #7
 800c130:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c134:	f300 8140 	bgt.w	800c3b8 <_vfiprintf_r+0x784>
 800c138:	3608      	adds	r6, #8
 800c13a:	9b08      	ldr	r3, [sp, #32]
 800c13c:	b16b      	cbz	r3, 800c15a <_vfiprintf_r+0x526>
 800c13e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c140:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c142:	6032      	str	r2, [r6, #0]
 800c144:	2202      	movs	r2, #2
 800c146:	6072      	str	r2, [r6, #4]
 800c148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c14a:	3301      	adds	r3, #1
 800c14c:	3202      	adds	r2, #2
 800c14e:	2b07      	cmp	r3, #7
 800c150:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c154:	f300 8140 	bgt.w	800c3d8 <_vfiprintf_r+0x7a4>
 800c158:	3608      	adds	r6, #8
 800c15a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c15c:	2b80      	cmp	r3, #128	; 0x80
 800c15e:	d11f      	bne.n	800c1a0 <_vfiprintf_r+0x56c>
 800c160:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c164:	1a9c      	subs	r4, r3, r2
 800c166:	2c00      	cmp	r4, #0
 800c168:	dd1a      	ble.n	800c1a0 <_vfiprintf_r+0x56c>
 800c16a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800c16e:	4898      	ldr	r0, [pc, #608]	; (800c3d0 <_vfiprintf_r+0x79c>)
 800c170:	6030      	str	r0, [r6, #0]
 800c172:	2c10      	cmp	r4, #16
 800c174:	f103 0301 	add.w	r3, r3, #1
 800c178:	f106 0108 	add.w	r1, r6, #8
 800c17c:	f300 8135 	bgt.w	800c3ea <_vfiprintf_r+0x7b6>
 800c180:	6074      	str	r4, [r6, #4]
 800c182:	2b07      	cmp	r3, #7
 800c184:	4414      	add	r4, r2
 800c186:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c18a:	f340 8140 	ble.w	800c40e <_vfiprintf_r+0x7da>
 800c18e:	aa0c      	add	r2, sp, #48	; 0x30
 800c190:	4639      	mov	r1, r7
 800c192:	4648      	mov	r0, r9
 800c194:	f7ff fd1c 	bl	800bbd0 <__sprint_r>
 800c198:	2800      	cmp	r0, #0
 800c19a:	f040 8173 	bne.w	800c484 <_vfiprintf_r+0x850>
 800c19e:	ae0f      	add	r6, sp, #60	; 0x3c
 800c1a0:	9b00      	ldr	r3, [sp, #0]
 800c1a2:	1aec      	subs	r4, r5, r3
 800c1a4:	2c00      	cmp	r4, #0
 800c1a6:	dd1a      	ble.n	800c1de <_vfiprintf_r+0x5aa>
 800c1a8:	4d89      	ldr	r5, [pc, #548]	; (800c3d0 <_vfiprintf_r+0x79c>)
 800c1aa:	6035      	str	r5, [r6, #0]
 800c1ac:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800c1b0:	2c10      	cmp	r4, #16
 800c1b2:	f103 0301 	add.w	r3, r3, #1
 800c1b6:	f106 0208 	add.w	r2, r6, #8
 800c1ba:	f300 812a 	bgt.w	800c412 <_vfiprintf_r+0x7de>
 800c1be:	6074      	str	r4, [r6, #4]
 800c1c0:	2b07      	cmp	r3, #7
 800c1c2:	440c      	add	r4, r1
 800c1c4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800c1c8:	f340 8134 	ble.w	800c434 <_vfiprintf_r+0x800>
 800c1cc:	aa0c      	add	r2, sp, #48	; 0x30
 800c1ce:	4639      	mov	r1, r7
 800c1d0:	4648      	mov	r0, r9
 800c1d2:	f7ff fcfd 	bl	800bbd0 <__sprint_r>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	f040 8154 	bne.w	800c484 <_vfiprintf_r+0x850>
 800c1dc:	ae0f      	add	r6, sp, #60	; 0x3c
 800c1de:	9b00      	ldr	r3, [sp, #0]
 800c1e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800c1e2:	6073      	str	r3, [r6, #4]
 800c1e4:	4418      	add	r0, r3
 800c1e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1e8:	f8c6 8000 	str.w	r8, [r6]
 800c1ec:	3301      	adds	r3, #1
 800c1ee:	2b07      	cmp	r3, #7
 800c1f0:	900e      	str	r0, [sp, #56]	; 0x38
 800c1f2:	930d      	str	r3, [sp, #52]	; 0x34
 800c1f4:	f300 8120 	bgt.w	800c438 <_vfiprintf_r+0x804>
 800c1f8:	f106 0308 	add.w	r3, r6, #8
 800c1fc:	f01a 0f04 	tst.w	sl, #4
 800c200:	f040 8122 	bne.w	800c448 <_vfiprintf_r+0x814>
 800c204:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c208:	9904      	ldr	r1, [sp, #16]
 800c20a:	428a      	cmp	r2, r1
 800c20c:	bfac      	ite	ge
 800c20e:	189b      	addge	r3, r3, r2
 800c210:	185b      	addlt	r3, r3, r1
 800c212:	9302      	str	r3, [sp, #8]
 800c214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c216:	b13b      	cbz	r3, 800c228 <_vfiprintf_r+0x5f4>
 800c218:	aa0c      	add	r2, sp, #48	; 0x30
 800c21a:	4639      	mov	r1, r7
 800c21c:	4648      	mov	r0, r9
 800c21e:	f7ff fcd7 	bl	800bbd0 <__sprint_r>
 800c222:	2800      	cmp	r0, #0
 800c224:	f040 812e 	bne.w	800c484 <_vfiprintf_r+0x850>
 800c228:	2300      	movs	r3, #0
 800c22a:	930d      	str	r3, [sp, #52]	; 0x34
 800c22c:	465c      	mov	r4, fp
 800c22e:	ae0f      	add	r6, sp, #60	; 0x3c
 800c230:	e564      	b.n	800bcfc <_vfiprintf_r+0xc8>
 800c232:	4640      	mov	r0, r8
 800c234:	f7f3 ffd4 	bl	80001e0 <strlen>
 800c238:	9000      	str	r0, [sp, #0]
 800c23a:	e736      	b.n	800c0aa <_vfiprintf_r+0x476>
 800c23c:	f04a 0a10 	orr.w	sl, sl, #16
 800c240:	f01a 0f20 	tst.w	sl, #32
 800c244:	d006      	beq.n	800c254 <_vfiprintf_r+0x620>
 800c246:	3407      	adds	r4, #7
 800c248:	f024 0b07 	bic.w	fp, r4, #7
 800c24c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800c250:	2301      	movs	r3, #1
 800c252:	e6dd      	b.n	800c010 <_vfiprintf_r+0x3dc>
 800c254:	f01a 0f10 	tst.w	sl, #16
 800c258:	f104 0b04 	add.w	fp, r4, #4
 800c25c:	d001      	beq.n	800c262 <_vfiprintf_r+0x62e>
 800c25e:	6824      	ldr	r4, [r4, #0]
 800c260:	e003      	b.n	800c26a <_vfiprintf_r+0x636>
 800c262:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c266:	d002      	beq.n	800c26e <_vfiprintf_r+0x63a>
 800c268:	8824      	ldrh	r4, [r4, #0]
 800c26a:	2500      	movs	r5, #0
 800c26c:	e7f0      	b.n	800c250 <_vfiprintf_r+0x61c>
 800c26e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c272:	d0f4      	beq.n	800c25e <_vfiprintf_r+0x62a>
 800c274:	7824      	ldrb	r4, [r4, #0]
 800c276:	e7f8      	b.n	800c26a <_vfiprintf_r+0x636>
 800c278:	4a56      	ldr	r2, [pc, #344]	; (800c3d4 <_vfiprintf_r+0x7a0>)
 800c27a:	e5d5      	b.n	800be28 <_vfiprintf_r+0x1f4>
 800c27c:	f01a 0f10 	tst.w	sl, #16
 800c280:	f104 0b04 	add.w	fp, r4, #4
 800c284:	d001      	beq.n	800c28a <_vfiprintf_r+0x656>
 800c286:	6824      	ldr	r4, [r4, #0]
 800c288:	e003      	b.n	800c292 <_vfiprintf_r+0x65e>
 800c28a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800c28e:	d002      	beq.n	800c296 <_vfiprintf_r+0x662>
 800c290:	8824      	ldrh	r4, [r4, #0]
 800c292:	2500      	movs	r5, #0
 800c294:	e5d2      	b.n	800be3c <_vfiprintf_r+0x208>
 800c296:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800c29a:	d0f4      	beq.n	800c286 <_vfiprintf_r+0x652>
 800c29c:	7824      	ldrb	r4, [r4, #0]
 800c29e:	e7f8      	b.n	800c292 <_vfiprintf_r+0x65e>
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	bf08      	it	eq
 800c2a4:	2c0a      	cmpeq	r4, #10
 800c2a6:	d205      	bcs.n	800c2b4 <_vfiprintf_r+0x680>
 800c2a8:	3430      	adds	r4, #48	; 0x30
 800c2aa:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800c2ae:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800c2b2:	e13c      	b.n	800c52e <_vfiprintf_r+0x8fa>
 800c2b4:	ab38      	add	r3, sp, #224	; 0xe0
 800c2b6:	9308      	str	r3, [sp, #32]
 800c2b8:	9b04      	ldr	r3, [sp, #16]
 800c2ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c2be:	f04f 0a00 	mov.w	sl, #0
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	9b08      	ldr	r3, [sp, #32]
 800c2c6:	220a      	movs	r2, #10
 800c2c8:	f103 38ff 	add.w	r8, r3, #4294967295
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	4629      	mov	r1, r5
 800c2d2:	f7f4 fcc1 	bl	8000c58 <__aeabi_uldivmod>
 800c2d6:	9b08      	ldr	r3, [sp, #32]
 800c2d8:	3230      	adds	r2, #48	; 0x30
 800c2da:	f803 2c01 	strb.w	r2, [r3, #-1]
 800c2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2e0:	f10a 0a01 	add.w	sl, sl, #1
 800c2e4:	b1db      	cbz	r3, 800c31e <_vfiprintf_r+0x6ea>
 800c2e6:	9b06      	ldr	r3, [sp, #24]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	4553      	cmp	r3, sl
 800c2ec:	d117      	bne.n	800c31e <_vfiprintf_r+0x6ea>
 800c2ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800c2f2:	d014      	beq.n	800c31e <_vfiprintf_r+0x6ea>
 800c2f4:	2d00      	cmp	r5, #0
 800c2f6:	bf08      	it	eq
 800c2f8:	2c0a      	cmpeq	r4, #10
 800c2fa:	d310      	bcc.n	800c31e <_vfiprintf_r+0x6ea>
 800c2fc:	9b07      	ldr	r3, [sp, #28]
 800c2fe:	eba8 0803 	sub.w	r8, r8, r3
 800c302:	461a      	mov	r2, r3
 800c304:	ee18 1a10 	vmov	r1, s16
 800c308:	4640      	mov	r0, r8
 800c30a:	f7ff f99d 	bl	800b648 <strncpy>
 800c30e:	9b06      	ldr	r3, [sp, #24]
 800c310:	785b      	ldrb	r3, [r3, #1]
 800c312:	b1a3      	cbz	r3, 800c33e <_vfiprintf_r+0x70a>
 800c314:	9b06      	ldr	r3, [sp, #24]
 800c316:	3301      	adds	r3, #1
 800c318:	9306      	str	r3, [sp, #24]
 800c31a:	f04f 0a00 	mov.w	sl, #0
 800c31e:	220a      	movs	r2, #10
 800c320:	2300      	movs	r3, #0
 800c322:	4620      	mov	r0, r4
 800c324:	4629      	mov	r1, r5
 800c326:	f7f4 fc97 	bl	8000c58 <__aeabi_uldivmod>
 800c32a:	2d00      	cmp	r5, #0
 800c32c:	bf08      	it	eq
 800c32e:	2c0a      	cmpeq	r4, #10
 800c330:	f0c0 80fd 	bcc.w	800c52e <_vfiprintf_r+0x8fa>
 800c334:	4604      	mov	r4, r0
 800c336:	460d      	mov	r5, r1
 800c338:	f8cd 8020 	str.w	r8, [sp, #32]
 800c33c:	e7c2      	b.n	800c2c4 <_vfiprintf_r+0x690>
 800c33e:	469a      	mov	sl, r3
 800c340:	e7ed      	b.n	800c31e <_vfiprintf_r+0x6ea>
 800c342:	9a05      	ldr	r2, [sp, #20]
 800c344:	f004 030f 	and.w	r3, r4, #15
 800c348:	5cd3      	ldrb	r3, [r2, r3]
 800c34a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c34e:	0923      	lsrs	r3, r4, #4
 800c350:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800c354:	092a      	lsrs	r2, r5, #4
 800c356:	461c      	mov	r4, r3
 800c358:	4615      	mov	r5, r2
 800c35a:	ea54 0305 	orrs.w	r3, r4, r5
 800c35e:	d1f0      	bne.n	800c342 <_vfiprintf_r+0x70e>
 800c360:	e0e5      	b.n	800c52e <_vfiprintf_r+0x8fa>
 800c362:	b933      	cbnz	r3, 800c372 <_vfiprintf_r+0x73e>
 800c364:	f01a 0f01 	tst.w	sl, #1
 800c368:	d003      	beq.n	800c372 <_vfiprintf_r+0x73e>
 800c36a:	2330      	movs	r3, #48	; 0x30
 800c36c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800c370:	e79d      	b.n	800c2ae <_vfiprintf_r+0x67a>
 800c372:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800c376:	e0da      	b.n	800c52e <_vfiprintf_r+0x8fa>
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 80a4 	beq.w	800c4c6 <_vfiprintf_r+0x892>
 800c37e:	2100      	movs	r1, #0
 800c380:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800c384:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800c388:	46a3      	mov	fp, r4
 800c38a:	e5e7      	b.n	800bf5c <_vfiprintf_r+0x328>
 800c38c:	4605      	mov	r5, r0
 800c38e:	e68c      	b.n	800c0aa <_vfiprintf_r+0x476>
 800c390:	2010      	movs	r0, #16
 800c392:	4402      	add	r2, r0
 800c394:	2b07      	cmp	r3, #7
 800c396:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c39a:	6070      	str	r0, [r6, #4]
 800c39c:	dd07      	ble.n	800c3ae <_vfiprintf_r+0x77a>
 800c39e:	aa0c      	add	r2, sp, #48	; 0x30
 800c3a0:	4639      	mov	r1, r7
 800c3a2:	4648      	mov	r0, r9
 800c3a4:	f7ff fc14 	bl	800bbd0 <__sprint_r>
 800c3a8:	2800      	cmp	r0, #0
 800c3aa:	d16b      	bne.n	800c484 <_vfiprintf_r+0x850>
 800c3ac:	a90f      	add	r1, sp, #60	; 0x3c
 800c3ae:	3c10      	subs	r4, #16
 800c3b0:	460e      	mov	r6, r1
 800c3b2:	e695      	b.n	800c0e0 <_vfiprintf_r+0x4ac>
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	e6ae      	b.n	800c116 <_vfiprintf_r+0x4e2>
 800c3b8:	aa0c      	add	r2, sp, #48	; 0x30
 800c3ba:	4639      	mov	r1, r7
 800c3bc:	4648      	mov	r0, r9
 800c3be:	f7ff fc07 	bl	800bbd0 <__sprint_r>
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	d15e      	bne.n	800c484 <_vfiprintf_r+0x850>
 800c3c6:	ae0f      	add	r6, sp, #60	; 0x3c
 800c3c8:	e6b7      	b.n	800c13a <_vfiprintf_r+0x506>
 800c3ca:	bf00      	nop
 800c3cc:	0800d40a 	.word	0x0800d40a
 800c3d0:	0800d41a 	.word	0x0800d41a
 800c3d4:	0800d1b1 	.word	0x0800d1b1
 800c3d8:	aa0c      	add	r2, sp, #48	; 0x30
 800c3da:	4639      	mov	r1, r7
 800c3dc:	4648      	mov	r0, r9
 800c3de:	f7ff fbf7 	bl	800bbd0 <__sprint_r>
 800c3e2:	2800      	cmp	r0, #0
 800c3e4:	d14e      	bne.n	800c484 <_vfiprintf_r+0x850>
 800c3e6:	ae0f      	add	r6, sp, #60	; 0x3c
 800c3e8:	e6b7      	b.n	800c15a <_vfiprintf_r+0x526>
 800c3ea:	2010      	movs	r0, #16
 800c3ec:	4402      	add	r2, r0
 800c3ee:	2b07      	cmp	r3, #7
 800c3f0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800c3f4:	6070      	str	r0, [r6, #4]
 800c3f6:	dd07      	ble.n	800c408 <_vfiprintf_r+0x7d4>
 800c3f8:	aa0c      	add	r2, sp, #48	; 0x30
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	4648      	mov	r0, r9
 800c3fe:	f7ff fbe7 	bl	800bbd0 <__sprint_r>
 800c402:	2800      	cmp	r0, #0
 800c404:	d13e      	bne.n	800c484 <_vfiprintf_r+0x850>
 800c406:	a90f      	add	r1, sp, #60	; 0x3c
 800c408:	3c10      	subs	r4, #16
 800c40a:	460e      	mov	r6, r1
 800c40c:	e6ad      	b.n	800c16a <_vfiprintf_r+0x536>
 800c40e:	460e      	mov	r6, r1
 800c410:	e6c6      	b.n	800c1a0 <_vfiprintf_r+0x56c>
 800c412:	2010      	movs	r0, #16
 800c414:	4401      	add	r1, r0
 800c416:	2b07      	cmp	r3, #7
 800c418:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c41c:	6070      	str	r0, [r6, #4]
 800c41e:	dd06      	ble.n	800c42e <_vfiprintf_r+0x7fa>
 800c420:	aa0c      	add	r2, sp, #48	; 0x30
 800c422:	4639      	mov	r1, r7
 800c424:	4648      	mov	r0, r9
 800c426:	f7ff fbd3 	bl	800bbd0 <__sprint_r>
 800c42a:	bb58      	cbnz	r0, 800c484 <_vfiprintf_r+0x850>
 800c42c:	aa0f      	add	r2, sp, #60	; 0x3c
 800c42e:	3c10      	subs	r4, #16
 800c430:	4616      	mov	r6, r2
 800c432:	e6ba      	b.n	800c1aa <_vfiprintf_r+0x576>
 800c434:	4616      	mov	r6, r2
 800c436:	e6d2      	b.n	800c1de <_vfiprintf_r+0x5aa>
 800c438:	aa0c      	add	r2, sp, #48	; 0x30
 800c43a:	4639      	mov	r1, r7
 800c43c:	4648      	mov	r0, r9
 800c43e:	f7ff fbc7 	bl	800bbd0 <__sprint_r>
 800c442:	b9f8      	cbnz	r0, 800c484 <_vfiprintf_r+0x850>
 800c444:	ab0f      	add	r3, sp, #60	; 0x3c
 800c446:	e6d9      	b.n	800c1fc <_vfiprintf_r+0x5c8>
 800c448:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800c44c:	1a54      	subs	r4, r2, r1
 800c44e:	2c00      	cmp	r4, #0
 800c450:	f77f aed8 	ble.w	800c204 <_vfiprintf_r+0x5d0>
 800c454:	4d3a      	ldr	r5, [pc, #232]	; (800c540 <_vfiprintf_r+0x90c>)
 800c456:	2610      	movs	r6, #16
 800c458:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800c45c:	2c10      	cmp	r4, #16
 800c45e:	f102 0201 	add.w	r2, r2, #1
 800c462:	601d      	str	r5, [r3, #0]
 800c464:	dc1d      	bgt.n	800c4a2 <_vfiprintf_r+0x86e>
 800c466:	605c      	str	r4, [r3, #4]
 800c468:	2a07      	cmp	r2, #7
 800c46a:	440c      	add	r4, r1
 800c46c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800c470:	f77f aec8 	ble.w	800c204 <_vfiprintf_r+0x5d0>
 800c474:	aa0c      	add	r2, sp, #48	; 0x30
 800c476:	4639      	mov	r1, r7
 800c478:	4648      	mov	r0, r9
 800c47a:	f7ff fba9 	bl	800bbd0 <__sprint_r>
 800c47e:	2800      	cmp	r0, #0
 800c480:	f43f aec0 	beq.w	800c204 <_vfiprintf_r+0x5d0>
 800c484:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c486:	07d9      	lsls	r1, r3, #31
 800c488:	d405      	bmi.n	800c496 <_vfiprintf_r+0x862>
 800c48a:	89bb      	ldrh	r3, [r7, #12]
 800c48c:	059a      	lsls	r2, r3, #22
 800c48e:	d402      	bmi.n	800c496 <_vfiprintf_r+0x862>
 800c490:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c492:	f7fc fcea 	bl	8008e6a <__retarget_lock_release_recursive>
 800c496:	89bb      	ldrh	r3, [r7, #12]
 800c498:	065b      	lsls	r3, r3, #25
 800c49a:	f57f abfe 	bpl.w	800bc9a <_vfiprintf_r+0x66>
 800c49e:	f7ff bbf9 	b.w	800bc94 <_vfiprintf_r+0x60>
 800c4a2:	3110      	adds	r1, #16
 800c4a4:	2a07      	cmp	r2, #7
 800c4a6:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800c4aa:	605e      	str	r6, [r3, #4]
 800c4ac:	dc02      	bgt.n	800c4b4 <_vfiprintf_r+0x880>
 800c4ae:	3308      	adds	r3, #8
 800c4b0:	3c10      	subs	r4, #16
 800c4b2:	e7d1      	b.n	800c458 <_vfiprintf_r+0x824>
 800c4b4:	aa0c      	add	r2, sp, #48	; 0x30
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4648      	mov	r0, r9
 800c4ba:	f7ff fb89 	bl	800bbd0 <__sprint_r>
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d1e0      	bne.n	800c484 <_vfiprintf_r+0x850>
 800c4c2:	ab0f      	add	r3, sp, #60	; 0x3c
 800c4c4:	e7f4      	b.n	800c4b0 <_vfiprintf_r+0x87c>
 800c4c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4c8:	b913      	cbnz	r3, 800c4d0 <_vfiprintf_r+0x89c>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	930d      	str	r3, [sp, #52]	; 0x34
 800c4ce:	e7d9      	b.n	800c484 <_vfiprintf_r+0x850>
 800c4d0:	aa0c      	add	r2, sp, #48	; 0x30
 800c4d2:	4639      	mov	r1, r7
 800c4d4:	4648      	mov	r0, r9
 800c4d6:	f7ff fb7b 	bl	800bbd0 <__sprint_r>
 800c4da:	2800      	cmp	r0, #0
 800c4dc:	d0f5      	beq.n	800c4ca <_vfiprintf_r+0x896>
 800c4de:	e7d1      	b.n	800c484 <_vfiprintf_r+0x850>
 800c4e0:	ea54 0205 	orrs.w	r2, r4, r5
 800c4e4:	f8cd a010 	str.w	sl, [sp, #16]
 800c4e8:	f43f ada4 	beq.w	800c034 <_vfiprintf_r+0x400>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	f43f aed7 	beq.w	800c2a0 <_vfiprintf_r+0x66c>
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800c4f8:	f43f af23 	beq.w	800c342 <_vfiprintf_r+0x70e>
 800c4fc:	08e2      	lsrs	r2, r4, #3
 800c4fe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800c502:	08e8      	lsrs	r0, r5, #3
 800c504:	f004 0307 	and.w	r3, r4, #7
 800c508:	4605      	mov	r5, r0
 800c50a:	4614      	mov	r4, r2
 800c50c:	3330      	adds	r3, #48	; 0x30
 800c50e:	ea54 0205 	orrs.w	r2, r4, r5
 800c512:	4641      	mov	r1, r8
 800c514:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800c518:	d1f0      	bne.n	800c4fc <_vfiprintf_r+0x8c8>
 800c51a:	9a04      	ldr	r2, [sp, #16]
 800c51c:	07d0      	lsls	r0, r2, #31
 800c51e:	d506      	bpl.n	800c52e <_vfiprintf_r+0x8fa>
 800c520:	2b30      	cmp	r3, #48	; 0x30
 800c522:	d004      	beq.n	800c52e <_vfiprintf_r+0x8fa>
 800c524:	2330      	movs	r3, #48	; 0x30
 800c526:	f808 3c01 	strb.w	r3, [r8, #-1]
 800c52a:	f1a1 0802 	sub.w	r8, r1, #2
 800c52e:	ab38      	add	r3, sp, #224	; 0xe0
 800c530:	eba3 0308 	sub.w	r3, r3, r8
 800c534:	9d00      	ldr	r5, [sp, #0]
 800c536:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c53a:	9300      	str	r3, [sp, #0]
 800c53c:	e5b5      	b.n	800c0aa <_vfiprintf_r+0x476>
 800c53e:	bf00      	nop
 800c540:	0800d40a 	.word	0x0800d40a

0800c544 <__sbprintf>:
 800c544:	b570      	push	{r4, r5, r6, lr}
 800c546:	460c      	mov	r4, r1
 800c548:	8989      	ldrh	r1, [r1, #12]
 800c54a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800c54e:	f021 0102 	bic.w	r1, r1, #2
 800c552:	f8ad 1014 	strh.w	r1, [sp, #20]
 800c556:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c558:	911b      	str	r1, [sp, #108]	; 0x6c
 800c55a:	89e1      	ldrh	r1, [r4, #14]
 800c55c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800c560:	69e1      	ldr	r1, [r4, #28]
 800c562:	9109      	str	r1, [sp, #36]	; 0x24
 800c564:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c566:	910b      	str	r1, [sp, #44]	; 0x2c
 800c568:	a91c      	add	r1, sp, #112	; 0x70
 800c56a:	9102      	str	r1, [sp, #8]
 800c56c:	9106      	str	r1, [sp, #24]
 800c56e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c572:	4606      	mov	r6, r0
 800c574:	9104      	str	r1, [sp, #16]
 800c576:	9107      	str	r1, [sp, #28]
 800c578:	a818      	add	r0, sp, #96	; 0x60
 800c57a:	2100      	movs	r1, #0
 800c57c:	e9cd 3200 	strd	r3, r2, [sp]
 800c580:	9108      	str	r1, [sp, #32]
 800c582:	f7fc fc6f 	bl	8008e64 <__retarget_lock_init_recursive>
 800c586:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c58a:	a902      	add	r1, sp, #8
 800c58c:	4630      	mov	r0, r6
 800c58e:	f7ff fb51 	bl	800bc34 <_vfiprintf_r>
 800c592:	1e05      	subs	r5, r0, #0
 800c594:	db07      	blt.n	800c5a6 <__sbprintf+0x62>
 800c596:	a902      	add	r1, sp, #8
 800c598:	4630      	mov	r0, r6
 800c59a:	f000 f90f 	bl	800c7bc <_fflush_r>
 800c59e:	2800      	cmp	r0, #0
 800c5a0:	bf18      	it	ne
 800c5a2:	f04f 35ff 	movne.w	r5, #4294967295
 800c5a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800c5aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800c5ac:	065b      	lsls	r3, r3, #25
 800c5ae:	bf42      	ittt	mi
 800c5b0:	89a3      	ldrhmi	r3, [r4, #12]
 800c5b2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800c5b6:	81a3      	strhmi	r3, [r4, #12]
 800c5b8:	f7fc fc55 	bl	8008e66 <__retarget_lock_close_recursive>
 800c5bc:	4628      	mov	r0, r5
 800c5be:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800c5c2:	bd70      	pop	{r4, r5, r6, pc}

0800c5c4 <__ascii_wctomb>:
 800c5c4:	b149      	cbz	r1, 800c5da <__ascii_wctomb+0x16>
 800c5c6:	2aff      	cmp	r2, #255	; 0xff
 800c5c8:	bf85      	ittet	hi
 800c5ca:	238a      	movhi	r3, #138	; 0x8a
 800c5cc:	6003      	strhi	r3, [r0, #0]
 800c5ce:	700a      	strbls	r2, [r1, #0]
 800c5d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5d4:	bf98      	it	ls
 800c5d6:	2001      	movls	r0, #1
 800c5d8:	4770      	bx	lr
 800c5da:	4608      	mov	r0, r1
 800c5dc:	4770      	bx	lr
	...

0800c5e0 <__swsetup_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4b2a      	ldr	r3, [pc, #168]	; (800c68c <__swsetup_r+0xac>)
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	6818      	ldr	r0, [r3, #0]
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	b118      	cbz	r0, 800c5f4 <__swsetup_r+0x14>
 800c5ec:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c5ee:	b90b      	cbnz	r3, 800c5f4 <__swsetup_r+0x14>
 800c5f0:	f000 f950 	bl	800c894 <__sinit>
 800c5f4:	89a3      	ldrh	r3, [r4, #12]
 800c5f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c5fa:	0718      	lsls	r0, r3, #28
 800c5fc:	d422      	bmi.n	800c644 <__swsetup_r+0x64>
 800c5fe:	06d9      	lsls	r1, r3, #27
 800c600:	d407      	bmi.n	800c612 <__swsetup_r+0x32>
 800c602:	2309      	movs	r3, #9
 800c604:	602b      	str	r3, [r5, #0]
 800c606:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c60a:	81a3      	strh	r3, [r4, #12]
 800c60c:	f04f 30ff 	mov.w	r0, #4294967295
 800c610:	e034      	b.n	800c67c <__swsetup_r+0x9c>
 800c612:	0758      	lsls	r0, r3, #29
 800c614:	d512      	bpl.n	800c63c <__swsetup_r+0x5c>
 800c616:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c618:	b141      	cbz	r1, 800c62c <__swsetup_r+0x4c>
 800c61a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c61e:	4299      	cmp	r1, r3
 800c620:	d002      	beq.n	800c628 <__swsetup_r+0x48>
 800c622:	4628      	mov	r0, r5
 800c624:	f7fc fb5e 	bl	8008ce4 <_free_r>
 800c628:	2300      	movs	r3, #0
 800c62a:	6323      	str	r3, [r4, #48]	; 0x30
 800c62c:	89a3      	ldrh	r3, [r4, #12]
 800c62e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c632:	81a3      	strh	r3, [r4, #12]
 800c634:	2300      	movs	r3, #0
 800c636:	6063      	str	r3, [r4, #4]
 800c638:	6923      	ldr	r3, [r4, #16]
 800c63a:	6023      	str	r3, [r4, #0]
 800c63c:	89a3      	ldrh	r3, [r4, #12]
 800c63e:	f043 0308 	orr.w	r3, r3, #8
 800c642:	81a3      	strh	r3, [r4, #12]
 800c644:	6923      	ldr	r3, [r4, #16]
 800c646:	b94b      	cbnz	r3, 800c65c <__swsetup_r+0x7c>
 800c648:	89a3      	ldrh	r3, [r4, #12]
 800c64a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c64e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c652:	d003      	beq.n	800c65c <__swsetup_r+0x7c>
 800c654:	4621      	mov	r1, r4
 800c656:	4628      	mov	r0, r5
 800c658:	f000 fb44 	bl	800cce4 <__smakebuf_r>
 800c65c:	89a0      	ldrh	r0, [r4, #12]
 800c65e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c662:	f010 0301 	ands.w	r3, r0, #1
 800c666:	d00a      	beq.n	800c67e <__swsetup_r+0x9e>
 800c668:	2300      	movs	r3, #0
 800c66a:	60a3      	str	r3, [r4, #8]
 800c66c:	6963      	ldr	r3, [r4, #20]
 800c66e:	425b      	negs	r3, r3
 800c670:	61a3      	str	r3, [r4, #24]
 800c672:	6923      	ldr	r3, [r4, #16]
 800c674:	b943      	cbnz	r3, 800c688 <__swsetup_r+0xa8>
 800c676:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c67a:	d1c4      	bne.n	800c606 <__swsetup_r+0x26>
 800c67c:	bd38      	pop	{r3, r4, r5, pc}
 800c67e:	0781      	lsls	r1, r0, #30
 800c680:	bf58      	it	pl
 800c682:	6963      	ldrpl	r3, [r4, #20]
 800c684:	60a3      	str	r3, [r4, #8]
 800c686:	e7f4      	b.n	800c672 <__swsetup_r+0x92>
 800c688:	2000      	movs	r0, #0
 800c68a:	e7f7      	b.n	800c67c <__swsetup_r+0x9c>
 800c68c:	2000006c 	.word	0x2000006c

0800c690 <abort>:
 800c690:	b508      	push	{r3, lr}
 800c692:	2006      	movs	r0, #6
 800c694:	f000 fb90 	bl	800cdb8 <raise>
 800c698:	2001      	movs	r0, #1
 800c69a:	f7f5 fbcd 	bl	8001e38 <_exit>
	...

0800c6a0 <__sflush_r>:
 800c6a0:	898b      	ldrh	r3, [r1, #12]
 800c6a2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c6a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6aa:	4605      	mov	r5, r0
 800c6ac:	0718      	lsls	r0, r3, #28
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	d45f      	bmi.n	800c772 <__sflush_r+0xd2>
 800c6b2:	684b      	ldr	r3, [r1, #4]
 800c6b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	818a      	strh	r2, [r1, #12]
 800c6bc:	dc05      	bgt.n	800c6ca <__sflush_r+0x2a>
 800c6be:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	dc02      	bgt.n	800c6ca <__sflush_r+0x2a>
 800c6c4:	2000      	movs	r0, #0
 800c6c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6cc:	2e00      	cmp	r6, #0
 800c6ce:	d0f9      	beq.n	800c6c4 <__sflush_r+0x24>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6d6:	682f      	ldr	r7, [r5, #0]
 800c6d8:	602b      	str	r3, [r5, #0]
 800c6da:	d036      	beq.n	800c74a <__sflush_r+0xaa>
 800c6dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800c6de:	89a3      	ldrh	r3, [r4, #12]
 800c6e0:	075a      	lsls	r2, r3, #29
 800c6e2:	d505      	bpl.n	800c6f0 <__sflush_r+0x50>
 800c6e4:	6863      	ldr	r3, [r4, #4]
 800c6e6:	1ac0      	subs	r0, r0, r3
 800c6e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c6ea:	b10b      	cbz	r3, 800c6f0 <__sflush_r+0x50>
 800c6ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c6ee:	1ac0      	subs	r0, r0, r3
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c6f6:	69e1      	ldr	r1, [r4, #28]
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	47b0      	blx	r6
 800c6fc:	1c43      	adds	r3, r0, #1
 800c6fe:	89a3      	ldrh	r3, [r4, #12]
 800c700:	d106      	bne.n	800c710 <__sflush_r+0x70>
 800c702:	6829      	ldr	r1, [r5, #0]
 800c704:	291d      	cmp	r1, #29
 800c706:	d830      	bhi.n	800c76a <__sflush_r+0xca>
 800c708:	4a2b      	ldr	r2, [pc, #172]	; (800c7b8 <__sflush_r+0x118>)
 800c70a:	40ca      	lsrs	r2, r1
 800c70c:	07d6      	lsls	r6, r2, #31
 800c70e:	d52c      	bpl.n	800c76a <__sflush_r+0xca>
 800c710:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c714:	b21b      	sxth	r3, r3
 800c716:	2200      	movs	r2, #0
 800c718:	6062      	str	r2, [r4, #4]
 800c71a:	04d9      	lsls	r1, r3, #19
 800c71c:	6922      	ldr	r2, [r4, #16]
 800c71e:	81a3      	strh	r3, [r4, #12]
 800c720:	6022      	str	r2, [r4, #0]
 800c722:	d504      	bpl.n	800c72e <__sflush_r+0x8e>
 800c724:	1c42      	adds	r2, r0, #1
 800c726:	d101      	bne.n	800c72c <__sflush_r+0x8c>
 800c728:	682b      	ldr	r3, [r5, #0]
 800c72a:	b903      	cbnz	r3, 800c72e <__sflush_r+0x8e>
 800c72c:	6520      	str	r0, [r4, #80]	; 0x50
 800c72e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c730:	602f      	str	r7, [r5, #0]
 800c732:	2900      	cmp	r1, #0
 800c734:	d0c6      	beq.n	800c6c4 <__sflush_r+0x24>
 800c736:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c73a:	4299      	cmp	r1, r3
 800c73c:	d002      	beq.n	800c744 <__sflush_r+0xa4>
 800c73e:	4628      	mov	r0, r5
 800c740:	f7fc fad0 	bl	8008ce4 <_free_r>
 800c744:	2000      	movs	r0, #0
 800c746:	6320      	str	r0, [r4, #48]	; 0x30
 800c748:	e7bd      	b.n	800c6c6 <__sflush_r+0x26>
 800c74a:	69e1      	ldr	r1, [r4, #28]
 800c74c:	2301      	movs	r3, #1
 800c74e:	4628      	mov	r0, r5
 800c750:	47b0      	blx	r6
 800c752:	1c41      	adds	r1, r0, #1
 800c754:	d1c3      	bne.n	800c6de <__sflush_r+0x3e>
 800c756:	682b      	ldr	r3, [r5, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d0c0      	beq.n	800c6de <__sflush_r+0x3e>
 800c75c:	2b1d      	cmp	r3, #29
 800c75e:	d001      	beq.n	800c764 <__sflush_r+0xc4>
 800c760:	2b16      	cmp	r3, #22
 800c762:	d101      	bne.n	800c768 <__sflush_r+0xc8>
 800c764:	602f      	str	r7, [r5, #0]
 800c766:	e7ad      	b.n	800c6c4 <__sflush_r+0x24>
 800c768:	89a3      	ldrh	r3, [r4, #12]
 800c76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c76e:	81a3      	strh	r3, [r4, #12]
 800c770:	e7a9      	b.n	800c6c6 <__sflush_r+0x26>
 800c772:	690f      	ldr	r7, [r1, #16]
 800c774:	2f00      	cmp	r7, #0
 800c776:	d0a5      	beq.n	800c6c4 <__sflush_r+0x24>
 800c778:	079b      	lsls	r3, r3, #30
 800c77a:	680e      	ldr	r6, [r1, #0]
 800c77c:	bf08      	it	eq
 800c77e:	694b      	ldreq	r3, [r1, #20]
 800c780:	600f      	str	r7, [r1, #0]
 800c782:	bf18      	it	ne
 800c784:	2300      	movne	r3, #0
 800c786:	eba6 0807 	sub.w	r8, r6, r7
 800c78a:	608b      	str	r3, [r1, #8]
 800c78c:	f1b8 0f00 	cmp.w	r8, #0
 800c790:	dd98      	ble.n	800c6c4 <__sflush_r+0x24>
 800c792:	69e1      	ldr	r1, [r4, #28]
 800c794:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c796:	4643      	mov	r3, r8
 800c798:	463a      	mov	r2, r7
 800c79a:	4628      	mov	r0, r5
 800c79c:	47b0      	blx	r6
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	dc06      	bgt.n	800c7b0 <__sflush_r+0x110>
 800c7a2:	89a3      	ldrh	r3, [r4, #12]
 800c7a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7a8:	81a3      	strh	r3, [r4, #12]
 800c7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ae:	e78a      	b.n	800c6c6 <__sflush_r+0x26>
 800c7b0:	4407      	add	r7, r0
 800c7b2:	eba8 0800 	sub.w	r8, r8, r0
 800c7b6:	e7e9      	b.n	800c78c <__sflush_r+0xec>
 800c7b8:	20400001 	.word	0x20400001

0800c7bc <_fflush_r>:
 800c7bc:	b538      	push	{r3, r4, r5, lr}
 800c7be:	460c      	mov	r4, r1
 800c7c0:	4605      	mov	r5, r0
 800c7c2:	b118      	cbz	r0, 800c7cc <_fflush_r+0x10>
 800c7c4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800c7c6:	b90b      	cbnz	r3, 800c7cc <_fflush_r+0x10>
 800c7c8:	f000 f864 	bl	800c894 <__sinit>
 800c7cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7d0:	b1bb      	cbz	r3, 800c802 <_fflush_r+0x46>
 800c7d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7d4:	07d0      	lsls	r0, r2, #31
 800c7d6:	d404      	bmi.n	800c7e2 <_fflush_r+0x26>
 800c7d8:	0599      	lsls	r1, r3, #22
 800c7da:	d402      	bmi.n	800c7e2 <_fflush_r+0x26>
 800c7dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7de:	f7fc fb43 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800c7e2:	4628      	mov	r0, r5
 800c7e4:	4621      	mov	r1, r4
 800c7e6:	f7ff ff5b 	bl	800c6a0 <__sflush_r>
 800c7ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7ec:	07da      	lsls	r2, r3, #31
 800c7ee:	4605      	mov	r5, r0
 800c7f0:	d405      	bmi.n	800c7fe <_fflush_r+0x42>
 800c7f2:	89a3      	ldrh	r3, [r4, #12]
 800c7f4:	059b      	lsls	r3, r3, #22
 800c7f6:	d402      	bmi.n	800c7fe <_fflush_r+0x42>
 800c7f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7fa:	f7fc fb36 	bl	8008e6a <__retarget_lock_release_recursive>
 800c7fe:	4628      	mov	r0, r5
 800c800:	bd38      	pop	{r3, r4, r5, pc}
 800c802:	461d      	mov	r5, r3
 800c804:	e7fb      	b.n	800c7fe <_fflush_r+0x42>
	...

0800c808 <std>:
 800c808:	2300      	movs	r3, #0
 800c80a:	b510      	push	{r4, lr}
 800c80c:	4604      	mov	r4, r0
 800c80e:	e9c0 3300 	strd	r3, r3, [r0]
 800c812:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c816:	6083      	str	r3, [r0, #8]
 800c818:	8181      	strh	r1, [r0, #12]
 800c81a:	6643      	str	r3, [r0, #100]	; 0x64
 800c81c:	81c2      	strh	r2, [r0, #14]
 800c81e:	6183      	str	r3, [r0, #24]
 800c820:	4619      	mov	r1, r3
 800c822:	2208      	movs	r2, #8
 800c824:	305c      	adds	r0, #92	; 0x5c
 800c826:	f7fc f993 	bl	8008b50 <memset>
 800c82a:	4b07      	ldr	r3, [pc, #28]	; (800c848 <std+0x40>)
 800c82c:	6223      	str	r3, [r4, #32]
 800c82e:	4b07      	ldr	r3, [pc, #28]	; (800c84c <std+0x44>)
 800c830:	6263      	str	r3, [r4, #36]	; 0x24
 800c832:	4b07      	ldr	r3, [pc, #28]	; (800c850 <std+0x48>)
 800c834:	62a3      	str	r3, [r4, #40]	; 0x28
 800c836:	4b07      	ldr	r3, [pc, #28]	; (800c854 <std+0x4c>)
 800c838:	61e4      	str	r4, [r4, #28]
 800c83a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c83c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c844:	f7fc bb0e 	b.w	8008e64 <__retarget_lock_init_recursive>
 800c848:	0800cdf1 	.word	0x0800cdf1
 800c84c:	0800ce13 	.word	0x0800ce13
 800c850:	0800ce4b 	.word	0x0800ce4b
 800c854:	0800ce6f 	.word	0x0800ce6f

0800c858 <_cleanup_r>:
 800c858:	4901      	ldr	r1, [pc, #4]	; (800c860 <_cleanup_r+0x8>)
 800c85a:	f000 b9f9 	b.w	800cc50 <_fwalk_reent>
 800c85e:	bf00      	nop
 800c860:	0800cf79 	.word	0x0800cf79

0800c864 <__sfp_lock_acquire>:
 800c864:	4801      	ldr	r0, [pc, #4]	; (800c86c <__sfp_lock_acquire+0x8>)
 800c866:	f7fc baff 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 800c86a:	bf00      	nop
 800c86c:	20004d28 	.word	0x20004d28

0800c870 <__sfp_lock_release>:
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <__sfp_lock_release+0x8>)
 800c872:	f7fc bafa 	b.w	8008e6a <__retarget_lock_release_recursive>
 800c876:	bf00      	nop
 800c878:	20004d28 	.word	0x20004d28

0800c87c <__sinit_lock_acquire>:
 800c87c:	4801      	ldr	r0, [pc, #4]	; (800c884 <__sinit_lock_acquire+0x8>)
 800c87e:	f7fc baf3 	b.w	8008e68 <__retarget_lock_acquire_recursive>
 800c882:	bf00      	nop
 800c884:	20004d23 	.word	0x20004d23

0800c888 <__sinit_lock_release>:
 800c888:	4801      	ldr	r0, [pc, #4]	; (800c890 <__sinit_lock_release+0x8>)
 800c88a:	f7fc baee 	b.w	8008e6a <__retarget_lock_release_recursive>
 800c88e:	bf00      	nop
 800c890:	20004d23 	.word	0x20004d23

0800c894 <__sinit>:
 800c894:	b510      	push	{r4, lr}
 800c896:	4604      	mov	r4, r0
 800c898:	f7ff fff0 	bl	800c87c <__sinit_lock_acquire>
 800c89c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c89e:	b11a      	cbz	r2, 800c8a8 <__sinit+0x14>
 800c8a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8a4:	f7ff bff0 	b.w	800c888 <__sinit_lock_release>
 800c8a8:	4b0d      	ldr	r3, [pc, #52]	; (800c8e0 <__sinit+0x4c>)
 800c8aa:	63e3      	str	r3, [r4, #60]	; 0x3c
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 800c8b2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 800c8b6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 800c8ba:	6860      	ldr	r0, [r4, #4]
 800c8bc:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 800c8c0:	2104      	movs	r1, #4
 800c8c2:	f7ff ffa1 	bl	800c808 <std>
 800c8c6:	68a0      	ldr	r0, [r4, #8]
 800c8c8:	2201      	movs	r2, #1
 800c8ca:	2109      	movs	r1, #9
 800c8cc:	f7ff ff9c 	bl	800c808 <std>
 800c8d0:	68e0      	ldr	r0, [r4, #12]
 800c8d2:	2202      	movs	r2, #2
 800c8d4:	2112      	movs	r1, #18
 800c8d6:	f7ff ff97 	bl	800c808 <std>
 800c8da:	2301      	movs	r3, #1
 800c8dc:	63a3      	str	r3, [r4, #56]	; 0x38
 800c8de:	e7df      	b.n	800c8a0 <__sinit+0xc>
 800c8e0:	0800c859 	.word	0x0800c859

0800c8e4 <__fputwc>:
 800c8e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c8e8:	4680      	mov	r8, r0
 800c8ea:	460e      	mov	r6, r1
 800c8ec:	4615      	mov	r5, r2
 800c8ee:	f7fe ff97 	bl	800b820 <__locale_mb_cur_max>
 800c8f2:	2801      	cmp	r0, #1
 800c8f4:	d11c      	bne.n	800c930 <__fputwc+0x4c>
 800c8f6:	1e73      	subs	r3, r6, #1
 800c8f8:	2bfe      	cmp	r3, #254	; 0xfe
 800c8fa:	d819      	bhi.n	800c930 <__fputwc+0x4c>
 800c8fc:	f88d 6004 	strb.w	r6, [sp, #4]
 800c900:	4604      	mov	r4, r0
 800c902:	2700      	movs	r7, #0
 800c904:	f10d 0904 	add.w	r9, sp, #4
 800c908:	42a7      	cmp	r7, r4
 800c90a:	d020      	beq.n	800c94e <__fputwc+0x6a>
 800c90c:	68ab      	ldr	r3, [r5, #8]
 800c90e:	f817 1009 	ldrb.w	r1, [r7, r9]
 800c912:	3b01      	subs	r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	60ab      	str	r3, [r5, #8]
 800c918:	da04      	bge.n	800c924 <__fputwc+0x40>
 800c91a:	69aa      	ldr	r2, [r5, #24]
 800c91c:	4293      	cmp	r3, r2
 800c91e:	db1a      	blt.n	800c956 <__fputwc+0x72>
 800c920:	290a      	cmp	r1, #10
 800c922:	d018      	beq.n	800c956 <__fputwc+0x72>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	1c5a      	adds	r2, r3, #1
 800c928:	602a      	str	r2, [r5, #0]
 800c92a:	7019      	strb	r1, [r3, #0]
 800c92c:	3701      	adds	r7, #1
 800c92e:	e7eb      	b.n	800c908 <__fputwc+0x24>
 800c930:	4632      	mov	r2, r6
 800c932:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800c936:	a901      	add	r1, sp, #4
 800c938:	4640      	mov	r0, r8
 800c93a:	f000 fae5 	bl	800cf08 <_wcrtomb_r>
 800c93e:	1c42      	adds	r2, r0, #1
 800c940:	4604      	mov	r4, r0
 800c942:	d1de      	bne.n	800c902 <__fputwc+0x1e>
 800c944:	89ab      	ldrh	r3, [r5, #12]
 800c946:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c94a:	81ab      	strh	r3, [r5, #12]
 800c94c:	4606      	mov	r6, r0
 800c94e:	4630      	mov	r0, r6
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c956:	462a      	mov	r2, r5
 800c958:	4640      	mov	r0, r8
 800c95a:	f000 fa8c 	bl	800ce76 <__swbuf_r>
 800c95e:	1c43      	adds	r3, r0, #1
 800c960:	d1e4      	bne.n	800c92c <__fputwc+0x48>
 800c962:	4606      	mov	r6, r0
 800c964:	e7f3      	b.n	800c94e <__fputwc+0x6a>

0800c966 <_fputwc_r>:
 800c966:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800c968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c96a:	4614      	mov	r4, r2
 800c96c:	07da      	lsls	r2, r3, #31
 800c96e:	4605      	mov	r5, r0
 800c970:	d407      	bmi.n	800c982 <_fputwc_r+0x1c>
 800c972:	89a3      	ldrh	r3, [r4, #12]
 800c974:	059b      	lsls	r3, r3, #22
 800c976:	d404      	bmi.n	800c982 <_fputwc_r+0x1c>
 800c978:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c97a:	9101      	str	r1, [sp, #4]
 800c97c:	f7fc fa74 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800c980:	9901      	ldr	r1, [sp, #4]
 800c982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c986:	0498      	lsls	r0, r3, #18
 800c988:	d406      	bmi.n	800c998 <_fputwc_r+0x32>
 800c98a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c98e:	81a3      	strh	r3, [r4, #12]
 800c990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c996:	6663      	str	r3, [r4, #100]	; 0x64
 800c998:	4622      	mov	r2, r4
 800c99a:	4628      	mov	r0, r5
 800c99c:	f7ff ffa2 	bl	800c8e4 <__fputwc>
 800c9a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9a2:	07da      	lsls	r2, r3, #31
 800c9a4:	4605      	mov	r5, r0
 800c9a6:	d405      	bmi.n	800c9b4 <_fputwc_r+0x4e>
 800c9a8:	89a3      	ldrh	r3, [r4, #12]
 800c9aa:	059b      	lsls	r3, r3, #22
 800c9ac:	d402      	bmi.n	800c9b4 <_fputwc_r+0x4e>
 800c9ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9b0:	f7fc fa5b 	bl	8008e6a <__retarget_lock_release_recursive>
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	b003      	add	sp, #12
 800c9b8:	bd30      	pop	{r4, r5, pc}
	...

0800c9bc <__sfvwrite_r>:
 800c9bc:	6893      	ldr	r3, [r2, #8]
 800c9be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9c2:	4606      	mov	r6, r0
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	4690      	mov	r8, r2
 800c9c8:	b91b      	cbnz	r3, 800c9d2 <__sfvwrite_r+0x16>
 800c9ca:	2000      	movs	r0, #0
 800c9cc:	b003      	add	sp, #12
 800c9ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d2:	898b      	ldrh	r3, [r1, #12]
 800c9d4:	0718      	lsls	r0, r3, #28
 800c9d6:	d550      	bpl.n	800ca7a <__sfvwrite_r+0xbe>
 800c9d8:	690b      	ldr	r3, [r1, #16]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d04d      	beq.n	800ca7a <__sfvwrite_r+0xbe>
 800c9de:	89a3      	ldrh	r3, [r4, #12]
 800c9e0:	f8d8 7000 	ldr.w	r7, [r8]
 800c9e4:	f013 0902 	ands.w	r9, r3, #2
 800c9e8:	d16c      	bne.n	800cac4 <__sfvwrite_r+0x108>
 800c9ea:	f013 0301 	ands.w	r3, r3, #1
 800c9ee:	f000 809c 	beq.w	800cb2a <__sfvwrite_r+0x16e>
 800c9f2:	4648      	mov	r0, r9
 800c9f4:	46ca      	mov	sl, r9
 800c9f6:	46cb      	mov	fp, r9
 800c9f8:	f1bb 0f00 	cmp.w	fp, #0
 800c9fc:	f000 8103 	beq.w	800cc06 <__sfvwrite_r+0x24a>
 800ca00:	b950      	cbnz	r0, 800ca18 <__sfvwrite_r+0x5c>
 800ca02:	465a      	mov	r2, fp
 800ca04:	210a      	movs	r1, #10
 800ca06:	4650      	mov	r0, sl
 800ca08:	f7f3 fbf2 	bl	80001f0 <memchr>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	f000 80ff 	beq.w	800cc10 <__sfvwrite_r+0x254>
 800ca12:	3001      	adds	r0, #1
 800ca14:	eba0 090a 	sub.w	r9, r0, sl
 800ca18:	6820      	ldr	r0, [r4, #0]
 800ca1a:	6921      	ldr	r1, [r4, #16]
 800ca1c:	6963      	ldr	r3, [r4, #20]
 800ca1e:	45d9      	cmp	r9, fp
 800ca20:	464a      	mov	r2, r9
 800ca22:	bf28      	it	cs
 800ca24:	465a      	movcs	r2, fp
 800ca26:	4288      	cmp	r0, r1
 800ca28:	f240 80f5 	bls.w	800cc16 <__sfvwrite_r+0x25a>
 800ca2c:	68a5      	ldr	r5, [r4, #8]
 800ca2e:	441d      	add	r5, r3
 800ca30:	42aa      	cmp	r2, r5
 800ca32:	f340 80f0 	ble.w	800cc16 <__sfvwrite_r+0x25a>
 800ca36:	4651      	mov	r1, sl
 800ca38:	462a      	mov	r2, r5
 800ca3a:	f7fe ff09 	bl	800b850 <memmove>
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	442b      	add	r3, r5
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	4621      	mov	r1, r4
 800ca46:	4630      	mov	r0, r6
 800ca48:	f7ff feb8 	bl	800c7bc <_fflush_r>
 800ca4c:	2800      	cmp	r0, #0
 800ca4e:	d167      	bne.n	800cb20 <__sfvwrite_r+0x164>
 800ca50:	ebb9 0905 	subs.w	r9, r9, r5
 800ca54:	f040 80f7 	bne.w	800cc46 <__sfvwrite_r+0x28a>
 800ca58:	4621      	mov	r1, r4
 800ca5a:	4630      	mov	r0, r6
 800ca5c:	f7ff feae 	bl	800c7bc <_fflush_r>
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d15d      	bne.n	800cb20 <__sfvwrite_r+0x164>
 800ca64:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800ca68:	44aa      	add	sl, r5
 800ca6a:	ebab 0b05 	sub.w	fp, fp, r5
 800ca6e:	1b55      	subs	r5, r2, r5
 800ca70:	f8c8 5008 	str.w	r5, [r8, #8]
 800ca74:	2d00      	cmp	r5, #0
 800ca76:	d1bf      	bne.n	800c9f8 <__sfvwrite_r+0x3c>
 800ca78:	e7a7      	b.n	800c9ca <__sfvwrite_r+0xe>
 800ca7a:	4621      	mov	r1, r4
 800ca7c:	4630      	mov	r0, r6
 800ca7e:	f7ff fdaf 	bl	800c5e0 <__swsetup_r>
 800ca82:	2800      	cmp	r0, #0
 800ca84:	d0ab      	beq.n	800c9de <__sfvwrite_r+0x22>
 800ca86:	f04f 30ff 	mov.w	r0, #4294967295
 800ca8a:	e79f      	b.n	800c9cc <__sfvwrite_r+0x10>
 800ca8c:	e9d7 b900 	ldrd	fp, r9, [r7]
 800ca90:	3708      	adds	r7, #8
 800ca92:	f1b9 0f00 	cmp.w	r9, #0
 800ca96:	d0f9      	beq.n	800ca8c <__sfvwrite_r+0xd0>
 800ca98:	45d1      	cmp	r9, sl
 800ca9a:	464b      	mov	r3, r9
 800ca9c:	69e1      	ldr	r1, [r4, #28]
 800ca9e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800caa0:	bf28      	it	cs
 800caa2:	4653      	movcs	r3, sl
 800caa4:	465a      	mov	r2, fp
 800caa6:	4630      	mov	r0, r6
 800caa8:	47a8      	blx	r5
 800caaa:	2800      	cmp	r0, #0
 800caac:	dd38      	ble.n	800cb20 <__sfvwrite_r+0x164>
 800caae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cab2:	4483      	add	fp, r0
 800cab4:	eba9 0900 	sub.w	r9, r9, r0
 800cab8:	1a18      	subs	r0, r3, r0
 800caba:	f8c8 0008 	str.w	r0, [r8, #8]
 800cabe:	2800      	cmp	r0, #0
 800cac0:	d1e7      	bne.n	800ca92 <__sfvwrite_r+0xd6>
 800cac2:	e782      	b.n	800c9ca <__sfvwrite_r+0xe>
 800cac4:	f04f 0b00 	mov.w	fp, #0
 800cac8:	f8df a180 	ldr.w	sl, [pc, #384]	; 800cc4c <__sfvwrite_r+0x290>
 800cacc:	46d9      	mov	r9, fp
 800cace:	e7e0      	b.n	800ca92 <__sfvwrite_r+0xd6>
 800cad0:	e9d7 9a00 	ldrd	r9, sl, [r7]
 800cad4:	3708      	adds	r7, #8
 800cad6:	f1ba 0f00 	cmp.w	sl, #0
 800cada:	d0f9      	beq.n	800cad0 <__sfvwrite_r+0x114>
 800cadc:	89a3      	ldrh	r3, [r4, #12]
 800cade:	68a2      	ldr	r2, [r4, #8]
 800cae0:	6820      	ldr	r0, [r4, #0]
 800cae2:	0599      	lsls	r1, r3, #22
 800cae4:	d563      	bpl.n	800cbae <__sfvwrite_r+0x1f2>
 800cae6:	4552      	cmp	r2, sl
 800cae8:	d836      	bhi.n	800cb58 <__sfvwrite_r+0x19c>
 800caea:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800caee:	d033      	beq.n	800cb58 <__sfvwrite_r+0x19c>
 800caf0:	6921      	ldr	r1, [r4, #16]
 800caf2:	6965      	ldr	r5, [r4, #20]
 800caf4:	eba0 0b01 	sub.w	fp, r0, r1
 800caf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cafc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb00:	f10b 0201 	add.w	r2, fp, #1
 800cb04:	106d      	asrs	r5, r5, #1
 800cb06:	4452      	add	r2, sl
 800cb08:	4295      	cmp	r5, r2
 800cb0a:	bf38      	it	cc
 800cb0c:	4615      	movcc	r5, r2
 800cb0e:	055b      	lsls	r3, r3, #21
 800cb10:	d53d      	bpl.n	800cb8e <__sfvwrite_r+0x1d2>
 800cb12:	4629      	mov	r1, r5
 800cb14:	4630      	mov	r0, r6
 800cb16:	f7fb fdcb 	bl	80086b0 <_malloc_r>
 800cb1a:	b948      	cbnz	r0, 800cb30 <__sfvwrite_r+0x174>
 800cb1c:	230c      	movs	r3, #12
 800cb1e:	6033      	str	r3, [r6, #0]
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb26:	81a3      	strh	r3, [r4, #12]
 800cb28:	e7ad      	b.n	800ca86 <__sfvwrite_r+0xca>
 800cb2a:	4699      	mov	r9, r3
 800cb2c:	469a      	mov	sl, r3
 800cb2e:	e7d2      	b.n	800cad6 <__sfvwrite_r+0x11a>
 800cb30:	465a      	mov	r2, fp
 800cb32:	6921      	ldr	r1, [r4, #16]
 800cb34:	9001      	str	r0, [sp, #4]
 800cb36:	f7fb fffd 	bl	8008b34 <memcpy>
 800cb3a:	89a2      	ldrh	r2, [r4, #12]
 800cb3c:	9b01      	ldr	r3, [sp, #4]
 800cb3e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800cb42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cb46:	81a2      	strh	r2, [r4, #12]
 800cb48:	6123      	str	r3, [r4, #16]
 800cb4a:	6165      	str	r5, [r4, #20]
 800cb4c:	445b      	add	r3, fp
 800cb4e:	eba5 050b 	sub.w	r5, r5, fp
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	4652      	mov	r2, sl
 800cb56:	60a5      	str	r5, [r4, #8]
 800cb58:	4552      	cmp	r2, sl
 800cb5a:	bf28      	it	cs
 800cb5c:	4652      	movcs	r2, sl
 800cb5e:	6820      	ldr	r0, [r4, #0]
 800cb60:	9201      	str	r2, [sp, #4]
 800cb62:	4649      	mov	r1, r9
 800cb64:	f7fe fe74 	bl	800b850 <memmove>
 800cb68:	68a3      	ldr	r3, [r4, #8]
 800cb6a:	9a01      	ldr	r2, [sp, #4]
 800cb6c:	1a9b      	subs	r3, r3, r2
 800cb6e:	60a3      	str	r3, [r4, #8]
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	441a      	add	r2, r3
 800cb74:	4655      	mov	r5, sl
 800cb76:	6022      	str	r2, [r4, #0]
 800cb78:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800cb7c:	44a9      	add	r9, r5
 800cb7e:	ebaa 0a05 	sub.w	sl, sl, r5
 800cb82:	1b45      	subs	r5, r0, r5
 800cb84:	f8c8 5008 	str.w	r5, [r8, #8]
 800cb88:	2d00      	cmp	r5, #0
 800cb8a:	d1a4      	bne.n	800cad6 <__sfvwrite_r+0x11a>
 800cb8c:	e71d      	b.n	800c9ca <__sfvwrite_r+0xe>
 800cb8e:	462a      	mov	r2, r5
 800cb90:	4630      	mov	r0, r6
 800cb92:	f7fe fe77 	bl	800b884 <_realloc_r>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	d1d5      	bne.n	800cb48 <__sfvwrite_r+0x18c>
 800cb9c:	6921      	ldr	r1, [r4, #16]
 800cb9e:	4630      	mov	r0, r6
 800cba0:	f7fc f8a0 	bl	8008ce4 <_free_r>
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbaa:	81a3      	strh	r3, [r4, #12]
 800cbac:	e7b6      	b.n	800cb1c <__sfvwrite_r+0x160>
 800cbae:	6923      	ldr	r3, [r4, #16]
 800cbb0:	4283      	cmp	r3, r0
 800cbb2:	d302      	bcc.n	800cbba <__sfvwrite_r+0x1fe>
 800cbb4:	6961      	ldr	r1, [r4, #20]
 800cbb6:	4551      	cmp	r1, sl
 800cbb8:	d915      	bls.n	800cbe6 <__sfvwrite_r+0x22a>
 800cbba:	4552      	cmp	r2, sl
 800cbbc:	bf28      	it	cs
 800cbbe:	4652      	movcs	r2, sl
 800cbc0:	4649      	mov	r1, r9
 800cbc2:	4615      	mov	r5, r2
 800cbc4:	f7fe fe44 	bl	800b850 <memmove>
 800cbc8:	68a3      	ldr	r3, [r4, #8]
 800cbca:	6822      	ldr	r2, [r4, #0]
 800cbcc:	1b5b      	subs	r3, r3, r5
 800cbce:	442a      	add	r2, r5
 800cbd0:	60a3      	str	r3, [r4, #8]
 800cbd2:	6022      	str	r2, [r4, #0]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1cf      	bne.n	800cb78 <__sfvwrite_r+0x1bc>
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4630      	mov	r0, r6
 800cbdc:	f7ff fdee 	bl	800c7bc <_fflush_r>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d0c9      	beq.n	800cb78 <__sfvwrite_r+0x1bc>
 800cbe4:	e79c      	b.n	800cb20 <__sfvwrite_r+0x164>
 800cbe6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cbea:	459a      	cmp	sl, r3
 800cbec:	bf38      	it	cc
 800cbee:	4653      	movcc	r3, sl
 800cbf0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cbf2:	fb93 f3f1 	sdiv	r3, r3, r1
 800cbf6:	464a      	mov	r2, r9
 800cbf8:	434b      	muls	r3, r1
 800cbfa:	4630      	mov	r0, r6
 800cbfc:	69e1      	ldr	r1, [r4, #28]
 800cbfe:	47a8      	blx	r5
 800cc00:	1e05      	subs	r5, r0, #0
 800cc02:	dcb9      	bgt.n	800cb78 <__sfvwrite_r+0x1bc>
 800cc04:	e78c      	b.n	800cb20 <__sfvwrite_r+0x164>
 800cc06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800cc0a:	2000      	movs	r0, #0
 800cc0c:	3708      	adds	r7, #8
 800cc0e:	e6f3      	b.n	800c9f8 <__sfvwrite_r+0x3c>
 800cc10:	f10b 0901 	add.w	r9, fp, #1
 800cc14:	e700      	b.n	800ca18 <__sfvwrite_r+0x5c>
 800cc16:	4293      	cmp	r3, r2
 800cc18:	dc08      	bgt.n	800cc2c <__sfvwrite_r+0x270>
 800cc1a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cc1c:	69e1      	ldr	r1, [r4, #28]
 800cc1e:	4652      	mov	r2, sl
 800cc20:	4630      	mov	r0, r6
 800cc22:	47a8      	blx	r5
 800cc24:	1e05      	subs	r5, r0, #0
 800cc26:	f73f af13 	bgt.w	800ca50 <__sfvwrite_r+0x94>
 800cc2a:	e779      	b.n	800cb20 <__sfvwrite_r+0x164>
 800cc2c:	4651      	mov	r1, sl
 800cc2e:	9201      	str	r2, [sp, #4]
 800cc30:	f7fe fe0e 	bl	800b850 <memmove>
 800cc34:	9a01      	ldr	r2, [sp, #4]
 800cc36:	68a3      	ldr	r3, [r4, #8]
 800cc38:	1a9b      	subs	r3, r3, r2
 800cc3a:	60a3      	str	r3, [r4, #8]
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	4413      	add	r3, r2
 800cc40:	6023      	str	r3, [r4, #0]
 800cc42:	4615      	mov	r5, r2
 800cc44:	e704      	b.n	800ca50 <__sfvwrite_r+0x94>
 800cc46:	2001      	movs	r0, #1
 800cc48:	e70c      	b.n	800ca64 <__sfvwrite_r+0xa8>
 800cc4a:	bf00      	nop
 800cc4c:	7ffffc00 	.word	0x7ffffc00

0800cc50 <_fwalk_reent>:
 800cc50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc54:	4606      	mov	r6, r0
 800cc56:	4688      	mov	r8, r1
 800cc58:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800cc5c:	2700      	movs	r7, #0
 800cc5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cc62:	f1b9 0901 	subs.w	r9, r9, #1
 800cc66:	d505      	bpl.n	800cc74 <_fwalk_reent+0x24>
 800cc68:	6824      	ldr	r4, [r4, #0]
 800cc6a:	2c00      	cmp	r4, #0
 800cc6c:	d1f7      	bne.n	800cc5e <_fwalk_reent+0xe>
 800cc6e:	4638      	mov	r0, r7
 800cc70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc74:	89ab      	ldrh	r3, [r5, #12]
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d907      	bls.n	800cc8a <_fwalk_reent+0x3a>
 800cc7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cc7e:	3301      	adds	r3, #1
 800cc80:	d003      	beq.n	800cc8a <_fwalk_reent+0x3a>
 800cc82:	4629      	mov	r1, r5
 800cc84:	4630      	mov	r0, r6
 800cc86:	47c0      	blx	r8
 800cc88:	4307      	orrs	r7, r0
 800cc8a:	3568      	adds	r5, #104	; 0x68
 800cc8c:	e7e9      	b.n	800cc62 <_fwalk_reent+0x12>

0800cc8e <__swhatbuf_r>:
 800cc8e:	b570      	push	{r4, r5, r6, lr}
 800cc90:	460e      	mov	r6, r1
 800cc92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc96:	2900      	cmp	r1, #0
 800cc98:	b096      	sub	sp, #88	; 0x58
 800cc9a:	4614      	mov	r4, r2
 800cc9c:	461d      	mov	r5, r3
 800cc9e:	da09      	bge.n	800ccb4 <__swhatbuf_r+0x26>
 800cca0:	89b3      	ldrh	r3, [r6, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cca8:	602a      	str	r2, [r5, #0]
 800ccaa:	d116      	bne.n	800ccda <__swhatbuf_r+0x4c>
 800ccac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	e015      	b.n	800cce0 <__swhatbuf_r+0x52>
 800ccb4:	466a      	mov	r2, sp
 800ccb6:	f000 f9b7 	bl	800d028 <_fstat_r>
 800ccba:	2800      	cmp	r0, #0
 800ccbc:	dbf0      	blt.n	800cca0 <__swhatbuf_r+0x12>
 800ccbe:	9a01      	ldr	r2, [sp, #4]
 800ccc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ccc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ccc8:	425a      	negs	r2, r3
 800ccca:	415a      	adcs	r2, r3
 800cccc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccd0:	602a      	str	r2, [r5, #0]
 800ccd2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ccd6:	6023      	str	r3, [r4, #0]
 800ccd8:	e002      	b.n	800cce0 <__swhatbuf_r+0x52>
 800ccda:	2340      	movs	r3, #64	; 0x40
 800ccdc:	6023      	str	r3, [r4, #0]
 800ccde:	4610      	mov	r0, r2
 800cce0:	b016      	add	sp, #88	; 0x58
 800cce2:	bd70      	pop	{r4, r5, r6, pc}

0800cce4 <__smakebuf_r>:
 800cce4:	898b      	ldrh	r3, [r1, #12]
 800cce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cce8:	079d      	lsls	r5, r3, #30
 800ccea:	4606      	mov	r6, r0
 800ccec:	460c      	mov	r4, r1
 800ccee:	d507      	bpl.n	800cd00 <__smakebuf_r+0x1c>
 800ccf0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	6123      	str	r3, [r4, #16]
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	b002      	add	sp, #8
 800ccfe:	bd70      	pop	{r4, r5, r6, pc}
 800cd00:	ab01      	add	r3, sp, #4
 800cd02:	466a      	mov	r2, sp
 800cd04:	f7ff ffc3 	bl	800cc8e <__swhatbuf_r>
 800cd08:	9900      	ldr	r1, [sp, #0]
 800cd0a:	4605      	mov	r5, r0
 800cd0c:	4630      	mov	r0, r6
 800cd0e:	f7fb fccf 	bl	80086b0 <_malloc_r>
 800cd12:	b948      	cbnz	r0, 800cd28 <__smakebuf_r+0x44>
 800cd14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd18:	059a      	lsls	r2, r3, #22
 800cd1a:	d4ef      	bmi.n	800ccfc <__smakebuf_r+0x18>
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	f043 0302 	orr.w	r3, r3, #2
 800cd24:	81a3      	strh	r3, [r4, #12]
 800cd26:	e7e3      	b.n	800ccf0 <__smakebuf_r+0xc>
 800cd28:	4b0d      	ldr	r3, [pc, #52]	; (800cd60 <__smakebuf_r+0x7c>)
 800cd2a:	63f3      	str	r3, [r6, #60]	; 0x3c
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	6020      	str	r0, [r4, #0]
 800cd30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd34:	81a3      	strh	r3, [r4, #12]
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	6163      	str	r3, [r4, #20]
 800cd3a:	9b01      	ldr	r3, [sp, #4]
 800cd3c:	6120      	str	r0, [r4, #16]
 800cd3e:	b15b      	cbz	r3, 800cd58 <__smakebuf_r+0x74>
 800cd40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cd44:	4630      	mov	r0, r6
 800cd46:	f000 f981 	bl	800d04c <_isatty_r>
 800cd4a:	b128      	cbz	r0, 800cd58 <__smakebuf_r+0x74>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f023 0303 	bic.w	r3, r3, #3
 800cd52:	f043 0301 	orr.w	r3, r3, #1
 800cd56:	81a3      	strh	r3, [r4, #12]
 800cd58:	89a0      	ldrh	r0, [r4, #12]
 800cd5a:	4305      	orrs	r5, r0
 800cd5c:	81a5      	strh	r5, [r4, #12]
 800cd5e:	e7cd      	b.n	800ccfc <__smakebuf_r+0x18>
 800cd60:	0800c859 	.word	0x0800c859

0800cd64 <_raise_r>:
 800cd64:	291f      	cmp	r1, #31
 800cd66:	b538      	push	{r3, r4, r5, lr}
 800cd68:	4604      	mov	r4, r0
 800cd6a:	460d      	mov	r5, r1
 800cd6c:	d904      	bls.n	800cd78 <_raise_r+0x14>
 800cd6e:	2316      	movs	r3, #22
 800cd70:	6003      	str	r3, [r0, #0]
 800cd72:	f04f 30ff 	mov.w	r0, #4294967295
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800cd7c:	b112      	cbz	r2, 800cd84 <_raise_r+0x20>
 800cd7e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd82:	b94b      	cbnz	r3, 800cd98 <_raise_r+0x34>
 800cd84:	4620      	mov	r0, r4
 800cd86:	f000 f831 	bl	800cdec <_getpid_r>
 800cd8a:	462a      	mov	r2, r5
 800cd8c:	4601      	mov	r1, r0
 800cd8e:	4620      	mov	r0, r4
 800cd90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cd94:	f000 b818 	b.w	800cdc8 <_kill_r>
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	d00a      	beq.n	800cdb2 <_raise_r+0x4e>
 800cd9c:	1c59      	adds	r1, r3, #1
 800cd9e:	d103      	bne.n	800cda8 <_raise_r+0x44>
 800cda0:	2316      	movs	r3, #22
 800cda2:	6003      	str	r3, [r0, #0]
 800cda4:	2001      	movs	r0, #1
 800cda6:	e7e6      	b.n	800cd76 <_raise_r+0x12>
 800cda8:	2400      	movs	r4, #0
 800cdaa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cdae:	4628      	mov	r0, r5
 800cdb0:	4798      	blx	r3
 800cdb2:	2000      	movs	r0, #0
 800cdb4:	e7df      	b.n	800cd76 <_raise_r+0x12>
	...

0800cdb8 <raise>:
 800cdb8:	4b02      	ldr	r3, [pc, #8]	; (800cdc4 <raise+0xc>)
 800cdba:	4601      	mov	r1, r0
 800cdbc:	6818      	ldr	r0, [r3, #0]
 800cdbe:	f7ff bfd1 	b.w	800cd64 <_raise_r>
 800cdc2:	bf00      	nop
 800cdc4:	2000006c 	.word	0x2000006c

0800cdc8 <_kill_r>:
 800cdc8:	b538      	push	{r3, r4, r5, lr}
 800cdca:	4d07      	ldr	r5, [pc, #28]	; (800cde8 <_kill_r+0x20>)
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4604      	mov	r4, r0
 800cdd0:	4608      	mov	r0, r1
 800cdd2:	4611      	mov	r1, r2
 800cdd4:	602b      	str	r3, [r5, #0]
 800cdd6:	f7f5 f81f 	bl	8001e18 <_kill>
 800cdda:	1c43      	adds	r3, r0, #1
 800cddc:	d102      	bne.n	800cde4 <_kill_r+0x1c>
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	b103      	cbz	r3, 800cde4 <_kill_r+0x1c>
 800cde2:	6023      	str	r3, [r4, #0]
 800cde4:	bd38      	pop	{r3, r4, r5, pc}
 800cde6:	bf00      	nop
 800cde8:	20004d2c 	.word	0x20004d2c

0800cdec <_getpid_r>:
 800cdec:	f7f5 b80c 	b.w	8001e08 <_getpid>

0800cdf0 <__sread>:
 800cdf0:	b510      	push	{r4, lr}
 800cdf2:	460c      	mov	r4, r1
 800cdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdf8:	f000 f94a 	bl	800d090 <_read_r>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	bfab      	itete	ge
 800ce00:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800ce02:	89a3      	ldrhlt	r3, [r4, #12]
 800ce04:	181b      	addge	r3, r3, r0
 800ce06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ce0a:	bfac      	ite	ge
 800ce0c:	6523      	strge	r3, [r4, #80]	; 0x50
 800ce0e:	81a3      	strhlt	r3, [r4, #12]
 800ce10:	bd10      	pop	{r4, pc}

0800ce12 <__swrite>:
 800ce12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce16:	461f      	mov	r7, r3
 800ce18:	898b      	ldrh	r3, [r1, #12]
 800ce1a:	05db      	lsls	r3, r3, #23
 800ce1c:	4605      	mov	r5, r0
 800ce1e:	460c      	mov	r4, r1
 800ce20:	4616      	mov	r6, r2
 800ce22:	d505      	bpl.n	800ce30 <__swrite+0x1e>
 800ce24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce28:	2302      	movs	r3, #2
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	f000 f91e 	bl	800d06c <_lseek_r>
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ce3a:	81a3      	strh	r3, [r4, #12]
 800ce3c:	4632      	mov	r2, r6
 800ce3e:	463b      	mov	r3, r7
 800ce40:	4628      	mov	r0, r5
 800ce42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce46:	f000 b875 	b.w	800cf34 <_write_r>

0800ce4a <__sseek>:
 800ce4a:	b510      	push	{r4, lr}
 800ce4c:	460c      	mov	r4, r1
 800ce4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce52:	f000 f90b 	bl	800d06c <_lseek_r>
 800ce56:	1c43      	adds	r3, r0, #1
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	bf15      	itete	ne
 800ce5c:	6520      	strne	r0, [r4, #80]	; 0x50
 800ce5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ce62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ce66:	81a3      	strheq	r3, [r4, #12]
 800ce68:	bf18      	it	ne
 800ce6a:	81a3      	strhne	r3, [r4, #12]
 800ce6c:	bd10      	pop	{r4, pc}

0800ce6e <__sclose>:
 800ce6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce72:	f000 b871 	b.w	800cf58 <_close_r>

0800ce76 <__swbuf_r>:
 800ce76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce78:	460e      	mov	r6, r1
 800ce7a:	4614      	mov	r4, r2
 800ce7c:	4605      	mov	r5, r0
 800ce7e:	b118      	cbz	r0, 800ce88 <__swbuf_r+0x12>
 800ce80:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ce82:	b90b      	cbnz	r3, 800ce88 <__swbuf_r+0x12>
 800ce84:	f7ff fd06 	bl	800c894 <__sinit>
 800ce88:	69a3      	ldr	r3, [r4, #24]
 800ce8a:	60a3      	str	r3, [r4, #8]
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	0719      	lsls	r1, r3, #28
 800ce90:	d529      	bpl.n	800cee6 <__swbuf_r+0x70>
 800ce92:	6923      	ldr	r3, [r4, #16]
 800ce94:	b33b      	cbz	r3, 800cee6 <__swbuf_r+0x70>
 800ce96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce9a:	b2f6      	uxtb	r6, r6
 800ce9c:	049a      	lsls	r2, r3, #18
 800ce9e:	4637      	mov	r7, r6
 800cea0:	d52a      	bpl.n	800cef8 <__swbuf_r+0x82>
 800cea2:	6823      	ldr	r3, [r4, #0]
 800cea4:	6920      	ldr	r0, [r4, #16]
 800cea6:	1a18      	subs	r0, r3, r0
 800cea8:	6963      	ldr	r3, [r4, #20]
 800ceaa:	4283      	cmp	r3, r0
 800ceac:	dc04      	bgt.n	800ceb8 <__swbuf_r+0x42>
 800ceae:	4621      	mov	r1, r4
 800ceb0:	4628      	mov	r0, r5
 800ceb2:	f7ff fc83 	bl	800c7bc <_fflush_r>
 800ceb6:	b9e0      	cbnz	r0, 800cef2 <__swbuf_r+0x7c>
 800ceb8:	68a3      	ldr	r3, [r4, #8]
 800ceba:	3b01      	subs	r3, #1
 800cebc:	60a3      	str	r3, [r4, #8]
 800cebe:	6823      	ldr	r3, [r4, #0]
 800cec0:	1c5a      	adds	r2, r3, #1
 800cec2:	6022      	str	r2, [r4, #0]
 800cec4:	701e      	strb	r6, [r3, #0]
 800cec6:	6962      	ldr	r2, [r4, #20]
 800cec8:	1c43      	adds	r3, r0, #1
 800ceca:	429a      	cmp	r2, r3
 800cecc:	d004      	beq.n	800ced8 <__swbuf_r+0x62>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	07db      	lsls	r3, r3, #31
 800ced2:	d506      	bpl.n	800cee2 <__swbuf_r+0x6c>
 800ced4:	2e0a      	cmp	r6, #10
 800ced6:	d104      	bne.n	800cee2 <__swbuf_r+0x6c>
 800ced8:	4621      	mov	r1, r4
 800ceda:	4628      	mov	r0, r5
 800cedc:	f7ff fc6e 	bl	800c7bc <_fflush_r>
 800cee0:	b938      	cbnz	r0, 800cef2 <__swbuf_r+0x7c>
 800cee2:	4638      	mov	r0, r7
 800cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee6:	4621      	mov	r1, r4
 800cee8:	4628      	mov	r0, r5
 800ceea:	f7ff fb79 	bl	800c5e0 <__swsetup_r>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d0d1      	beq.n	800ce96 <__swbuf_r+0x20>
 800cef2:	f04f 37ff 	mov.w	r7, #4294967295
 800cef6:	e7f4      	b.n	800cee2 <__swbuf_r+0x6c>
 800cef8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800cefc:	81a3      	strh	r3, [r4, #12]
 800cefe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf04:	6663      	str	r3, [r4, #100]	; 0x64
 800cf06:	e7cc      	b.n	800cea2 <__swbuf_r+0x2c>

0800cf08 <_wcrtomb_r>:
 800cf08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf0a:	4c09      	ldr	r4, [pc, #36]	; (800cf30 <_wcrtomb_r+0x28>)
 800cf0c:	b085      	sub	sp, #20
 800cf0e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800cf12:	4605      	mov	r5, r0
 800cf14:	461e      	mov	r6, r3
 800cf16:	b909      	cbnz	r1, 800cf1c <_wcrtomb_r+0x14>
 800cf18:	460a      	mov	r2, r1
 800cf1a:	a901      	add	r1, sp, #4
 800cf1c:	47b8      	blx	r7
 800cf1e:	1c43      	adds	r3, r0, #1
 800cf20:	bf01      	itttt	eq
 800cf22:	2300      	moveq	r3, #0
 800cf24:	6033      	streq	r3, [r6, #0]
 800cf26:	238a      	moveq	r3, #138	; 0x8a
 800cf28:	602b      	streq	r3, [r5, #0]
 800cf2a:	b005      	add	sp, #20
 800cf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2e:	bf00      	nop
 800cf30:	200008ac 	.word	0x200008ac

0800cf34 <_write_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4d07      	ldr	r5, [pc, #28]	; (800cf54 <_write_r+0x20>)
 800cf38:	4604      	mov	r4, r0
 800cf3a:	4608      	mov	r0, r1
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	2200      	movs	r2, #0
 800cf40:	602a      	str	r2, [r5, #0]
 800cf42:	461a      	mov	r2, r3
 800cf44:	f7f4 ff9f 	bl	8001e86 <_write>
 800cf48:	1c43      	adds	r3, r0, #1
 800cf4a:	d102      	bne.n	800cf52 <_write_r+0x1e>
 800cf4c:	682b      	ldr	r3, [r5, #0]
 800cf4e:	b103      	cbz	r3, 800cf52 <_write_r+0x1e>
 800cf50:	6023      	str	r3, [r4, #0]
 800cf52:	bd38      	pop	{r3, r4, r5, pc}
 800cf54:	20004d2c 	.word	0x20004d2c

0800cf58 <_close_r>:
 800cf58:	b538      	push	{r3, r4, r5, lr}
 800cf5a:	4d06      	ldr	r5, [pc, #24]	; (800cf74 <_close_r+0x1c>)
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	4604      	mov	r4, r0
 800cf60:	4608      	mov	r0, r1
 800cf62:	602b      	str	r3, [r5, #0]
 800cf64:	f7f4 ffab 	bl	8001ebe <_close>
 800cf68:	1c43      	adds	r3, r0, #1
 800cf6a:	d102      	bne.n	800cf72 <_close_r+0x1a>
 800cf6c:	682b      	ldr	r3, [r5, #0]
 800cf6e:	b103      	cbz	r3, 800cf72 <_close_r+0x1a>
 800cf70:	6023      	str	r3, [r4, #0]
 800cf72:	bd38      	pop	{r3, r4, r5, pc}
 800cf74:	20004d2c 	.word	0x20004d2c

0800cf78 <_fclose_r>:
 800cf78:	b570      	push	{r4, r5, r6, lr}
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	b911      	cbnz	r1, 800cf86 <_fclose_r+0xe>
 800cf80:	2500      	movs	r5, #0
 800cf82:	4628      	mov	r0, r5
 800cf84:	bd70      	pop	{r4, r5, r6, pc}
 800cf86:	b118      	cbz	r0, 800cf90 <_fclose_r+0x18>
 800cf88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800cf8a:	b90b      	cbnz	r3, 800cf90 <_fclose_r+0x18>
 800cf8c:	f7ff fc82 	bl	800c894 <__sinit>
 800cf90:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf92:	07d8      	lsls	r0, r3, #31
 800cf94:	d405      	bmi.n	800cfa2 <_fclose_r+0x2a>
 800cf96:	89a3      	ldrh	r3, [r4, #12]
 800cf98:	0599      	lsls	r1, r3, #22
 800cf9a:	d402      	bmi.n	800cfa2 <_fclose_r+0x2a>
 800cf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf9e:	f7fb ff63 	bl	8008e68 <__retarget_lock_acquire_recursive>
 800cfa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfa6:	b93b      	cbnz	r3, 800cfb8 <_fclose_r+0x40>
 800cfa8:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800cfaa:	f015 0501 	ands.w	r5, r5, #1
 800cfae:	d1e7      	bne.n	800cf80 <_fclose_r+0x8>
 800cfb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfb2:	f7fb ff5a 	bl	8008e6a <__retarget_lock_release_recursive>
 800cfb6:	e7e4      	b.n	800cf82 <_fclose_r+0xa>
 800cfb8:	4621      	mov	r1, r4
 800cfba:	4630      	mov	r0, r6
 800cfbc:	f7ff fb70 	bl	800c6a0 <__sflush_r>
 800cfc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800cfc2:	4605      	mov	r5, r0
 800cfc4:	b133      	cbz	r3, 800cfd4 <_fclose_r+0x5c>
 800cfc6:	69e1      	ldr	r1, [r4, #28]
 800cfc8:	4630      	mov	r0, r6
 800cfca:	4798      	blx	r3
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	bfb8      	it	lt
 800cfd0:	f04f 35ff 	movlt.w	r5, #4294967295
 800cfd4:	89a3      	ldrh	r3, [r4, #12]
 800cfd6:	061a      	lsls	r2, r3, #24
 800cfd8:	d503      	bpl.n	800cfe2 <_fclose_r+0x6a>
 800cfda:	6921      	ldr	r1, [r4, #16]
 800cfdc:	4630      	mov	r0, r6
 800cfde:	f7fb fe81 	bl	8008ce4 <_free_r>
 800cfe2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800cfe4:	b141      	cbz	r1, 800cff8 <_fclose_r+0x80>
 800cfe6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800cfea:	4299      	cmp	r1, r3
 800cfec:	d002      	beq.n	800cff4 <_fclose_r+0x7c>
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7fb fe78 	bl	8008ce4 <_free_r>
 800cff4:	2300      	movs	r3, #0
 800cff6:	6323      	str	r3, [r4, #48]	; 0x30
 800cff8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800cffa:	b121      	cbz	r1, 800d006 <_fclose_r+0x8e>
 800cffc:	4630      	mov	r0, r6
 800cffe:	f7fb fe71 	bl	8008ce4 <_free_r>
 800d002:	2300      	movs	r3, #0
 800d004:	6463      	str	r3, [r4, #68]	; 0x44
 800d006:	f7ff fc2d 	bl	800c864 <__sfp_lock_acquire>
 800d00a:	2300      	movs	r3, #0
 800d00c:	81a3      	strh	r3, [r4, #12]
 800d00e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d010:	07db      	lsls	r3, r3, #31
 800d012:	d402      	bmi.n	800d01a <_fclose_r+0xa2>
 800d014:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d016:	f7fb ff28 	bl	8008e6a <__retarget_lock_release_recursive>
 800d01a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d01c:	f7fb ff23 	bl	8008e66 <__retarget_lock_close_recursive>
 800d020:	f7ff fc26 	bl	800c870 <__sfp_lock_release>
 800d024:	e7ad      	b.n	800cf82 <_fclose_r+0xa>
	...

0800d028 <_fstat_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4d07      	ldr	r5, [pc, #28]	; (800d048 <_fstat_r+0x20>)
 800d02c:	2300      	movs	r3, #0
 800d02e:	4604      	mov	r4, r0
 800d030:	4608      	mov	r0, r1
 800d032:	4611      	mov	r1, r2
 800d034:	602b      	str	r3, [r5, #0]
 800d036:	f7f4 ff4e 	bl	8001ed6 <_fstat>
 800d03a:	1c43      	adds	r3, r0, #1
 800d03c:	d102      	bne.n	800d044 <_fstat_r+0x1c>
 800d03e:	682b      	ldr	r3, [r5, #0]
 800d040:	b103      	cbz	r3, 800d044 <_fstat_r+0x1c>
 800d042:	6023      	str	r3, [r4, #0]
 800d044:	bd38      	pop	{r3, r4, r5, pc}
 800d046:	bf00      	nop
 800d048:	20004d2c 	.word	0x20004d2c

0800d04c <_isatty_r>:
 800d04c:	b538      	push	{r3, r4, r5, lr}
 800d04e:	4d06      	ldr	r5, [pc, #24]	; (800d068 <_isatty_r+0x1c>)
 800d050:	2300      	movs	r3, #0
 800d052:	4604      	mov	r4, r0
 800d054:	4608      	mov	r0, r1
 800d056:	602b      	str	r3, [r5, #0]
 800d058:	f7f4 ff4d 	bl	8001ef6 <_isatty>
 800d05c:	1c43      	adds	r3, r0, #1
 800d05e:	d102      	bne.n	800d066 <_isatty_r+0x1a>
 800d060:	682b      	ldr	r3, [r5, #0]
 800d062:	b103      	cbz	r3, 800d066 <_isatty_r+0x1a>
 800d064:	6023      	str	r3, [r4, #0]
 800d066:	bd38      	pop	{r3, r4, r5, pc}
 800d068:	20004d2c 	.word	0x20004d2c

0800d06c <_lseek_r>:
 800d06c:	b538      	push	{r3, r4, r5, lr}
 800d06e:	4d07      	ldr	r5, [pc, #28]	; (800d08c <_lseek_r+0x20>)
 800d070:	4604      	mov	r4, r0
 800d072:	4608      	mov	r0, r1
 800d074:	4611      	mov	r1, r2
 800d076:	2200      	movs	r2, #0
 800d078:	602a      	str	r2, [r5, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	f7f4 ff46 	bl	8001f0c <_lseek>
 800d080:	1c43      	adds	r3, r0, #1
 800d082:	d102      	bne.n	800d08a <_lseek_r+0x1e>
 800d084:	682b      	ldr	r3, [r5, #0]
 800d086:	b103      	cbz	r3, 800d08a <_lseek_r+0x1e>
 800d088:	6023      	str	r3, [r4, #0]
 800d08a:	bd38      	pop	{r3, r4, r5, pc}
 800d08c:	20004d2c 	.word	0x20004d2c

0800d090 <_read_r>:
 800d090:	b538      	push	{r3, r4, r5, lr}
 800d092:	4d07      	ldr	r5, [pc, #28]	; (800d0b0 <_read_r+0x20>)
 800d094:	4604      	mov	r4, r0
 800d096:	4608      	mov	r0, r1
 800d098:	4611      	mov	r1, r2
 800d09a:	2200      	movs	r2, #0
 800d09c:	602a      	str	r2, [r5, #0]
 800d09e:	461a      	mov	r2, r3
 800d0a0:	f7f4 fed4 	bl	8001e4c <_read>
 800d0a4:	1c43      	adds	r3, r0, #1
 800d0a6:	d102      	bne.n	800d0ae <_read_r+0x1e>
 800d0a8:	682b      	ldr	r3, [r5, #0]
 800d0aa:	b103      	cbz	r3, 800d0ae <_read_r+0x1e>
 800d0ac:	6023      	str	r3, [r4, #0]
 800d0ae:	bd38      	pop	{r3, r4, r5, pc}
 800d0b0:	20004d2c 	.word	0x20004d2c

0800d0b4 <_init>:
 800d0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0b6:	bf00      	nop
 800d0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0ba:	bc08      	pop	{r3}
 800d0bc:	469e      	mov	lr, r3
 800d0be:	4770      	bx	lr

0800d0c0 <_fini>:
 800d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0c2:	bf00      	nop
 800d0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0c6:	bc08      	pop	{r3}
 800d0c8:	469e      	mov	lr, r3
 800d0ca:	4770      	bx	lr
